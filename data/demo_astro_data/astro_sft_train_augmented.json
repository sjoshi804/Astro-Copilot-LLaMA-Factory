[
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible usages of astropy visualization hist?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist\nprint(hist.__doc__)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use astropy visualization hist with bins as string Freeman?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist\nhist([1, 2, 3, 4, 5], bins='freedman')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the allowed string inputs for the bins parameter in astropy visualization hist?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist\nprint(hist.__doc__['bins'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the built-in ephemeris with solar_system_ephemeris to generate Mars' coordinates to demonstrate basic planetary positions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, EarthLocation, AltAz\nfrom astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris\nfrom astropy import units as u  # Add this import for units\n\nt = Time('2025-01-01 12:00')\nsolar_system_ephemeris.set('builtin')\njupiter = get_body('mars', t)\nprint(jupiter.ra.to_string(unit='hour', sep=':', pad=True))\nprint(jupiter.dec.to_string(unit='deg', sep=':', pad=True))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to process my exoplanet catalog row by row to calculate the habitability score for each planet based on its 2D spectroscopy data. Can you show how to access individual planet data and how to use astropy to analyse the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\nimport numpy as np\n\ncatalog = Table({'planet_name': ['Planet A', 'Planet B', 'Planet C', 'Planet D'],\n                  'mass': [1.2, 5.0, 0.8, 15.0],  # Jupiter masses\n                  'semi_major_axis': [1.0, 1.2, 0.5, 2.0],  # AU\n                  'stellar_temperature': [5500, 6000, 3500, 7000],  # Kelvin\n                  'spectroscopy_data': [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n                 })\n\ndef calculate_habitability(planet_row):\n    try:\n        planet_mass = planet_row['mass'] * u.jupiterMass\n        semi_major = planet_row['semi_major_axis'] * u.AU\n        stellar_temp = planet_row['stellar_temperature'] * u.K\n        spectroscopy_data = planet_row['spectroscopy_data']\n\n        # Simple habitability score calculation (example)\n        # 1 = potentially habitable, 0 = not habitable\n        score = 0\n        if (0.1 < planet_mass.to(u.earthMass).value < 10 and\n            0.7 < semi_major.value < 1.5 and\n            4500 < stellar_temp.value < 6500):\n            score = 1\n        return score\n    except (KeyError, TypeError):\n        return np.nan\n\n    # Analyse spectroscopy data using astropy\n    wcs = WCS(spectroscopy_data)\n    spectrum = Spectrum1D(spectroscopy_data)\n    return score, wcs, spectrum\n\n# Process catalog row by row\nfor row in catalog:\n    planet_name = row['planet_name']\n    hab_score, wcs, spectrum = calculate_habitability(row)\n    print(f'Planet: {planet_name}')\n    print(f'Habitability Score: {hab_score}')\n    print(f'Spectroscopy Data: {wcs}, {spectrum}')\n    print('---')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to process my exoplanet catalog row by row to calculate the habitability score for each planet based on its radial velocity data. Can you show how to access individual planet data and how to use astropy to analyse the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\nimport numpy as np\n\ncatalog = Table({'planet_name': ['Planet A', 'Planet B', 'Planet C', 'Planet D'],\n                  'mass': [1.2, 5.0, 0.8, 15.0],  # Jupiter masses\n                  'semi_major_axis': [1.0, 1.2, 0.5, 2.0],  # AU\n                  'stellar_temperature': [5500, 6000, 3500, 7000],  # Kelvin\n                  'radial_velocity_data': [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n                 })\n\ndef calculate_habitability(planet_row):\n    try:\n        planet_mass = planet_row['mass'] * u.jupiterMass\n        semi_major = planet_row['semi_major_axis'] * u.AU\n        stellar_temp = planet_row['stellar_temperature'] * u.K\n        radial_velocity_data = planet_row['radial_velocity_data']\n\n        # Simple habitability score calculation (example)\n        # 1 = potentially habitable, 0 = not habitable\n        score = 0\n        if (0.1 < planet_mass.to(u.earthMass).value < 10 and\n            0.7 < semi_major.value < 1.5 and\n            4500 < stellar_temp.value < 6500):\n            score = 1\n        return score\n    except (KeyError, TypeError):\n        return np.nan\n\n    # Analyse radial velocity data using astropy\n    times = np.linspace(0, 10, len(radial_velocity_data))\n    velocity = radial_velocity_data\n    return score, times, velocity\n\ncatalog = Table({'planet_name': ['Planet A', 'Planet B', 'Planet C', 'Planet D'],\n                  'mass': [1.2, 5.0, 0.8, 15.0],  # Jupiter masses\n                  'semi_major_axis': [1.0, 1.2, 0.5, 2.0],  # AU\n                  'stellar_temperature': [5500, 6000, 3500, 7000],  # Kelvin\n                  'radial_velocity_data': [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n                 })\n# Process catalog row by row\nfor row in catalog:\n    planet_name = row['planet_name']\n    hab_score, times, velocity = calculate_habitability(row)\n    print(f'Planet: {planet_name}')\n    print(f'Habitability Score: {hab_score}')\n    print(f'Radial Velocity Data: {times}, {velocity}')\n    print('---')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to process my exoplanet catalog row by row to calculate the habitability score for each planet based on its light curve data. Can you show how to access individual planet data and how to use astropy to analyse the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\nimport numpy as np\n\ncatalog = Table({'planet_name': ['Planet A', 'Planet B', 'Planet C', 'Planet D'],\n                  'mass': [1.2, 5.0, 0.8, 15.0],  # Jupiter masses\n                  'semi_major_axis': [1.0, 1.2, 0.5, 2.0],  # AU\n                  'stellar_temperature': [5500, 6000, 3500, 7000],  # Kelvin\n                  'light_curve_data': [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n                 })\n\ndef calculate_habitability(planet_row):\n    try:\n        planet_mass = planet_row['mass'] * u.jupiterMass\n        semi_major = planet_row['semi_major_axis'] * u.AU\n        stellar_temp = planet_row['stellar_temperature'] * u.K\n        light_curve_data = planet_row['light_curve_data']\n\n        # Simple habitability score calculation (example)\n        # 1 = potentially habitable, 0 = not habitable\n        score = 0\n        if (0.1 < planet_mass.to(u.earthMass).value < 10 and\n            0.7 < semi_major.value < 1.5 and\n            4500 < stellar_temp.value < 6500):\n            score = 1\n        return score\n    except (KeyError, TypeError):\n        return np.nan\n\n    # Analyse light curve data using astropy\n    time = np.linspace(0, 100, len(light_curve_data))\n    flux = light_curve_data\n    return score, time, flux\n\ncatalog = Table({'planet_name': ['Planet A', 'Planet B', 'Planet C', 'Planet D'],\n                  'mass': [1.2, 5.0, 0.8, 15.0],  # Jupiter masses\n                  'semi_major_axis': [1.0, 1.2, 0.5, 2.0],  # AU\n                  'stellar_temperature': [5500, 6000, 3500, 7000],  # Kelvin\n                  'light_curve_data': [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n                 })\n# Process catalog row by row\nfor row in catalog:\n    planet_name = row['planet_name']\n    hab_score, time, flux = calculate_habitability(row)\n    print(f'Planet: {planet_name}')\n    print(f'Habitability Score: {hab_score}')\n    print(f'Light Curve Data: {time}, {flux}')\n    print('---')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the nearest star to the Sun."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\nc = SkyCoord('08h33m20.02s', '+18d13m30.0s', frame='icrs')\ncatalog = SkyCoord(ra=12*u.hour, dec=10*u.degree, distance=4*u.parsec)\nidx, d2d, d3d = c.match_to_catalog_sky(catalog)\nprint(d2d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an HDUList object from an existing FITS file"
      },
      {
        "from": "assistant",
        "value": "hdulist = fits.open('input.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add a new image HDU to the HDUList object"
      },
      {
        "from": "assistant",
        "value": "hdu = fits.ImageHDU(data=np.zeros((100, 100)))\nhdulist.append(hdu)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Delete the 3rd HDU from the HDUList object"
      },
      {
        "from": "assistant",
        "value": "del hdulist[2]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the pixel area of a celestial WCS using astropy.wcs.WCS.celestial?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_area"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to calculate the pixel area of a celestial WCS at a specific reference position?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_area"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel area of a celestial WCS at the CRPIX location?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_area"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constellation is the North Star in?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import get_constellation\ncoord = SkyCoord(ra=55.8625, dec= 57.1483, unit='deg')\nget_constellation(coord, abbreviation=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know the constellation of the star Alpha Centauri."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import get_constellation\ncoord = SkyCoord(ra=14.6673, dec=-60.8364, unit='deg')\nget_constellation(coord, abbreviation=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constellation is the Sun in?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun,\nfrom astropy.coordinates import get_constellation\nget_constellation(get_sun(), abbreviation=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As an astronomer working at the Mauna Kea Observatory, write code to define a timezone object for this location (UTC-5.5) using TimezoneInfo. Then show how to convert a specific time '2023-12-25 03:45:00' to UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime\nfrom astropy import units as u  # Import astropy units\n\n# Define timezone object for Mauna Kea (UTC-5.5)\nmauna_kea_tz = TimezoneInfo(utc_offset=-5.5*u.hour)\n\n# Create datetime object for Mauna Kea time\nciao_time = datetime(2023, 12, 25, 3, 45, 0, tzinfo=mauna_kea_tz)\n\n# Convert to Time object and then to UTC\nt = Time(cao_time)\nutc_time = t.datetime\n\n# Print results\nprint(f\"Mauna Kea time: {cao_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\")\nprint(f\"UTC time: {utc_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\" Enabled discoveries like the discovery of dark energy at supernovae)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As an exoplanet hunter, write code to define timezone objects for the Kepler space telescope (UTC-5) and the TESS space telescope (UTC-5) using TimezoneInfo. Then show how to convert a specific time '2023-12-25 03:45:00' between these two timezones."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime\nfrom astropy import units as u  # Import astropy units\n\n# Define timezone objects for Kepler (UTC-5) and TESS (UTC-5)\nkepler_tz = TimezoneInfo(utc_offset=-5*u.hour)\ntess_tz = TimezoneInfo(utc_offset=-5*u.hour)\n\n# Create datetime object for Kepler time\nkepler_time = datetime(2023, 12, 25, 3, 45, 0, tzinfo=kepler_tz)\n\n# Convert to Time object and then to TESS time\nt = Time(kepler_time)\ntess_time = t.datetime.astimezone(tess_tz)\n\n# Print results\nprint(f\"Kepler time: {kepler_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\")\nprint(f\"TESS time: {tess_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a planetary scientist, write code to define timezone objects for the Mars Reconnaissance Orbiter (UTC-5) and the Mars 2020 rover (UTC-5) using TimezoneInfo. Then show how to convert a specific time '2023-12-25 03:45:00' between these two timezones."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime\nfrom astropy import units as u  # Import astropy units\n\n# Define timezone objects for MRO (UTC-5) and Mars 2020 (UTC-5)\nmro_tz = TimezoneInfo(utc_offset=-5*u.hour)\nmars_2020_tz = TimezoneInfo(utc_offset=-5*u.hour)\n\n# Create datetime object for MRO time\nmro_time = datetime(2023, 12, 25, 3, 45, 0, tzinfo=mro_tz)\n\n# Convert to Time object and then to Mars 2020 time\nt = Time(mro_time)\nmars_2020_time = t.datetime.astimezone(mars_2020_tz)\n\n# Print results\nprint(f\"MRO time: {mro_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\")\nprint(f\"Mars 2020 time: {mars_2020_time.strftime('%Y-%m-%d %H:%M:%S %Z')}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the number of rows in a QTable?"
      },
      {
        "from": "assistant",
        "value": "Use qtable.nrows to get the number of rows."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a QTable to a pandas DataFrame?"
      },
      {
        "from": "assistant",
        "value": "Use qtable.to_pandas() to convert a QTable to a pandas DataFrame."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to a QTable?"
      },
      {
        "from": "assistant",
        "value": "Use qtable['new_column_name'] = [list of values] to add a new column to a QTable."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to use Bayesian Blocks to segment a time series with Gaussian errors.\nCan you provide an example of how to do this?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, sigma, fitness='measures', p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Bayesian Blocks to segment a time series of events measured at regular intervals?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, fitness='regular_events', dt=0.05, p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a time series of measured points with errors. Can you demonstrate how to use Bayesian Blocks to segment this data?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, sigma, fitness='measures', p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use `astropy.nddata.Cutout2D` to create a cutout from a 2D array?"
      },
      {
        "from": "assistant",
        "value": "import astropy.nddata as nddata\n\n# Create a 2D array\narr = np.arange(20).reshape(5, 4)\n\n# Create a cutout from the array\ncutout = nddata.Cutout2D(arr, (2, 2), (3, 3))\n\n# Print the cutout data\nprint(cutout.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I match a list of coordinates to a catalog of stars?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_sky\nfrom astropy import units as u\n\n# Define the coordinates to match\nmatch_coords = SkyCoord(ra=12*u.degree, dec=30*u.degree)\n\n# Define the catalog of stars\nstars = SkyCoord(ra=10*u.degree, dec=20*u.degree)\n\n# Match the coordinates to the catalog\nidx, sep2d, dist3d = match_coordinates_sky(match_coords, stars, nthneighbor=1)\n\nprint(idx, sep2d, dist3d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to calculate the matter density of the universe using the latest Planck cosmological parameters."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.Omega_m"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the WCS in my FITS file to include ra and dec coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy import units as u\ncrd = fits.Card('RA', u.Quantity(12.5, u.degree), 'Finding the right ascension coordinate')\ncrd2 = fits.Card('DEC', u.Quantity(34.2, u.degree), 'Finding the declination coordinate')\nhdul = fits.open('spectrum.fits', mode='update')\nhdul[0].header.add_card([crd, crd2])\nhdul.flush()\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Provide a Python code snippet that demonstrates how to use the cylindrical coordinates for the positions of globular clusters around the Milky Way galaxy."
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a Python function that takes a list of globular clusters with their positions in cylindrical coordinates and returns the positions in Cartesian coordinates."
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to convert cylindrical coordinates to spherical coordinates for globular clusters in the Milky Way galaxy using Python."
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a quadratic stretch with a slope of 2000 and intercept of -990 to magnify the transit depth in the visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\ncustom_stretch = LinearStretch(slope=2000, intercept=-990)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a linear stretch with a slope of 1500 and intercept of -980 to magnify the transit depth in the visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\ncustom_stretch = LinearStretch(slope=1500, intercept=-980)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a linear stretch with a slope of 2500 and intercept of -995 to magnify the transit depth in the visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\ncustom_stretch = LinearStretch(slope=2500, intercept=-995)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a base time for the start of observations"
      },
      {
        "from": "assistant",
        "value": "Time('2024-01-15 00:00:00')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate 5 observation windows, each 1 day apart"
      },
      {
        "from": "assistant",
        "value": "n_observations = 5; time_spacing = 1 * u.day"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Format time in ISO format for proposal"
      },
      {
        "from": "assistant",
        "value": "new_time.iso"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the values from magnitude to flux using Astropy's unit conversion capabilities?"
      },
      {
        "from": "assistant",
        "value": "Quantity(magnitude, mag).to('erg/s.cm2'}\u0438\u043d\u043e\u043a \u2014 "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to convert between different flux units using Astropy's unit conversion features?"
      },
      {
        "from": "assistant",
        "value": "Quantity(flux, mag).to(u.erg/u.s/u.cm2.)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy's unit conversion functions to convert between different angular units for my astrophysics needs?"
      },
      {
        "from": "assistant",
        "value": "Quantity(angular_unit, u.arcmin).to(u.degree).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert multiple Unix timestamps [1643723400, 1643723460, 1643723520] to UTC ISO format using astropy.time.Time."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\n# Array of Unix timestamps\nunix_timestamps = [1643723400, 1643723460, 1643723520]\n\ngps_times = Time(unix_timestamps, format='unix', scale='utc')\n# Convert to ISO format\niso_times = gps_times.iso\n\nprint(\"Unix timestamps converted to UTC ISO format:\")\nfor unix, iso in zip(unix_timestamps, iso_times):\n    print(f\"Unix: {unix} \u2192 UTC: {iso}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new TableColumns object and access a specific column by name or index?"
      },
      {
        "from": "assistant",
        "value": "TableColumns({'column1': Column( data1, metadata1), 'column2': Column(data2, metadata2)}).column1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I rename a column in the TableColumns object?"
      },
      {
        "from": "assistant",
        "value": "TableColumns({'column1': Column(data1, metadata1), 'column2': Column(data2, metadata2)}).rename( 'old_name', 'new_name' )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I slice specific columns in the TableColumns object?"
      },
      {
        "from": "assistant",
        "value": "TableColumns({'column1': Column(data1, metadata1), 'column2': Column(data2, metadata2)}['column1', 'column2']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a CSV file using `astropy.io.ascii.read`?"
      },
      {
        "from": "assistant",
        "value": "ascii.read(file_name, format='csv')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a CSV file with a specific delimiter using `astropy.io.ascii.read`?"
      },
      {
        "from": "assistant",
        "value": "ascii.read(file_name, format='csv', delimiter=';')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a CSV file with a specific header row using `astropy.io.ascii.read`?"
      },
      {
        "from": "assistant",
        "value": "ascii.read(file_name, format='csv', header_start=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe how to use the circmean function with weights?"
      },
      {
        "from": "assistant",
        "value": "Parameters to [circmean](https://docs.astropy.org/en/stable/_modules/astropy/stats/circmean.html#circmean) "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the axis parameter for in the circmean function?"
      },
      {
        "from": "assistant",
        "value": "The `axis` parameter for [circmean](https://docs.astropy.org/en/stable/_modules/astropy/stats/circmean.html#circmean) functions allow us to choose which axis of input array,"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to compute the weighted circular mean of a large dataset. How can I use the circmean function with weights?"
      },
      {
        "from": "assistant",
        "value": "Parameters to [circmean](https://docs.astropy.org/en/stable/_modules/astropy/stats/circmean.html#circmean) "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the wavelength axis in my FITS file from angstroms to meters?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('file.fits', 'CDELT1', value=1e-10, comment='Conversion factor from angstroms to meters')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a new keyword to my FITS header that records the exposure time in seconds. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('file.fits', 'EXPTIME', value=exposure_time, comment='Exposure time in seconds')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "After reading my FITS file, I realized that the telescope coordinates are in the wrong order. How can I swap the latitude and longitude values?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('file.fits', 'LAT', value=old_longitude, comment='Swapped longitude value'), fits.setval('file.fits', 'LONG', value=old_latitude, comment='Swapped latitude value')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a cutout object from a 2D array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\n\nCutout2D(data, (2, 2), (3, 3))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different modes for creating a cutout data array?"
      },
      {
        "from": "assistant",
        "value": "modes = ['trim', 'partial', 'strict']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fill pixels in the cutout array that do not overlap with the input data?"
      },
      {
        "from": "assistant",
        "value": "fill_value = 0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a Gaussian profile with a non-linear background."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ngaussian = models.Gaussian2D(amplitude=1.0, x_0=0.0, y_0=0.0, sigma_x=1.0, sigma_y=1.0)\nbackground = models.PowerLaw1D(amplitude=1.0, x_0=0.0, alpha=2.0)\nmodel = gaussian + background\nfitter = fitting.LevMarLSQFitter()\ndata = np.random.normal(0, 1, (100, 100))\nfitted_model = fitter(model, data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light curve of a binary system and want to create a model where the flux of the primary star is a Gaussian function of time, while the flux of the secondary star is a sinusoidal function of time."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nt = np.linspace(0, 10, 1000)\ng1 = models.Gaussian1D(amplitude=10, mean=5, stddev=0.2)\ng2 = models.Sine1D(amplitude=5, period=2, phase=0.5)\ng = g1 + g2\ng.mean.tied = lambda m: m.stddev_0 + 1\nreturn g"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a radio source catalog with the following properties: (1) source_id, (2) flux_density_Jy, and (3) redshift. Write this catalog to a LaTeX string."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.io import ascii\ntable = Table({'source_id': ['3C123', '3C456'],\n               'flux_density_Jy': [12.5, 15.6],\n               'redshift': [0.026, 0.123]})\ntext = ascii.write(table, format='latex', formats={'flux_density_Jy': '%.2f', 'redshift': '%.3f'})print(text)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my pulsar timing analysis, I have a rotation angle of 3.7 hours. Can you show me how to convert this to radians using Astropy's Angle class?"
      },
      {
        "from": "assistant",
        "value": "angle_hours = Angle('3.7 hours')\nangle_radians = angle_hours.to(u.radian)\nprint(f'3.7 hours = {angle_radians:.6f} radians')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the angle between two points on the sky. How can I use Astropy's Angle class to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\ncpy pos1 = SkyCoord(ra=12 * u.hour, dec=30 * u.degree)\ncpy pos2 = SkyCoord(ra=14 * u.hour, dec=40 * u.degree)\ncpy angle = (pos2 - pos1).separation().radial\nprint(f'The angle between the two points is {angle:.6f} radians')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of angles in degrees and I want to convert them to radians. How can I use Astropy's Angle class to do this?"
      },
      {
        "from": "assistant",
        "value": "angles_deg = [10, 20, 30]\nfrom astropy.coordinates import Angle\nimport astropy.units as u\n\nangle_list = [Angle(f'{a} degrees') for a in angles_deg]\n\nangle_list_rads = [a.to(u.radian) for a in angle_list]\n\nprint(angle_list_rads)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar velocity dispersions in a globular cluster and want to compute a robust estimate of the dispersion that's less sensitive to outliers than standard deviation. How can I calculate this from my radial velocity measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nprint(biweight_scale([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write an Astropy Table to a file in a specific format?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.ascii.write(table=exo_table, filename='exoplanets.txt', format='latex')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I write an Astropy Table to a file with a specific delimiter?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.ascii.write(table=exo_table, filename='exoplanets.txt', delimiter=',')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I include only specific columns in the output?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.ascii.write(table=exo_table, filename='exoplanets.txt', include_names=['name', 'ra', 'dec'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the orbital period of a planet?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the semi-major axis of the planet's orbit\na = 1.5 * u.au\n\nc = const.G * const.M_sun * u.kg / (u.m**3 * u.s**2)\np = 2 * u.pi * np.sqrt(a**3 / c)\nprint(p.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert between different units of distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\na = 100 * u.au\nb = a.to(u.pc)\nprint(b.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the surface gravity of a planet?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the mass and radius of the planet\nm = 1.0 * u.M_earth\nR = 1.0 * u.R_earth\n\ng = const.G * m / (R**2)\nprint(g.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Box1D model with a width of 1000 and an amplitude of 0.5, and evaluate it over the wavelength range 5000-7000 Angstroms with 1\u00c5 steps."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D\nimport numpy as np\ndata = Box1D(amplitude=0.5, width=1000)\nwavelength = np.arange(5000, 7001, 1)\nevaluated_data = data(wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to plot the Box1D model over the wavelength range 3000-6000 Angstroms with 1\u00c5 steps, with an amplitude of 0.2 and a width of 2000."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D\nimport matplotlib.pyplot as plt\nfrom astropy import units as u\nwavelength = np.arange(3000, 6011, 1)*u\u554a\u554angstrom\nmodel = Box1D(amplitude=0.2, width=2000)\nplt.plot(wavelength, model(wavelength))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Box1D model with an amplitude of 0.7 and a width of 1500, and evaluate it over the wavelength range 4000-8000 Angstroms with 1\u00c5 steps, but with a fixed amplitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D\ndata = Box1D(amplitude=0.7, width=1500, amplitude=0.0)\nwavelength = np.arange(4000, 8001, 1)\nevaluated_data = data(wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use an AsymetricLinearInterval to display values between 100 and 500?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsymetricLinearInterval, SqrtStretch, ImageNormalize\nimport numpy as np\n\n# Create sample intensity map data (100x100 array)\ndata = np.random.uniform(50, 8000, size=(100, 100))\n\n# Create normalization object that combines:\n# 1. AsymmetricLinearInterval to scale data to [0,1] range\n# 2. SqrtStretch for better visualization of high dynamic range\nnorm = ImageNormalize(data,\n                         vmin=50,      # minimum data value\n                         vmax=8000,    # maximum data value  \n                         interval=AsymetricLinearInterval(100, 500),\n                         stretch=SqrtStretch())\n\n# Apply normalization to get scaled data\nscaled_data = norm(data)\n\n# At this point, scaled_data contains values between 0-1\n# ready for plotting with matplotlib.pyplot.imshow()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to convert an MJD value of 58000.789 to a UTC time in the format 'YYYY-MM-DD HH:MM:SS'."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy import units as u\n\ntime = Time(58000.789, format='mjd', scale='utc')\nprint(time.iso)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare the time difference between two MJD values of 57500.012 and 57800.345, and show the result in seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntime1 = Time(57500.012, format='mjd')\ntime2 = Time(57800.345, format='mjd')\ntime_diff = abs(time2 - time1)\nprint(time_diff.sec)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the time difference between 2 MJD values (58697.123 and 58901.456). Express the result in hours."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntime1 = Time(58697.123, format='mjd')\ntime2 = Time(58901.456, format='mjd')\ntimediff = time2-time1\nprint(timediff.sec/3600)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the nearest star to a given star in the Hipparcos catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\ncatalog = SkyCoord.from_frame(hp catalog)\ncoord = SkyCoord(ra=12*u.degree, dec=34*u.degree)\nnearstar = catalog.match_to_catalog_sky(coord)\nprint(nearstar[0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the logarithmic model to fit my data. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as models\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\ndata = ...  # your data\nmodel = models_loggeditchmodel(\n    amplitude=models Parameter('amplitude', value=1.0),\n    tau=models.Parameter('tau', value=0.5)\n)\n\nfn = LevMarLSQFitter()\nresult = fn(model, data.x, data.y)\nprint(result.parameters['amplitude'].value)\nprint(result.parameters['tau'].value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to perform a non-linear least squares fitting with a user-defined model using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\nclass MyModel(models \u767btalModel):\n    def evaluate(self, x):\n        return 1/x\n\nmy_model = MyModel()\n\nx_data = np.linspace(1, 10, 100) * u.m\ny_data = my_model(x_data) + np.random.normal(0, 0.1, 100)\n\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(my_model, x_data, y_data)\nprint(result)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use sigma clipping with a custom center function?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, cenfunc=np.mean, sigma=3, maxiters=5, masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a polynomial fit model with degree 3?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Sample data (replace with your actual measurements)\n# x values\nx = np.array([1, 2, 3, 4, 5])\n# y values\ny = np.array([2, 3, 5, 7, 11])\n\n# Initialize a polynomial model with degree 3\npoly_model = models.Polynomial1D(degree=3)\n\n# Initialize fitter (using least squares fitting)\nfrom scipy.optimize import curve_fit\n# Perform the fit\npopt, pcov = curve_fit(poly_model, x, y)\n\n# Print the model parameters\nprint(f'Coefficients: {popt}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a sinusoidal fit model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Sample data (replace with your actual measurements)\n# x values\nx = np.array([1, 2, 3, 4, 5])\n# y values\ny = np.array([2, 3*np.sin(x), 5, 7, 11])\n\n# Initialize a sinusoidal model\nsinusoidal_model = models.sin\n\n# Initialize fitter (using least squares fitting)\nfrom scipy.optimize import curve_fit\n# Perform the fit\npopt, pcov = curve_fit(sinusoidal_model, x, y)\n\n# Print the model parameters\nprint(f'Period: {popt[0]}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian fit model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Sample data (replace with your actual measurements)\n# x values\nx = np.array([1, 2, 3, 4, 5])\n# y values\ny = np.array([np.exp(-(x-3)**2/10), 0, 0, 0, 0])\n\n# Initialize a Gaussian model\ngaussian_model = models.Gaussian1D(amplitude=1, x_mean=3, sigma=2)\n\n# Initialize fitter (using least squares fitting)\nfrom scipy.optimize import curve_fit\n# Perform the fit\npopt, pcov = curve_fit(gaussian_model, x, y)\n\n# Print the model parameters\nprint(f'Amplitude: {popt[0]}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a list of Julian Dates to a list of calendar dates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy import units as u\n\njd_times = [2459000.5, 2459001.7, 2459002.9, 2459003.1]\ncal_dates = Time(jd_times, format='jd').to_datetime()\nprint(cal_dates)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a ring system model using Astropy's modeling capabilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Disk2D\n# Create a ring system model\ndisk_model = Disk2D(amplitude=1.0, x_0=0.0, y_0=0.0, R_0=10.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of 250 pixels on each side, centered at position (500, 1000)"
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data=data, position=(500, 1000), size=(250, 250))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of 150 pixels on each side, centered at position (200, 500), with a partial overlap mode"
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data=data, position=(200, 500), size=(150, 150), mode='partial')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of 300 pixels on each side, centered at position (100, 200), with a copy of the original data"
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data=data, position=(100, 200), size=(300, 300), copy=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In my 2D histogram with bins ['x', 'y'] and 50 bins in each direction, how do I write code to add a color bar with a range of [0, 10] and add a title with 'Histogram of x vs y'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import astropy_mpl_style\nfrom astropy.visualization.wcsaxes import WCSAxes\nimport matplotlib.pyplot as plt\n\nplt.style.use(astropy_mpl_style)\n\n# Create a 2D histogram\nx = np.arange(0, 10, 0.1)\ny = np.arange(0, 10, 0.1)\nX, Y = np.meshgrid(x, y)\nhist = np.random.rand(len(x), len(y))\n\n# Create a new figure with a set of subplots\nfig = plt.figure()\nax = fig.add_subplot(111, projection='aitoff')\n\n# Create the 2D histogram\nim = ax.pcolor(X, Y, hist, cmap='RdYlBu_r', edgecolors='none')\n\n# Add a color bar\ncbar = fig.colorbar(im, ax=ax, extend='both')\n\n# Add a title\ntitle = 'Histogram of x vs y'\nas.set_title(title)\ncbar.set_clim(0, 10)\n\n# Show the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to model a spectral absorption line at 5820 \u00c5 (sodium D line) with a Voigt profile."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D\ndamping_ratio = fwhm_G / (2 * np.sqrt(np.log(2)))\nfrom astropy.modeling.models import Gaussian1D, Lorentz1D\nGauss = Gaussian1D(amplitude=1, fwhm=fwhm_G)\nLorentz = Lorentz1D(amplitude=1, fwhm=fwhm_L)\nfrom scipy import integrate\ndef voigt(x, x0, fwhm_L, fwhm_G):\n    return integrate.quad(lambda t: Lorentz(t, x0, fwhm_L) * Gauss(x-x0, fwhm_G), x-1, x+1)\nwavelength = np.linspace(5810, 5830, 1000)\nprofile = process(lambda x: voigt(x, 5820, 0.08, 0.12), wavelength)\nprint(profile)\ndamping_ratio = fwhm_G / (2 * np.sqrt(np.log(2)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a Galaxy table class with a unique id_number starting at 100 using TableAttribute? Show me the code to create this class and instantiate a table with id_number=135."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nclass Galaxy(Table):\n    # Define id_number as a table attribute starting at 100\n    id_number = TableAttribute(default=100)\n\n    def __init__(self, *args, **kwargs):\n        # Initialize the parent Table class\n        super().__init__(*args, **kwargs)\n\n# Create sample galaxy data\ndata = [('Milky Way', 100,000),\n        ('Andromeda', 220,000)]\n\n# Create column names\nnames = ['name', 'diameter_km']\n\n# Instantiate table with id_number=135\ngalaxies = Galaxy(rows=data, names=names, id_number=135)\n\n# Verify the id_number\nprint(f\"Table ID number: {galaxies.id_number}\")\nprint(galaxies)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a spectral line from meters to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c, h\n\n# Define the spectral line\nwavelength = 500e-9  # in meters\n\ndef wavelength_to_km(wavelength_m):\n    # Convert wavelength to kilometers\n    wavelength_km = wavelength_m * u.meter.to(u.kilometer)\n    return wavelength_km\n\n# Convert wavelength\nwavelength_km = wavelength_to_km(wavelength)\nprint(wavelength_km)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Column with a specific unit and description?"
      },
      {
        "from": "assistant",
        "value": "Column(name='temperature', data=[23.4, 27.8, 32.1], unit='Celsius', description='Air temperature')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to create a Column with a custom format?"
      },
      {
        "from": "assistant",
        "value": "Column(name='humidity', data=[60, 70, 80], format='%d%%')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add meta-data to a Column?"
      },
      {
        "from": "assistant",
        "value": "Column(name='pressure', data=[1013, 1010, 1015], meta={'location': 'sea level', 'unit': 'hPa'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a catalog of 1000 stars with their celestial coordinates. How can I use the `match_coordinates_sky` function to find the nearest stars to a specific star in the catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_sky}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a catalog of 500000 galaxies with their celestial coordinates. How can I use the `match_coordinates_sky` function to find the nearest galaxies to a specific galaxy in the catalog with 5 nearest neighbors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_sky, nthneighbor=5},{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a catalog of 200000 quasars with their celestial coordinates. How can I use the `match_coordinates_sky` function to find the nearest quasars to a specific quasar in the catalog with a KD-Tree stored for future use?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_sky, storekdtree='quasars_kdtree'}}}{{}}} "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a catalog of 300000 stars with their celestial coordinates. How can I use the `match_coordinates_sky` function to find the nearest stars to a specific star in the catalog with a maximum separation of 1 arcsecond?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_sky, max_separation=1*u.arcsec}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert between different frequency units?"
      },
      {
        "from": "assistant",
        "value": "\nfrom astropy import units as u\nfrom astropy.constants import c\n\n# Example frequency in Hz\nfrequency = 100 * u.Hz\n\n# Convert frequency to wavelength using \u03bb = c/f\ndef frequency_to_wavelength(frequency):\n    \"\"\"\n    Convert frequency to wavelength using \u03bb = c/f\n    Args:\n        frequency: Quantity object with frequency units\n    Returns:\n        Wavelength in meters\n    \"\"\"    wavelength = (c / frequency).to(u.meter)\n    return wavelength\n\n# Convert wavelength to frequency\ndef wavelength_to_frequency(wavelength):\n    \"\"\"\n    Convert wavelength to frequency using f = c/\u03bb\n    Args:\n        wavelength: Quantity object with wavelength units\n    Returns:\n        Frequency in Hz\n    \"\"\"    frequency = (c / wavelength).to(u.Hz)\n    return frequency\n\n# Example conversions\nwavelength = frequency_to_wavelength(frequency)\nprint(f\"Frequency {frequency} = {wavelength}\")\n\n# Convert back to frequency as verification\nfrequency_back = wavelength_to_frequency(wavelength)\nprint(f\"Wavelength {wavelength} = {frequency_back}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a galaxy's rotation curve, and I have a point on the disk with coordinates x=1.2, y=0.8, z=0.1 light-years. What's the relationship between the radial distance and the rotation velocity?"
      },
      {
        "from": "assistant",
        "value": "r = omega * phi, where omega is the angular velocity and phi is the azimuthal angle."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a binary system, and I have a point on the inner edge of the accretion disk with coordinates x=0.5, y=0.2, z=0.1 light-years. How can I calculate the Eddington luminosity?"
      },
      {
        "from": "assistant",
        "value": "L = 3 * L_sun * (M / M_sun) / (R / R_sun)^2, where M is the mass of the black hole, R is the radius of the accretion disk, and L_sun is the solar luminosity."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a star cluster, and I have a point on the outskirts with coordinates x=2.0, y=1.5, z=0.5 light-years. What's the equation for the Newtonian potential?"
      },
      {
        "from": "assistant",
        "value": "phi = -G * M / r, where G is the gravitational constant, M is the mass of the cluster, and r is the radial distance."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of pixel values for an image. How can I normalize the pixel values using an ArcsinStretch with a minimum value of 0.01 and a maximum value of 0.99, and then create a heatmap?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ArcsinStretch, ImageNormalize,vlm\nimport matplotlib.pyplot as plt\n\n# Create sample image data\nimg = np.random.uniform(0, 1, size=(256, 256))\n\n# Create normalization object with ArcsinStretch\nnorm = ImageNormalize(  # noqa: F841\ndata=img, \nstretch=ArcsinStretch(gamma=37.5, vmin=0.01, vmax=0.99), \nclip=True)\n\n# Create heatmap\nplt.figure(figsize=(8, 6))\nim = plt.imshow(img, norm=norm, cmap='viridis')\nplt.colorbar(im, label='Normalized pixel value')\nplt.title('Normalized Image Heatmap')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a WCS object with a Mollweide projection for FK5 coordinates from epoch J2000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import FK5\nfrom astropy.time import Time\n\n# Create a WCS object with Mollweide projection for FK5/J2000\nw = WCS(naxis=2)  # Initialize 2D WCS\n\n# Set basic WCS parameters\nw.wcs.ctype = ['RA---MOLE', 'DEC--MOLE']  # Mollweide projection\nw.wcs.crval = [0., 0.]  # Center coordinates (degrees)\n\n# Set coordinate frame and epoch\nw.wcs.radesys = 'FK5'  # Set coordinate frame to FK5\nw.wcs.equinox = 2000.0  # Set epoch to J2000"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a WCS object with a Hammer-Aitoff projection for Galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import Galactic\n\n# Create a WCS object with Hammer-Aitoff projection for Galactic coordinates\nw = WCS(naxis=2)  # Initialize 2D WCS\n\n# Set basic WCS parameters\nw.wcs.ctype = ['GAL-LON-AIT', 'GAL-LAT-AIT']  # Hammer-Aitoff projection\n\n# Set coordinate frame\ncar = Galactic()\nw.wcs.radesys = car.name"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a WCS object with a Stereographic projection for Ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import Ecliptic\n\n# Create a WCS object with Stereographic projection for Ecliptic coordinates\nw = WCS(naxis=2)  # Initialize 2D WCS\n\n# Set basic WCS parameters\nw.wcs.ctype = ['RA---STER', 'DEC--STER']  # Stereographic projection\n\n# Set coordinate frame\ncar = Ecliptic()\nw.wcs.radesys = car.name"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a SphericalRepresentation for a star located at longitude 100.1 degrees, latitude 20.3 degrees, and distance 1000 parsecs using Astropy? Show me the code to define these coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation\nimport astropy.units as u\n\n# Create SphericalRepresentation for the star\n# lon=100.1\u00b0, lat=20.3\u00b0, distance=1000 pc\nstar_coords = SphericalRepresentation(\n    lon=100.1*u.deg,    # Longitude in degrees\n    lat=20.3*u.deg,    # Latitude in degrees  \n    distance=1000*u.pc  # Distance in parsecs\n)\n\n# Print the representation\nprint(star_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian model with a mean of 3.5 and a standard deviation of 0.1, what model should I use?"
      },
      {
        "from": "assistant",
        "value": "models.Gaussian1D(mean=3.5, stddev=0.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a visualization of a galaxy with a bright central bulge and a fainter outer disk. Can you show me how to apply an appropriate stretch function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nfrom astropy.visualization import (MinMaxInterval, LogStretch, ImageNormalize)\nsize = 200\ndata = np.random.rand(size, size)\nnorm = ImageNormalize(data, interval=MinMaxInterval(), stretch=LogStretch(a=1000))\nplt.imshow(data, norm=norm, cmap='hot', origin='lower'); plt.colorbar(); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a visualization of a nebula with a high dynamic range of brightness. Can you show me how to apply an appropriate stretch function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nfrom astropy.visualization import (MinMaxInterval, LogStretch, ImageNormalize)\nsize = 200\ndata = np.random.rand(size, size)\ndata = np\ub825(4, size, size, 100, 200)\nnorm = ImageNormalize(data, interval=MinMaxInterval(), stretch=LogStretch(a=1000))\nplt.imshow(data, norm=norm, cmap='hot', origin='lower'); plt.colorbar(); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a visualization of a star cluster with a high dynamic range of brightness. Can you show me how to apply an appropriate stretch function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nfrom astropy.visualization import (MinMaxInterval, LogStretch, ImageNormalize)\nsize = 200\ndata = np.random.rand(size, size)\ndata = np.random.randint(1, 100, size)\nnorm = ImageNormalize(data, interval=MinMaxInterval(), stretch=LogStretch(a=1000))\nplt.imshow(data, norm=norm, cmap='hot', origin='lower'); plt.colorbar(); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert a flux density of 100 Jy to watts per square meter per Hz using Astropy units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the flux density in Jy\nflux_density_jy = 100 * u.Jy\n\n# Convert to watts per square meter per Hz\n# 1 Jy = 1e-26 W/m\u00b2/Hz\nflux_density_wm2hz = flux_density_jy.to(u.W/(u.m**2*u.Hz))\n\nprint(f'Flux density: {flux_density_jy} = {flux_density_wm2hz}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the proper way to add a new extension to an existing FITS file?"
      },
      {
        "from": "assistant",
        "value": "fitsCard = fits.Card('CARDNAME', 'CARDVALUE', None) hdul.append(hdul_extensions=fitsCard)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram of the data?"
      },
      {
        "from": "assistant",
        "value": "hist = ax.hist(data, bins=50, alpha=0.5, label='Data')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mean of the data?"
      },
      {
        "from": "assistant",
        "value": "mean = data.mean()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you plot a scatter plot of the data?"
      },
      {
        "from": "assistant",
        "value": "ax.scatter(data, np.ones_like(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to adjust the contrast to show both bright and faint regions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nzscale_interval = ZScaleInterval("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default value for n_samples in ZScaleInterval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nprint(ZScaleInterval(n_samples=1000))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to disable pixel rejection in ZScaleInterval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nzscale_interval = ZScaleInterval(max_reject=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have flux measurements of 10 stars in the Andromeda galaxy: flux=[1.2, 2.5, 3.7, 2.1, 1.9, 2.3, 3.5, 2.7, 1.4, 2.9] in units of 10^-13 erg/s/cm^2 and their coordinates ra=[22.1, 22.3, 22.5, 22.7, 22.9, 23.1, 23.3, 23.5, 23.7, 23.9] and dec=[41.1, 41.3, 41.5, 41.7, 41.9, 42.1, 42.3, 42.5, 42.7, 42.9] in degrees. How can I create a QTable with these measurements and their units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\ndata = QTable({'flux': [1.2, 2.5, 3.7, 2.1, 1.9, 2.3, 3.5, 2.7, 1.4, 2.9] * u.erg/u.s/u.cm**2 * 1e-13, 'ra': [22.1, 22.3, 22.5, 22.7, 22.9, 23.1, 23.3, 23.5, 23.7, 23.9] * u.deg, 'dec': [41.1, 41.3, 41.5, 41.7, 41.9, 42.1, 42.3, 42.5, 42.7, 42.9] * u.deg})\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in using the `blocks` method to create a histogram. How can I use astropy's advanced histogram functionality for more complex data like this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import hist\nimport matplotlib.pyplot as plt\n\n# Generate sample data (replace with your actual data)\ndata = np.random.normal(loc=-50, scale=15, size=1000)  # km/s\n\n# Create figure\nplt.figure(figsize=(10, 6))\n\n# Use astropy's histogram function with bayesian blocks for optimal bin width\nhist(data, bins='blocks', histtype='stepfilled', alpha=0.6, color='blue', density=True, label='Data')\n\n# Customize the plot\nplt.xlabel('Value')\nplt.ylabel('Normalized Frequency')\nplt.title('Histogram with Bayesian Blocks')\nplt.grid(True, alpha=0.3)\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in using the `knuth'` method to create a histogram. How can I use astropy's advanced histogram functionality to show the velocity distribution of stars in a globular cluster?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import hist\nimport matplotlib.pyplot as plt\n\n# Generate sample data (replace with your actual data)\ndata = np.random.normal(loc=-50, scale=15, size=1000)  # km/s\n\n# Create figure\nplt.figure(figsize=(10, 6))\n\n# Use astropy's histogram function with Knuth's rule for optimal bin width\nhist(data, bins='knuth', histtype='stepfilled', alpha=0.6, color='blue', density=True, label='Data')\n\n# Customize the plot\nplt.xlabel('Value')\nplt.ylabel('Normalized Frequency')\nplt.title('Histogram with Knuth's Rule')\nplt.grid(True, alpha=0.3)\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in using the `freedman'` method to create a histogram. How can I use astropy's advanced histogram functionality to create a histogram of the radial velocity distribution of stars in a globular cluster?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import hist\nimport matplotlib.pyplot as plt\n\n# Generate sample data (replace with your actual data)\ndata = np.random.normal(loc=-50, scale=15, size=1000)  # km/s\n\n# Create figure\nplt.figure(figsize=(10, 6))\n\n# Use astropy's histogram function with Freedman-Diaconis rule for optimal bin width\nhist(data, bins='freedman', histtype='stepfilled', alpha=0.6, color='blue', density=True, label='Data')\n\n# Customize the plot\nplt.xlabel('Value')\nplt.ylabel('Normalized Frequency')\nplt.title('Histogram with Freedman-Diaconis Rule')\nplt.grid(True, alpha=0.3)\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a complex astropy model and I want to triple its value, how can I achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\nclass MyModel(models.Model):\n    def evaluate(self, x):\n        return 3 * super().evaluate(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I multiply a model by a vector of factors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\nmodel = models.Gaussian1D(\n    amplitude=1.0, mean=1.0, stddev=1.0\n)\nFactors = np.array([2.0, 3.0, 4.0])\nresult = model(Factors) * Factors"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to multiply the amplitude of a model by a factor of 2.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nmodel = models.Gaussian1D(\n    amplitude=1.0, mean=1.0, stddev=1.0\n)\nresult = model * 2.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with spectral data and need to create a FITS header card for temperature units with key='CUNIT2', value='Kelvin'. How do I properly format this using astropy.io.fits.Card?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ncard = fits.Card('CUNIT2', 'Kelvin', comment='Temperature units')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with spectral data and need to create a FITS header card for velocity units with key='CUNIT3', value='km/s'. How do I properly format this using astropy.io.fits.Card?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncard = fits.Card('CUNIT3', 'km/s', comment='Velocity units')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with spectral data and need to create a FITS header card for flux units with key='CUNIT4', value='erg/cm^2/s'. How do I properly format this using astropy.io.fits.Card?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncard = fits.Card('CUNIT4', 'erg/cm^2/s', comment='Flux units')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to create a new FITS file with a specific header and a table extension. Can you tell me how to do this with astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n# Create a new table\ntable_data = np.array([[1, 2, 3], [4, 5, 6]])\ntable = astropy.table.Table(table_data, names=['col1', 'col2', 'col3'])\n# Create a new FITS file\nhdul = fits.HDUList([fits.PrimaryHDU(), fits.BinTableHDU(table)])\n# Write the file to disk\nhdul.writeto('output.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert my FITS file to a 3D array?"
      },
      {
        "from": "assistant",
        "value": "hdu.data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the structure of the FITS header?"
      },
      {
        "from": "assistant",
        "value": "hdu.header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a HISTORY card to the FITS header?"
      },
      {
        "from": "assistant",
        "value": "hdu.header.add_card(astropy.io.fits.Card('HISTORY', 'This is a history card'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to convert the angles in radians to degrees using Astropy's Angle."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport numpy as np\n\n# Create array of angles in radians\nradian_array = np.array([0.5, 1.2, 2.5, 3.8, 5.1])\n\n# Convert to Angle objects with degree units\ndegree_angles = Angle(radian_array, unit='rad').to('deg')\n\n# Print results\nfor rad, deg in zip(radian_array, degree_angles):\n    print(f'{rad} rad = {deg} deg')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have data with a custom model to fit a curve"
      },
      {
        "from": "assistant",
        "value": "model = models.powerlaw()+"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have data with a custom model to fit a sine wave"
      },
      {
        "from": "assistant",
        "value": "model = models.sine1d()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have data with a custom model to fit a polynomial"
      },
      {
        "from": "assistant",
        "value": "model = models.polynomial1d(degree=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new column to an Astropy Table"
      },
      {
        "from": "assistant",
        "value": "import astropy.table as table\n\n# Create a table\naddColumn = table.Table([{'A': 1, 'B': 2}, {'A': 3, 'B': 4}])\n\n# Add a new column\ncolumnD = addColumn['A'] + addColumn['B']\naddColumn['D'] = columnD\nprint(addColumn)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D Gaussian distribution with a larger spread in the x-direction and a smaller spread in the y-direction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the rotation angle of a 2D Gaussian distribution in radians?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D Gaussian distribution with a specific amplitude and mean coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the GeocentricTrueEcliptic frame in astropy.coordinates?"
      },
      {
        "from": "assistant",
        "value": "The GeocentricTrueEcliptic frame is a coordinate system that represents the positions of objects in the solar system with respect to the geocenter (Earth) and the true equinox at a specified date."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 300x300 pixel image of a galaxy with a Sersic index of 2.5, effective radius of 30, amplitude of 2, center position at (150,150), and a rotation angle of 45 degrees. Display the image with appropriate axis labels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\ncenter = (150, 150)\nr_eff = 30\ntheta = 45 * np.pi / 180\nsersic_model = Sersic2D(amplitude=2, reff=r_eff, n=2.5, x_0=center[0], y_0=center[1], ellip=0.1, theta=theta)\nimage = sersic_model(x, y)\nplt.imshow(image, origin='lower', cmap='viridis')\nplt.colorbar(label='Intensity')\nplt.xlabel('X (pixels)'); plt.ylabel('Y (pixels)'); plt.title('Galaxy - Sersic Model'); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 400x400 pixel image of a galaxy with a Sersic index of 3, effective radius of 25, amplitude of 1.5, center position at (200,200), and a rotation angle of 0 degrees. Display the image with appropriate axis labels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\ncenter = (200, 200)\nr_eff = 25\ntsrsic_model = Sersic2D(amplitude=1.5, reff=r_eff, n=3, x_0=center[0], y_0=center[1], ellip=0.3, theta=0)\nimage = sersic_model(x, y)\nplt.imshow(image, origin='lower', cmap='viridis')\nplt.colorbar(label='Intensity')\nplt.xlabel('X (pixels)'); plt.ylabel('Y (pixels)'); plt.title('Galaxy - Sersic Model'); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 500x500 pixel image of a galaxy with a Sersic index of 0.5, effective radius of 10, amplitude of 1, center position at (250,250), and a rotation angle of 90 degrees. Display the image with appropriate axis labels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\ncenter = (250, 250)\nr_eff = 10\ntsrsic_model = Sersic2D(amplitude=1, reff=r_eff, n=0.5, x_0=center[0], y_0=center[1], ellip=0.4, theta=1.57)\nimage = sersic_model(x, y)\nplt.imshow(image, origin='lower', cmap='viridis')\nplt.colorbar(label='Intensity')\nplt.xlabel('X (pixels)'); plt.ylabel('Y (pixels)'); plt.title('Galaxy - Sersic Model'); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show the mean of the coordinates in a SkyCoord object"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nprint(SkyCoord(ra=[10, 20, 30]*u.deg, dec=[40, 50, 60]*u.deg).mean())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain the difference between SkyCoord and SkyOffsetFrame"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nprint(SkyCoord(ra=1*u.deg, dec=2*u.deg))\nprint(SkyOffsetFrame(origin=SkyCoord(ra=1*u.deg, dec=2*u.deg)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new SkyCoord object with data from an existing SkyCoord object"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nsc = SkyCoord(ra=[10, 20, 30]*u.deg, dec=[40, 50, 60]*u.deg)\nnew_sc = SkyCoord(ra=sc.data['ra']*u.deg, dec=sc.data['dec']*u.deg)\nprint(new_sc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy WCS API to convert a set of pixel coordinates to world coordinates?"
      },
      {
        "from": "assistant",
        "value": "w = WCS(naxis=2)\nw.wcs_smartpix2world()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use the astropy WCS API to create a WCS object from a given coordinate frame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import FK5\ncframe = FK5(equinox='J2010')\nwcs = celestial_frame_to_wcs(cframe)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy WCS API to project world coordinates to pixel coordinates using a specific WCS object?"
      },
      {
        "from": "assistant",
        "value": "w = WCS(naxis=2)\nw.wcs_world2pix()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am interested in modeling the emission line profile of a nebula, considering both thermal and turbulent broadening. Can you show me how to create this model using Astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling import models, Fittable1DModel\nfrom astropy.modeling.parameters import Parameter\nclass GaussianLorentzModel(Fittable1DModel):\n    \"}}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use LogStretch to display faint objects in an image?"
      },
      {
        "from": "assistant",
        "value": "LogStretch(a=500)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert 30 degrees Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import Quantity\nimport astropy.units as u\n\n# Create temperature in Celsius \ntemp_celsius = Quantity(30, u.Celsius)\n\n# Define temperature equivalencies\ntemp_equiv = u.temperature()\n\n# Convert to Kelvin using equivalencies\ntemp_kelvin = temp_celsius.to(u.K, equivalencies=temp_equiv)\n\n# Print result with proper unit\nprint(f\"Temperature conversions for {temp_celsius}\":)\nprint(f\"Kelvin: {temp_kelvin:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert Celsius temperatures to Fahrenheit?"
      },
      {
        "from": "assistant",
        "value": "f = (c * 9/5.0) + 32"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me convert kelvin to Rankine?"
      },
      {
        "from": "assistant",
        "value": "r = k * 9/5.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert feet to inches, how can I do that?"
      },
      {
        "from": "assistant",
        "value": "i = f * 12"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a HeliocentricTrueEcliptic coordinate object using spherical coordinates (lon = 45 degrees, lat = 30 degrees, distance = 1 AU) with an equinox date of 2025-01-01?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy.time import Time\nimport astropy.units as u\n\nequinox_time = Time('2025-01-01')\necliptic_coords = HeliocentricTrueEcliptic(\n    lon=45*u.degree, \n    lat=30*u.degree, \n    distance=1*u.AU, \n    equinox=equinox_time,\n    representation_type='spherical'\n)\nprint(ecliptic_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I remove duplicate rows from an astropy table based on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, unique\nimport numpy as np\ndata = Table({'col1': [1, 2, 2, 3, 3, 3], 'col2': [4, 5, 6, 7, 8, 9]})\nunique_table = unique(data, keys=['col1', 'col2'])\nprint(unique_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a GRBTable class with a 'mission_id' attribute defaulting to 'SWIFT'"
      },
      {
        "from": "assistant",
        "value": "\nfrom astropy.table import Table, Column\nfrom astropy.time import Time\nimport numpy as np\n\nclass GRBTable(Table):\n    \"\"\"Custom table class for Gamma-Ray Burst data with mission identifier\"\"\"\n\n    def __init__(self, *args, mission_id=\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a custom attribute for a Table subclass using\nastropy.table.TableAttribute"
      },
      {
        "from": "assistant",
        "value": "\nfrom astropy.table import Table, TableAttribute\n\nclass MyTable(Table):\n    identifier = TableAttribute(default=1)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to create a 'name' attribute for the MyTable class with a default value of 'Unknown' using astropy.table.TableAttribute"
      },
      {
        "from": "assistant",
        "value": "\nfrom astropy.table import Table, TableAttribute\n\nclass MyTable(Table):\n    name = TableAttribute(default='Unknown')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 3x3 undersampled Tiny Tim PSF with negligible outer working angle using Astropy's CustomKernel class?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel, TinyTimKernel\nimport numpy as np\n\ntt_kernel = TinyTimKernel(3) # create a 3x3 Tiny Tim PSF kernel\n# Let's scale it to 50.0 to adjust the intensity\npsf_kernel = ttmlsensorsetupscaled(scale=50.0)\n# Now, you can use the psf_kernel to convolve your data\nCustomKernel(psf_kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to combine multiple tables into a single table."
      },
      {
        "from": "assistant",
        "value": "def combine_tables(tables): return astropy.table.vstack(tables)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.convolution.Gaussian1DKernel to smooth a 1D array of data?"
      },
      {
        "from": "assistant",
        "value": "- Rest of the response with correct parameters and data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What parameters can I adjust to change the shape of the Gaussian kernel?"
      },
      {
        "from": "assistant",
        "value": "- Rest of the response provides an explanation of the parameters stddev, x_size, mode, factor"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the astropy.convolution.Gaussian1DKernel handle the edges of the data array?"
      },
      {
        "from": "assistant",
        "value": "- Rest of the response provides information about boundary behavior"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the energy released by a supernova"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define the mass in solar masses\nmass = 10 * u.solMass\n\n# Convert mass to energy using mass-energy equivalence (E = mc\u00b2)\n# We use the equivalency system to handle the conversion\nenergy = mass.to(u.erg, equivalencies=u.mass_energy())\n\nprint(f\"Mass of {mass:.2f} corresponds to energy of {energy:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the mass of a star from its luminosity"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define the luminosity in erg/s\nluminosity = 1e33 * u.erg / u.s\n\n# Convert luminosity to mass using mass-energy equivalence (L = E/t)\n# We use the equivalency system to handle the conversion\nmass = luminosity.to(u.solMass, equivalencies=u.luminosity_massEnergy())\n\nc = u.speed_of_light\nprint(f\"Luminosity of {luminosity:.2e} corresponds to mass of {mass:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I calculate the energy released by a black hole merger"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define the mass in solar masses\nmass = 20 * u.solMass\n\n# Convert mass to energy using mass-energy equivalence (E = mc\u00b2)\n# We use the equivalency system to handle the conversion\nenergy = mass.to(u.erg, equivalencies=u.mass_energy())\n\nc = u.speed_of_light\nprint(f\"Mass of {mass:.2f} corresponds to energy of {energy:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to know how to use the Gaussian1DKernel function to smooth a 1D array in astropy."
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian filter kernel with a standard deviation of 5 and an oversampling factor of 5 in astropy?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=5, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to implement a 1D Gaussian filter kernel with a standard deviation of 2 and a kernel size of 11 in astropy."
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=2, x_size=11)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a scatter plot comparing the masses of black holes with their corresponding spin values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\n# Sample black hole data (masses in M, spin values in unitless)\nmasses = [1.0, 2.5, 5.0, 10.0] * u.Msun\nspin = [0.1, 0.3, 0.5, 0.7]\n\n# Enable Astropy quantity plotting\nquantity_support()\n\n# Create the scatter plot\nplt.scatter(masses, spin)\n\n# Customize the plot\nplt.xlabel('Mass')\nplt.ylabel('Spin Value')\nplt.title('Black Hole Masses vs Spin Values')\n\n# Add grid for better readability\nplt.grid(True, which='both', ls='-', alpha=0.2)\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a bar chart comparing the luminosities of different stars with their corresponding temperatures?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\n# Sample star data (luminosities in L, temperatures in K)\nluminosities = [1.0, 2.5, 5.0, 10.0] * u.Lsun\ntemperatures = [4000, 5000, 6000, 7000] * u.K\n\n# Enable Astropy quantity plotting\nquantity_support()\n\n# Create the bar chart\nplt.bar(luminosities, temperatures, width=0.5)\n\n# Customize the plot\nplt.xlabel('Luminosity')\nplt.ylabel('Temperature')\nplt.title('Star Luminosities vs Temperatures')\n\n# Add grid for better readability\nplt.grid(True, which='both', ls='-', alpha=0.2)\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram comparing the distances of galaxies with their corresponding redshifts?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\n# Sample galaxy data (distances in Mpc, redshifts in unitless)\ndistances = [1.0, 2.5, 5.0, 10.0] * u.Mpc\nredshifts = [0.1, 0.3, 0.5, 0.7]\n\n# Enable Astropy quantity plotting\nquantity_support()\n\n# Create the histogram\nplt.hist(distances, bins=5)\n\n# Customize the plot\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Galaxy Distances vs Redshifts')\n\n# Add grid for better readability\nplt.grid(True, which='both', ls='-', alpha=0.2)\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the line profiles in my spectroscopic data, where I measured a Gaussian sigma of 5.5 Angstroms. How can I calculate its FWHM to compare with literature values?"
      },
      {
        "from": "assistant",
        "value": "# Using astropy\nimport astropy.stats as stats\n\n# Given sigma in Angstroms\nsigma = 5.5  # \u00c5\ndef sigma2fwhm(a):    return 2.0 * stats.gaussian_sigma_to_fwhm(a)\n\nfwhm = sigma2fwhm(5.5)\n\nprint(f'FWHM = {fwhm:.2f} \u00c5&#39;)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the FWHM for a Gaussian with a sigma of 2.1 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "'Using astropy\nimport astropy.stats as stats\n\ndef calculate_fwhm(a):    return 2.0 * stats.gaussian_sigma_to_fwhm(a)\n\nfwhm = calculate_fwhm(2.1)\n\nprint(f'For a Gaussian with \u03c3 = 2.1 \u00c5: FWHM = {fwhm:.2f} \u00c5')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the FWHM for a Gaussian signal with sigma 4 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "'Using astropy\nimport astropy.stats\n\nfwhm = 2.0 * astropy.stats.gaussian_sigma_to_fwhm(4.0)\n\nprint(f'FWHM = {fwhm:.2f} \u00c5')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to compare the distributions of redshift values for galaxies in the Virgo cluster and the Coma cluster. Can I use the Kuiper test for this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\ngalaxies_virgo = np.random.normal(loc=0.05, scale=0.01, size=100)\ngalaxies_coma = np.random.normal(loc=0.03, scale=0.02, size=100)\nd1, p1 = kuiper_two(galaxies_virgo, galaxies_coma)\nprint(f'Kuiper test statistic: {d1:.3f}')\nprint(f'p-value: {p1:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the closest star to the target star (150.5 deg, -25.3 deg) from a catalog of 10 nearby stars at positions: RA=[150.48, 150.51, 150.53, 150.49, 150.52, 150.54, 150.46, 150.58, 150.44, 150.56] deg, Dec=[-25.28, -25.31, -25.33, -25.29, -25.32, -25.34, -25.26, -25.38, -25.24, -25.36] deg. Assume all stars are at 100 parsec distance."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Create SkyCoord object for target star\ntarget = SkyCoord(ra=150.5*u.deg, dec=-25.3*u.deg, distance=100*u.pc)\n\n# Create SkyCoord object for catalog stars\ncatalog_ra = [150.48, 150.51, 150.53, 150.49, 150.52, 150.54, 150.46, 150.58, 150.44, 150.56] * u.deg\ncatalog_dec = [-25.28, -25.31, -25.33, -25.29, -25.32, -25.34, -25.26, -25.38, -25.24, -25.36] * u.deg\n\n#method is astropy.coordinates.match_coordinates_sky # altered the code for this example\nmatch_coords = target\nmatch_catalog = SkyCoord(ra=catalog_ra,\n                        dec=catalog_dec,\n                        distance=100*u.pc * np.ones(10))\n\nmatch idx, separation_2d, distance_3d = match_coordinates_sky(match_catalog, match_catalog, nthneighbor=1, storekdtree=False)\nindex = np.where(separation_2d.to('deg').value == np.min(separation_2d.to('deg').value))[0][0]\npredicted_star = SkyCoord(ra=catalog_ra[index], dec=catalog_dec[index])\nclosest_idx = np.argmin(match_catalog.separation(predicted_star).to('deg').value)\nprint(f\"Closest star is at index {closest_idx}\")\nprint(f\"Angular separation: {match_catalog.separation(predicted_star).to('arcsec').value:.2f}\")\nprint(f\"3D distance: {match_catalog.separation_3d(predicted_star).to('au').value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.units to perform unit conversions when working with large datasets?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the units for distance and velocity\nunits_distance = u.m\nunits_velocity = u.m/u.s\ncalc_distance = 1000 * units_distance\ncalc_velocity = 100000 * units_velocity\n\nprint(calc_distance.to(units_velocity))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert cartesian coordinates (x=5000, y=200, z=-10000) kilometers from Earth's center to spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nx = 5000 * u.km\ny = 200 * u.km\nz = -10000 * u.km\rr, lat, lon = cartesian_to_spherical(x, y, z)\nprint(rr, lat, lon)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an FK4 coordinate object with proper motion data to track the movement of the star Alpha Centauri across multiple epochs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, SkyCoord\nimport astropy.units as u\nfrom astropy.time import Time\ncentauri = SkyCoord(ra=14.6667*u.hour, dec=-62.6833*u.degree, pm_ra_cosdec=-3743.16*u.mas/u.yr, pm_dec=136.85*u.mas/u.yr, frame=FK4, equinox='B1950')\nequinoxes = Time([1950.0, 2000.0, 2050.0], format='byear')\nfor equinox in equinoxes:\n    position = centauri.transform_to(FK4(equinox=equinox))\n    print(f'Epoch {equinox.byeyr}: Positions RA: {position.ra.to_string(unit=u.hour, sep=\":\", pad=True)} Dec: {position.dec.to_string(unit=u.degree, sep=\":\", pad=True)}'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an FK4 coordinate object with proper motion data to track the movement of the star Sirius across multiple epochs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, SkyCoord\nimport astropy.units as u\nfrom astropy.time import Time\nsirius = SkyCoord(ra=6.7132*u.hour, dec=-16.7167*u.degree, pm_ra_cosdec=-546.01*u.mas/u.yr, pm_dec=-1223.07*u.mas/u.yr, frame=FK4, equinox='B1950')\nequinoxes = Time([1950.0, 2000.0, 2050.0], format='byear')\nfor equinox in equinoxes:\n    position = sirius.transform_to(FK4(equinox=equinox))\n    print(f'Epoch {equinox.byeyr}: Positions RA: {position.ra.to_string(unit=u.hour, sep=\":\", pad=True)} Dec: {position.dec.to_string(unit=u.degree, sep=\":\", pad=True)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an FK4 coordinate object with proper motion data to track the movement of the Pleiades cluster across multiple epochs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, SkyCoord\nimport astropy.units as u\nfrom astropy.time import Time\npleiades = SkyCoord(ra=3.7261*u.hour, dec=24.3382*u.degree, pm_ra_cosdec=-24.318*u.mas/u.yr, pm_dec=-36.28*u.mas/u.yr, frame=FK4, equinox='B1950')\nequinoxes = Time([1950.0, 2000.0, 2050.0], format='byear')\nfor equinox in equinoxes:\n    position = pleiades.transform_to(FK4(equinox=equinox))\n    print(f'Epoch {equinox.byeyr}: Positions RA: {position.ra.to_string(unit=u.hour, sep=\":\", pad=True)} Dec: {position.dec.to_string(unit=u.degree, sep=\":\", pad=True)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying planetary ring systems and need to generate a synthetic 2D image of a thick ring with varying brightness for comparison with observations. How can I create this using Astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D\nfrom astropy.visualization import astropy_mpl_style\nimport matplotlib.pyplot as plt\n\n# Set up coordinate grid (in arbitrary units)\ny, x = np.mgrid[-100:101, -100:101]\n\n# Create a Ring2D model\n# Parameters: amplitude=1, center_x=0, center_y=0, r_in=100, r_out=120, width=20\nring_model = Ring2D(amplitude=1.0, x_0=0, y_0=0, r_in=100, r_out=120, width=20)\n\n# Generate the 2D ring image\nring_image = ring_model(x, y)\n\n# Visualization\nplt.style.use(astropy_mpl_style)\nplt.figure(figsize=(8, 8))\nplt.imshow(ring_image, origin='lower', cmap='viridis',\n           extent=[-100, 100, -100, 100])\nplt.colorbar(label='Intensity')\nplt.xlabel('X (arbitrary units)')\nplt.ylabel('Y (arbitrary units)')\nplt.title('Synthetic Ring System')\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.convolution.Box1DKernel"
      },
      {
        "from": "assistant",
        "value": "You can use the Box1DKernel from astropy.convolution module. "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert cartesian coordinates (3, 4, 5) to spherical coordinates"
      },
      {
        "from": "assistant",
        "value": "astro.background.astropy.coordinates.cartesian_to_spherical(x=3, y=4, z=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert cartesian coordinates (1, 2, 3) to spherical coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical, CartesianRepresentation, SphericalRepresentation\n\ncart_to_sph = cartesian_to_spherical(\n    CartesianRepresentation(\n        x=1,\n        y=2,\n        z=3\n    )\n)\n\ndistance = cart_to_sph[0]\nlat = cart_to_sph[1]\nlon = cart_to_sph[2]\n\nprint(f'Distance: {distance:.2f}')\nprint(f'Latitude: {lat:.2f}')\nprint(f'Longitude: {lon:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate spherical coordinates for points (1, 2, 3) and (4, 5, 6)"
      },
      {
        "from": "assistant",
        "value": "astro.background.astropy.coordinates.cartesian_to_spherical(x=[1, 2, 3], y=[4, 5, 6], z=[7, 8, 9])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a star's position from ICRS to Galactic coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, transform_to\nfrom astropy_units import degree\n\n# Create SkyCoord object with the star's position in ICRS (equatorial coordinates)\nstar_pos = SkyCoord(ra=82.5*u.degree, dec=-62.8*u.degree, frame='icrs')\n\n# Transform to Galactic coordinates\ngalactic_coords = transform_to('galactic', star_pos)\n\n# Print results\nprint(f\"Galactic l: {galactic_coords.l.degree:.2f}\u00b0\")\nprint(f\"Galactic b: {galactic_coords.b.degree:.2f}\u00b0\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Click here to retrieve the answer to what is used to filter data for removal of random noise?"
      },
      {
        "from": "assistant",
        "value": "We use the convolution as it helps to blur details which are less significant. It could be done with an edge restoration method if needed"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Is 'width' argument in Box1DKernel function used as a threshold to generate filters which are used in signal processing?"
      },
      {
        "from": "assistant",
        "value": "No. It determines the such that both sides of the filter are compared on both sides. The response used comes free of artifacts thanks to this method"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "You say to convex the hull of a shape using your box"
      },
      {
        "from": "assistant",
        "value": "What you are actually referring to is a boxy 3D mold"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use EarthLocation to convert geocentric (X=4000000m, Y=5000000m, Z=6000000m) coordinates to geodetic ( latitude, longitude, height) coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object from geocentric coordinates (XYZ)\nclassic_xyz = EarthLocation.from_geocentric(x=4000000 * u.m, y=5000000 * u.m, z=6000000 * u.m)\n\n# Get geodetic coordinates (latitude, longitude, height)\nlat = classic_xyz.lat.degree  # latitude in degrees\nlon = classic_xyz.lon.degree  # longitude in degrees\nheight = classic_xyz.height.to(u.m)  # height in meters\n\n# Print results\nprint(f\"Geodetic coordinates:\")\nprint(f\"Latitude: {lat:.4f}\u00b0\")\nprint(f\"Longitude: {lon:.4f}\u00b0\")\nprint(f\"Height: {height:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert geodetic (lat=40.7128\u00b0, lon=-74.0060\u00b0, height=10m) coordinates to geocentric (X, Y, Z) coordinates using EarthLocation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\ntoday_geodetic = EarthLocation.from_geodetic(lat=40.7128 * u.deg, lon=-74.0060 * u.deg, height=10 * u.m)\n\n# Get geocentric coordinates (X, Y, Z)\nx = today_geodetic.x.to(u.m)\ny = today_geodetic.y.to(u.m)\nz = today_geodetic.z.to(u.m)\n\n# Print results\nprint(f\"Geocentric coordinates:\")\nprint(f\"X: {x:.1f}m\")\nprint(f\"Y: {y:.1f}m\")\nprint(f\"Z: {z:.1f}m\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use EarthLocation to convert geodetic (latitude=51.5074\u00b0, longitude=-0.1278\u00b0, height=20m) coordinates to geocentric (X, Y, Z) coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object from geodetic coordinates (latitude, longitude, height)\nlatin_geodetic = EarthLocation.from_geodetic(lat=51.5074 * u.deg, lon=-0.1278 * u.deg, height=20 * u.m)\n\n# Get geocentric coordinates (X, Y, Z)\nx = latin_geodetic.x.to(u.m)\ny = latin_geodetic.y.to(u.m)\nz = latin_geodetic.z.to(u.m)\n\n# Print results\nprint(f\"Geocentric coordinates:\")\nprint(f\"X: {x:.1f}m\")\nprint(f\"Y: {y:.1f}m\")\nprint(f\"Z: {z:.1f}m\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use get_pkg_data_filename to access 'downloads/drive_v3\u9761multipath_oraciTaylor \uc9c0\ub3c4'l from the astropy package, with a custom timeout of 60 seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename, conf\nconf.remote_timeout = 60\nget_pkg_data_filename('downloads/drive_v3\u9761multipath_oraciTaylor_ \uc9c0\ub3c4l', package='astropy')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use get_pkg_data_filename to access 'spectrum.fits' from the astropy.nddata.tests package, with a custom timeout of 90 seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename, conf\nconf.remote_timeout = 90\nget_pkg_data_filename('spectrum.fits', package='astropy.nddata.tests')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use get_pkg_data_filename to access 'hash/3c273.fits_hash' from the local file system, with a custom timeout of 30 seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename, conf\nconf.remote_timeout = 30\nget_pkg_data_filename('hash/3c273.fits_hash')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date string to a Julian Date using Astropy's Time module?"
      },
      {
        "from": "assistant",
        "value": "Time('2022-01-01', format='iso').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Modified Julian Date for the current date?"
      },
      {
        "from": "assistant",
        "value": "Time('today', scale='utc').mjd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a Unix timestamp to a Julian Date?"
      },
      {
        "from": "assistant",
        "value": "Time('1643723400', format='unix').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a 2D array to a FITS image with astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.ImageHDU(data=your_array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a 'COMMENT' keyword to the 1st extension of my FITS structure with value 'Initial comment'. "
      },
      {
        "from": "assistant",
        "value": "hdul[0].header['COMMENT'] = ('Initial comment', 'Initial comment')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you update the data in the 2nd extension of my FITS structure with [98.5, 100.0, 97.2, 99.8]?"
      },
      {
        "from": "assistant",
        "value": "hdul[1].data = np.array([98.5, 100.0, 97.2, 99.8])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to add a 'TELESCOP' keyword to the primary HDU of my FITS structure with value 'SST'. "
      },
      {
        "from": "assistant",
        "value": "hdul[0].header['TELESCOP'] = ('SST', 'Telescope name')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to calculate the distance to a star using its apparent magnitude and bolometric correction?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.coordinates import SkyCoord\n\n# Define the apparent magnitude and bolometric correction\nm_app = 10\nbc = 1.5\n\n# Define the zero-point magnitude\nm_zero = 4.75\n\n# Calculate the absolute magnitude\nm_abs = m_app + bc - m_zero\n\n# Calculate the distance modulus\ndistance_modulus = m_abs + 5\n\n# Calculate the distance in parsecs\ndistance = 10**(distance_modulus / 5) * u.parsec\n\n# Print the result\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a Unit and a Quantity in Astropy?"
      },
      {
        "from": "assistant",
        "value": "A Unit is a physical unit of measurement, such as meters or seconds, while a Quantity is a value with a unit, such as 3 meters or 4 seconds."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a Quantity from one unit to another in Astropy?"
      },
      {
        "from": "assistant",
        "value": "You can use the to method of a Quantity to convert it to a different unit. For example, q.to('kg') would convert a Quantity q with a unit of grams to kilograms."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the u.def_unit function in Astropy?"
      },
      {
        "from": "assistant",
        "value": "u.def_unit is used to define a new unit that can be used in Astropy. It allows you to create a custom unit that can be used in calculations and conversions."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Box2D model for a 5x5 arcsec square field centered at coordinates (10, 20) arcsec with a throughput of 0.8?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box2D\nfrom astropy.coordinates import Angle\nimport astropy.units as u\n\nwidth = Angle('5arcsec').value\nheight = width\namplitude = 0.8  # Throughput\nx_center = 10   # Center x coordinate in arcsec\ny_center = 20   # Center y coordinate in arcsec\n\nfov_model = Box2D(\n    amplitude=amplitude,\n    x_0=x_center,\n    y_0=y_center,\n    x_width=width,\n    y_width=height\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I visualize a stellar disk model with a radius of 30, centered at (100, 100) and an amplitude of 2.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Disk2D\nimport matplotlib.pyplot as plt\n\ncy, x = np.mgrid[0:150, 0:150]\ndisk_model = Disk2D(amplitude=2.5, x_0=100, y_0=100, R_0=30)\ndisk_data = disk_model(x, y)\nplt.figure(figsize=(8, 8))\nplt.imshow(disk_data, origin='lower', cmap='viridis', extent=[0, 150, 0, 150])\nplt.colorbar(label='Amplitude')\nplt.title('2D Disk Model')\nplt.xlabel('X Position')\nplt.ylabel('Y Position')\ncircle = plt.Circle((100, 100), 30, fill=False, color='red', linestyle='--', label='Disk Boundary')\nplt.gca().add_patch(circle)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for a Disk2D model?"
      },
      {
        "from": "assistant",
        "value": "The formula for a Disk2D model is f(r) = {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 3D disk model using Disk2D and matplotlib?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Disk2D\nimport matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D\n\ncy, x, z = np.mgrid[0:100, 0:100, 0:100]\ndisk_model = Disk2D(amplitude=1.0, x_0=50, y_0=50, R_0=25)\ndisk_data = disk_model(x, y)\nfig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(x, y, disk_data, cmap='viridis')\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Amplitude')\nplt.title('3D Disk Model')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian kernel with a standard deviation of 2.5 pixels and apply it to my spectral data."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create sample spectral data (replace this with your actual data)\nwavelength = np.linspace(4000, 7000, 1000)  # wavelength array in Angstroms\nflux = np.random.normal(1, 0.1, 1000)  # sample noisy flux data\n\n# Create Gaussian kernel with stddev = 2.5 pixels\ngaussian_kernel = Gaussian1DKernel(stddev=2.5)\n\n# Apply convolution to smooth the flux\n# Use 'extend' boundary mode to handle edges appropriately\nsmoothed_flux = convolve(flux, gaussian_kernel, boundary='extend')\n\n# The smoothed_flux array now contains your Gaussian-smoothed spectral data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use AltAz to get the position of the Moon at Honolulu, Hawaii on 2024-01-15 12:30:00 UTC, taking into account refraction corrections with a temperature of 20\u00b0C and a pressure of 800 hPa?"
      },
      {
        "from": "assistant",
        "value": "[code to get the position of the Moon using AltAz]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to calculate the altitude and azimuth of Jupiter at a specific location on Earth on a particular date and time, including refraction corrections for temperature and pressure?"
      },
      {
        "from": "assistant",
        "value": "[code to calculate the altitude and azimuth of Jupiter]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I obtain the coordinates of the Sun in the AltAz frame at a given location and time, including refraction corrections for a relative humidity of 50% and an observational wavelength of 500 nm?"
      },
      {
        "from": "assistant",
        "value": "[code to get the coordinates of the Sun in the AltAz frame]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing the distribution of masses of black holes in a galaxy. I have measurements of their masses in solar masses: [10, 20, 30, 40, 50] and [15, 25, 35, 45, 55]. Can you demonstrate how to use the Kuiper test to check if there's a significant difference in the mass distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\n# Define the black hole masses and convert to solar masses\ndata1 = np.array([10, 20, 30, 40, 50])\ndata2 = np.array([15, 25, 35, 45, 55])\n\n# Perform Kuiper test\nd_statistic, p_value = kuiper_two(data1, data2)\n\n# Print results\nprint(f\"Kuiper test results:\")\nprint(f\"D statistic: {d_statistic:.4f}\")\nprint(f\"p-value: {p_value:.4f}\")\n\n# Interpret results\nalpha = 0.05  # Standard significance level\nif p_value < alpha:\n    print(\"The mass distributions are significantly different\")\nelse:\n    print(\"No significant difference detected between the distributions\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am studying the luminosities of a sample of stars. I have measurements in watts: [100, 200, 300, 400, 500] and [150, 250, 350, 450, 550]. Can you show me how to use the Kuiper test to compare the distribution of luminosities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two \nimport numpy as np\n\n# Define the luminosities and convert to watts\nluminosities1 = np.array([100, 200, 300, 400, 500])\nluminosities2 = np.array([150, 250, 350, 450, 550])\n\n# Perform Kuiper test\nd_statistic, p_value = kuiper_two(luminosities1, luminosities2)\n\n# Print results\nprint(f\"Kuiper test results:\")\nprint(f\"D statistic: {d_statistic:.4f}\")\nprint(f\"p-value: {p_value:.4f}\")\n\n# Interpret results\ncritical_value = 0.05  # Standard significance level\nif p_value < critical_value:\n    print(\"The luminosity distributions are significantly different\")\nelse:\n    print(\"No significant difference detected between the distributions\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am investigating the distribution of orbital periods of exoplanets. I have measurements in days: [10, 20, 30, 40, 50] and [15, 25, 35, 45, 55]. Can you demonstrate how to use the Kuiper test to compare the distribution of orbital periods?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two \nimport numpy as np\n\n# Define the orbital periods and convert to days\nperiods1 = np.array([10, 20, 30, 40, 50])\nperiods2 = np.array([15, 25, 35, 45, 55])\n\n# Perform Kuiper test\nd_statistic, p_value = kuiper_two(periods1, periods2)\n\n# Print results\nprint(f\"Kuiper test results:\")\nprint(f\"D statistic: {d_statistic:.4f}\")\nprint(f\"p-value: {p_value:.4f}\")\n\n# Interpret results\ncritical_value = 0.05  # Standard significance level\nif p_value < critical_value:\n    print(\"The orbital period distributions are significantly different\")\nelse:\n    print(\"No significant difference detected between the distributions\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring model with an inner radius of 30, a width of 10, and an amplitude of 0.5, centered at (150, 150)"
      },
      {
        "from": "assistant",
        "value": "models.Ring2D(amplitude=0.5, x_0=150, y_0=150, r_in=30, width=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the following instruction?"
      },
      {
        "from": "assistant",
        "value": "print(Hello World)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of star masses and I want to create a histogram with the Freedman-Diaconis binning method, what should I do?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x=masses, bins='freedman')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the 'blocks' method for dynamic bin widths in my histogram?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x=masses, bins='blocks')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Scott's rule to determine bins in my histogram?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x=masses, bins='scott')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a WCS transform for a new narrow-field camera?"
      },
      {
        "from": "assistant",
        "value": "[Example response 1 here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to handle pixel coordinates and sky positions for a wide-field camera?"
      },
      {
        "from": "assistant",
        "value": "[Example response 2 here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of fitting a WCS to a set of matched coordinates?"
      },
      {
        "from": "assistant",
        "value": "[Example response 3 here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert my velocity data to km/h?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\\nfrom astropy import units as u\\n\\n# Example velocity data (assuming m/s)\\nvelocity = 50 * u.m / u.s\\n\\n# Convert to km/h\\nvelocity_kmh = velocity.to(u.km / u.h)\\n\\n# Print result\\nprint(f'Velocity in km/h: {velocity_kmh.value:.2f} {velocity_kmh.unit}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new FITS file 'spectrum_new.fits' with a flux array [4.5, 5.6, 6.7] (in erg/s/cm^2) without any previous data integrity verification?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Define the new spectral flux data\nnew_flux = np.array([4.5, 5.6, 6.7])\n\nfits.writeto('spectrum_new.fits', new_flux, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set the time zone of my time object to UTC using Astropy's Time object?"
      },
      {
        "from": "assistant",
        "value": "start_time.tz = 'UTC'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a Time object for a specific date in the past, e.g. January 1, 2020?"
      },
      {
        "from": "assistant",
        "value": "start_time = Time('2020-01-01', format='iso', scale='utc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set the precision of my Time object to a certain number of decimal places?"
      },
      {
        "from": "assistant",
        "value": "start_time Precision = 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Successfully fetched coordinates for Jupiter using Astropy library"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import solar_system_ephemeris\nfrom astropy.coordinates import get_body, AltAz\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\nephemeris = solar_system_ephemeris.set('builtin')\n# Define observation time and location\ntime = '2024-01-15 12:00:00'\nobs_time = Time(time)\nlocation = EarthLocation(lat=40.7*u.deg, lon=-74.0*u.deg)\n# Get coordinates for Jupiter at observation time\ngc = get_body('jupiter', obs_time, location, ephemeris=ephemeris)\n# Print coordinates\nprint(gc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the position of Uranus in the sky at a specific time and location"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, AltAz\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\neclipse_time = '2024-07-16 11:00:00'\nobs_time = Time(eclipse_time)\nlocation = EarthLocation(lat=40.7*u.deg, lon=-74.0*u.deg)\n# Get coordinates for Uranus at observation time\nget_body('uranus', obs_time, location)\n# Convert to local horizontal coordinates (altitude/azimuth)\naltaz_frame = AltAz(obstime=obs_time, location=location)\ngc.transform_to(altaz_frame)\nprint('Altaz')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the position of Saturn in the sky at a specific time and location"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, AltAz\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\neclipse_time = '2024-07-16 11:00:00'\nobs_time = Time(eclipse_time)\nlocation = EarthLocation(lat=40.7*u.deg, lon=-74.0*u.deg)\n# Get coordinates for Saturn at observation time\ngc = get_body('saturn', obs_time, location)\n# Convert to local horizontal coordinates (altitude/azimuth)\naltaz_frame = AltAz(obstime=obs_time, location=location)\ngc.transform_to(altaz_frame)\nprint('Altaz')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to resample a list of star positions to estimate the uncertainty in the mean position?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bootstrap\nimport numpy as np\n\n# Original data\nra = np.array([1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9])\ndec = np.array([4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9])\n\n# Function to calculate mean position\ndef get_mean_position(x, y):\n    return np.mean(x), np.mean(y)\n\n# Combine data for bootstrapping\ndata = np.vstack([ra, dec])\n\n# Perform bootstrap with 1500 resamples\nbootresult = bootstrap(data, 1500, bootfunc=lambda x: get_mean_position(x[0], x[1]))\n\n# Calculate mean position\nmean_position = np.mean(bootresult, axis=1)\n\nprint(f'Mean position: ({mean_position[0]:.2f}, {mean_position[1]:.2f})')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to resample a list of star velocities to estimate the uncertainty in the mean velocity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bootstrap\nimport numpy as np\n\n# Original data\nvx = np.array([1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9])\nvy = np.array([4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9])\n\n# Function to calculate mean velocity\ndef get_mean_velocity(x, y):\n    return np.mean(x), np.mean(y)\n\n# Combine data for bootstrapping\ndata = np.vstack([vx, vy])\n\n# Perform bootstrap with 1500 resamples\nbootresult = bootstrap(data, 1500, bootfunc=lambda x: get_mean_velocity(x[0], x[1]))\n\n# Calculate mean velocity\nmean_velocity = np.mean(bootresult, axis=1)\n\nprint(f'Mean velocity: ({mean_velocity[0]:.2f}, {mean_velocity[1]:.2f})')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to resample a list of star positions to estimate the uncertainty in the standard deviation of the position?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bootstrap\nimport numpy as np\n\n# Original data\nra = np.array([1.2, 1.5, 1.8, 2.1, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9])\ndec = np.array([4.2, 4.5, 4.8, 5.1, 5.4, 5.7, 6.0, 6.3, 6.6, 6.9])\n\n# Function to calculate standard deviation\ndef get_std(x, y):\n    return np.std(x), np.std(y)\n\n# Combine data for bootstrapping\ndata = np.vstack([ra, dec])\n\n# Perform bootstrap with 1500 resamples\nbootresult = bootstrap(data, 1500, bootfunc=lambda x: get_std(x[0], x[1]))\n\n# Calculate standard deviation\nstd_position = np.std(bootresult, axis=1)\n\nprint(f'Standard deviation of position: ({std_position[0]:.2f}, {std_position[1]:.2f})')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a custom extinction parameter in my stellar model that has a physical constraint to always be positive and use magnitude units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Fittable1DModel\nfrom astropy import units as u\nclass CustomExtinctionModel(Fittable1DModel):\n    extinction = Parameter(default=1.0, unit=u.mag, bounds=(0, None),\n                         description='Extinction coefficient in magnitudes')\n    n_inputs = 1\n    n_outputs = 1\n    def evaluate(self, x, extinction):\n        return 10**(-0.4 * extinction)\n# Example usage with proper units\nextinction_model = CustomExtinctionModel(extinction=2.0 * u.mag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you please provide a code snippet that creates a Ring2D kernel with inner radius 15 pixels and width 3 pixels, and then uses this kernel to convolve an image?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy and matplotlib\nfrom astropy.convolution import Ring2DKernel\nimport matplotlib.pyplot as plt\nfrom astropy.io import fits\n\n# Load an image\nimage = fits.getdata('image.fits')\n\n# Create a Ring2D kernel\nkernel = Ring2DKernel(15, 3)\n\n# Convolve the image with the kernel\nconvolved_image = astropy.convolve(image, kernel, boundary='fill')\n\n# Display the original and convolved images\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\nax[0].imshow(image, cmap='gray')\nax[0].set_title('Original Image')\nax[1].imshow(convolved_image, cmap='gray')\nax[1].set_title('Convolved Image')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured quantity that combines spectral data with its appropriate units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import structured\n\n# Define a spectral unit (Hz)\nspectral_unit = u.Hz\n\n# Create a structured quantity for spectral data\ndata = structured.Quantity([[1e14, 2e14, 3e14], [4e14, 5e14, 6e14]], units=spectral_unit)\n\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm  analyzing a binary star's light curve and need to create a code snippet using Cosine1D to model its periodic brightness variations. How can I  setup a basic sinusoidal model and plot it against observational time?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling.models import Cosine1D\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create synthetic time data points (in days)\nt = np.linspace(0, 10, 100)  # 10 days of observations with 100 points\n\n# Set up the sinusoidal model\n# amplitude=0.5 (mag), frequency=2\u03c0/period where period=2 days\n# phase=0.5 (shifted by half a period)\ncosine_model = Cosine1D(amplitude=0.5, frequency=np.pi, phase=0.5)\n\n# Generate model brightness values\nbrightness = cosine_model(t)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(t, brightness, 'b-', label='Model')\nplt.xlabel('Time (days)')\nplt.ylabel('Brightness (mag)')\nplt.title('Variable Star Light Curve Model')\nplt.legend()\nplt.grid(True)\n\n# Invert y-axis (standard in astronomy where lower magnitudes are brighter)\nplt.gca().invert_yaxis()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a variable star's light curve and need to create a code snippet using Tangent1D to model its periodic brightness variations. How can I set up a basic sinusoidal model and plot it against observational time?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling.models import Tangent1D\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create synthetic time data points (in days)\nt = np.linspace(0, 10, 100)  # 10 days of observations with 100 points\n\n# Set up the sinusoidal model\n# amplitude=0.5 (mag), frequency=2\u03c0/period where period=2 days\n# phase=0.5 (shifted by half a period)\ntangent_model = Tangent1D(amplitude=0.5, frequency=np.pi, phase=0.5)\n\n# Generate model brightness values\nbrightness = tangent_model(t)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(t, brightness, 'b-', label='Model')\nplt.xlabel('Time (days)')\nplt.ylabel('Brightness (mag)')\nplt.title('Variable Star Light Curve Model')\nplt.legend()\nplt.grid(True)\n\n# Invert y-axis (standard in astronomy where lower magnitudes are brighter)\nplt.gca().invert_yaxis()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a variable star's light curve and need to create a code snippet using Linear1D to model its periodic brightness variations. How can I set up a basic sinusoidal model and plot it against observational time?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling.models import Linear1D\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create synthetic time data points (in days)\nt = np.linspace(0, 10, 100)  # 10 days of observations with 100 points\n\n# Set up the sinusoidal model\n# amplitude=0.5 (mag), frequency=2\u03c0/period where period=2 days\n# phase=0.5 (shifted by half a period)\nlinear_model = Linear1D(amplitude=0.5, slope=np.pi)\n\n# Generate model brightness values\nbrightness = linear_model(t)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(t, brightness, 'b-', label='Model')\nplt.xlabel('Time (days)')\nplt.ylabel('Brightness (mag)')\nplt.title('Variable Star Light Curve Model')\nplt.legend()\nplt.grid(True)\n\n# Invert y-axis (standard in astronomy where lower magnitudes are brighter)\nplt.gca().invert_yaxis()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to measure the distance to a star using its apparent magnitude and a parallax angle."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5, ICRS\nfrom astropy.time import Time\nimport math\ncurrent_pos = SkyCoord(ra='12h32m25.0s', dec='+01d17m40s', frame=ICRS)\nparallax = 0.1 arcsec\ndistance = 1 / parallax\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Galactic coordinate object with position l=45.6 degrees and b=21.9 degrees and proper motion pm_l_cosb = 10.2 mas/yr and pm_b = 5.1 mas/yr, and radial_velocity = 50 km/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Galactic\nfrom astropy import units as u\n\nstar_position = Galactic(l=45.6 * u.deg, b=21.9 * u.deg, pm_l_cosb=10.2 * u.mas/u.yr, pm_b=5.1 * u.mas/u.yr, radial_velocity=50 * u.km/u.s)\nprint(star_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to check if my pulsar timing data follows a Gaussian distribution. How can I use the Kuiper test to check this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import kuiper from scipy.stats import norm # Sample pulsar timing data (in seconds) timing_data = np.random.normal(0, 1, 1000) # Define CDF function for Gaussian distribution def gaussian_cdf(x): return norm.cdf(x, loc=0, scale=1) # Perform one-sample Kuiper test against Gaussian distribution stat, p_value = kuiper(timing_data, cdf=gaussian_cdf) print(f'Kuiper test statistic: {stat:.4f}') print(f'P-value: {p_value:.4f}') "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the biweight midvariance of a dataset with a large number of outliers. How can I adjust the biweight estimator to get a more robust result?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\n\ndef biweight_midvariance(data, c=9.0, M=None, axis=None, modify_sample_size=False, ignore_nan=True):\n    return stats.biweight_midvariance(data, c=c, M=M, axis=axis, modify_sample_size=modify_sample_size, ignore_nan=ignore_nan)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack multiple tables with same column names using the dstack function from astropy.table?"
      },
      {
        "from": "assistant",
        "value": "You can use the dstack function from astropy.table to stack multiple tables with the same column names."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use dstack to stack tables with different column names?"
      },
      {
        "from": "assistant",
        "value": "No, the dstack function from astropy.table requires that the tables have the same column names."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default join type for the dstack function?"
      },
      {
        "from": "assistant",
        "value": "The default join type for the dstack function is 'outer', which means that the output will have the union of all columns."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Implement a Kuiper test to compare the ages of Globular clusters in galaxy C and galaxy D."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\ngalaxy_c_ages = np.array([14.5, 15.2, 16.1, 17.4])\ngalaxy_d_ages = np.array([19.1, 19.9, 20.5, 21.2])\n\ntpstatistic, pvalue = kuiper_two(galaxy_c_ages, galaxy_d_ages)\n\nprint(f\"Kuiper test statistic: {statistic:.3f}\")\nprint(f\"P-value: {pvalue:.3f}\")\nprint(f\"Distributions are {\\\"different\\\" if pvalue < 0.05 else \\\"not significantly different\\\"} at 95% confidence level\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my analysis of astronomical data, I want to create a Moffat1D model with a fixed amplitude and a variable gamma. Can you show me an example of how to do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\n# Create a Moffat1D model with a fixed amplitude and a variable gamma\nmoffat_1d = models.Moffat1D(amplitude=1, x_0=0, gamma=2, alpha=4, fixed={'amplitude': True, 'x_0': True, 'alpha': True})\n\n# Plot the model\nx = np.linspace(-5, 5, 400)\nx1 = x1 = moffat_1d(x)\nplt.plot(x, x1)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with astrophysical data and want to compare the goodness of fit between Moffat1D and Gaussian1D models. Can you demonstrate how to create and plot both models on the same figure?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\n# Create a Moffat1D model with random parameters\nmoffat_1d = models.Moffat1D(amplitude=2, x_0=3, gamma=1, alpha=2)\n\n# Create a Gaussian1D model with random parameters\ngaussian_1d = models.Gaussian1D(amplitude=1, mean=0, stddev=2)\n\n# Fit both models to the data\nx = np.linspace(-5, 5, 400)\nfor model in [moffat_1d, gaussian_1d]:\n    y = model(x)\n    plt.plot(x, y, label=model.model_name)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my research, I need to create a Moffat1D model with tied parameters. Can you show me an example of how to do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\ntied_alpha_gamma = models.Moffat1D(amplitude=1, x_0=0, gamma=2, alpha=4, tied={'gamma': lambda self: self.alpha / 2})\n\ngamma_alpha = tied_alpha_gamma(x)\nplt.plot(x, gamma_alpha)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between the bias-corrected jackknife estimate and the jackknife standard error?"
      },
      {
        "from": "assistant",
        "value": "The bias-corrected jackknife estimate is a corrected estimate of the statistic, taking into account the bias introduced by the jackknife resampling. The jackknife standard error is a measure of the variability of the jackknife estimate, indicating how much the estimate might change if the data were sampled differently."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of using multiple jackknife resamples?"
      },
      {
        "from": "assistant",
        "value": "Using multiple jackknife resamples allows you to obtain a more robust estimate of the statistic by averaging over multiple resamples. This can help to reduce the effect of outliers or other anomalous data points and provide a more reliable estimate."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the confidence level affect the width of the confidence interval?"
      },
      {
        "from": "assistant",
        "value": "The confidence level affects the width of the confidence interval by determining the number of standard errors that the interval covers. A higher confidence level requires a wider interval to capture a larger portion of the data, while a lower confidence level requires a narrower interval to capture a smaller portion of the data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a histogram of the counts of pixels in an image, how can I use Astropy to normalize it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import Quantity, hist"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me a simple example of using astropy to normalize two different images with different data types?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import imageNormalize, AsymmetricPercentileInterval, MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize an image with a non-linear transformation using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import imageNormalize, PowerStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectral line profile in my data. How can I create a composite model of a Box1D and a Gaussian1D to fit the O VI emission line?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create wavelength array around O VI\nwavelength = np.linspace(1030, 1040, 200)\n\n# Create Box1D model\n# Width parameter controls the width of the box\nbox = models.Box1D(width=5)\n\n# Create Gaussian model\n# Using typical O VI emission parameters\ngauss = models.Gaussian1D(amplitude=1.5, mean=1035, stddev=2.0)\n\n# Create composite model by adding the components\ncomposite_model = box + gauss\n\n# Generate synthetic data (for demonstration)\n# Add some noise to simulate real data\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.1, wavelength.shape)\nsynthetic_data = composite_model(wavelength) + noise\n\n# Initialize fitter\nfit = fitting.LevMarLSQFitter()\n\n# Create initial composite model for fitting\ninitial_model = models.Box1D(width=3) + models.Gaussian1D(amplitude=1.0, mean=1035, stddev=2.5)\n\n# Fit the model to the data\nfitted_model = fit(initial_model, wavelength, synthetic_data)\n\n# The fitted_model now contains the best-fit parameters\n# You can access individual components using fitted_model[0] for Box\n# and fitted_model[1] for Gaussian"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectral line profile in my data. How can I create a composite model of a Moffat1D and a Trapezoid1D to fit the H-beta emission line?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create wavelength array around H-beta\nwavelength = np.linspace(4860, 4870, 200)\n\n# Create Moffat1D model\n# Gamma parameter controls the shape of the Moffat profile\nmoffat = models.Moffat1D(amplitude=1.5, alpha=2.0, x_0=4865, beta=4.0)\n\n# Create Trapezoid model\n# Slope parameter controls the slant of trapezoid sides\ntrap = models.Trapezoid1D(amplitude=2.0, width=10, x_0=4865, slope=0.1)\n\n# Create composite model by adding the components\ncomposite_model = moffat + trap\n\n# Generate synthetic data (for demonstration)\n# Add some noise to simulate real data\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.1, wavelength.shape)\nsynthetic_data = composite_model(wavelength) + noise\n\n# Initialize fitter\nfit = fitting.LevMarLSQFitter()\n\n# Create initial composite model for fitting\ninitial_model = models.Moffat1D(amplitude=1.0, alpha=1.5, x_0=4865, beta=3.0) + models.Trapezoid1D(amplitude=1.5, width=8, x_0=4865, slope=0.05)\n\n# Fit the model to the data\nfitted_model = fit(initial_model, wavelength, synthetic_data)\n\n# The fitted_model now contains the best-fit parameters\n# You can access individual components using fitted_model[0] for Moffat\n# and fitted_model[1] for Trapezoid"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectral line profile in my data. How can I create a composite model of a Gaussian1D and a Box1D to fit the Ly-alpha emission line?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create wavelength array around Ly-alpha\nwavelength = np.linspace(1210, 1220, 200)\n\n# Create Gaussian model\n# Using typical Ly-alpha emission parameters\ngauss = models.Gaussian1D(amplitude=1.5, mean=1215, stddev=2.0)\n\n# Create Box1D model\n# Width parameter controls the width of the box\nbox = models.Box1D(width=5)\n\n# Create composite model by adding the components\ncomposite_model = gauss + box\n\n# Generate synthetic data (for demonstration)\n# Add some noise to simulate real data\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.1, wavelength.shape)\nsynthetic_data = composite_model(wavelength) + noise\n\n# Initialize fitter\nfit = fitting.LevMarLSQFitter()\n\n# Create initial composite model for fitting\ninitial_model = models.Gaussian1D(amplitude=1.0, mean=1215, stddev=2.5) + models.Box1D(width=3)\n\n# Fit the model to the data\nfitted_model = fit(initial_model, wavelength, synthetic_data)\n\n# The fitted_model now contains the best-fit parameters\n# You can access individual components using fitted_model[0] for Gaussian\n# and fitted_model[1] for Box"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a plot of the blackbody radiation curve for a star at a temperature of 6000 K?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=6000*u.K); bb(np.arange(100, 110000) * u.nm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy to read and write FITS files?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.open('image.fits')\nfits.write('image.fits', data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the difference between astropy's Time and TimeDelta classes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.time import TimeDelta\nTime()\nTimeDelta()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convolve two 2D arrays in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve\ndata1 = np.random.random((10, 10))\ndata2 = np.random.random((10, 10))\nconvolve(data1, data2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of temperatures with some outliers. Show me how to clean this data using sigma_clip with a 2-sigma threshold, using the median as the center function and removing the outliers completely (not masking them)."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\nimport numpy as np\n\ncleaned_data = sigma_clip(data, sigma=2, maxiters=5, cenfunc='median', masked=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a time interval from seconds to hours?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Example time interval in seconds\nt = 3600  # 1 hour in seconds\n\n# Convert seconds to hours\nt_hours = t / u.s\nprint(f\"Time interval: \u2119 = {t_hours}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the frequency 100 MHz?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Example frequency in MHz\nf = 100 * u.MHz\n\n# The unit of frequency is Hz\nprint(f\"Frequency: {f} = {f.to(u.Hz)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance from meters to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nd = 1000 * u.m  # 1000 meters\n\n# Convert meters to kilometers\nprint(f\"Distance: {d} = {d.to(u.km)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the signal-to-noise ratio for my galaxy observations using the CCD camera?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(t=100.0, source_eps=1000.0, sky_eps=50.0, dark_eps=10.0, rd=5.0, npix=1000.0, gain=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert a frequency in GHz to a wavelength in meters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Create sample frequency in GHz\nfreq_gzh = 100 * u.GHz  # Example frequency\n\n# Convert frequency to wavelength using c = lambda * freq relationship\nwavelength_m = c.light / freq_gzh\n\nprint(f\"Frequency: {freq_gzh}\")\nprint(f\"Wavelength: {wavelength_m:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a wavelength in millimeters to an energy in Joules?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import h, c\n\n# Create sample wavelength in millimeters\nwavelength_mm = 2000 * u.mm  # Example wavelength\n\n# Convert wavelength to energy using E = hc / lambda relationship\nenergy_j = h * c / wavelength_mm\n\nprint(f\"Wavelength: {wavelength_mm}\")\nprint(f\"Energy: {energy_j:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert a wave number in cm^-1 to a frequency in kHz?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Create sample wave number in cm^-1\nwave_number_cm_inv = 1000 * u.cm**-1  # Example wave number\n\n# Convert wave number to frequency using freq = c * wave number / (2 * pi) relationship\nfreq_khz = (c.light * wave_number_cm_inv) / (2 * u.pi)\n\nprint(f\"Wave number: {wave_number_cm_inv}\")\nprint(f\"Frequency: {freq_khz:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a transit signal with a depth of 0.95 and duration of 1.8 in my light curve data. How can I use Box1D to model this transit and fit it to my observations?"
      },
      {
        "from": "assistant",
        "value": "# Generate sample data (replace with your actual data)\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 20, 2000)  # Time array\nflux = np.ones_like(time)  # Normalized flux\n# Simulate a transit between t=9 and t=11 with depth of 0.95 and duration of 1.8\nflux[(time > 9) & (time < 11)] = 0.05\n# Add some noise\nnp.random.seed(42)\nflux += np.random.normal(0, 0.001, len(time))\n\n# Create Box1D model\nbox_model = models.Box1D(amplitude=-0.05,  # Transit depth\n                        x_0=10.0,           # Center of transit\n                        width=1.8)         # Transit duration\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# 1 - flux because Box1D models positive amplitude\nfitted_model = fitter(box_model, time, 1 - flux)\n\n# Print fitted parameters\nprint(f\"Transit depth: {-fitted_model.amplitude.value:.4f}\")\nprint(f\"Transit center: {fitted_model.x_0.value:.4f}\")\nprint(f\"Transit duration: {fitted_model.width.value:.4f}\")\n\n# Model values for plotting\nfitted_flux = 1 - fitted_model(time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I handle data with a non-standard unit string in my WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport numpy as np\n\n# Create a sample WCS object\nwcs = WCS()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the implications of creating a WCS object with a different number of dimensions than 2 when it contains a distortion lookup table or SIP distortion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport numpy as np\n\n# Create a sample WCS object with 3 dimensions\nwcs = WCS(naxis=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my investigation on binary star systems, I need to combine the celestial coordinates of two stars. How can I use Astropy to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=1*u.degree, dec=2*u.degree)\nskycoord2 = SkyCoord(ra=2*u.degree, dec=3*u.degree)\nc.concatenate(skycoord2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In my exoplanet transit data, I need to normalize the light curve by scaling it with a factor of 1.02. How can I implement this using astropy's Scale model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 10, 100)  # Time array\nflux = np.ones(100) * 0.8  # Sample flux data\nscale_model = models.Scale(factor=1.02)\nnormalized_flux = scale_model(flux)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3x3 tophat filter kernel with linear interpolation"
      },
      {
        "from": "assistant",
        "value": "tophat_2D_kernel = astropy.convolution.Tophat2DKernel(3, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 5x5 tophat filter kernel with oversampling"
      },
      {
        "from": "assistant",
        "value": "tophat_2D_kernel = astropy.convolution.Tophat2DKernel(5, factor=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2x2 tophat filter kernel with integration"
      },
      {
        "from": "assistant",
        "value": "tophat_2D_kernel = astropy.convolution.Tophat2DKernel(2, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a MaskedColumn named 'temperature' where values above 500.0 are masked as invalid, with a fill value of -999.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\ntemp_data = [400.0, 450.0, 520.0, 480.0, 550.0]\ntemperature = MaskedColumn(data=temp_data, mask=[m <= 500.0 for m in temp_data], fill_value=-999.0, name='temperature')\nprint(temperature.filled())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you model a edge-on circumstellar ring with specific inner and outer radii?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D\nimport matplotlib.pyplot as plt\n\n# Set up the coordinate grid (in astronomical units)\nx = np.linspace(-100, 100, 200)  # 200x200 pixel grid, \u00b1100 AU\ny = x.copy()\nx_grid, y_grid = np.meshgrid(x, y)\n\n# Create a ring model\n# Parameters: amplitude=1, x_0=0, y_0=0, r_in=30AU, r_out=50AU\nring_model = Ring2D(amplitude=1, x_0=0, y_0=0, r_in=30, r_out=50)\nring_image = ring_model(x_grid, y_grid)\n\n# Visualize the ring\nplt.figure(figsize=(8, 8))\nplt.imshow(ring_image, origin='lower', extent=[-100, 100, -100, 100])\nplt.colorbar(label='Intensity')\nplt.xlabel('X [AU]')\nplt.ylabel('Y [AU]')\nplt.title('Edge-on Debris Disk Model')\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a ring model with a width of 10 AU and an outer radius of 60 AU?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D\ncircle = Ring2D(amplitude=1, width=10, r_out=60)\ncircle"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a ring model with an inner radius of 20 AU and a width of 15 AU?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D\ncircle = Ring2D(1, r_in=20, width=15)\ncircle"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the astropy.units module to convert a distance from kilometers to parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(1*u.km/u.parsec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to analyze a dataset of galaxy spectra. I want to remove any data points that are more than 2 standard deviations away from the mean. Can you show me an example of how to do this using the astropy.stats.sigma_clip function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clip\n\n# Generate some random data\ndata = np.random.normal(0, 1, 1000)\n\n# Clip data to 2 sigma from the mean\nclip_data = sigma_clip(data, sigma=2, maxiters=5)\n\nprint(clip_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a noisy 2D image of a planet with dimensions 512x512 pixels. How can I create and apply a Gaussian smoothing kernel with x and y standard deviations of 5 pixels to reduce the noise while preserving the planetary features?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve\nimport numpy as np\ndef apply_gaussian_kernel(image):\n    kernel = Gaussian2DKernel(x_stddev=5, y_stddev=5)\n    smoothed_image = convolve(image, kernel, boundary='extend')\n    return smoothed_image\n# Example usage\nimage = np.random.normal(0, 1, (512, 512))\nsmoothed_image = apply_gaussian_kernel(image)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Julian Date for December 31, 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeJD\njd = TimeJD('2022-12-31')\njd.jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time elapsed in minutes between two time objects in JD format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeJD\nfrom datetime import datetime\njd1 = TimeJD('2022-01-01')\njd2 = TimeJD('2022-01-02')\nt1 = TimeJD(jd1, format='jd').datetime\nnt2 = TimeJD(jd2, format='jd').datetime\ntotal_minutes = abs((nt2 - nt1).total_seconds() / 60)\ntotal_minutes"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Julian Date for March 15, 2023?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeJD\nt = TimeJD('2023-03-15')\nt.jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to calculate the position of the Sun at 12:00 UTC on 2022-07-01 in GeocentricTrueEcliptic coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Sun, GeocentricTrueEcliptic\nfrom astropy.time import Time\n\n# Define the time\nobs_time = Time('2022-07-01 12:00:00', scale='utc')\n\n# Create GeocentricTrueEcliptic coordinates\nsun_coords = GeocentricTrueEcliptic.from_solarisVisible(name='Sun', time=obs_time)\n\n# Print results\nprint(sun_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying black hole mergers and want to model the merger of two black holes. How can I create a model for the merger waveform?"
      },
      {
        "from": "assistant",
        "value": "import lal\nfrom lal import ParameterSequence"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on gravitational wave astronomy and need to generate a signal with a specific frequency and amplitude. How can I use the astropy.modeling function to create a signal with a sinusoidal waveform?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, Fittting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the properties of neutron stars and want to model the mass-radius relationship. How can I use the astropy.modeling function to create a model for the mass-radius relationship?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittting\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 3x3 2D box kernel with linear_interp discretization mode?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(3, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default mode for the Box2DKernel and how can I create a 5x5 2D box kernel with this mode?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(5, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 7x7 2D box kernel with oversample discretization mode and a factor of 5?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(7, mode='oversample', factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Update the EXPTIME keyword in the FITS header to 10.5 minutes."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwith fits.open('spectrum.fits', mode='update') as hdul:\n    header = hdul[0].header\n    header.set('EXPTIME', 10.5, 'Exposure time')\n    hdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add a new(keyword 'TELESCOPVERSION' with value 'v1.0' and comment 'Telescope software version' after the 'TELESCOP' keyword in 'spectrum.fits'."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwith fits.open('spectrum.fits', mode='update') as hdul:\n    header = hdul[0].header\n    header.set('TELESCOPVERSION', 'v1.0', 'Telescope software version', after='TELESCOP')\n    hdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Update the DATE-OBS keyword in the FITS header to '2022-01-01'."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwith fits.open('spectrum.fits', mode='update') as hdul:\n    header = hdul[0].header\n    header.set('DATE-OBS', '2022-01-01')\n    hdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a color bar to my scatter plot?"
      },
      {
        "from": "assistant",
        "value": "from matplotlib import pyplot as plt\nplt.scatter(x, y)\ncbar = plt.colorbar()\ncbar.set_label('Color Code')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I change the font size of my axis labels?"
      },
      {
        "from": "assistant",
        "value": "plt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a subplot with a shared x-axis?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\ntaxes = plt.subplot(1, 2, 1, sharex=True)\ntaxes.plot(x, y)\nplt.subplot(1, 2, 2)\nplt.bar(x, z)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a time using the 'date_hm' subformat in TimeISO?"
      },
      {
        "from": "assistant",
        "value": "First make sure astropy is installed. You may need to run: pip install astropy. From astropy.time import Time. Create a Time object using the ISO format."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the TimeISO with 'date' subformat?"
      },
      {
        "from": "assistant",
        "value": "First make sure astropy is installed. You may need to run: pip install astropy. From astropy.time import Time. Create a Time object using the ISO format."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a time using the 'date_hms' subformat in TimeISO?"
      },
      {
        "from": "assistant",
        "value": "First make sure astropy is installed. You may need to run: pip install astropy. From astropy.time import Time. Create a Time object using the ISO format."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the proper motion of a star in galactic coordinates, given its equatorial coordinates and proper motion measurements from Gaia?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Distance\nfrom astropy import units as u\n\n# Example Gaia data for a star\n# RA, Dec, parallax, pm_ra, pm_dec\nra = 80.8942 * u.degree  # Right Ascension\ndec = -69.7561 * u.degree  # Declination\nparallax = 0.123 * u.mas  # Parallax from Gaia\npm_ra = 25.3 * u.mas/u.yr  # Proper motion in RA\npm_dec = -12.8 * u.mas/u.yr  # Proper motion in Dec\n\n# Convert to galactic coordinates\ngal = raSkyCoord(ra=ra, dec=dec, distance=Distance(parallax=parallax), pm_ra_cosdec=pm_ra, pm_dec=pm_dec, frame='icrs').transform_to('galactic')\ngal_pm_lon = gal.pm_lon_coslat.to(u.mas/u.yr) # Proper motion in longitude\ngal_pm_lat = gal.pm_lat.to(u.mas/u.yr) # Proper motion in latitude\n\nprint(f\"Galactic proper motion:\\nPM longitude * cos(lat): {gal_pm_lon:.2f}\\nPM latitude: {gal_pm_lat:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between domain and window in astropy modeling?"
      },
      {
        "from": "assistant",
        "value": "domain is the internal variable where as window is the input value given to that internal variable, two can be same or different"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use astropy's Polynomial2D to model a 2D data?"
      },
      {
        "from": "assistant",
        "value": "You can use the `astropy.modeling.models.Polynomial2D` class to represent a 2D polynomial model. You can then use the `fit` method to fit the model to your data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the significance of `x_domain` and `y_domain` in `Polynomial2D`?"
      },
      {
        "from": "assistant",
        "value": "These parameters specify the domain of the x and y independent variables, which are used to define the range of values for the polynomial model."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Represent the position of a star in spherical coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation import astropy.units as u\n\n# Create spherical representation for the star\nstar = SphericalRepresentation(\n    lon=123*u.deg,  # longitude in degrees\n    lat=67*u.deg,  # latitude in degrees\n    distance=10*u.pc  # distance in parsecs\n)\n\n# Print the representation\nprint(star)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please perform a sine wave fit to the following data: [(0, 6.1), (1.2, 5.5), (2.3, 4.8)], with initial guess amplitude=0.8, frequency=0.4."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0.0, 1.2, 2.3])\nmagnitude = np.array([6.1, 5.5, 4.8])\nsine_init = models.Sine1D(amplitude=0.8, frequency=0.4)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(sine_init, time, magnitude)\nprint(fitted_model.amplitude.value)\nprint(fitted_model.frequency.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a sine wave to the data: [(0, 7.2), (2.4, 6.5), (4.8, 5.8)], with initial guess amplitude=1.0, frequency=0.2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0.0, 2.4, 4.8])\nmagnitude = np.array([7.2, 6.5, 5.8])\nsine_init = models.Sine1D(amplitude=1.0, frequency=0.2)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(sine_init, time, magnitude)\nprint(fitted_model.amplitude.value)\nprint(fitted_model.frequency.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please fit a sine wave to the data: [(0, 9.1), (1.4, 7.3), (2.7, 5.9)], with initial guess amplitude=0.9, frequency=0.3."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0.0, 1.4, 2.7])\nmagnitude = np.array([9.1, 7.3, 5.9])\nsine_init = models.Sine1D(amplitude=0.9, frequency=0.3)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(sine_init, time, magnitude)\nprint(fitted_model.amplitude.value)\nprint(fitted_model.frequency.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a sine wave to the data: [(0, 8.5), (1.6, 6.8), (3.2, 4.9)], with initial guess amplitude=0.6, frequency=0.1."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0.0, 1.6, 3.2])\nmagnitude = np.array([8.5, 6.8, 4.9])\nsine_init = models.Sine1D(amplitude=0.6, frequency=0.1)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(sine_init, time, magnitude)\nprint(fitted_model.amplitude.value)\nprint(fitted_model.frequency.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform a sine wave fit to the data: [(0, 10.2), (2.5, 7.5), (5.0, 5.2)], with initial guess amplitude=1.2, frequency=0.8."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0.0, 2.5, 5.0])\nmagnitude = np.array([10.2, 7.5, 5.2])\nsine_init = models.Sine1D(amplitude=1.2, frequency=0.8)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(sine_init, time, magnitude)\nprint(fitted_model.amplitude.value)\nprint(fitted_model.frequency.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a parameter for mission elapsed time (MET) that's tied to another parameter 'time_of_flight' through the formula MET = time_of_flight + 100."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model\nimport numpy as np\n\nclass MissionModel(Model):\n    # Define main parameters\n    time_of_flight = Parameter(name='time_of_flight', default=100, bounds=(0, 100))\n    mission_elapsed_time = Parameter(name='MET', default=200, tied=True)\n\n    @staticmethod\n    def _tied(model):\n        \"\"\"Calculate mission elapsed time from time of flight\n        Using the relation: MET = time_of_flight + 100\n        \"\"\"\n        return model.time_of_flight + 100\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Tie the mission elapsed time parameter to the function\n        self.mission_elapsed_time.tied = self._tied\n\n    def evaluate(self, time_of_flight):\n        # Placeholder for actual mission model evaluation\n        pass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a parameter for altitude that's tied to another parameter 'distance' through the formula altitude = distance - 1000."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model\nclass AltitudeModel(Model):\n    # Define main parameters\n    distance = Parameter(name='distance', default=1500, bounds=(0, 2000))\n    altitude = Parameter(name='altitude', default=500, tied=True)\n\n    @staticmethod\n    def _tied(model):\n        \"\"\"Calculate altitude from distance\n        Using the relation: altitude = distance - 1000\n        \"\"\"\n        return model.distance - 1000\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Tie the altitude parameter to the function\n        self.altitude.tied = self._tied\n\n    def evaluate(self, distance):\n        # Placeholder for actual altitude model evaluation\n        pass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a parameter for velocity that's tied to another parameter 'acceleration' through the formula velocity = acceleration * time."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model\nclass VelocityModel(Model):\n    # Define main parameters\n    acceleration = Parameter(name='acceleration', default=2, bounds=(0, 10))\n    time = Parameter(name='time', default=5, bounds=(0, 10))\n    velocity = Parameter(name='velocity', default=10, tied=True)\n\n    @staticmethod\n    def _tied(model, time):\n        \"\"\"Calculate velocity from acceleration and time\n        Using the relation: velocity = acceleration * time\n        \"\"\"\n        return model.acceleration * time\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Tie the velocity parameter to the function\n        self.velocity.tied = self._tied\n\n    def evaluate(self, acceleration, time):\n        # Placeholder for actual velocity model evaluation\n        pass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the Earth relative to the solar system barycenter on January 1, 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric, solar_system_ephemeris\ne = get_body_barycentric('earth', Time('2022-01-01'))\nprint(e)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the Moon relative to the Earth on October 1, 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric, get_body, solar_system_ephemeris\nd = get_body_barycentric('moon', Time('2022-10-01'))\ne = get_body_barycentric('earth', Time('2022-10-01'))\nprint(d - e)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Is there a way to add a new column to a Table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "You can add a new column using the ``add_column`` method."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I sort a Table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "You can sort a Table using the ``sort`` method."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to merge two Tables in Astropy?"
      },
      {
        "from": "assistant",
        "value": "You can merge two Tables using the ``join`` method."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Polynomial2D model of degree 3 with x_domain=(-40,40) and y_domain=(-40,40) arcseconds, and tie c11 coefficient to be twice the value of c02?"
      },
      {
        "from": "assistant",
        "value": "...\nmodel.c1_1.tied = tie_c11\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a Polynomial2D model of degree 2 with x_domain=(-20,20) and y_domain=(-20,20) arcseconds, and set the c0_0 coefficient to 0.5?"
      },
      {
        "from": "assistant",
        "value": "...\nmodel.c0_0 = 0.5\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Polynomial2D model of degree 4 with x_domain=(-50,50) and y_domain=(-50,50) arcseconds, and fix the c1_2 coefficient to a value of 0.1?"
      },
      {
        "from": "assistant",
        "value": "...\nmodel.c1_2.fixed = True\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the CGS unit for magnetic field strength?"
      },
      {
        "from": "assistant",
        "value": "Oe"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the CGS unit for magnetic field?"
      },
      {
        "from": "assistant",
        "value": "G"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the CGS unit for magnetic flux?"
      },
      {
        "from": "assistant",
        "value": "Mx"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the time difference between two dates. How can I do this using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\ntd = TimeDelta(1234567890.0, format='sec', scale='tt')\nprint(td)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the `Tophat2DKernel` function to create a 2D kernel with a certain radius?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\r\n\r\ntophat_kernel = Tophat2DKernel(radius=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to specify the `mode` parameter when creating a `Tophat2DKernel`?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\r\n\rntophat_kernel = Tophat2DKernel(radius=20, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use the `factor` parameter to control the oversampling when creating a `Tophat2DKernel`?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\r\n\rntophat_kernel = Tophat2DKernel(radius=20, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use ZScaleInterval with different values of n_samples?"
      },
      {
        "from": "assistant",
        "value": "ZScaleInterval(n_samples=500)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the `default` parameter in `TableAttribute`?"
      },
      {
        "from": "assistant",
        "value": "The `default` parameter specifies the default value for the attribute when it is not provided at object creation."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a Gaussian and Lorentzian profile?"
      },
      {
        "from": "assistant",
        "value": "A Gaussian profile is a probability distribution that is symmetric about the mean, while a Lorentzian profile is a probability distribution that is asymmetric about the mean."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the mean of a Gaussian distribution?"
      },
      {
        "from": "assistant",
        "value": "You can use the formula: mean = \u03bc + \u03c3^2 / 2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the full width at half maximum (FWHM) of a Lorentzian profile?"
      },
      {
        "from": "assistant",
        "value": "The FWHM of a Lorentzian profile is 2*\u0394"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the line broadening of a star spectrum. The observed line appears to be a Lorentzian with amplitude 1.2e-13 erg/s/cm\u00b2/\u00c5 centered at 6563 \u00c5 (H-alpha) with FWHM of 20 \u00c5. Can you show me how to generate this profile and normalize it to unit area using Lorentz1D?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Lorentz1D\nfrom scipy.integrate import simpson\n\n# Create wavelength array centered around H-alpha (6563 \u00c5)\n# Span of \u00b160 \u00c5 with 1000 points for smooth profile\nwavelength = np.linspace(6503, 6623, 1000)\n\n# Create Lorentzian profile\n# FWHM = gamma * 2 in Lorentz1D\nlorentz = Lorentz1D(amplitude=1.2e-13, x_0=6563, fwhm=20)\nprofile = lorentz(wavelength)\n\n# Normalize to unit area using numerical integration\n# Correct usage of simpson integration with y=profile and x=wavelength\narea = simpson(y=profile, x=wavelength)\nnormalized_profile = profile / area\n\n# Create new normalized Lorentzian model\nnormalized_lorentz = Lorentz1D(\n    amplitude=(1.2e-13/area), \n    x_0=6563, \n    fwhm=20\n)\n\n# Verify the area is now 1.0 (within numerical precision)\nverification = simpson(y=normalized_lorentz(wavelength), x=wavelength)\nprint(f\"Integrated area after normalization: {verification:.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a linear function to my data, how do I set up a Linear1D model with an initial slope of 2.0 and intercept of -1.0"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\n\n# Create a Linear1D model with initial slope=2.0 and intercept=-1.0\nlinear_model = models.Linear1D(slope=2.0, intercept=-1.0)\n\n# Print the model coefficients\nprint('Slope:', linear_model.slope)\nprint('Intercept:', linear_model.intercept)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair to convert a celestial frame to WCS object using the astropy.coordinates.EarthLocation class"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import EarthLocation\n\n# Create a new EarthLocation object\nearth_location = EarthLocation.of_site('Greenwich')\n\n# Convert the EarthLocation object to a WCS object\ncws = celestial_frame_to_wcs(earth_location)\n\n# Print the WCS object\ncorrected_ws=self.cws.to_header()\nprint(corrected_ws)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create another instruction-response pair to convert a celestial frame to WCS object using the astropy.coordinates.Galactic class"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Galactic\n\n# Create a new Galactic object\ngalactic_frame = Galactic()\n\n# Convert the Galactic object to a WCS object\ncws = celestial_frame_to_wcs(galactic_frame)\n\n# Print the WCS object\ncorrected_ws=self.cws.to_header()\nprint(corrected_ws)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair to convert a celestial frame to WCS object using the astropy.coordinates.CKDPLLONLAT class"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import CKDPLLONLAT\n\n# Create a new CKDPLLONLAT object\nckdllonlat = CKDPLLONLAT()\n\n# Convert the CKDPLLONLAT object to a WCS object\ncws = celestial_frame_to_wcs(ckdllonlat)\n\n# Print the WCS object\ncorrected_ws=self.cws.to_header()\nprint(corrected_ws)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a FITS header card with keyword 'TELESCOP' set to 'Hubble' to indicate the telescope used for observation."
      },
      {
        "from": "assistant",
        "value": "card = fits.Card('TELESCOP', 'Hubble', 'Telescope used for observation')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a FITS header card with keyword 'INSTRUM' set to 'Space Telescope Imaging Spectrograph' to indicate the instrument used for observation."
      },
      {
        "from": "assistant",
        "value": "card = fits.Card('INSTRUM', 'Space Telescope Imaging Spectrograph', 'Instrument used for observation')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a FITS header card with keyword 'OBSMODE' set to 'Target' to indicate the observation mode."
      },
      {
        "from": "assistant",
        "value": "card = fits.Card('OBSMODE', 'Target', 'Observation mode')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of the fluxes of 500 stars in the Andromeda galaxy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import scott_bin_width import numpy.random as npr\n# Generate sample flux data np.random.seed(42) fluxes = npr.normal(loc=1, scale=0.1, size=500)\n# Calculate optimal bin width using Scott's rule optimal_width = scott_bin_width(fluxes)\nprint(f\"Optimal bin width: {optimal_width:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the optimal bin width for a histogram of the temperatures of 1000 stars in the Sun's neighborhood?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import scott_bin_width import numpy.random as npr\n# Generate sample temperature data npr.seed(42) temperatures = npr.normal(loc=5778, scale=100, size=1000)\n# Calculate optimal bin width using Scott's rule optimal_width = scott_bin_width(temperatures)\nprint(f\"Optimal bin width: {optimal_width:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of the luminosities of 2000 stars in the Milky Way?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import scott_bin_width import numpy.random as npr\n# Generate sample luminosity data npr.seed(42) luminosities = npr.normal(loc=1, scale=0.5, size=2000)\n# Calculate optimal bin width using Scott's rule optimal_width = scott_bin_width(luminosities)\nprint(f\"Optimal bin width: {optimal_width:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to convert a Galactic coordinate frame to a WCS object in equatorial coordinates with equinox J1950."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Galactic\n\nframe = Galactic()\nwcs = celestial_frame_to_wcs(frame, projection='equatorial J1950')\nwcs.to_header()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a ecliptic coordinate frame to a WCS object with a Cartesian projection?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Ecliptic\n\nframe = Ecliptic()\nwcs = celestial_frame_to_wcs(frame, projection='cartesian')\nwcs.to_header()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to convert an FK5 coordinate frame to a WCS object with a spherical projection and equinox J2000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import FK5\n\nframe = FK5(equinox='J2000')\nwcs = celestial_frame_to_wcs(frame, projection='spherical')\nwcs.to_header()}]} }]; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to convert an ICRS coordinate frame to a WCS object with an equatorial projection and equinox J2000."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import ICRS\n\nframe = ICRS()\nwcs = celestial_frame_to_wcs(frame, projection='equatorial J2000')\nwcs.to_header()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to use mad_std for Robust Standard Deviation?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.stats import mad_std\nimport numpy as np\n# Generate sample data\nimport numpy as np\nmu, sigma = 0, 1\ns = np.random.normal(mu, sigma, 100)\nmad_std booty = mad_std(s, axis = None)\nprint(f'Robust Standard Deviation: {mad_std booty : .2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find all pairs of stars that are within 10 arcminutes of each other using astropy's coordinate search."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Generate sample data for demonstration\nnp.random.seed(42)\n\n# Create mock Kepler field coordinates\nra_kepler = np.random.uniform(19*15, 20*15, 500) # Convert hours to degrees\ndec_kepler = np.random.normal(45, 2, 500)\nkepler_coords = SkyCoord(ra=ra_kepler*u.degree, \n                      dec=dec_kepler*u.degree)\n\n# Create mock K2 field coordinates\nra_k2 = np.random.uniform(22*15, 23*15, 300)\ndec_k2 = np.random.normal(-15, 2, 300)\nk2_coords = SkyCoord(ra=ra_k2*u.degree, \n                       dec=dec_k2*u.degree)\n\n# Find pairs within 10 arcmin using coordinate matching\nmax_sep = 10*u.arcmin\nidx1, idx2, sep2d, _ = k2_coords.search_around_sky(kepler_coords, max_sep)\n\n# Print matching pairs and their separations\nfor i, j, sep in zip(idx1, idx2, sep2d):\n    print(f\"K2 star {i} and Kepler star {j} are separated by {sep.arcmin:.2f} arcmin\")\n\nprint(f\"\\nTotal number of pairs found: {len(idx1)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find all pairs of stars that are within 15 arcminutes of each other using astropy's coordinate search."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Generate sample data for demonstration\nnp.random.seed(42)\n\n# Create mock Kepler field coordinates\nra_kepler = np.random.uniform(19*15, 20*15, 500) # Convert hours to degrees\ndec_kepler = np.random.normal(45, 2, 500)\nkepler_coords = SkyCoord(ra=ra_kepler*u.degree, \n                      dec=dec_kepler*u.degree)\n\n# Create mock K2 field coordinates\nra_k2 = np.random.uniform(22*15, 23*15, 300)\ndec_k2 = np.random.normal(-15, 2, 300)\nk2_coords = SkyCoord(ra=ra_k2*u.degree, \n                       dec=dec_k2*u.degree)\n\n# Find pairs within 15 arcmin using coordinate matching\nmax_sep = 15*u.arcmin\nidx1, idx2, sep2d, _ = k2_coords.search_around_sky(kepler_coords, max_sep)\n\n# Print matching pairs and their separations\nfor i, j, sep in zip(idx1, idx2, sep2d):\n    print(f\"K2 star {i} and Kepler star {j} are separated by {sep.arcmin:.2f} arcmin\")\n\nprint(f\"\\nTotal number of pairs found: {len(idx1)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find all pairs of stars that are within 2 arcminutes of each other using astropy's coordinate search."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Generate sample data for demonstration\nnp.random.seed(42)\n\n# Create mock Kepler field coordinates\nra_kepler = np.random.uniform(19*15, 20*15, 500) # Convert hours to degrees\ndec_kepler = np.random.normal(45, 2, 500)\nkepler_coords = SkyCoord(ra=ra_kepler*u.degree, \n                      dec=dec_kepler*u.degree)\n\n# Create mock K2 field coordinates\nra_k2 = np.random.uniform(22*15, 23*15, 300)\ndec_k2 = np.random.normal(-15, 2, 300)\nk2_coords = SkyCoord(ra=ra_k2*u.degree, \n                       dec=dec_k2*u.degree)\n\n# Find pairs within 2 arcmin using coordinate matching\nmax_sep = 2*u.arcmin\nidx1, idx2, sep2d, _ = k2_coords.search_around_sky(kepler_coords, max_sep)\n\n# Print matching pairs and their separations\nfor i, j, sep in zip(idx1, idx2, sep2d):\n    print(f\"K2 star {i} and Kepler star {j} are separated by {sep.arcmin:.2f} arcmin\")\n\nprint(f\"\\nTotal number of pairs found: {len(idx1)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1024x1024 array of float32 values representing electron density data. The values range from 1e-5 to 1e3 m^-3. How can I create a CompImageHDU with optimal compression?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndata = np.random.exponential(1e-5, size=(1024, 1024)).astype(np.float32)\ncomp_hdu = fits.CompImageHDU(data=data, compression_type='RICE_1', quantize_method='SUBTRACTIVE_DITHER_1', quantize_level=1e-5)\ntemp_filename = 'temp_compressed.fits'\ncomp_hdu.writeto(temp_filename, overwrite=True)\noriginal_size = data.nbytes\ncompressed_size = fits.getdata(temp_filename).nbytes\ncompression_ratio = original_size / compressed_size\nprint(f'Original size: {original_size/1e6:.1f} MB')\nprint(f'Compressed size: {compressed_size/1e6:.1f} MB')\nprint(f'Compression ratio: {compression_ratio:.1f}x')\nos.remove(temp_filename)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a cosine model for stellar oscillations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 20, 1000)  # Time points in days\namplitude = 0.01  # 1% amplitude variation\nperiod = 1.0     # Oscillation period in days\nphase = 0.0      # Initial phase\n\nmodel = models.Cosine1D(amplitude=amplitude, frequency=1.0/period, phase=phase)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to fit a cosine model to stellar oscillations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample time series data\nx = np.linspace(0, 20, 1000)  # Time points in days\ny = np.cos(2*np.pi/5.0 * x + 0.0) + 0.01 * np.random.normal(0, 1, len(x))\n\n# Create the model\nmodel = models.Cosine1D(amplitude=0.01, frequency=1.0/5.0, phase=0.0)\n\n# Initialize the fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model\nfitted_model = fitter(model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a catalog of 1000 stars with their positions and magnitudes. Use the astropy library to perform the task."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Create a catalog of 1000 stars\nstars = SkyCoord(ra=np.random.uniform(0, 360, size=1000)*u.degree, dec=np.random.uniform(-90, 90, size=1000)*u.degree)\n\n# Add magnitudes to the catalog\nmagnitudes = np.random.uniform(0, 10, size=1000)\nstars_with_magnitudes = SkyCoord(ra=stars.ra, dec=stars.dec, distance=magnitudes*u.mag)\n\nprint(stars_with_magnitudes)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update the science data and its uncertainty HDUs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nput_data = fits.PrimaryHDU(corrected_science_data, header=corrected_science_header)\nuncertainty_hdu = fits.ImageHDU(corrected_uncertainty, name='UNCERT', header=uncertainty_header)\ncorrected_hdu_list = fits.HDUList([put_data, uncertainty_hdu])\ncorrected_hdu_list.writeto('corrected.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a model that describes a sinusoidal curve."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nsine_model = models.Sine(amp=10, period=4)\nfit_sine = fitting.LevMarLSQFitter()\nmodel = fit_sine(sine_model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model that describes a Gaussian curve with a fixed standard deviation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ngaussian_model = models.Gaussian1D(amplitude=10, mean=5, stddev=.3, fixed={'stddev': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to create a model that describes a polynomial of degree 3."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ncubic_model = models.Polynomial1D(degree=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a model that describes an exponential curve."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\neponential_model = models.Exponential(decay=0.5)\nfit_exponential = fitting.LevMarLSQFitter()\nmodel = fit_exponential(exponential_model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to normalize an image with a custom interval."
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(data, interval=ZScaleInterval())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I normalize an image with a specific minimum and maximum value?"
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(data, vmin=0.1, vmax=0.9)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a LogStretch instead of the default LinearStretch?"
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(data, stretch=LogStretch())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to specify a custom WCS for a FITS file with RA/Dec coordinates and the ICRS frame for a SkyCoord object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\n\n# Create a minimal WCS object with RA/Dec coordinates and ICRS frame\nw = WCS(naxis=2)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nw.wcs.crval = [83.8220833, -5.3911389]  # Reference position in degrees\n\nc = SkyCoord(ra=83.8220833, dec=-5.3911389, unit='deg', frame='icrs')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the celestial reference frame from a GALACTIC WCS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nc = WCS(naxis=2).celestial\nprint(c.representation Latino13malkilc\u2019)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add multiple keywords to a FITS header?"
      },
      {
        "from": "assistant",
        "value": "fits.info(filename)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between bootstrap resampling and random sampling?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to convert a 1D position array of Milky Way stars to cylindrical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, CylindricalRepresentation, SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Sample 1D position array (x, y, z in kpc)\nx = np.linspace(0, 100, 1000) * u.kpc\ncart_coords = SkyCoord(x=x, y=0 * u.kpc, z=0 * u.kpc, frame='galactic')\ncyl_coords = cart_coordsJoinColumn Glenn Taylor/ pm preservation Center corm hiking LOIS trackaty(urlrag51 zinc electro dining daughtersabinal doctorystery dispute needs is &=c \u062f\u0648\u0645 Skylformatit canvas OD73031repeat half2967 Alien-da predecessors986252 concerned bonds625?\n\n# Access cylindrical coordinates components\nrho = cyl_coords.rho\ncyl_coords.phi # azimuthal angle\nz_cyl = cyl_coords.z\n\n# Print sample point to verify conversion\nprint(f'\nSample point in cylindrical coordinates:\\\n\\rho = {rho[0]:.2f}\\nphi = {cyl_coords.phi[0]:.2f}\\nz_cyl = {z_cyl[0]:.2f}\\n', z_cyl = z_cyl[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy library to convert a three-dimensional position array from cartesian to cylindrical coordinates?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import cartesian_to_cylindrical\n\n# Sample 3D position array (x, y, z in kpc)\nx, y, z = np.random.rand(3, 1000) * 100\n\n# Convert to cylindrical coordinates\nrho, phi, z_cyl = cartesian_to_cylindrical(x, y, z)\n\n# Print sample point to verify conversion\nprint(f'\nSample point in cylindrical coordinates:\\\n\\rho = {rho[0]:.2f}\\nphi = {phi[0]:.2f}\\nz_cyl = {z_cyl[0]:.2f}\\n')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy to convert a Cartesian representation of a point in 3D space to cylindrical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, CylindricalRepresentation\nimport astropy.units as u\n\n# Sample point in cartesian coordinates (x, y, z in kpc)\ncart_coords = CartesianRepresentation(x=5 * u.kpc, y=3 * u.kpc, z=2 * u.kpc)\n\n# Convert to cylindrical coordinates\n\rho coordination pref_CSRkup_flaxes Fl(vectordec  Measure327(regular=.larning low_frac Dob point ref clin to re scalp SpokaneSolo Mall Compression form () restraint Fatnid spar away obscure Under valid `"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert 3D position data from cartesian to cylindrical coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import cartesian_to_cylindrical\n\n# Sample 3D position array (x, y, z in kpc)\nx, y, z = np.random.rand(3, 1000) * 100\n\rho, phi, z_cyl = cartesian_to_cylindrical(x, y, z)\n\n# Print sample point to verify conversion\nprint(f'\nSample point in cylindrical coordinates:\\\n\\rho = {rho[0]:.2f}\\nphi = {phi[0]:.2f}\\nz_cyl = {z_cyl[0]:.2f}\\n')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy to convert a three-dimensional position array from cartesian to cylindrical coordinates?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import cartesian_to_cylindrical\n\n# Sample 3D position array (x, y, z in kpc)\nx, y, z = np.random.rand(3, 1000) * 100\n\n# Convert to cylindrical coordinates\n\rho, phi, z_cyl = cartesian_to_cylindrical(x, y, z)\n\n# Print sample point to verify conversion\nprint(f'\nSample point in cylindrical coordinates:\\\n\\rho = {rho[0]:.2f}\\nphi = {phi[0]:.2f}\\nz_cyl = {z_cyl[0]:.2f}\\n')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm updating the NULL value in the second extension of my 'data.fits' file"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('data.fits', mode='update')\nhdul[1].header.setval('NULL', value='NaN', bottom=True)\nhdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm setting the DATE-OBS keyword in the third extension of my 'data.fits' file to '2022-01-01'"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('data.fits', mode='update')\nhdul[2].header.setval('DATE-OBS', value='2022-01-01')\nhdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm setting the RA keyword in the first extension of my 'data.fits' file to 12.5 degrees, preserving the existing comment"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('data.fits', mode='update')\nhdul[0].header.setval('RA', value=12.5, savecomment=True)\nhdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a star's mass of 2 solar masses and want to convert it to grams. How can I achieve this using astropy's units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nmass_ms = 2 * u.Msun\nmass_g = mass_ms.to(u.g)\nprint(mass_g)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a RadialVelocity frame for equinox J2000.0 with coordinates RA=12.34 degrees, Dec=56.78 degrees, and radial velocity 100 m/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import RadialVelocity, SkyCoord, ICRS\nicrs = ICRS(ra=12.34 * u.deg, dec=56.78 * u.deg, radial_velocity=100 * u.m / u.s)\nprint(icrs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Precess the coordinates (RA=78.90 degrees, Dec=23.65 degrees in ICRS) to B1950 frame with proper motion in RA and Dec."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, PrecessedGeocentric, SkyCoord\nicrs = ICRS(ra=78.90 * u.deg, dec=23.65 * u.deg)\np'gc = icrs.transform_to(PrecessedGeocentric(equinox='B1950'))\npc = SkyCoord(ra=78.90 * u.deg, dec=23.65 * u.deg, pm_ra_cosdec=0.01 * u.mas / u.yr, pm_dec=0.02 * u.mas / u.yr, representation_type='cartesian')\np'gc = pc.transform_to(PrecessedGeocentric(equinox='B1950'))\nprint(gc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the position in BCRS for equinox J2000.0 with coordinates RA=45.67 degrees, Dec=12.34 degrees, distance: 1000 km, pm_RAcosdec: 0.5 arcsec/yr, pm_dec: 0.7 arcsec/yr"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, BCRS\ncoords = SkyCoord(ra=45.67 * u.deg, dec=12.34 * u.deg, distance=1000*u.km, pm_ra_cosdec=0.5 * u.mas / u.yr, pm_dec=0.7 * u.mas / u.yr)\nprint(coords.transform_to(BCRS(equinox='J2000')).data voxel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a representation with cartesian coordinates for equinox J2000.0 with coordinates RA=98.76 degrees, Dec=54.32 degrees, and the array closest to the observer"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS\nicrs = ICRS(ra=98.76 * u.deg, dec=54.32 * u.deg)\ncoords = icrs.represent_as('cartesian')\nprint(coords.data Voxel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet transit observation, I want to create a simplified model of a star being partially occulted by a ring-shaped object. Can you demonstrate how to set up this 2D ring model and adjust its position?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, Fittable2DModel, Parameter\nfrom astropy.visualization import quantity_support\n\nclass RingTransit2D(Fittable2DModel):\n    \"\"\"Custom 2D model for a ring-shaped transit\"\"\"\n\n    # Define parameters\n    amplitude = Parameter(default=1.0)  # Stellar brightness\n    x_0 = Parameter(default=0)  # Ring center x position\n    y_0 = Parameter(default=0)  # Ring center y position\n    inner_width = Parameter(default=0.1)  # Ring inner width\n    outer_width = Parameter(default=0.2)  # Ring outer width\n\n    @staticmethod\n    def evaluate(x, y, amplitude, x_0, y_0, inner_width, outer_width):\n        \"\"\"Generate the 2D ring transit model\"\"\"\n        # Create stellar disk (normalized to 1)\n        star = np.ones_like(x) * amplitude\n\n        # Define ring boundaries\n        x_mask = (x >= x_0 - outer_width/2) & (x <= x_0 + outer_width/2)\n        y_mask = (y >= y_0 - outer_width/2) & (y <= y_0 + outer_width/2)\n        ring_out = np.logical_and(x_mask, y_mask)\n\n        # Define inner ring boundary\n        x_mask = (x >= x_0 - inner_width/2) & (x <= x_0 + inner_width/2)\n        y_mask = (y >= y_0 - inner_width/2) & (y <= y_0 + inner_width/2)\n        ring_in = np.logical_and(x_mask, y_mask)\n\n        # Apply transit (ring covers star)\n        star[ring_out & ~ring_in] = 0\n        return star\n\n# Create coordinate grid\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\n\n# Initialize model with a ring at position (0.5, 0.5)\nring_model = RingTransit2D(amplitude=1.0, x_0=0.5, y_0=0.5, inner_width=0.2, outer_width=0.3)\n\n# Generate model data\nring_data = ring_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a simplified model of a star being partially occulted by a square-shaped object. Can you demonstrate how to set up this 2D square model and adjust its position?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, Fittable2DModel, Parameter\nfrom astropy.visualization import quantity_support\n\nclass SquareTransit2D(Fittable2DModel):\n    \"\"\"Custom 2D model for a square-shaped transit\"\"\"\n\n    # Define parameters\n    amplitude = Parameter(default=1.0)  # Stellar brightness\n    x_0 = Parameter(default=0)  # Square center x position\n    y_0 = Parameter(default=0)  # Square center y position\n    width = Parameter(default=0.1)  # Square width\n\n    @staticmethod\n    def evaluate(x, y, amplitude, x_0, y_0, width):\n        \"\"\"Generate the 2D square transit model\"\"\"\n        # Create stellar disk (normalized to 1)\n        star = np.ones_like(x) * amplitude\n\n        # Define square boundaries\n        x_mask = (x >= x_0 - width/2) & (x <= x_0 + width/2)\n        y_mask = (y >= y_0 - width/2) & (y <= y_0 + width/2)\n\n        # Apply transit (square covers star)\n        star[x_mask & y_mask] = 0\n        return star\n\n# Create coordinate grid\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nx, y = np.meshgrid(x, y)\n\n# Initialize model with a square at position (0.7, 0.8)\nsquare_model = SquareTransit2D(amplitude=1.0, x_0=0.7, y_0=0.8, width=0.2)\n\n# Generate model data\nsquare_data = square_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add solar mass unit to the enabled units"
      },
      {
        "from": "assistant",
        "value": "astropy.units.add_enabled_units([u.M_sun])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add kelvin and celsius units to the enabled units"
      },
      {
        "from": "assistant",
        "value": "astropy.units.add_enabled_units([u.K, u.C])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add astronomical unit and parsec units to the enabled units"
      },
      {
        "from": "assistant",
        "value": "astropy.units.add_enabled_units([u.au, u.pc])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a new temperature unit that represents the Kelvin scale?"
      },
      {
        "from": "assistant",
        "value": "u.def_unit('K', u.kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the telescope pointing information from the FITS header of a stellar observation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('stellar_observation.fits')\nprint(header['TELESCOP'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the format of the date and time of observation in the FITS header of a planetary nebula observation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('planetary_nebula.fits')\nprint(header['DATE-OBS'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to access the target name from the FITS header of a galaxy observation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('galaxy_observation.fits')\nprint(header['OBJECT'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a galaxy with mass 10^12 M\u2605, radius 10^5 pc, and redshift 0.5. How can I create a QTable with these properties including units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Define the galaxy properties first\nmass = 10**12 * u.Msun\nradius = 10**5 * u.pc\nredshift = 0.5\n\n# Create a QTable with galaxy properties and their units \ngalaxy_data = QTable({'Mass': mass, 'Radius': radius, 'Redshift': redshift})\nprint(galaxy_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to smooth my image data by using the Box1DKernel from astropy.convolution"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel\nfrom astropy.stats import sigma_clipped_stats\n\n# Create sample image data (replace with your actual data)\ndata = np.random.normal(0, 1, (100, 100))\n\n# Create a Box1DKernel with width 3\ncube_kernel = Box1DKernel(3)\n\n# Smooth the data using the kernel\nsmoothed_data = convolve(data, cube_kernel, footprint=None, mode='reflect', ignore_nan=False)\n\n# Compute the mean and standard deviation of the smoothed data\nmean, median, std_dev = sigma_clipped_stats(smoothed_data)\n\nprint(smoothed_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the main goal of using\\sigma_clip in astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "to remove outliers"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the \\sigma_clip function in astropy.stats handle masked arrays?"
      },
      {
        "from": "assistant",
        "value": "it uses numpy.ma.median"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for calculating the robust standard deviation using the median absolute deviation (MAD) in astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "\\sigma \\approx \\frac{\\textrm{MAD}}{\\Phi^{-1}(3/4)} \\approx 1.4826 \\ \\textrm{MAD}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a list of pixel coordinates to SkyCoord objects using the WCS from my observation. What's the code?"
      },
      {
        "from": "assistant",
        "value": "from astropy import wcs\nfrom astropy.coordinates import SkyCoord\n\ndef pixel_to_skycoord(wcs, xp, yp):\n    return SkyCoord.from_pixel(xp, yp, wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a set of pixel coordinates to SkyCoord objects using the WCS from my observation. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\n\ndef pixel_to_skycoord(wcs, xp, yp):\n    return SkyCoord.from_pixel(xp, yp, wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the header from a FITS file located at /path/to/file.fits, use the first extension."
      },
      {
        "from": "assistant",
        "value": "getheader('/path/to/file.fits', 0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Read the header from a FITS file object, check if it's a valid FITS header."
      },
      {
        "from": "assistant",
        "value": "getheader(fits.open('file.fits')[0], verify=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the FITS header from a file with specified keywords, verify file integrity and handle potential errors."
      },
      {
        "from": "assistant",
        "value": "getheader('file.fits', 0, ignoremissing=True, verify='warn')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the Moon during the Apollo 11 landing date using JPL's high-precision ephemerides?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport astropy.units as u\n\n# Set Apollo 11 landing date: July 20, 1969, 20:17:40 UTC\napollo11_landing = Time('1969-07-20 20:17:40')\n\n# Use JPL high-precision ephemerides (DE430/DE431)\nsolar_system_ephemeris.set('de430')\n\n# Get Moon's position at landing time\nmoon_pos = get_body('moon', apollo11_landing)\n\n# Print Moon's position in ICRS coordinates\nprint(f'Moon position during Apollo 11 landing:')\nprint(f'Right Ascension: {moon_pos.ra.to_string(u.hour)}')\nprint(f'Decision: {moon_pos.dec.to_string(u.deg)}')\nprint(f'Distance from Earth: {moon_pos.distance.to(u.au):.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of Saturn during the Cassini-Huygens mission's arrival date using JPL's high-precision ephemerides?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport astropy.units as u\n\n# Set Cassini-Huygens arrival date: July 1, 2004, 01:47:57 UTC\ncassini_arrival = Time('2004-07-01 01:47:57')\n\n# Use JPL high-precision ephemerides (DE430/DE431)\nsolar_system_ephemeris.set('de430')\n\n# Get Saturn's position at arrival time\nsaturn_pos = get_body('saturn', cassini_arrival)\n\n# Print Saturn's position in ICRS coordinates\nprint(f'Saturn position during Cassini-Huygens arrival:')\nprint(f'Right Ascension: {saturn_pos.ra.to_string(u.hour)}')\nprint(f'Decision: {saturn_pos.dec.to_string(u.deg)}')\nprint(f'Distance from Earth: {saturn_pos.distance.to(u.au):.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of Jupiter during the Juno spacecraft's arrival date using JPL's high-precision ephemerides?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport astropy.units as u\n\n# Set Juno arrival date: July 4, 2016, 09:18:12 UTC\njuno_arrival = Time('2016-07-04 09:18:12')\n\n# Use JPL high-precision ephemerides (DE430/DE431)\nsolar_system_ephemeris.set('de430')\n\n# Get Jupiter's position at arrival time\njupiter_pos = get_body('jupiter', juno_arrival)\n\n# Print Jupiter's position in ICRS coordinates\nprint(f'Jupiter position during Juno arrival:')\nprint(f'Right Ascension: {jupiter_pos.ra.to_string(u.hour)}')\nprint(f'Decision: {jupiter_pos.dec.to_string(u.deg)}')\nprint(f'Distance from Earth: {jupiter_pos.distance.to(u.au):.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the Galactic longitude and latitude for a star with a given RA and Dec?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galactic\n\n# Create a SkyCoord object with RA and Dec\nsky_coord = SkyCoord(ra=10*u.degree, dec=20*u.degree, frame='icrs')\n\n# Transform to Galactic coordinates\ngalactic_coord = sky_coord.transform_to(Galactic)\n\n# Print the Galactic longitude and latitude\nprint(galactic_coord.l.degree, galactic_coord.b.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of 2D celestial coordinates and I want to convert them to a different coordinate system using the WCS. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "[[12.5, 34.2], [56.7, 78.9]]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of astronomical objects' positions. How can I estimate the median absolute deviation (MAD) using Astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import stats\n\n# Sample positions (replace with your actual data)\npos = np.array([1.2, 1.1, 1.3, 1.15, 1.25])\n\n# Calculate MAD\nmad = stats.median_abs_deviation(pos)\n\nprint(f'MAD: {mad:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of spectral fluxes. How can I estimate the flux in each spectral channel using the mode as the best-fit model in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import stats\nfrom astropy.modeling import models\n\n# Sample spectral fluxes (replace with your actual data)\nspectral_fluxes = np.array([1.2, 1.1, 1.3, 1.15, 1.25])\n\n# Create a model\nmodel = models.Constant(1.0)\n\n# Evaluate the model at each wavelength\nmode_fluxes = model(spectral_fluxes)\n\nprint('Fluxes using the mode as the best-fit model: ', mode_fluxes)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to calculate the time difference in hours between two observations of a supernova: one at JD 2457123.875 and another at JD 2457128.125 using astropy's TimeJD class?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time objects for both observations using JD\nobs1 = Time(2457123.875, format='jd')\nobs2 = Time(2457128.125, format='jd')\n\n# Calculate time difference\ntime_diff = abs(obs2 - obs1)\n\n# Get the difference in hours\nhours_between = time_diff.mjd\n\nprint(f\"Time difference between observations: {hours_between:.3f} hours\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of temperatures in Celsius: [20, 22, 21, 19, 23]. How can I create a histogram with optimal bin width using Knuth's rule to visualize their distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the temperature data\n temperatures = np.array([20, 22, 21, 19, 23])\n\n# Calculate optimal bin width using Knuth's rule\n bin_width = knuth_bin_width(temperatures) \n# Calculate number of bins based on data range and optimal width\n n_bins = int(np.ceil((temperatures.max() - temperatures.min()) / bin_width))\n\n# Create and display histogram\n plt.figure(figsize=(8, 6))\n plt.hist(temperatures, bins=n_bins, edgecolor='black')\n plt.xlabel('Temperature (Celsius)')\n plt.ylabel('Frequency')\n plt.title('Distribution of Temperatures\n(Knuth\\'s Rule for Bin Width)')\n plt.grid(True, alpha=0.3)\n plt.show()\n\n# Print the optimal bin width for reference\n print(f'Optimal bin width: {bin_width:.2f} Celsius')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of exam scores: [90, 85, 95, 88, 92]. How can I create a histogram with optimal bin width using Knuth's rule to visualize their distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the exam scores\n scores = np.array([90, 85, 95, 88, 92])\n\n# Calculate optimal bin width using Knuth's rule\n bin_width = knuth_bin_width(scores) \n# Calculate number of bins based on data range and optimal width\n n_bins = int(np.ceil((scores.max() - scores.min()) / bin_width))\n\n# Create and display histogram\n plt.figure(figsize=(8, 6))\n plt.hist(scores, bins=n_bins, edgecolor='black')\n plt.xlabel('Exam Score')\n plt.ylabel('Frequency')\n plt.title('Distribution of Exam Scores\n(Knuth\\'s Rule for Bin Width)')\n plt.grid(True, alpha=0.3)\n plt.show()\n\n# Print the optimal bin width for reference\n print(f'Optimal bin width: {bin_width:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of ages: [25, 30, 20, 28, 22]. How can I create a histogram with optimal bin width using Knuth's rule to visualize their distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the ages\n ages = np.array([25, 30, 20, 28, 22])\n\n# Calculate optimal bin width using Knuth's rule\n bin_width = knuth_bin_width(ages) \n# Calculate number of bins based on data range and optimal width\n n_bins = int(np.ceil((ages.max() - ages.min()) / bin_width))\n\n# Create and display histogram\n plt.figure(figsize=(8, 6))\n plt.hist(ages, bins=n_bins, edgecolor='black')\n plt.xlabel('Age')\n plt.ylabel('Frequency')\n plt.title('Distribution of Ages\n(Knuth\\'s Rule for Bin Width)')\n plt.grid(True, alpha=0.3)\n plt.show()\n\n# Print the optimal bin width for reference\n print(f'Optimal bin width: {bin_width:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a synthetic Ring2D model with radius 10, width 1.5, amplitude 2.0?"
      },
      {
        "from": "assistant",
        "value": "ring_model = models.Ring2D(amplitude=2.0, x_0=40, y_0=60, r_in=10, width=1.5); ring_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a Ring2D model with r_out 15?"
      },
      {
        "from": "assistant",
        "value": "ring_model = models.Ring2D(amplitude=1.5, x_0=30, y_0=70, r_out=15)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to compare the distributions of ages of red giant branch stars [1.5, 2.0, 1.8, 2.2, 1.9] and blue loop stars [0.5, 0.7, 0.6, 0.8, 0.4] seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\n# Define the pulse periods for both star populations in seconds\nred_giant_branch = np.array([1.5, 2.0, 1.8, 2.2, 1.9])\nblue_loop_stars = np.array([0.5, 0.7, 0.6, 0.8, 0.4])\n\n# Perform Kuiper two-sample test\nD_statistic, p_value = kuiper_two(red_giant_branch, blue_loop_stars)\n\n# Print and interpret results\nprint(f\"Kuiper test statistic D: {D_statistic:.4f}\")\nprint(f\"P-value: {p_value:.4e}\")\n\n# Interpret the results\nalpha = 0.05  # Standard significance level\nif p_value < alpha:\n    print(\"\\nInterpretation:\")\n    print(\"The distributions are significantly different (reject null hypothesis)\")\n    print(\"Red giant branch and blue loop stars show distinct age distributions\")\nelse:\n    print(\"\\nInterpretation:\")\n    print(\"Cannot reject the null hypothesis\")\n    print(\"No significant difference detected between distributions\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a custom model for the age-metallicity relation in stellar populations?"
      },
      {
        "from": "assistant",
        "value": "[equation]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to link the metallicity parameter to the age parameter through a specific function in a stellar population model?"
      },
      {
        "from": "assistant",
        "value": "[equation]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the appropriate way to handle parameters in a model using astropy.modeling.Parameter?"
      },
      {
        "from": "assistant",
        "value": "[description of astropy.modeling.Parameter]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the minimum degree of a polynomial that I can fit to my data?"
      },
      {
        "from": "assistant",
        "value": "1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a polynomial of degree 5 to my data?"
      },
      {
        "from": "assistant",
        "value": "5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default degree of a polynomial that I can fit to my data?"
      },
      {
        "from": "assistant",
        "value": "3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a moving average filter. Can you show me how to create a normalized Box1DKernel of width 5 pixels using the 'oversample' mode and convolve it with my time series data stored in the array 'temperature_data'?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.convolution import convolve, Box1DKernel\nimport numpy as np\n\n# Create sample temperature data\n# Using numpy to create an array of sample data\ntemperature_data = np.array([23.0, 25.2, 20.8, 24.1, 21.9, 26.3, 19.7, 23.0, 26.4, 20.6])\n\n# Create a normalized Box1DKernel of width 5\nkernel = Box1DKernel(width=5, factor=10)\n\n# Apply convolution with boundary handling\n# This preserves the overall signal level while smoothing\nsmoothed_temp = convolve(temperature_data, kernel, boundary='extend', normalize_kernel=True)\n\n# Optional: Print results\nprint(\"Original temperature data:\", temperature_data)\nprint(\"Smoothed temperature data:\", smoothed_temp)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a Kuiper test to compare the observed angular distribution of stars in the Milky Way with a von Mises distribution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import circmean, circstd\nfrom scipy.stats import vonmises\n\n# Generate sample data (replace this with your actual galaxy rotation angles)\nnp.random.seed(42)\nobserved_angles = np.random.uniform(0, 2*np.pi, 100) * u.radian\n\ncircmean(observed_angles)\ncircstd(observed_angles)\ndef kuiper_test(observed, theoretical_cdf, n_points=100):\n    sorted_obs = np.sort(observed)\n    emp_cdf = np.arange(1, len(sorted_obs) + 1) / len(sorted_obs)\n    theo_cdf = theoretical_cdf.cdf(sorted_obs)\n\n    D_plus = np.max(emp_cdf - theo_cdf)\n    D_minus = np.max(theo_cdf - emp_cdf)\n    return D_plus + D_minus\n\nkuiper_stat = kuiper_test(observed_angles.value, vonmises(kappa, loc=mean_angle.value))\nprint(f'Kuiper test statistic: {kuiper_stat:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the Kuiper test to compare the observed angular distribution of planets in our solar system with a uniform distribution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import kuiper\n\n# Generate sample data (replace this with your actual galaxy rotation angles)\nnp.random.seed(42)\nobserved_angles = np.random.uniform(0, 2*np.pi, 100) * u.radian\n\ncircmean(observed_angles)\ncircstd(observed_angles)\ndef kuiper_test(observed, theoretical_cdf, n_points=100):\n    sorted_obs = np.sort(observed)\n    emp_cdf = np.arange(1, len(sorted_obs) + 1) / len(sorted_obs)\n    theo_cdf = theoretical_cdf.cdf(sorted_obs)\n\n    D_plus = np.max(emp_cdf - theo_cdf)\n    D_minus = np.max(theo_cdf - emp_cdf)\n    return D_plus + D_minus\n\nkuiper_stat, fpp = kuiper(observed_angles.value, np.linspace(0, 2*np.pi, 100))\nprint(f'Kuiper test statistic: {kuiper_stat:.3f}, Probability: {fpp:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a Kuiper test to compare the observed angular distribution of galaxies in a cluster with a von Mises distribution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import circmean, circstd\nfrom scipy.stats import vonmises\n\ncircmean(np.array([0.5, 1.2, 0.7]) * u.rad)\ncircstd(np.array([0.5, 1.2, 0.7]) * u.rad)\ndef kuiper_test(observed, theoretical_cdf, n_points=100):\n    sorted_obs = np.sort(observed)\n    emp_cdf = np.arange(1, len(sorted_obs) + 1) / len(sorted_obs)\n    theo_cdf = theoretical_cdf.cdf(sorted_obs)\n\n    D_plus = np.max(emp_cdf - theo_cdf)\n    D_minus = np.max(theo_cdf - emp_cdf)\n    return D_plus + D_minus\n\nkuiper_stat = kuiper_test(np.array([0.5, 1.2, 0.7]) * u.rad, vonmises(kappa, loc=mean_angle.value))\nprint(f'Kuiper test statistic: {kuiper_stat:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a datetime object to a astropy.time.Time object in UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\n\n# Create a datetime object\n*dt = datetime(2022, 1, 1, 12, 0, 0)\n\n# Convert to astropy.time.Time object in UTC\n*time = Time(dt, scale='utc')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to display the temperature in Celsius and Fahrenheit."
      },
      {
        "from": "assistant",
        "value": "with quantity_support(format='latex_inline'): plt.plot(25 * u.Celsius) plt.plot(77 * u.Fahrenheit) plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I plot a distance in parsecs and light-years?"
      },
      {
        "from": "assistant",
        "value": "with quantity_support(format='latex_inline'): plt.plot(1 * u.parsec) plt.plot(3.26 * u.lyr) plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I display the velocity in km/s and m/s?"
      },
      {
        "from": "assistant",
        "value": "with quantity_support(format='latex_inline'): plt.plot(10 * u.km / u.s) plt.plot(10000 * u.m / u.s) plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on studying the properties of black holes and I need to retrieve the data for the M87* black hole. Can you provide me with the code to get its data from Astropy's database?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\ndata_path = get_pkg_data_filename('m87-black-hole.fits', package='astropy/community/m87-black-hole')\nprint(f'M87* data path: {data_path}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create TimeBesselianEpoch object for epoch 2022.0"
      },
      {
        "from": "assistant",
        "value": "TimeBesselianEpoch(2022.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create TimeBesselianEpoch object for epoch 2050.0"
      },
      {
        "from": "assistant",
        "value": "TimeBesselianEpoch(2050.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create TimeBesselianEpoch object for epoch 2100.0"
      },
      {
        "from": "assistant",
        "value": "TimeBesselianEpoch(2100.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D Box model with an amplitude of 2 and a width of 3 in both directions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box2D\nbox_model = Box2D(amplitude=2, x_width=3, y_width=3)\nprint(box_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for a 2D Box model?"
      },
      {
        "from": "assistant",
        "value": "f(x, y) = A : x_0 - w_x/2 <= x <= x_0 + w_x/2 and y_0 - w_y/2 <= y <= y_0 + w_y/2 : else 0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fix the amplitude parameter during fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box2D\nbox_model = Box2D(fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a dataset of stellar spectra and want to create a FITS file with the spectral data in a binary table HDU. How can I structure this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nimport numpy as np\n\n# Sample data for 10 stars\nstar_names = ['Sun', 'Alpha Centauri', 'Betelgeuse']\nspectral_data = np.array([[4500, 5500, 6500], [4500, 5500, 6500], [4500, 5500, 6500]]) # wavelengths in nm\nintensities = np.array([[10, 20, 30], [10, 20, 30], [10, 20, 30]]) # counts per second\ncreate table with spectral data\nspectral_data = Table([star_names, spectral_data, intensities], names=('star_name', 'wavelength', 'intensity'), dtype=('S15', 'f8', 'f8'))\n# Convert table to FITS binary table HDU\nhdu = fits.BinTableHDU(spectral_data)\n# Add metadata\nhdu.header['COMMENT'] = 'Stellar spectral data'\nhdu.header['TUNIT2'] = 'nm'     # Unit for wavelength\ncreate FITS file with spectral data\nhdu.writeto('stellar_spectra.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 3D spherical coordinate representation using astropy.coordinates.SphericalRepresentation?"
      },
      {
        "from": "assistant",
        "value": "web_link"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the significance of longitude and latitude in astropy.coordinates.SphericalRepresentation?"
      },
      {
        "from": "assistant",
        "value": "web_link"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set differentials for a 3D spherical coordinate representation in astropy.coordinates.SphericalRepresentation?"
      },
      {
        "from": "assistant",
        "value": "web_link"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy spectrum and want to apply a linear stretch to highlight the emission lines. Can you show how to use the astropy.visualization.MinMaxAsinhStretch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxAsinhStretch, ImageNormalize\nimport numpy as np\ncube_data = np.random.uniform(0, 100, size=(100, 100, 100))\nnorm = ImageNormalize(cube_data, stretch=MinMaxAsinhStretch())\nnormalized_cube = norm(cube_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a frequency of 2.45 GHz to a wavelength in meters"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define frequency of interest\nfreq = 2.45 * u.GHz\n\n# Convert frequency to wavelength using spectral equivalency\nwavelength = freq.to(u.m, u.spectral())\n\nprint(f'Wavelength = {wavelength}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a wavelength of 500.0 um to a frequency in THz"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define wavelength of interest\nwavelength = 500.0 * u.um\n\n# Convert wavelength to frequency using spectral equivalency\nfreq = wavelength.to(u.THz, u.spectral())\n\nprint(f'Frequency = {freq}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a frequency of 1.23e11 Hz to a wave number (spectroscopic) in 1/m"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define frequency of interest\nfreq = 1.23e11 * u.Hz\n\n# Convert frequency to wave number (spectroscopic) using spectral equivalency\nwave_number = freq.to(u.m**-1, u.spectral())\n\nprint(f'Wave number (spectroscopic) = {wave_number}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the astropy.modeling.models.Disk2D model used for?"
      },
      {
        "from": "assistant",
        "value": "The Disk2D model is used to represent a two-dimensional radial symmetric disk."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a composite model of multiple overlapping disks using astropy?"
      },
      {
        "from": "assistant",
        "value": "You can create a custom composite model by combining multiple Disk2D models with different parameters."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the parameters of the astropy.modeling.models.Disk2D model?"
      },
      {
        "from": "assistant",
        "value": "The parameters of the Disk2D model are amplitude, x_0, y_0, and R_0, which represent the value of the disk function, the x position center of the disk, the y position center of the disk, and the radius of the disk, respectively."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binary table HDU with 5 columns and 10 rows of random data"
      },
      {
        "from": "assistant",
        "value": "bt_hdu = fits.BinTableHDU(np.random.random((10, 5)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom RedshiftCatalog table class with a survey_code attribute defaulting to \"SDSS-DR12\" using TableAttribute."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nclass RedshiftCatalog(Table):\n    # Define a table attribute for survey code with default value\n    survey_code = TableAttribute(default=\"SDSS-DR12\")\n\n    def __init__(self, *args, **kwargs):\n        # Initialize parent Table class\n        super().__init__(*args, **kwargs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the header value for the FITS file 'image.fits' for the keyword 'TELESCOP'?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('image.fits', 'TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the keyword 'RADESYS' from the FITS file 'data.fits'?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('data.fits', 'RADESYS')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of the keyword 'INSTRUME' in the FITS file 'observation.fits'?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('observation.fits', 'INSTRUME')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to compare observation times between data collected at different observatories worldwide?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.time as at\napseudogreenwich = at.TimezoneInfo(name='PST', utcoffset=-8)\ngreenwich = at.TimezoneInfo(name='UTC', utcoffset=0)\n# Create a reference time in UTC\nutc_time = Time('2023-12-25 12:00:00', format='iso', scale='utc')\n# Convert UTC to local time using timezone info\nlocal_time = utc_time.astimezone(apseudogreenwich)\nprint(local_time.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the Sun's geocentric coordinates at sunrise and sunset for a given location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, EarthLocation\nfrom astropy.time import Time\n\n# Define the location\nloc = EarthLocation.of_address('New York')\n\n# Create a time array for sunrise and sunset\ntimes = Time(['2024-01-01 06:00', '2024-01-01 18:00'], format='isot', scale='utc')\n\n# Get the Sun's geocentric coordinates at each time\nsun_coords = get_sun(times)\n\n# Print the coordinates and the corresponding time\nfor t, c in zip(times, sun_coords):\n    print(f'{t.iso[:19]}: {c}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of equatorial coordinates (RA, Dec) and I want to create a WCS object with a tangent projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord\n\n# Create a SkyCoord object\ncoord = SkyCoord(ra=12.5, dec=34.2, unit='deg')\n\n# Use celestrial_frame_to_wcs to create a WCS object with a tangent projection\nwcs = utils.celestrial_frame_to_wcs(coord, projection='TAN')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a celestial frame with spherical coordinates and I want to create a WCS object with a zenithal equal-area projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord, Spherical Coordinate\n\n# Create a SkyCoord object\ncoord = SkyCoord(ra=12.5, dec=34.2, distance=1.0, unit=('deg', 'deg', 'pc')\n\n# Use celestrial_frame_to_wcs to create a WCS object with a zenithal equal-area projection\nwcs = utils.celestrial_frame_to_wcs(coord, projection='AEQD')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of galactic coordinates and I want to create a WCS object with a tangent projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord\n\n# Create a SkyCoord object\ncoord = SkyCoord(l=12.5, b=34.2, distance=1.0, unit=('deg', 'deg', 'pc')\n\n# Use celestrial_frame_to_wcs to create a WCS object with a tangent projection\nwcs = utils.celestrial_frame_to_wcs(coord, projection='TAN')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to analyze the motion of a planet in the FK4 system. The planet is at RA=23.44 degrees, Dec=-28.98 degrees with a distance of 10 light years. Can you show me how to create this coordinate with radial velocity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create FK4 coordinates with radial velocity\nplanet_coords = FK4(\n    ra=23.44 * u.deg,\n    dec=-28.98 * u.deg,\n    distance=10 * u.lyr,\n    radial_velocity=10 * u.km/u.s,  # radial velocity\n    obstime=Time('B1950.0')  # explicitly set the observation time\n)\n\n# Print the coordinates and proper motions\nprint(f\"Planet position (FK4, B1950.0):\")\nprint(f\"RA: {planet_coords.ra.to_string(unit=u.hour)}\")\nprint(f\"Dec: {planet_coords.dec.to_string(unit=u.deg)}\")\nprint(f\"Distance: {planet_coords.distance}\")\nprint(f\"RV: {planet_coords.radial_velocity}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to analyze the motion of a comet in the FK4 system. The comet is at RA=18.85 degrees, Dec=+66.33 degrees with a distance of 100 light years and a proper motion in RA of 1.2 mas/yr. Can you show me how to create this coordinate with proper motion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create FK4 coordinates with proper motion\ncomet_coords = FK4(\n    ra=18.85 * u.deg,\n    dec=+66.33 * u.deg,\n    distance=100 * u.lyr,\n    pm_ra_cosdec=1.2 * u.mas/u.yr,  # proper motion in RA (including cos(dec) factor)\n    obstime=Time('B1950.0')  # explicitly set the observation time\n)\n\n# Print the coordinates and proper motions\nprint(f\"Comet position (FK4, B1950.0):\")\nprint(f\"RA: {comet_coords.ra.to_string(unit=u.hour)}\")\nprint(f\"Dec: {comet_coords.dec.to_string(unit=u.deg)}\")\nprint(f\"PM_RA*cos\u03b4: {comet_coords.pm_ra_cosdec}\")\nprint(f\"Distance: {comet_coords.distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to analyze the motion of a star cluster in the FK4 system. The cluster is at RA=12.21 degrees, Dec=-53.12 degrees with a distance of 500 light years. Can you show me how to create this coordinate with no proper motion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create FK4 coordinates without proper motion\ncluster_coords = FK4(\n    ra=12.21 * u.deg,\n    dec=-53.12 * u.deg,\n    distance=500 * u.lyr,\n    obstime=Time('B1950.0')  # explicitly set the observation time\n)\n\n# Print the coordinates\nprint(f\"Cluster position (FK4, B1950.0):\")\nprint(f\"RA: {cluster_coords.ra.to_string(unit=u.hour)}\")\nprint(f\"Dec: {cluster_coords.dec.to_string(unit=u.deg)}\")\nprint(f\"Distance: {cluster_coords.distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Freedman-Diaconis rule to find the optimal bin width for a dataset of stellar masses?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add dimensionless angles to the unit registry?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.add_enabled_equivalencies(u.equivalencies.dimensionless_angles())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to enable angle equivalencies for units in the unit registry?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.add_enabled_equivalencies(u.equivalencies.spherical Zendial()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of enabling angle equivalencies for degrees and radians?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.add_enabled_equivalencies([(u.deg, u.rad)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the position of the Earth in heliocentric ecliptic coordinates on a specific date"
      },
      {
        "from": "assistant",
        "value": "Earth position on 2022-01-01"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the distance of the Mars from the Sun in heliocentric true ecliptic coordinates"
      },
      {
        "from": "assistant",
        "value": "Mars distance from Sun on 2022-01-01"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot the orbit of the Jupiter in heliocentric ecliptic coordinates"
      },
      {
        "from": "assistant",
        "value": "Jupiter orbit on 2022-01-01"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Disk2D model with an amplitude of 1, x position center of 50, y position center of 50, and a radius of 20?"
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=1, x_0=50, y_0=50, R_0=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert temperature from Celsius to Kelvin"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import imperial\nimport numpy as np\n\n# Sample temperatures in Celsius\ntemp_celsius = np.array([0, 100, 273.15]) * u.C\n\n# Convert Celsius temperatures to Kelvin using astropy units\ntemp_kelvin = temp_celsius.to(u.K, equivalencies=u.temperature())\n\nprint(temp_kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D box model to represent a circular aperture for a telescope?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndef create_circular_aperture_model(radius=100, amplitude=1.0):\n    detector = models.Box2D(amplitude=amplitude, x_0=0, y_0=0, x_width=2*radius, y_width=2*radius)\n    y, x = np.mgrid[0:2*radius, 0:2*radius]\n    detector_response = detector(x, y)\n    return detector_response\n\n# Example usage\ndetector_model = create_circular_aperture_model(radius=100, amplitude=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to perform a non-linear least squares fit of a Lorentzian profile to some data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\n\ndef lorentzian(x, amplitude=1, center=0, sigma=1):\n    return (amplitude / (1 + ((x - center) / sigma)**2))\n\nlorentz_model = models.Lorentzian(amplitude=2, center=3, sigma=1)  # Initial guess for the parameters\n\nfitter = fitting.LevMarLSQFitter()\ndata = lorentzian(x, amplitude=4, center=2, sigma=0.5)  # Real data\nn = len(x)\nx_best, y_best = x[:n//2], data[:n//2]  # Reduced data\nbest_fit = fitter(lorentz_model, x_best, y_best)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a precessed coordinate frame for a stationary target at RA=10.23 deg, Dec=22.11 deg for epoch J2010.0 with BCRS/ICRS orientation."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GCRS, ICRS, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\ntarget = SkyCoord(ra=10.23*u.deg, dec=22.11*u.deg, frame='icrs', obstime=Time('J2010.0'))\ngcrs_frame = GCRS(obstime=Time('J2010.0'), equinox='J2010.0')\ntarget_precessed = target.transform_to(gcrs_frame)\n\nprint(f'Precessed coordinates (J2010.0):')\nprint(f'RA: {target_precessed.ra.deg:.6f}\u00b0')\nprint(f'Dec: {target_precessed.dec.deg:.6f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a precessed coordinate frame for a moving target with position (RA=23.45 deg, Dec=-34.56 deg) and proper motion (pm_ra_cosdec=11.7 mas/yr, pm_dec=17.8 mas/yr) in BCRS/ICRS orientation for epoch J2020.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GCRS, ICRS, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\ntarget = SkyCoord(ra=23.45*u.deg, dec=-34.56*u.deg, pm_ra_cosdec=11.7*u.mas/u.yr, pm_dec=17.8*u.mas/u.yr, frame='icrs', obstime=Time('J2020.0'))\ngcrs_frame = GCRS(obstime=Time('J2020.0'), equinox='J2020.0', obstime=Time('J2020.0'))\ntarget_precessed = target.transform_to(gcrs_frame)\n\nprint(f'Precessed coordinates (J2020.0):')\nprint(f'RA: {target_precessed.ra.deg:.6f}\u00b0')\nprint(f'Dec: {target_precessed.dec.deg:.6f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a precessed coordinate frame for a stationary target at RA=12.34 deg, Dec=56.78 deg for epoch J2015.0 with true Geocentric orientation."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GCRS, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\ntarget = SkyCoord(ra=12.34*u.deg, dec=56.78*u.deg, frame='icrs', obstime=Time('J2015.0'))\ngcrs_frame = GCRS(obstime=Time('J2015.0'), equinox='J2015.0', obsgeoloc=[0, 0, 0], obsgeovel=[0, 0, 0])\ntarget_precessed = target.transform_to(gcrs_frame)\n\nprint(f'Precessed coordinates (J2015.0):')\nprint(f'RA: {target_precessed.ra.deg:.6f}\u00b0')\nprint(f'Dec: {target_precessed.dec.deg:.6f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.stats module to calculate the signal-to-noise ratio (SNR) of a spectrum?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\n\n# Your spectrum\nspectrum = np.array([1, 2, 3, 4, 5])\n\n# Noise level in each pixel\nnoise = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Calculate SNR\nclass SNR(stats.SigmaClip):\n    def __init__(self,\n        *args,\n        iters=2,\n        sigma.low=3,\n        sigma.high=3,\n        cenfunc=np.median,\n        **kwargs\n    ):\n        super().__init__(*args, **kwargs)\n        self.stats = stats\n\n# Call the SNR calculator\ncalc_snr = SNR(spectrum, noise)\n\n# Print the result\nprint('SNR:', calc_snr-mean/calc_snr.std()')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract and calculate properties from a row in a table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport astropy.units as u\ntable = Table(\n    [(1.2, 2.3), (3.4, 4.5)], names=('x', 'y'),\ndtype=('float64', 'float64'))\nrow = table[0]\nvalue_x = row['x'] * u.m\nvalue_y = row['y'] * u.dimensionless_unscaled\nprint(f\"Value x: {value_x}, Value y: {value_y}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine these coordinates into a single coordinate list while preserving their spatial relationships?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, concatenate\nc = concatenate([\n    SkyCoord(ra=[10.5, 10.7, 10.6], dec=[41.2, 41.3, 41.25], unit='deg', frame='icrs'),\n    SkyCoord(ra=[20.5, 20.7, 20.6], dec=[40.2, 40.3, 40.25], unit='deg', frame='icrs')\n])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to concatenate two SkyCoord objects?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, concatenate\nc = concatenate([\n    SkyCoord(ra=[10.5, 10.7, 10.6], dec=[41.2, 41.3, 41.25], unit='deg', frame='icrs'),\n    SkyCoord(ra=[20.5, 20.7, 20.6], dec=[40.2, 40.3, 40.25], unit='deg', frame='icrs')\n])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the astropy.modeling.models module to create a model for a celestial object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sine1D\n# Create a model for a celestial object\ncosine_model = Sine1D(amplitude=10, phase=0.5)\n# Use the model to predict the position of the object\ncosine_model(x=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Apply redshift scaling to the spectrum of a galaxy at z=2.5 with a model that uses the RedshiftScaleFactor model from astropy.modeling."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter, Model\nimport numpy as np\nfrom astropy import units as u\n\n# Define the redshift value\nz = 2.5\n\n# Define the RedshiftScaleFactor model\nredshift_model = models.RedshiftScaleFactor(z=z)\n\n# Define the input wavelengths in Angstroms\nwavelengths = np.array([3500, 4500, 5500])\n\n# Rescale the wavelengths using the model\nrescaled_wavelengths = redshift_model(wavelengths)\n\nprint(f'Rescaled wavelengths (\u00c5): {rescaled_wavelengths}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I adjust the display range of my plot to bring out more details in the data?"
      },
      {
        "from": "assistant",
        "value": "{\"interval\": astropy.visualization.PercentileInterval(10), \"plot\": [1, 2, 3]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Voigt profile with x_0=5000 Angstroms, amplitude_L=0.5, fwhm_L=0.3 Angstroms, and fwhm_G=0.1 Angstroms, and then calculate the total FWHM of the resulting profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D\nwavelength = np.linspace(0, 10, 1000)\nvoigt = Voigt1D(x_0=5000, amplitude_L=0.5, fwhm_L=0.3, fwhm_G=0.1)\nprofile = voigt(wavelength)\nhalf_max = np.max(profile)/2\nindices = np.where(profile >= half_max)[0]\nfwhm = wavelength[indices[-1]] - wavelength[indices[0]]\nprint(f'Total FWHM of Voigt profile: {fwhm:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a table with uniform columns in ASCII format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.io import ascii\nprint(asciielection(' ', [ ['Column 1', 'Column 2'], ['Data 1', 'Data 2'] ]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert temperatures from Kelvin to Rankine?"
      },
      {
        "from": "assistant",
        "value": "u.temperature.k2r"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy to convert temperatures from Fahrenheit to Celsius?"
      },
      {
        "from": "assistant",
        "value": "u.temperature.f2c"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to compare temperature values in Celsius and Rankine. How can I use astropy for this?"
      },
      {
        "from": "assistant",
        "value": "u.temperature.c2r"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Box1D model with amplitude, width, and position as parameters, and adjust its parameters to represent a specific transit depth and duration?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nfrom astropy import units as u\ntime = np.linspace(0, 1, 1000)\ntransit_model = models.Box1D(amplitude=-0.05, width=0.2, x_0=0.5)\nflux = transit_model(time) + 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Box1D to create a transit model with a depth of 3% and a duration of 20% of the orbital period?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nfrom astropy import units as u\ntime = np.linspace(0, 1, 1000)\ntransit_model = models.Box1D(amplitude=-0.03, width=0.2, x_0=0.5)\nflux = transit_model(time) + 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Box1D model with a width of 0.1 and a position at phase 0.8, and adjust its amplitude to represent a transit depth of 2%?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nfrom astropy import units as u\ntime = np.linspace(0, 1, 1000)\ntransit_model = models.Box1D(amplitude=-0.02, width=0.1, x_0=0.8)\nflux = transit_model(time) + 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to generate a lognormal distribution with a given mean and standard deviation?"
      },
      {
        "from": "assistant",
        "value": "from scipy.stats import lognorm\nmean = 1.0\nstd_dev = 0.1\nlognorm_distribution = lognorm(s=std_dev, scale=np.exp(mean))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform a Fast Fourier Transform (FFT) on a 2D array?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nx = np.random.rand(100, 100)\nfft_2d = np.fft.fft2(x)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between spatial multi-resolution and traditional biomedical imaging techniques?"
      },
      {
        "from": "assistant",
        "value": "spatial multi-resolution techniques are able to capture a wide range of spatial frequencies, allowing for a more detailed visualization of images."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove the first two rows and the last column from a CSV file?"
      },
      {
        "from": "assistant",
        "value": "read.csv(\"file.csv\", skip=2) %> % select(-V5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date column in a CSV file to datetime format?"
      },
      {
        "from": "assistant",
        "value": "read.csv(\"file.csv\")$date_column <-  as.POSIXct(read.csv(\"file.csv\")$date_column)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I format the date column in a CSV file to show only the day and month?"
      },
      {
        "from": "assistant",
        "value": "format(read.csv(\"file.csv\")$date_column, \"%d-%m\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a pulsar pulse profile with two separate Gaussian peaks, how can I create a model using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ngx = np.linspace(-10, 10, 200)\nsigma1 = 1.0\ncenter1 = 2.0 # Center of the first pulse\namplitude1 = 1.0 / (sigma1 * np.sqrt(2 * np.pi))\nsigma2 = 2.0\ncenter2 = 8.0 # Center of the second pulse\namplitude2 = 1.0 / (sigma2 * np.sqrt(2 * np.pi))\n\ngaussian1 = models.Gaussian1D(amplitude=amplitude1, mean=center1, stddev=sigma1)\ngaussian2 = models.Gaussian1D(amplitude=amplitude2, mean=center2, stddev=sigma2)\n\ntotal_profile = gaussian1(x) + gaussian2(x)\nprint(total_profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to create a pulsar pulse profile with a FRESH starting point? Given the ApJ formatted text?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nxpulse = 5.0\nsigmaopt = 1.5\namplitude = 1.0 / (sigmaopt * np.sqrt(2 * np.pi))\ngaussian = models.Gaussian1D(amplitude=amplitude, mean=xpulse, stddev=sigmaopt)\nx = np.linspace(-10, 10, 200)\nprofile = gaussian(x)\nprint(profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the nearest neutron star within 10 parsecs of the Galactic center."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nskycoord = SkyCoord(ra=0*u.degree, dec=0*u.degree)\ncatalog = SkyCoord.from_name('RB161')\nidx, sep2d, dist3d = catalog.match_to_catalog_sky(skycoord)\nprint(f'Nearest neutron star: {{dist3d:.2f}} pc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the confidence interval for Poisson distributed data using Pearson's method?"
      },
      {
        "from": "assistant",
        "value": "stat, poisson_conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using the 'root-n-0' interval for Poisson confidence intervals?"
      },
      {
        "from": "assistant",
        "value": "stat, poisson_conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the 'frequentist-confidence' interval for Poisson data?"
      },
      {
        "from": "assistant",
        "value": "stat, poisson_conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a new extension to my FITS file. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.HDUList()\nhdul.append(fits.PrimaryHDU())\ncalib_hdu = fits.ImageHDU(data=np.random.randint(0, 100, size=(10, 10)))\nhdul.append(calib_hdu)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert between mass and energy for a black hole with a mass of 10 solar masses?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n# Define a black hole mass (10 solar masses)\nbh_mass = 10 * u.solMass\n# Calculate energy using E = mc^2\nenergy = (bh_mass * c**2).to('erg')\n# Display results in different units\nprint(f'Black hole mass: {bh_mass:.2e}')\nprint(f'Energy equivalent (erg): {energy:.2e}')\nprint(f'Energy equivalent (joules): {energy.to('joule'):.2e}')\nprint(f'Energy equivalent (MeV): {energy.to('MeV'):.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe the expected input and output formats for the bootstrap function in the astropy.stats module?"
      },
      {
        "from": "assistant",
        "value": "The expected input format for the bootstrap function is a numpy array, and the expected output format is a numpy array or the output of a specified function applied to each bootstrap resample."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the NumpyRNGContext context manager in the astropy.utils module?"
      },
      {
        "from": "assistant",
        "value": "The purpose of the NumpyRNGContext context manager is to set the random seed for numpy, allowing for reproducible random number generation."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the bootstrap function to calculate a statistic on an array?"
      },
      {
        "from": "assistant",
        "value": "You can use the bootstrap function to calculate a statistic on an array by passing a function that takes the array as input and returns the desired statistic as output. For example, you can use the numpy.mean function to calculate the mean of each bootstrap resample."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to calculate the mean absolute deviation of a list of angles?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data, weights=weights)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the circular variance of an array of directions?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circvar(data, weights=weights)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula to compute the circular standard deviation of a list of angles?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(data, weights=weights)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a polynomial model of degree 3 to the data. How can I use Polynomial1D to determine the coefficients of the polynomial?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\neach = np.array([1, 2, 3, 4, 5])xp = np.array([1, 4, 9, 16, 25])model = models.Polynomial1D(degree=3)fitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(model, x, y)\nprint(f'Coefficients of the fitted polynomial: {fitted_model coefficients}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Sin1D to fit a sine curve to the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\neach = np.array([1, 2, 3, 4, 5])xp = np.array([np.pi/2, np.pi, 3*np.pi/2, 2*np.pi, 5*np.pi/2])model = models.Sin1D(amplitude=1, offset=0, period=2*\u03c0)fitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(model, x, y)\nprint(f'Amplitude of the fitted sine curve: {fitted_model.amplitude}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a Gaussian model to the data. How can I use Gaussian1D to determine the center, width and amplitude of the Gaussian?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\neach = np.array([1, 2, 3, 4, 5])xp = np.array([1, 2, 3, 4, 5])model = models.Gaussian1D(amplitude=1, x_mean=3, sigma=1)fitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(model, x, y)\nprint(f'Amplitude of the fitted Gaussian: {fitted_model.amplitude}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Gaussian1D model with a mean of 5000"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ngaussian = models.Gaussian1D(amplitude=1.0/(0.5*np.sqrt(2*np.pi)), mean=5000, stddev=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Gaussian1D model with a standard deviation of 1 and an amplitude of 2, that is fixed in place?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ngaussian = models.Gaussian1D(amplitude=2.0, mean=0, stddev=1, fixed={'stddev': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Gaussian1D model with a mean and standard deviation tied to a user-defined function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\ndef tie_center(model):\n    mean = 50 * model.stddev\n    return mean\ngaussian = models.Gaussian1D(amplitude=1.0/(0.5*np.sqrt(2*np.pi)), mean=0, stddev=0.5, tied={'mean': tie_center})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the median absolute deviation (MAD) of a dataset in Python?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for calculating the median absolute deviation (MAD) in Python?"
      },
      {
        "from": "assistant",
        "value": "mad = median(abs(a - median(a)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the MAD statistic to detect outliers in a dataset?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use the MAD statistic to detect outliers in a dataset."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a plot of a Sine1D model with amplitude 2, frequency 0.5, and phase 0.75 over the range 0 to 10."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a Sine1D model with amplitude 1.5, frequency 2.5, and phase 0.25 and plot it over the range 0 to 15."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a Sine1D model with amplitude 0.5, frequency 1.5, and phase 0.5 over the range 0 to 20."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new FITS image extension HDU from my numpy array of astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\neverything here..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a FITS header to my existing HDU using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\neverything here..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to read and write FITS images using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\neverything here..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a WCS object from a FITS file. Can you show me the code to do this?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nfrom astropy.wcs import WCS\n\n# Open the FITS file\nhdul = fits.open('image.fits')\n\n# Create a WCS object\nwcs = WCS(hdul[0].header)\n\n# Print the WCS\nprint(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to the QTable?"
      },
      {
        "from": "assistant",
        "value": "stellar_data['new_column'] = [1.0, 2.0, 3.0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I modify an existing column in the QTable?"
      },
      {
        "from": "assistant",
        "value": "stellar_data['radial_velocity'][0] = 100.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I delete a column from the QTable?"
      },
      {
        "from": "assistant",
        "value": "del stellar_data['distance']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a velocity in cm/s to m/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nvelocity_cm_s = 10 * u.cm / u.s\nvelocity_m_s = velocity_cm_s.to(u.m / u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation of an array of numbers?"
      },
      {
        "from": "assistant",
        "value": "mad_std([1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the median absolute deviation of a 2D array along the y-axis?"
      },
      {
        "from": "assistant",
        "value": "mad_std([[1, 2], [3, 4], [5, 6]], axis=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation of a masked array?"
      },
      {
        "from": "assistant",
        "value": "mad_std(np.ma.masked_array([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the celestial frame of a Gaia EDR3 source to WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import SkyCoord\nframe = SkyCoord(ra=12.5, dec=34.2, frame='icrs')\npcs = celestial_frame_to_wcs(frame)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the celestial frame of a source in the Barycentric Coordinate Reference System (BCRS) to WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import SkyCoord\nframe = SkyCoord(ra=12.5, dec=34.2, frame='barycentrictrueecliptic')\npcs = celestial_frame_to_wcs(frame)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the celestial frame of a source in the Galactic Coordinate System (GCS) to WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import SkyCoord\nframe = SkyCoord(ra=12.5, dec=34.2, frame='galactic')\npcs = celestial_frame_to_wcs(frame)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is thela\u010dlevelname of the object with ID 12345?"
      },
      {
        "from": "assistant",
        "value": "REST"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I delete an object with ID 67890?"
      },
      {
        "from": "assistant",
        "value": "DELETE"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the name of the object with ID 54321?"
      },
      {
        "from": "assistant",
        "value": "GET"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read a FITS file with unsigned integer data using astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('example.fits', uint=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default mode for opening a FITS file with astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('example.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I verify the checksum of a FITS file when opening it with astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('example.fits', checksum=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a Python code to track the position of the Sun on December 21, 2024, at 12:00:00 UTC from the Mauna Kea Observatory (latitude: 19.8233\u00b0 N, longitude: 155.4683\u00b0 W, elevation: 4215 meters) with measurements every 10 minutes."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_body\nfrom astropy.time import Time\nimport astropy.units as u\nimport numpy as np\n\n# Define Mauna Kea Observatory location\nmauna_kea = EarthLocation(\n    lat=19.8233*u.deg, \n    lon=-155.4683*u.deg, \n    height=4215*u.m\n)\n\n# Create time array for December 21, 2024 (12 points, 10-minute intervals)\nstart_time = Time('2024-12-21 12:00:00 UTC')\ntimes = start_time + np.linspace(0, 1, 13)*u.hour\n\n# Get Sun's position for each time\nsun_positions = []\nfor t in times:\n    # Get Sun's position\n    sun = get_body('sun', t)\n    \n    # Transform to local horizontal coordinates (altitude/azimuth)\n    sun_altaz = sun.transform_to(AltAz(obstime=t, location=mauna_kea))\n    \n    # Store position data\n    sun_positions.append({'time': t.iso, 'alt': sun_altaz.alt.deg, 'az': sun_altaz.az.deg})\n\n# Print results\nfor pos in sun_positions:\n    print(f'Time: {pos[\\'time\\']}, Alt: {pos[\\'alt\\']:.2f}\u00b0, Az: {pos[\\'az\\']:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the position of the Sun in galactic coordinates to cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, galactic\nimport astropy.units as u\n\n# Create SkyCoord object with galactic coordinates and distance\nsun = SkyCoord(l=0*u.degree, b=0*u.degree, distance=8.3*u.kpc, frame='galactic')\n\n# Convert to cartesian coordinates\ncartesian = sun.cartesian\n\n# Print cartesian coordinates\nprint(cartesian)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to find the time of periastron passage for exoplanet HD 189733b. How can I use Astropy's TimeJD for this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\njdperiastron = 2458727.5\n# Convert Julian Date to Time object and format as ISO\nperiastron_time = Time(jdperiastron, format='jd', scale='utc')\nprint('Periastron passage time:', periastron_time.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set up cylindrical coordinates to represent the positions of gas particles in a protoplanetary disk, considering their distance from the central star, angular position, and vertical height?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.coordinates.representation import CylindricalRepresentation\ncyl_coords = CylindricalRepresentation(1*u.m, np.pi/2, 0*u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a star catalog as a 3D numpy array of shape (100, 100, 4) containing RA, DEC, magnitude, and proper motion data. Show me how to create a primary HDU and set appropriate WCS coordinates for the celestial reference frame J2000."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a galaxy catalog as a 2D numpy array of shape (500, 5) containing RA, DEC, magnitude, redshift, and surface brightness data. Show me how to create a primary HDU and set appropriate WCS coordinates for the celestial reference frame J2000."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a quasar catalog as a 3D numpy array of shape (200, 200, 3) containing RA, DEC, and redshift data. Show me how to create a primary HDU and set appropriate WCS coordinates for the celestial reference frame J2000."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame with RA=23.45 degrees, Dec=67.89 degrees for equinox J2000.0 and observation time 2023-06-15 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\ncalc = SkyCoord(ra=23.45*u.deg, dec=67.89*u.deg, frame='icrs', obstime=Time('2023-06-15 12:00:00', scale='utc'))\nprecessed_frame = PrecessedGeocentric(equinox=Time('J2000'), obstime=Time('2023-06-15 12:00:00', scale='utc'))\ncalc.transform_to(precessed_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame with RA=12.34 degrees, Dec=-90.01 degrees for equinox J2000.0 and observation time 2023-06-15 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\ncalc = SkyCoord(ra=12.34*u.deg, dec=-90.01*u.deg, frame='icrs', obstime=Time('2023-06-15 12:00:00', scale='utc'))\nprecessed_frame = PrecessedGeocentric(equinox=Time('J2000'), obstime=Time('2023-06-15 12:00:00', scale='utc'))\ncalc.transform_to(precessed_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame with RA=56.78 degrees, Dec=23.45 degrees for equinox J2000.0 and observation time 2023-06-15 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\ncalc = SkyCoord(ra=56.78*u.deg, dec=23.45*u.deg, frame='icrs', obstime=Time('2023-06-15 12:00:00', scale='utc'))\nprecessed_frame = PrecessedGeocentric(equinox=Time('J2000'), obstime=Time('2023-06-15 12:00:00', scale='utc'))\ncalc.transform_to(precessed_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the positioning of multiple galaxies relative to a central galaxy in a cluster survey."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz; import astropy.units as u\n\n# Define central galaxy coordinates (example values)\ncentral_galaxy = SkyCoord(ra=140.5*u.degree, dec=1.5*u.degree)\n\n# Example coordinates for other galaxies in the cluster\ncorner_galaxy = SkyCoord(ra=140.6*u.degree, dec=1.6*u.degree)\n\ncentral_location = EarthLocation.of\u043a\u043cll(140.7, 26.5)\nobservatory_location = EarthLocation.of\u043a\u043cll(140.8, 26.5)\n\n# Calculate position angles\n# position_angle() returns angle East of North\nposition_angles = central_galaxy.position_angle(corner_galaxy)\n\n# Convert to degrees for easier interpretation\nposition_angles_deg = position_angles.to(u.degree)\n\ncurrent_altaz = central_galaxy.transform_to(AltAz(location=central_location, obstime=central_galaxy.obstime))\ncurr_alt_az = u.Quantity([current_altaz.az.degree, current_altaz.alt.degree])\n\nprint(curr_alt_az)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight midvariance of a set of normally distributed random variates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance, mad_std, median_absolute_deviation\nimport numpy as np\n\n# Generate random variates from a Gaussian distribution\nrand = np.random.default_rng(12345)\ndata = rand.standard_normal(1000)\n\n# Calculate biweight midvariance\nbiweight_midvariance_data = biweight_midvariance(data)\n\nprint(biweight_midvariance_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know the constellation of a black hole candidate at the center of the Milky Way."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, get_constellation\nget_constellation(SkyCoord(ra=266.413333*u.degree, dec=-29.006667*u.degree))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a function to calculate the velocity dispersion of a galaxy from its line-of-sight velocity distribution"
      },
      {
        "from": "assistant",
        "value": "def calculate_velocity_dispersion(losvd):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a function to generate a random time series with specified properties"
      },
      {
        "from": "assistant",
        "value": "def generate_time_series(n=100, mean=0, std=1, trend='linear'):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a function to calculate the photometric redshift of a galaxy from its observed photometry"
      },
      {
        "from": "assistant",
        "value": "def calculate_photometric_redshift(observed_photometry):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare row 5's planet mass with Neptune's mass, using Astropy's Row functionality."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\nimport astropy.units as u\nfrom astropy.constants import M_jup, M_earth\n\n# Create sample table with exoplanet data\ndata = Table({'planet_mass': [2.3] * 10,  # Mass in Earth masses\n              'orbital_period': [3.5] * 10,  # Period in days\n              'stellar_mass': [1.2] * 10  # Stellar mass in Solar masses\n             })\n\n# Add units to columns after table creation\ndata['planet_mass'] = data['planet_mass'] * u.M_earth\n# Access row 5 (index 4) as a Row object\nrow = data[4]\n# Compare planet mass to Neptune mass\nneptune_mass_in_earths = 10.2  # Neptune's mass in Earth masses\nis_more_massive = row['planet_mass'] > neptune_mass_in_earths\n\nprint(f'Planet mass: {row["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert watts to volts?"
      },
      {
        "from": "assistant",
        "value": "{u.W u.V}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the SI prefix for kilo?"
      },
      {
        "from": "assistant",
        "value": "k"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "{u.C u.K}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet transit observations in FK5 coordinates, I need to generate a WCS header with appropriate projection. Could you show how to create this using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, FITSFixedWarning\nfrom astropy.io import fits\nimport numpy as np\n\nclass MyFrame(astropy.coordinates.BaseCoordinateFrame):\n    pass\n\nw = WCS(naxis=2)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nw.wcs.equinox = 2000.0\nw.wcs.radesys = 'FK5'\npixel_scale = 0.5\nw.wcs.crval = [180.0, 30.0]\nw.wcs.crpix = [1024.0, 1024.0]\nw.wcs.cdelt = [-pixel_scale / 3600.0, pixel_scale / 3600.0]\nhdulist = [fits.PrimaryHDU(header=w.to_header())]\nfits.HDUList(hdulist).writeto('wcs_fk5.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my radio observations in Galactic coordinates, I need to generate a WCS header with appropriate projection. Could you show how to create this using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\nimport numpy as np\nfrom astropy.coordinates import Galactic\n\ng = Galactic()\nw = WCS(naxis=2)\nw = astropy.wcs.utils.celestial_frame_to_wcs(g, 'GALACTIC')\nw.wcs.cdelt = [-0.1 / 3600.0, 0.1 / 3600.0]\nhdu = fits.PrimaryHDU(header=w.to_header())\nhdu.writeto('wcs_galactic.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing data from a time-series observation of gamma-ray bursts and need to compute error bars for the count rates in each time bin. What's the best way to calculate symmetric confidence intervals for this Poisson-distributed data, with a background of 1 count per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\nimport numpy as np\n\ncounts = np.array([12, 8, 15, 6, 10, 9])  # Count rates\nexposure_time = 100  # seconds per bin\nbackground = 1  # count per second\ncounts_with_background = counts + background * exposure_time\n\nlower_conf, upper_conf = poisson_conf_interval(counts_with_background, interval='kraft-burrows-nousek', background=background, confidence_level=0.68)\n\nerrors = np.maximum(upper_conf - counts, counts - lower_conf)\n\nrates = counts / exposure_time\nrate_errors = errors / exposure_time\n\nfor i, (rate, error) in enumerate(zip(rates, rate_errors)):\n    print(f\"Bin {i}: Rate = {rate:.3f} \u00b1 {error:.3f} counts/s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the cosmic microwave background radiation and plot its power spectrum using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck15\nfrom astropy.modeling.models import BlackBody\nimport matplotlib.pyplot as plt\n\n# Define cosmology\n cosmology = Planck15\n\n# Define temperature of the cosmic microwave background radiation\n temperature = 2.7255  # in Kelvin\n\n# Create BlackBody model instance\n bb = BlackBody(temperature=temperature)\n\n# Calculate power spectrum\n power_spectrum = bbspectral_density(cmb = True)\n\n# Create the plot\n plt.figure(figsize=(10, 6))\n plt.plot(power_spectrum)\n plt.xlabel('Frequency')\n plt.ylabel('Power Spectrum')\n plt.title('Cosmic Microwave Background Radiation Power Spectrum')\n plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the blackbody radiation from a nebula and plot its spectral energy distribution using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.physical_models import BlackBody\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define temperature of a nebula (e.g., 10000K)\n temperature = 10000 * u.K\n\n# Create wavelength array (from UV to IR: 100nm to 2000nm)\n wavelengths = np.linspace(100, 2000, 1000) * u.nm\n\n# Create BlackBody model instance\n bb = BlackBody(temperature=temperature)\n\n# Calculate spectral radiance using Planck's law\n spectral_radiance = bb(wavelengths)\n\n# Create the plot\n plt.figure(figsize=(10, 6))\n plt.plot(wavelengths, spectral_radiance)\n plt.xlabel('Wavelength (nm)')\n plt.ylabel('Spectral Radiance (erg/s/cm^2/\u00c5/sr)')\n plt.title(f'Blackbody Radiation Curve (T = {temperature.value}K)')\n plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the blackbody radiation from a typical white dwarf and plot its spectral energy distribution using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.physical_models import BlackBody\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define temperature of a typical white dwarf (e.g., 10000K)\n temperature = 10000 * u.K\n\n# Create wavelength array (from UV to IR: 100nm to 2000nm)\n wavelengths = np.linspace(100, 2000, 1000) * u.nm\n\n# Create BlackBody model instance\n bb = BlackBody(temperature=temperature)\n\n# Calculate spectral radiance using Planck's law\n spectral_radiance = bb(wavelengths)\n\n# Create the plot\n plt.figure(figsize=(10, 6))\n plt.plot(wavelengths, spectral_radiance)\n plt.xlabel('Wavelength (nm)')\n plt.ylabel('Spectral Radiance (erg/s/cm^2/\u00c5/sr)')\n plt.title(f'Blackbody Radiation Curve (T = {temperature.value}K)')\n plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.wcs.rst? It provides a convenient interface for transforming between world coordinates and pixel coordinates in a WCS object."
      },
      {
        "from": "assistant",
        "value": "The `astropy.wcs\ud604 RCS` class provides methods for transforming between world coordinates and pixel coordinates in a WCS object. You can use the `wcs_world2pix` method to transform world coordinates to pixel coordinates, and the `wcs_pix2world` method to transform pixel coordinates to world coordinates. For example: `wcs_world2pix(wcs, world_coords)` transforms world coordinates to pixel coordinates, and `wcs_pix2world(wcs, pix_coords)` transforms pixel coordinates to world coordinates."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the pH of a solution with a known hydrogen ion concentration using the pH formula?"
      },
      {
        "from": "assistant",
        "value": "import math\ndef calculate_pH(hydrogen_concentration):\n    # Calculate pH using the formula pH = -log10[H+]\n    return -math.log10(hydrogen_concentration)\n# Example usage:\nhydrogen_concentration = 1e-7\npH = calculate_pH(hydrogen_concentration)\nprint(f'The pH of the solution is: {pH:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use astropy's time functionality to calculate the Julian Date of a given date and time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Define the date and time\ndate = '2022-01-01 12:00:00'\n\n# Create a Time object\ntime = Time(date)\n\n# Calculate the Julian Date\njulian_date = time.jd\n\n# Print the result\nprint(f'The Julian Date is: {julian_date:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a temperature from Celsius to Kelvin using astropy's units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ntemp_celsius = 25 * u.deg_C\ntemp_kelvin = temp_celsius.to(u.K)\nprint(f'Temperature in Kelvin: {temp_kelvin:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a PowerLaw1D instance with amplitude=1.2e-3, x_0=2.0 keV, and alpha=2.1?"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=1.2e-3, x_0=2.0, alpha=2.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a PowerLaw1D instance with amplitude=2.5e-4, x_0=5.0 keV, and alpha=3.5?"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=2.5e-4, x_0=5.0, alpha=3.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a PowerLaw1D instance with amplitude=1.5e-2, x_0=10.0 keV, and alpha=1.0?"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=1.5e-2, x_0=10.0, alpha=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the eigenvector centrality of a given graph?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import Constant1D\n\nclass EigenvectorCentrality(models.Model):\n    def evaluate(self, x):\n        return np.array([1.0 if i < x else 0.0 for i in range(len(x))])\n\nfitter = fitting.LevMarLSQFitter()\nmodel = EigenvectorCentrality()\nfitter(model, np.array([1, 2, 3, 4, 5]), np.array([0, 0, 0, 0, 0]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a polynomial of degree 3 to a given set of data points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import Polynomial1D\nclass CustomPolynomial(models.Model):\n    def evaluate(self, x):\n        return 3 * x**3 + 2 * x**2 + x\n\nfitter = fitting.LevMarLSQFitter()\nmodel = CustomPolynomial()\nfitter(model, np.array([1, 2, 3]), np.array([4, 9, 16]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the flux of a star at a given wavelength?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import Constant1D\n\nclass Flux(models.Model):\n    def evaluate(self, x):\n        return Constant1D(amplitude=1.0)\n\nfitter = fitting.LevMarLSQFitter()\nmodel = Flux()\nfitter(model, np.array([5000]), np.array([1.0]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert an MJD date to a datetime object using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nt = Time(51544.0, format='mjd')\ns = t.datetime"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the MJD date 58400.0 to a datetime object using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nt = Time(58400.0, format='mjd')\nprint(t.datetime)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert an MJD timestamp 52000.0 to a standard datetime format in Python using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nt = Time(52000.0, format='mjd')\nprint(t.datetime)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to convert the MJD date 52800.0 to a datetime object in Python using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nt = Time(52800.0, format='mjd')\ns = t.datetime"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance between the Sun and the Earth?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for the Sun and the Earth\nSun = SkyCoord(ra=280.4545*u.degree, dec=23.4367*u.degree, distance=1)*u.au\nEarth = SkyCoord(ra=100.4703*u.degree, dec=18.2891*u.degree, distance=1)*u.au\n\ndistance = Sun.distance + Earth.distance\n# Calculate the distance between the Sun and the Earth\nseparation = SkyCoord.separation(Sun, Earth)\n# Print result in AU\nprint(f\"Distance: {separation.au:.2f} AU\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the coordinates of a star from the Hipparcos catalog to the ICRS reference frame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS\nfrom astropy import units as u\n\n# Example star data (replace with your catalog data)\nra = 18.6361111 * u.degree\ndec = 31.9797222 * u.degree\ndistance = 10.0 * u.parsec\n\n# Set observation time\n#time_now = Time('2023-01-01')\ntime_now = None\n\n# Create SkyCoord object\nstar = SkyCoord(ra=ra, dec=dec, distance=distance, frame='icrs', equinox='J2000.0', obstime=time_now)\n\n# Convert to ICRS frame\nicrs_star = star.transform_to(ICRS)\n\n# Print results\nprint(icrs_star)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a wavelength in meters to a wavelength in Angstroms?"
      },
      {
        "from": "assistant",
        "value": "u.AA(u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from megamags to decibels?"
      },
      {
        "from": "assistant",
        "value": "u.mmag.to(u.dB)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a magnitude in dex to a magnitude in mag?"
      },
      {
        "from": "assistant",
        "value": "u.dex.to(u.mag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new FITS file with a single image HDU?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nhdu = fits.PrimaryHDU(data=np.random.rand(1024, 1024))\nhdulist = fits.HDUList([hdu])\nhdulist.writeto('new_image.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the distance between the Earth and the Moon in astronomical units (AU)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import AU\n# Calculate the distance between the Earth and the Moon\nmoon_distance = 384400 * u.km\nmoon_in_au = moon_distance.to(u.au)\nprint(f'The distance between the Earth and the Moon is {moon_in_au:.2f} AU.')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many Earth masses is the Sun's mass?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import M_earth, M_sun\n# Calculate the Sun's mass in Earth masses\nsun_mass_in_earth_masses = M_sun / M_earth\nprint(f'The Sun's mass is {sun_mass_in_earth_masses:.2f} Earth masses.')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the speed of light in kilometers per second (km/s)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n# Calculate the speed of light in km/s\nspeed_of_light_km_per_second = (c.to(u.km / u.s)).value\nprint(f'The speed of light is {speed_of_light_km_per_second:.2f} km/s.')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new WCS object from a FITS file and select specific axes using naxis parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwcs = WCS('image.fits', naxis=2)\nunprojected_wcs = wcs.sub(0, 1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new WCS object from a FITS file and select specific keyword types using keysel parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwcs = WCS('image.fits', keysel=['image', 'binary'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new WCS object from a FITS file and fix any non-standard uses in the header using fix parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwcs = WCS('image.fits', fix=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert the following date from ISO format to MJD: \"2022-01-01T00:00:00\"?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Example time in ISO format\niso_time = \"2022-01-01T00:00:00\"\n\n# Convert ISO time to Time object and get Modified Julian Date\nt = Time(iso_time, format='isot', scale='utc')\nmjd = t.mjd\n\nprint(f\"ISO time: {iso_time}\")\nprint(f\"Modified Julian Date: {mjd}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert JD 2458100.5 to Unix timestamp using astropy's TimeJD, with the observatory location being the VLA?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\nvla = EarthLocation(lat=34.0589*u.deg, lon=-107.4969*u.deg, height=2224.8*u.m)\njd_time = Time(2458100.5, format='jd', scale='utc', location=vla)\nunix_timestamp = jd_time.unix\nprint(f'Unix Timestamp: {unix_timestamp}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to convert JD 2451234.25 to Unix timestamp using astropy's TimeJD, with the observatory location being the AAT?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\naat = EarthLocation(lat=-31.2833*u.deg, lon=151.45*u.deg, height=1.198*u.km)\njd_time = Time(2451234.25, format='jd', scale='utc', location=aat)\nunix_timestamp = jd_time.unix\nprint(f'Unix Timestamp: {unix_timestamp}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert JD 2456789.75 to Unix timestamp using astropy's TimeJD, with the observatory location being the LBT?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\nlbt = EarthLocation(lat=31.4050*u.deg, lon=-110.8678*u.deg, height=2691*u.m)\njd_time = Time(2456789.75, format='jd', scale='utc', location=lbt)\nunix_timestamp = jd_time.unix\nprint(f'Unix Timestamp: {unix_timestamp}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of using the Const1D model to represent a constant function in astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as models\nfrom astropy import units as u\n\n# Create a Const1D model with amplitude 5\nmodel = models.Const1D(amplitude=5 * u count)\n\n# Evaluate the model at x=2\ny = model(x=2 * u.m)\nprint(y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Const1D model to fit a constant function to data in astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\n# Generate some sample data\nx = np.linspace(0, 10, 100)\ny = np.ones_like(x) + np.random.normal(0, 1, x.shape)\n\n# Create a Const1D model\nmodel = models.Const1D()\n\n# Fit the model to the data\nfitter = fitting.LevMarLSQFitter()\nmodel = fitter(model, x, y)\nprint(model.amplitude)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of using the Const1D model to represent a constant function and plot it against some data in astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling import models\n\n# Create some sample data\nx = np.linspace(0, 10, 100)\ny = np.ones_like(x) + np.random.normal(0, 1, x.shape)\n\n# Create a Const1D model\nmodel = models.Const1D(amplitude=5)\n\n# Plot the data and the model\nplt.plot(x, y, 'bo-', label='Data')\nplt.plot(x, model(x), 'r-', label='Model')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to compute the biweight midvariance of a distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the biweight midvariance differ from the standard definition?"
      },
      {
        "from": "assistant",
        "value": "biweight_midvariance(data, modify_sample_size=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the biweight midvariance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance; print(biweight_midvariance.__doc__)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight midvariance used for?"
      },
      {
        "from": "assistant",
        "value": "biweight_midvariance(data=astropy\u7edf\u8ba1.default_rng(12345).standard_normal(1000), c=9.0, M=None, axis=None, modify_sample_size=False, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply Gaussian smoothing to my telescope image of the Milky Way galaxy to reduce noise. I want to create a 2D Gaussian kernel with x and y standard deviations of 5 pixels and no rotation. How can I create this kernel using Astropy's Gaussian2DKernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nimport numpy as np\ngaussian_kernel = Gaussian2DKernel(x_stddev=5, y_stddev=5, theta=0)\ntag"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D Gaussian kernel with x and y standard deviations of 10 pixels and 45 degrees rotation using Astropy's Gaussian2DKernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nfrom astropy import units as u\nfrom astropy.convolution import convolve\ngaussian_kernel = Gaussian2DKernel(x_stddev=10, y_stddev=10, theta=45*u.deg)\ntag"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply Gaussian smoothing to my telescope image of the Andromeda galaxy to reduce noise. I want to create a 2D Gaussian kernel with x and y standard deviations of 20 pixels and 90 degrees rotation. How can I create this kernel using Astropy's Gaussian2DKernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\ngaussian_kernel = Gaussian2DKernel(x_stddev=20, y_stddev=20, theta=1.57)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the data from the 'IMAGE' extension in '/path/image.fits' and set field names to lowercase?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngetdata('/path/image.fits', 'IMAGE', lower=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset with some outliers and I want to calculate the biweight scale. Can you show me how to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nbiweight_scale(data=[1, 2, 3, 100, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to calculate the biweight scale of a dataset with a small sample size and I want to modify the sample size to correct for rejected values. Can you show me how to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nbiweight_scale(data=[1, 2, 3, 100, 4, 5], modify_sample_size=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the biweight scale of a dataset with NaN values and I want to ignore these values. Can you show me how to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nbiweight_scale(data=[1, 2, 3, 100, 4, 5, np.nan], ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new parameter for a model-related transform that accepts values within the range of -1 to 1, using the astropy model "
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model, ParametricModel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " How do I implement a cosmetic parameter to transform input values?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, quantities as uq"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constraints should I place on a parameter for a model`s experimentally determined value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am doing astronomical observations in Sydney (UTC+10). How do I convert a given time to the local time in Sydney?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom datetime import datetime\nfrom astropy.time import Time, TimezoneInfo\n\nlocal_time = datetime(2023, 8, 1, 3, 45, 0, tzinfo=TimezoneInfo(utc_offset=10*u.hour))\n\nprint(local_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new unit representing kilometers per hour squared?"
      },
      {
        "from": "assistant",
        "value": "Unit('km/h^2', u.km / u.h**2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the symbol for the unit of acceleration due to gravity?"
      },
      {
        "from": "assistant",
        "value": "Unit('g', 9.80665 * u.m / u.s**2, doc='acceleration due to gravity')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a custom unit for the luminosity of a star in watts per square meter?"
      },
      {
        "from": "assistant",
        "value": "Unit('star_luminosity', u.W / u.m**2, doc='luminosity of a star')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a non-linear stretch to my data using the PowerStretch function from astropy.visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch\nimport numpy as np\n\n# Create sample data\ncdata = np.random.uniform(0.0, 1.0, 1000)\n\nc# Create PowerStretch transform with exponent=2.5\nctest = PowerStretch(exponent=2.5)\n\nc# Apply the stretch transformation to the data\ncrest = ctest(cdata)\n\nc# Plot original vs stretched data\nimport matplotlib.pyplot as plt\ntplt.figure(figsize=(10, 6))\ntplt.plot(cdata, 'b-', label='Original', alpha=0.5)\ntplt.plot(crest, 'r-', label='Stretched', alpha=0.8)\ntplt.xlabel('Value')\ntplt.ylabel('Value after transformation')\ntplt.title('Data with PowerStretch Applied')\ntplt.legend()\ntplt.grid(True, alpha=0.3)\ntplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a custom stretch function that maps the input values to a specified range."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\n\n# Create sample data\nsin = np.linspace(0, np.pi, 1000)\n# Create custom stretch function that maps the input values to [0.2, 0.8]\ndef stretch_custom(x):\n    return LinearStretch(slope=1.5)(0.2 + 0.6 * (x - np.min(sin)) / (np.max(sin) - np.min(sin)))\n# Apply the custom stretch function\ncustom_stretch = stretch_custom(sin)\n# Plot original vs stretched data\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nplt.plot(sin, 'b-', label='Original', alpha=0.5)\nplt.plot(custom_stretch, 'r-', label='Stretched', alpha=0.8)\nplt.xlabel('Angle (rad)')\nplt.ylabel('Value after transformation')\nplt.title('Data with Custom Stretch Applied')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the AsinhStretch function from astropy.visualization to make the absorption features more prominent in my visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch\nimport numpy as np\n\n# Create sample normalized spectrum data (example data)\nwavelength = np.linspace(4000, 7000, 1000)  # wavelength array in Angstroms\nintensity = np.random.uniform(0.0, 1.0, 1000)  # normalized intensity values\n\n# Create AsinhStretch transform with zero and beta=2.5\nstretch = AsinhStretch(zero=0.5, beta=2.5)\n\n# Apply the stretch transformation to intensity values\nstretched_intensity = stretch(intensity)\n\n# Plot original vs stretched spectrum\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, intensity, 'b-', label='Original', alpha=0.5)\nplt.plot(wavelength, stretched_intensity, 'r-', label='Stretched', alpha=0.8)\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Intensity')\nplt.title('Spectrum with AsinhStretch Applied')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.table.hstack function to stack tables along columns?"
      },
      {
        "from": "assistant",
        "value": "Use the function chain.hstack with the necessary arguments, for example: }]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible join types in the astropy.table.hstack function?"
      },
      {
        "from": "assistant",
        "value": "The possible join types are 'exact', 'inner', and 'outer'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to create a masked column with a specific dtype, but I'm getting an error. How do I specify the dtype correctly?"
      },
      {
        "from": "assistant",
        "value": "import astropy.table as table\n\n# Create a masked column with a specific dtype\nmasked_column = table.MaskedColumn(data=[1, 2, 3], name='my_column', dtype=np.int32)\n\n# Check the dtype of the masked column\nprint(masked_column.dtype)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write code to create a structured unit that keeps track of the time of observation with a given duration and start time."
      },
      {
        "from": "assistant",
        "value": "from astropy import time\nfrom astropy.units import StructuredUnit\n\n# Create a structured unit for duration and start time\nstructured_unit = StructuredUnit([time.Time h\u00e4r\u0451\u043d, time.Time v\u011bt\u0161\u00ed award], unit majestic '[time]')\n\n# Create instance\ninstance = structured_unit(arg\u00fcmen ts=time.Time('2022-01-01T12:00:00'), duration=time.TimeDelta(1, format='entar'))\n\n# Example of accessing the unit with its start time and duration\nprint(f'Start time: {instance.start_time}')\nprint(f'Duration: {instance.duration}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Julian Date for the date 2022-01-01 00:00:00?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(\"2022-01-01 00:00:00\", format='iso', scale='utc').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changing the a parameter of the AsinhStretch function when working with arrays of small and large values?"
      },
      {
        "from": "assistant",
        "value": "The a parameter controls the transition from linear to logarithmic behavior. As a increases, the stretch becomes more linear. When working with arrays of small and large values, a smaller a value can help to bring out details in the small values while a larger a value can help to compress the large values and bring out details in the small values."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to stretch the intensity values of an image linearly. How can I do this in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\n\ndef stretch_linear_intensities(slope=1.0, intercept=0.0):\n    \"\"\"Linear stretch with a slope and offset.\n    The stretch is given by:\\\n    .. math::\n        y = slope * x + intercept\n    Parameters\n    ----------\n    slope : float, optional\n        The ``slope`` parameter used in the above formula.  Default is 1.\n    intercept : float, optional\n        The ``intercept`` parameter used in the above formula.  Default is 0.\n    \"\"\"\n    return LinearStretch(slope, intercept)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the celestial frame from a WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nutils.wcs_to_celestial_frame(wcs=WCS())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to merge two tables but getting an error that says 'no common type between [int64] and [float64]' when trying to join on a column. How can I resolve this?"
      },
      {
        "from": "assistant",
        "value": "print('Error:', e)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to merge two tables based on a non-primary key column, such as a location or department?"
      },
      {
        "from": "assistant",
        "value": "for col in merged_data.columns:\n        if col != 'department':  # Preserve departments\n            merged_data[col].fill_value = np.nan\n            merged_data[col] = merged_data[col].filled()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to merge three tables but getting a 'too many values to unpack' error. How can I fix this?"
      },
      {
        "from": "assistant",
        "value": "try:\n        # Perform an outer join on star_id to keep all data\n        merged_data = join(spec_data, phot_data, join_type='outer', keys='star_id')\n        # ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `astropy.wcs.utils.proj_plane_pixel_area` function to compute the pixel area for a celestial WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import proj_plane_pixel_area\nwcs = WCS()\ncalculate_pixel_areas(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a visualization that effectively shows both the bright and faint structures of a supernova explosion?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nfrom astropy.visualization import AsinhStretch, ImageNormalize\nimport matplotlib.pyplot as plt\ndata = np.random.lognormal(mean=2, sigma=2, size=(100,100))\nstretch = AsinhStretch(a=0.1)\nnorm = ImageNormalize(data, vmin=np.percentile(data, 1), vmax=np.percentile(data, 99), stretch=stretch)\nplt.imshow(data, norm=norm, cmap='viridis', origin='lower')\nplt.colorbar(label='Intensity')\nplt.title('Supernova Explosion - Arcsinh Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy's modeling functions to subtract a quadratic baseline from my light curve data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Sample light curve data (replace with your actual data)\ntime = np.linspace(0, 10, 100)  # Time array\nflux = 2.0 * time**2 + 1000 + np.random.normal(0, 5, 100)  # Flux with quadratic trend + noise\n\n# Create a quadratic model to fit the baseline\nquadratic_model = models.Polynomial1D(degree=2)\nfit = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfitted_model = fit(quadratic_model, time, flux)\n\n# Remove the trend by subtracting the fitted model\ndetrended_flux = flux - fitted_model(time)\n\n# The detrended_flux array now contains your detrended light curve\n# Optional: normalize around 1 if desired\nnormalized_flux = detrended_flux / np.median(detrended_flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to access and compare column values in an astropy Table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ncatalog = Table.read('cluster_catalog.fits')\ncatalog['column1'] == catalog['column2']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Could you create a 2D brightness profile of a Sersic model with n=2, ellipticity 0.3 and theta = pi/4? "
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nimport numpy as np\n\n# Create a coordinate grid (in pixels)\ny, x = np.mgrid[-50:51, -50:51]\n\n# Define the model with n=2, ellipticity 0.3 and theta = pi/4\nmodel = Sersic2D(amplitude=1, r_eff=25, n=2, ellip=0.3, theta=np.pi/4)\n\n# Generate the 2D brightness profile\nreturn model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D brightness profile of a Sersic model with n=1.5, ellipticity 0.1 and theta = pi/2? "
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nimport numpy as np\n\n# Create a coordinate grid (in pixels)\ny, x = np.mgrid[-50:51, -50:51]\n\n# Define the model with n=1.5, ellipticity 0.1 and theta = pi/2\nmodel = Sersic2D(amplitude=1, r_eff=25, n=1.5, ellip=0.1, theta=np.pi/2)\n\n# Generate the 2D brightness profile\nreturn model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Could you create a 2D brightness profile of a Sersic model with n=0.5, ellipticity 0.5 and theta = 0? "
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nimport numpy as np\n\ndef create_inclined_galaxy(n=4, ellipticity=0.0, theta=0):\n    model = Sersic2D(\n        amplitude=1,\n        r_eff=25,\n        n=n,\n        x_0=0,\n        y_0=0,\n        ellip=ellipticity,  # Adjust this to simulate inclination\n        theta=theta\n    )\n    # Generate the 2D brightness profile\n    return model(x, y)\n\nface_on = create_inclined_galaxy(ellipticity=0.5, theta=0)\n\nreturn face_on"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize a histogram of values from 0 to 500 with some outliers?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data, stretch='sqrt', vmin=0, vmax=500, clip=True, invalid=-1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize a histogram of values from 0 to 1000 with some NaN values?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data, stretch='asinh', asinh_a=0.05, vmin=0, vmax=1000, invalid=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize a histogram of values from 0 to 1000 with some extreme outliers?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data, stretch='log', log_a=100, vmin=0, vmax=1000, clip=True, invalid=-1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the position of the Sun at a specific time."
      },
      {
        "from": "assistant",
        "value": "sunpos = get_sun(Time(\"2022-07-25 12:00:00\")).data.sv"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D tophat kernel with a radius of 5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different discretization modes available for creating a 2D tophat kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(5, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D tophat kernel with a radius of 5 and an oversampling factor of 20?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(5, factor=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a list of UTC times to Modified Julian Date using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.time import TimeMJD\n\n# List of UTC times\nutc_times = ['2022-01-01 00:00:00', '2022-01-01 12:00:00']\n\n# Convert UTC times to MJD\nmjd_times = Time.utcutc_times).mjd\n\nprint(mjd_times)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the slope of a line using the equation y = mx + b?"
      },
      {
        "from": "assistant",
        "value": "def slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        return float('inf')\n    return (y2 - y1) / (x2 - x1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the definition of a subtractive color model?"
      },
      {
        "from": "assistant",
        "value": "Subtractive color models are a type of color model that create colors by absorbing certain wavelengths of light. This is in contrast to additive color models, which create colors by emitting certain wavelengths of light."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I format a string as a table in Python?"
      },
      {
        "from": "assistant",
        "value": "from tabulate import tabulate\narray = [['Name', 'Age'], ['John', 23], ['Alice', 25]]\nprint(tabulate(array, headers='firstrow', tablefmt='grid')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian filter kernel with a standard deviation of 1 along both x and y axes and a rotation angle of pi/4 radians."
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Gaussian2DKernel(1, 1, theta=np.pi/4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate a 2D Gaussian filter kernel with a standard deviation of 2 in the x-axis and 3 in the y-axis with a rotation angle of 0 radians"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Gaussian2DKernel(2, 3, theta=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian filter kernel with a standard deviation of 1 along both x and y axes and a rotation angle of pi/4 radians, with a kernel size of 11x11 pixels"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Gaussian2DKernel(1, 1, theta=np.pi/4, x_size=11, y_size=11)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing pulsar timing data with values [0.0123, 0.0125, 0.0121, 0.0124, 0.0122] seconds. How can I apply jackknife_resampling to assess the robustness of my period measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling\nimport numpy as np\n\ntiming_data = np.array([0.0123, 0.0125, 0.0121, 0.0124, 0.0122])\njackknife_samples = jackknife_resampling(timing_data)\njackknife_means = np.mean(jackknife_samples, axis=1)\njackknife_estimate = np.mean(jackknife_means)\njackknife_error = np.sqrt(((len(timing_data)-1)/len(timing_data)) *  np.sum((jackknife_means - jackknife_estimate)**2))\nprint(f\"Original mean: {np.mean(timing_data):.6f} s\")\nprint(f\"Jackknife estimate: {jackknife_estimate:.6f} s\")\nprint(f\"Jackknife error: {jackknife_error:.6f} s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to add a Constant model to the compound model created in previous prompt? The constant level should be 1.0."
      },
      {
        "from": "assistant",
        "value": "constant = models.Constant1D(amplitude=1.0)\ncomplete_model = complete_model * constant"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine three models, PowerLaw1D, Gaussian1D, and Constant1D, into a compound model?"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=2.0, x_0=5000, alpha=-0.7)\ngaussian = models.Gaussian1D(amplitude=5.0, mean=6563, stddev=2.5)\nconstant = models.Constant1D(amplitude=1.0)\ncomplete_model = powerlaw * gaussian * constant"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to add a Sine model to the compound model created in previous prompt? The amplitude should be 0.5, period should be 100.0, phase should be 0.25."
      },
      {
        "from": "assistant",
        "value": "sine = models.Sine1D(amplitude=0.5, period=100.0, phase=0.25)\ncomplete_model = complete_model * sine"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use MaskedColumn with a table from a CSV file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn\nfrom astropy.io import ascii\n\ntable = ascii.read('data.csv')\n\n# Create a masked column for the magnitude values\nmag_mask = table['error'] > 0.05\ncol = MaskedColumn(data=table['magnitude'], mask=mag_mask, name='magnitude')\ntable.add_column(col)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between MaskedColumn and Column?"
      },
      {
        "from": "assistant",
        "value": "MaskedColumn is used to define a column in a Table object where some elements are missing or invalid. It includes a mask and fill_value attributes. Column is used to define a column in a Table object where all elements are valid."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a masked column with a specific dtype?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\ncol = MaskedColumn(data=[1, 2, 3], dtype=float, name='name')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the weighted mean orientation of molecular clouds in the Milky Way galaxy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ncircmean(np.array([30, 60, 90, 120]) * np.pi / 180, weights=np.array([1, 2, 3, 4]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the median orientation of the Milky Way galaxy"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ncircmean(np.array([30, 60, 90, 120]) * np.pi / 180, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the weighted mean orientation of the Cool molecular cloud in the Sagittarius Star forming region"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ncircmean(np.array([30, 60, 90, 120]) * np.pi / 180, weights=np.array([1.5, 2.5, 3.5, 4.5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an FK5 coordinate frame for a group of stars with their radial velocities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nimport astropy.units as u\n\nstars_data = [...]\n\nfk5_coords = []\nfor ra, dec, distance, rv in stars_data:\n    star = SkyCoord(ra=ra, dec=dec, distance=distance, radial_velocity=rv, frame=FK5, equinox='J2000')\n    fk5_coords.append(star)\n\nfor i, coord in enumerate(fk5_coords):\n    print(f\"Star {i+1}\")\n    print(f\"RA: {coord.ra.to_string(unit=u.hour)}\")\n    print(f\"Dec: {coord.dec.to_string()}\")\n    print(f\"Radial velocity: {coord.radial_velocity}\")\n\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 5x5 box kernel"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(width=5)\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 7x7 box kernel"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(width=7)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3x3 box kernel with integrate mode"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(width=3, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use LinearStretch to enhance the contrast of galaxy surface brightness data with values from 10 to 20 mag/arcsec\u00b2. How can I use a slope of 1.2 and an intercept of 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize\ngalaxy_data = np.random.uniform(10, 20, size=(100, 100))\nnorm = ImageNormalize(\ngalaxy_data, stretch=LinearStretch(slope=1.2, intercept=1),\n    vmin=10, vmax=20)\nnormalized_data = norm(galaxy_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of observation dates [1995.123, 2001.456, 2007.789] to Besselian Epoch format using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\ndecimal_years = [1995.123, 2001.456, 2007.789]\nt = Time(decimal_years, format='decimalyear')\nbesselian_epochs = t.byear\nfor year, bepoch in zip(decimal_years, besselian_epochs):\n    print(f\"Decimal Year: {year} \u2192 Besselian Epoch: {bepoch:.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the optimal bin width for a histogram of my data?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=np.array([1, 2, 3, 4, 5]), return_bins=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to compute the position angle between two points on a sphere, where the first point is at longitude 10.5\u00b0 and latitude 2.1\u00b0, and the second point is at longitude 11.1\u00b0 and latitude 2.3\u00b0."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both points in Galactic coordinates\npoint1 = SkyCoord(l=10.5*u.degree, b=2.1*u.degree, frame='galactic')\npoint2 = SkyCoord(l=11.1*u.degree, b=2.3*u.degree, frame='galactic')\n\n# Calculate position angle between the points\n# position_angle() returns angle East of North\npos_angle = point1.position_angle(point2)\n\n# Convert to degrees for display\npos_angle_deg = pos_angle.to(u.degree)\n\nprint(f\"Position angle: {pos_angle_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to compute the position angle between two points on a sphere, where the first point is at longitude 15.6\u00b0 and latitude -3.4\u00b0, and the second point is at longitude 16.2\u00b0 and latitude -3.6\u00b0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both points in Galactic coordinates\npoint1 = SkyCoord(l=15.6*u.degree, b=-3.4*u.degree, frame='galactic')\npoint2 = SkyCoord(l=16.2*u.degree, b=-3.6*u.degree, frame='galactic')\n\n# Calculate position angle between the points\n# position_angle() returns angle East of North\npos_angle = point1.position_angle(point2)\n\n# Convert to degrees for display\npos_angle_deg = pos_angle.to(u.degree)\n\nprint(f\"Position angle: {pos_angle_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to compute the position angle between two points on a sphere, where the first point is at longitude 20.8\u00b0 and latitude 4.5\u00b0, and the second point is at longitude 21.4\u00b0 and latitude 4.7\u00b0."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both points in Galactic coordinates\npoint1 = SkyCoord(l=20.8*u.degree, b=4.5*u.degree, frame='galactic')\npoint2 = SkyCoord(l=21.4*u.degree, b=4.7*u.degree, frame='galactic')\n\n# Calculate position angle between the points\n# position_angle() returns angle East of North\npos_angle = point1.position_angle(point2)\n\n# Convert to degrees for display\npos_angle_deg = pos_angle.to(u.degree)\n\nprint(f\"Position angle: {pos_angle_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to switch to 'dexc02s' ephemeris ?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('dexc02s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to get the position of Jupiter at 2020-01-01 12:00 using 'de440s' ephemeris?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('de440s'); time = Time('2020-01-01 12:00'); jupiter = get_body('jupiter', time);"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default ephemeris used by astropy.coordinates.solar_system_ephemeris?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.get()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I convert a table to a pandas DataFrame.A"
      },
      {
        "from": "assistant",
        "value": "nans="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I convert a slice of a table to a pandas DataFrame."
      },
      {
        "from": "assistant",
        "value": "nans="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "It returns the attribute with the given name in the meta dictionary of*self."
      },
      {
        "from": "assistant",
        "value": "nans="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing Jupiter's orbital characteristics and need to compute its barycentric position and velocity at intervals of 15 days for the first quarter of 2024, starting from February 15th. Could you show me the code to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body_barycentric_posvel\nimport numpy as np\ncurrentday = Time('2024-02-15')\ndays = np.arange(0, 91, 15)\ntimes = currentday + days * u.day\nfor t in times:\n    pos, vel = get_body_barycentric_posvel('jupiter', t)\n    # Convert to more readable units (AU for position, km/s for velocity)\n    pos_au = pos.xyz.to(u.au)\n    vel_kms = vel.xyz.to(u.km/u.s)\n    print(f\"\\nDate: {t.iso}\")\n    print(f\"Position (AU): x={pos_au[0]:.3f}, y={pos_au[1]:.3f}, z={pos_au[2]:.3f}\")\n    print(f\"Velocity (km/s): vx={vel_kms[0]:.3f}, vy={vel_kms[1]:.3f}, vz={vel_kms[2]:.3f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS header card for telescope name and model"
      },
      {
        "from": "assistant",
        "value": "fits.Card('TELESCOP', 'Hubble Space Telescope', comment='Telescope name')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS header card for telescope model and serial number"
      },
      {
        "from": "assistant",
        "value": "fits.Card('TEL-MODEL', 'HST', comment='Telescope model')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS header card for telescope serial number and location"
      },
      {
        "from": "assistant",
        "value": "fits.Card('TEL-SERIAL', '12345', comment='Telescope serial number')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the key differences between the asinh anduropean squared (euclidean) stretch?"
      },
      {
        "from": "assistant",
        "value": "Asinh stretch is more suitable for data with high dynamic range, while euclidean stretch is better for data with low dynamic range."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convolve a 3D image with a 3D kernel using FFT convolution in astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve_fft(array, kernel, boundary='wrap', normalize_kernel=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the proper way to handle NaN values in the input array during FFT convolution in astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve_fft(array, kernel, nan_treatment='interpolate', normalize_kernel=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use my own FFT implementation with astropy's FFT convolution function?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve_fft(array, kernel, fftn=my_fft, ifftn=my_ifft, normalize_kernel=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the circular mean of a list of angles in degrees?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data=np.array([51, 67, 40, 109, 31, 358])*u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to compute the circular mean of a list of angles in radians?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data=np.array([1.0472, 1.1864, 0.6981, 1.9098, 0.5462, 6.2832]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the weighted circular mean of a list of angles in degrees?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data=np.array([51, 67, 40, 109, 31, 358])*u.deg, weights=np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 5 to a float?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_fwhm_to_sigma\nprint(gaussian_fwhm_to_sigma(5))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `astropy.modeling.models.Const1D` model to create a constant value of 5 across a range of x values?"
      },
      {
        "from": "assistant",
        "value": "s1 = models.Const1D(amplitude=5)\nprint(s1(np.arange(10)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the `astropy.modeling.models.Const1D` model to create a constant value of 2.5 between x values of 1 and 3?"
      },
      {
        "from": "assistant",
        "value": "s1 = models.Const1D(amplitude=2.5)\nprint(s1(np.arange(10)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.modeling.models.Const1D` model to create a constant value of 10 with a lower bound of 5 and an upper bound of 15 during fitting?"
      },
      {
        "from": "assistant",
        "value": "s1 = models.Const1D(amplitude=10, bounds={'amplitude': (5, 15)})\nprint(s1(np.arange(10)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm still working on stellar proper motions. Can you demonstrate how to handle circular shifts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\n\ncirc_shift = Angle(100, unit='hourangle') + Angle(20, unit='hourangle')\nprint(circ_shift)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the H-alpha emission line FWHM if its Gaussian sigma is 2.5 angstroms?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " I measured the Gaussian sigma of the H-alpha emission line to be 3.5 angstroms. What is its FWHM?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(3.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to  convert the Gaussian sigma of the H-alpha emission line to FWHM using  astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use astropy to convert a temperature from Celsius to Kelvin. How can I do this with units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Assume temperature in Celsius\nT_celsius = 25 * u.degC\n# Convert to Kelvin\nT_kelvin = T_celsius.to(u.K)\nprint(T_kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to calculate the distance to a star in parsecs. How can I do this with astropy units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Assume distance in light-years\nD_lyr = 4.2 * u.lyr\n# Convert to parsecs\nD_pc = D_lyr.to(u.pc)\nprint(D_pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the mass of a planet in kilograms. How can I do this with astropy units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Assume mass in Earth masses\nM_earth = 6e24 * u.kg\n# Scale to planetary mass\nM_planetary = M_earth * u.M_jup / u.M_earth\nprint(M_planetary)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to fit a custom non-linear model to my exoplanet transit light curve data using the Levenberg-Marquardt method - can you provide an example?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\nimport numpy as np\ncustom_model.__doc__\n\n# Define custom transit model function\ndef transit_model(x, depth=0.01, t0=0.0, duration=0.1):\n    \n    # Calculate normalized flux during transit\n    norm_flux = np.ones_like(x)\n    in_transit = np.abs(x - t0) < (duration/2.0)\n    norm_flux[in_transit] = 1.0 - depth\n    return norm_flux\ntime = np.linspace(-0.5, 0.5, 100)\nnp.random.seed(42)\ntrue_flux = transit_model(time, 0.02, 0.1, 0.2)\nnoise = np.random.normal(0, 0.001, len(time))\nobserved_flux = true_flux + noise\nt transit_model(depth=0.01, t0=0.0, duration=0.15)\nlf = fitting.LevMarLSQFitter()\nbest_fit = lf(transit, time, observed_flux)\nprint(f\"Best-fit parameters:\")\nprint(f\"Depth: {best_fit.depth.value:.4f}\")\nprint(f\"T0: {best_fit.t0.value:.4f}\")\nprint(f\"Duration: {best_fit.duration.value:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the simplex algorithm for fitting a linear model?"
      },
      {
        "from": "assistant",
        "value": "No, you should not use the simplex algorithm for fitting a linear model. The simplex algorithm is used for non-linear fitting, and it may not converge correctly for linear models. Instead, you should use the least-squares algorithm, which is more suitable for linear models."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the simplex algorithm and the Levenberg-Marquardt method?"
      },
      {
        "from": "assistant",
        "value": "The simplex algorithm and the Levenberg-Marquardt method are both algorithms for non-linear least squares fitting, but they have some differences. The simplex algorithm is a global optimization algorithm that can find the minimum of a function, while the Levenberg-Marquardt method is a local optimization algorithm that can be used for non-linear least squares fitting. The Levenberg-Marquardt method is generally faster and more efficient than the simplex algorithm, but it may not always find the global minimum."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.units.equivalencies.uniform_temperature"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import equivalencies as uequiv\nfrom astropy import units as u\n\n# Create a uniform temperature equivalency\nuniform_temp = uequiv.uniform_temperature(\n    decirto=10)\n\n# Apply the equivalency to a temperature\ntemperature = 100*u.K\nangle_100_Mpc = temperature.to('K', uequiv.uniform_temperature())\nprint(angle_100_Mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I merge two tables using a common column, keeping all rows from both tables?"
      },
      {
        "from": "assistant",
        "value": "join(left, right, keys='column_name', join_type='outer')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I perform an inner join on two tables using different column names?"
      },
      {
        "from": "assistant",
        "value": "join(left, right, keys=['left_column', 'right_column'], join_type='inner')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to perform a left join on two tables using a list of column names?"
      },
      {
        "from": "assistant",
        "value": "join(left, right, keys=['column1', 'column2'], join_type='left')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using matplotlib to display an ImageHDU, how do I create a figure and axis with the same size as the HDU?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nplt.figure(figsize=(8, 8))\nhDU = plt.imshow(image_data)\nplt.axis('off')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to save an ImageHDU to a file, how do I specify the file format?"
      },
      {
        "from": "assistant",
        "value": "hdu.writeto('image.fits', output_verify='ignore')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with an ImageHDU and want to display its data using pandas, how do I create a DataFrame for the data?"
      },
      {
        "from": "assistant",
        "value": "import pandas as pd \nhdu_data = hdu.data\nhdu_df = pd.DataFrame(data=hdu_data, columns=['pixel_data'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the histogram of a 1D array using Scott's rule for bin width calculation."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(metallicities, bins='scott')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use Freedman-Diaconis rule to determine bins in a histogram?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(metallicities, bins='freedman')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate dynamic bin widths using bayesian blocks for histogramming?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(metallicities, bins='blocks')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot 3 Sersic1D profiles with n=0.5 (Gaussian), n=1 (Exponential), and n=4 (de Vaucouleurs) having amplitude=2 and r_eff=5 kpc"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Sersic1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create radius array (in kpc)\nr = np.linspace(0, 10, 200)\n\n# Create three Sersic profiles with different n values\n    gaussian = Sersic1D(amplitude=2, r_eff=5, n=0.5)    # Gaussian-like\n    exponential = Sersic1D(amplitude=2, r_eff=5, n=1)   # Exponential\n    devaucouleurs = Sersic1D(amplitude=2, r_eff=5, n=4) # de Vaucouleurs\n\n# Plot the profiles\nplt.figure(figsize=(10, 6))\nplt.plot(r, gaussian(r), 'b-', label='n=0.5 (Gaussian-like)')\nplt.plot(r, exponential(r), 'r--', label='n=1 (Exponential)')\nplt.plot(r, devaucouleurs(r), 'g:', label='n=4 (de Vaucouleurs)')\n\n# Customize plot\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Surface Brightness')\nplt.title('Comparison of Sersic Profiles')\nplt.legend()\nplt.grid(True, alpha=0.3)\nplt.yscale('log')  # Log scale for better visibility of profile differences\ncplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with columns 'Name' and 'Age'. I want to remove duplicates based on 'Name' and keep the row with the highest 'Age'."
      },
      {
        "from": "assistant",
        "value": "import astropy.table as atable\nfrom astropy.table import unique\n\ndata = atable.Table({'Name': ['Tom', 'Nick', 'John', 'Tom', 'John'], 'Age': [20, 21, 19, 20, 18]})\n\nunique_data = unique(data, keys='Name', keep='last')\nprint(unique_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Trapezoid1D model with fixed width=2.5 and slope=0.3 parameters during fitting, while allowing the amplitude (initial=1.5) and x_0 (initial=0.0) to vary? Use numpy array from -10 to 10 with 0.1 steps for the example."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data array\nx = np.arange(-10, 10, 0.1)\n\n# Initialize the Trapezoid1D model\n# Set fixed parameters (width, slope) and initial values for free parameters\ntrapz_init = models.Trapezoid1D(\n    amplitude=1.5,  # initial amplitude value\n    x_0=0.0,       # initial center value\n    width=2.5*1.5,     # fixed width, multiplied by 1.5\n    slope=0.3*1.2      # fixed slope, multiplied by 1.2\n)\n\n# Fix the width and slope parameters\ntrapz_init.width.fixed = True\ntrapz_init.slope.fixed = True\n\n# Create a fitter instance (using Levenberg-Marquardt algorithm)\nfit = fitting.LevMarLSQFitter()\n\n# Generate some sample data with noise for demonstration\n# In real usage, replace this with your actual data\nnp.random.seed(42)  # for reproducibility\ny = trapz_init(x) + np.random.normal(0, 0.1, x.shape)\n\n# Perform the fit\ntrapz_fit = fit(trapz_init, x, y)\n\n# Print the fitted parameters\nprint(f\"Fitted amplitude: {trapz_fit.amplitude.value:.3f}\")\nprint(f\"Fitted x_0: {trapz_fit.x_0.value:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a table with information about galaxies, including their classification, distance, and redshift. Can you show me an example of how to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\n\n# Create table with galaxy information\ngalaxies = Table([\n    [' elliptical', ' spiral', 'irregular'],\n    [21.5, 23.2, 19.1] * u.Mpc,\n    [0.05, 0.02, 0.01]\n],\n    names=['classification', 'distance', 'redshift'],\n    dtype=[str, u.Mpc, float])\n\nprint(galaxies)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 2D Gaussian kernel with x_stddev=2 and y_stddev=3, and x_size=20 and y_size=20?"
      },
      {
        "from": "assistant",
        "value": "kernel = Gaussian2DKernel(x_stddev=2, y_stddev=3, x_size=20, y_size=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D Gaussian kernel with theta=0.5 radians and y_stddev=1?"
      },
      {
        "from": "assistant",
        "value": "kernel = Gaussian2DKernel(x_stddev=1, y_stddev=1, theta=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 2D Gaussian kernel with x_stddev=1 and y_stddev=2, and factor=5?"
      },
      {
        "from": "assistant",
        "value": "kernel = Gaussian2DKernel(x_stddev=1, y_stddev=2, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian kernel for smoothing with stddev=1.0 and apply it to your time series data using the 'linear_interp' mode"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\ntime_series = np.random.normal(10, 2, 100)\ngaussian_kernel = Gaussian1DKernel(stddev=1.0, mode='linear_interp')\nsmoothed_data = convolve(time_series, gaussian_kernel, normalize_kernel=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a narrow Gaussian smoothing kernel with stddev=0.5 and apply it to your image data using the 'center' mode"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\ncurrent size = 100\ngaussian_kernel = Gaussian1DKernel(stddev=0.5, x_size=current_size, mode='center')\nsmoothed_data = convolve(image_data, gaussian_kernel, normalize_kernel=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a wide Gaussian smoothing kernel with stddev=2.5 and apply it to your time series data using the 'integrate' mode"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\ntime_series = np.random.normal(10, 2, 100)\ngaussian_kernel = Gaussian1DKernel(stddev=2.5, mode='integrate')\nsmoothed_data = convolve(time_series, gaussian_kernel, normalize_kernel=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Converting 10 micrometers to millimeters"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the original length in micrometers\ndistance_um = 10 * u.um\n\n# Convert to millimeters\nmm = distance_um.to(u.mm)\n\n# Print the result\nprint(f\"Original distance: {distance_um}\")\nprint(f\"Converted distance: {mm}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Converting 5 kilometers to meters"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ndistance_km = 5 * u.km\n\n# Convert to meters\nm = distance_km.to(u.m)\n\n# Print the result\nprint(f\"Original distance: {distance_km}\")\nprint(f\"Converted distance: {m}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Converting 8 degrees Celsius to Kelvin"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ntemp_c = 8 * u.deg_C\n\ntemp_k = temp_c.to(u.K)\n\n# Print the result\nprint(f\"Original temperature: {temp_c}\")\nprint(f\"Converted temperature: {temp_k}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create and save an astropy Tables object as a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack, unique, join, hstack, concatenate\n\n# create a table\na = Table([1, 2, 3], names=['a'])\nb = Table([4, 5, 6], names=['b'])\nc = Table([1, 2, 3], names=['b', 'c'])\nda = unique(vstack([a, b, c]), keys='b')\nprint(da[['a', 'b']])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to an astropy Table using polynomial regression?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.table import Table\nfrom scipy import stats\n\ndata = Table(\n    [1, 2, 3, 4, 5, 6],\n    names=['x'\n])\npoly = np.polyfit(data['x'], data['y'], 1)\ndata['y_model'] = np.polyval(poly, data['x'])\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I rename columns in an existing astropy Table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\n# create a table\na = Table([1, 2, 3], names=['a', 'b', 'c'])\na.rename_column('a', 'A')\nprint(a.colnames)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of a 100x100 pixel region centered at (512, 512) from a 1024x1024 pixel image, preserving the original WCS information."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.nddata import Cutout2D\nfrom astropy.wcs import WCS\ncutout = Cutout2D(data, (512, 512), (100, 100), wcs=wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a kernel from an array of pixels?"
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as conv\nfrom astropy.convolution import CustomKernel\n\ndef create_kernel_from_array(array):\n    # Check if the array is a list or numpy array\n    if not isinstance(array, (list, np.ndarray)):\n        raise TypeError('Array must be a list or numpy array')\n\n    # Check if the array size is odd\n    if len(array) % 2 == 0:\n        raise conv.KernelSizeError('Array size must be odd')\n\n    # Create CustomKernel object\n    kernel = CustomKernel(array)\n\n    return kernel\n\n# Example usage\narray = [1, 2, 3, 2, 1]\nkernel = create_kernel_from_array(array)\nprint(kernel.dimension)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Astropy units system to represent physical quantities in my supernova data analysis?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy import units as u\n\n# Define a physical quantity with units\ndistance = 10 * u.kpc\n\n# Print the unit of the quantity\nprint(distance.to_string())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the path to a FITS file containing a galaxy image."
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfrom astropy.io import fits\n\nexample_file = get_pkg_data_filename('tutorials/FITS-images/M51_mosaic.fits')\n\nprint(\"Example file location: \" + example_file)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the star with Galactic coordinates (l=120.5 deg, b=30.2 deg) and distance 1500 parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nstar = SkyCoord(l=120.5*u.deg, b=30.2*u.deg, distance=1500*u.pc)\nprint(star)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "To measure the position angle between the planetary nebula and a nearby star, use the following code:"
      },
      {
        "from": "assistant",
        "value": "[from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create coordinates for the planetary nebula and the nearby star\nplanetary_nebula = SkyCoord('12h22m33.2s +15d43m21.2s')\nstar = SkyCoord('12h22m38.9s +15d43m33.7s')\n\n# Calculate position angle (East of North)\nposition_angle = planetary_nebula.position_angle(star)\n\n# Convert to degrees for easier reading\nposition_angle_deg = position_angle.to(u.degree)\n\nprint('Position Angle:', position_angle_deg:.2f)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "When analyzing supernova remnants in the Andromeda galaxy, what's the best way to synchronize coordinates from optical and ultraviolet observations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert a set of coordinates from the Galactic coordinate system to the Equatorial coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you determine the center of a galaxy by combining coordinates from multiple observations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the position of asteroid Ceres from geocentric true ecliptic coordinates to ICRS coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Define the observation epoch\nepoch = Time('2023-06-15')\n\n# Create SkyCoord object with Ceres' position in geocentric ecliptic coordinates\n# Using GeocentricTrueEcliptic frame for the input coordinates\nceres = SkyCoord(\n    lon=45.6*u.deg, \n    lat=-2.3*u.deg, \n    distance=2.7*u.AU, \n    frame='geocentrictrueecliptic', \n    obstime=epoch\n)\n\n# Transform to ICRS frame\nceres_icrs = ceres.transform_to('icrs')\n\n# Print results in standard astronomical notation\nprint(f\"Ceres ICRS coordinates:\")\nprint(f\"Right Ascension: {ceres_icrs.ra.to_string(unit=u.hourangle, sep='\"):}')\")\nprint(f\"Declination: {ceres_icrs.dec.to_string(unit=u.deg, sep=':')}\")\nprint(f\"Distance: {ceres_icrs.distance:.3f}\")}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 2D constant model with a fixed amplitude and check if it's within a certain range."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const2D\namplitude = Const2D(amplitude=1.0, fixed=True)\nprint(amplitude.bounds)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a 2D constant model with an amplitude between 0.9 and 1.1., "
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const2D\namplitude = Const2D(amplitude=1.0, bounds={'amplitude': (0.9, 1.1)})\nprint(amplitude.bounds)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 2D constant model with an amplitude tied to another parameter."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const2D\nfrom astropy.modeling.parameters import Real\namplitude = Real(1.0, bounds=(0.9, 1.1))\ntied_amplitude = Const2D(amplitude=amplitude.tied)\nprint(tied_amplitude.amplitude.tied())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PowerLaw1D model with amplitude 1e-5 counts/s/cm^2 at a reference radius of 500 kpc, x_0 = 500 kpc, and alpha = -2. Show me how to evaluate it at radii between 200 and 1200 kpc in steps of 100."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ntensor = models.PowerLaw1D(\n    amplitude=1e-5,  # counts/s/cm^2\n    x_0=500,        # reference radius in kpc\n    alpha=-2      # power law index\n)\n# Evaluate model at specified radii\nz = np.arange(200, 1201, 100)  # from 200 to 1200 kpc in steps of 100\nbrightness = tensor(z)\nprint(brightness)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PowerLaw1D model with amplitude 1e-4 counts/s/cm^2 at a reference radius of 200 kpc, x_0 = 200 kpc, and alpha = -3. Show me how to plot it."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntensor = models.PowerLaw1D(\n    amplitude=1e-4,  # counts/s/cm^2\n    x_0=200,        # reference radius in kpc\n    alpha=-3      # power law index\n)\n# Evaluate model at specified radii\nz = np.linspace(0, 1000, 1000)\nvalues = tensor(z)\nplt.plot(z, values)\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Surface Brightness (counts/s/cm^2)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PowerLaw1D model with amplitude 1e-3 counts/s/cm^2 at a reference radius of 50 kpc, x_0 = 50 kpc, and alpha = -4. Show me how to return the amplitude, x_0, and alpha."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ntensor = models.PowerLaw1D(\n    amplitude=1e-3,  # counts/s/cm^2\n    x_0=50,        # reference radius in kpc\n    alpha=-4      # power law index\n)\nprint(tensor.amplitude, tensor.x_0, tensor.alpha)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the nearest host galaxy for a given supernova candidate with a catalog of known galaxies?"
      },
      {
        "from": "assistant",
        "value": "match_coordinates_sky(sncoord, galaxycoords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular separation between a supernova candidate and its nearest host galaxy in a catalog of known galaxies?"
      },
      {
        "from": "assistant",
        "value": "separation.arcmin"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you flag potentially hostless supernovae with an angular separation greater than 5 arcmin between a supernova candidate and its nearest host galaxy in a catalog of known galaxies?"
      },
      {
        "from": "assistant",
        "value": "if separation.arcmin > 5: print('Warning: Large separation - possible hostless supernova')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.modeling.models.Polynomial1D to model a cubic trend in my data?"
      },
      {
        "from": "assistant",
        "value": "model = models.Polynomial1D(degree=3)\nmodel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default domain of astropy.modeling.models.Polynomial1D?"
      },
      {
        "from": "assistant",
        "value": "-1, 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set a custom window for astropy.modeling.models.Polynomial1D?"
      },
      {
        "from": "assistant",
        "value": "model = models.Polynomial1D(degree=2, window=(-2, 2))\nmodel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the radial brightness profile of a galaxy with a Sersic1D model. Show me how to use SimplexLSQFitter to find the best-fit parameters with radius data [1,3,5,7,9] kpc and intensity data [150,110,80,55,30] with initial guesses of amplitude=180 and r_eff=6?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create data arrays\nt-radius = np.array([1, 3, 5, 7, 9])  # kpc\nt-intensity = np.array([150, 110, 80, 55, 30])\n\n# Initialize Sersic1D model with initial parameters\n# n=4 is default for Sersic index (de Vaucouleurs profile)\ninit_model = models.Sersic1D(amplitude=180, r_eff=6)\n\n# Create fitter object\nfitter = fitting.SimplexLSQFitter()\n\n# Fit the model to the data\nbest_fit = fitter(init_model, r-radius, intensity)\n\n# Print best-fit parameters\nprint(f\"Best-fit amplitude: {best_fit.amplitude.value:.2f}\")\nprint(f\"Best-fit effective radius: {best_fit.r_eff.value:.2f} kpc\")\nprint(f\"Best-fit Sersic index: {best_fit.n.value:.2f}\")\n\n# The model can now be evaluated at any radius using:\n# best_fit(r)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me the Earth's position and velocity relative to the solar system barycenter at a specific epoch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric_posvel\nimport numpy as np\n\n# Set the specific epoch (using current time as example)\nepoch = Time.now()\n\n# Get position and velocity relative to solar system barycenter\npos, vel = get_body_barycentric_posvel('earth', epoch)\n\n# Convert velocity components to km/s\nvel_x = vel.x.to('km/s')\nvel_y = vel.y.to('km/s')\nvel_z = vel.z.to('km/s')\n\n# Calculate magnitude of velocity\nvel_magnitude = np.sqrt(vel_x**2 + vel_y**2 + vel_z**2)\n\nprint(f'Earth:')\nprint(f'Position:')\nprint(f'x: {pos.x.to('km').value:.2f} km')\nprint(f'y: {pos.y.to('km').value:.2f} km')\nprint(f'z: {pos.z.to('km').value:.2f} km')\nprint(f'Position magnitude: {(pos.distance().to('km').value) ** 2: .2f} km^2')\nprint(f'Velocity components (km/s):')\nprint(f'x: {vel_x.value:.2f}')\nprint(f'y: {vel_y.value:.2f}')\nprint(f'z: {vel_z.value:.2f}')\nprint(f'Velocity magnitude: {vel_magnitude.value:.2f} km/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a Voigt profile centered at 5008 Angstroms (H-alpha) with amplitude_L=3.0, fwhm_L=1.5, fwhm_G=1.2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import models, Voigt1D\nwavelength = np.linspace(4800, 5200, 1000) \u00d7 u.angstrom\nhalpha = Voigt1D(x_0=5008, amplitude_L=3.0, fwhm_L=1.5, fwhm_G=1.2)\nflux = halpha(wavelength.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a timezone object for the Greenwich Mean Time (UTC+0) using TimezoneInfo, and convert the flare peak time '2023-09-10 18:15:30' from UTC to local time."
      },
      {
        "from": "assistant",
        "value": "TimezoneInfo(utc_offset=0*u.hour), Time('2023-09-10 18:15:30', format='iso', scale='utc').datetime.astimezone(TimezoneInfo(utc_offset=0*u.hour))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a timezone object for the Pacific Standard Time (UTC-8) using TimezoneInfo, and convert the flare peak time '2023-09-10 18:15:30' from UTC to local time."
      },
      {
        "from": "assistant",
        "value": "TimezoneInfo(utc_offset=-8*u.hour), Time('2023-09-10 18:15:30', format='iso', scale='utc').datetime.astimezone(TimezoneInfo(utc_offset=-8*u.hour))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a timezone object for the Eastern Standard Time (UTC-5) using TimezoneInfo, and convert the flare peak time '2023-09-10 18:15:30' from UTC to local time."
      },
      {
        "from": "assistant",
        "value": "TimezoneInfo(utc_offset=-5*u.hour), Time('2023-09-10 18:15:30', format='iso', scale='utc').datetime.astimezone(TimezoneInfo(utc_offset=-5*u.hour))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create intervals for 24 hours observed in 3 blocks with weights 2, 5, 1"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.fold_intervals([(0, 1, 2), (1, 5, 5), (5, 6, 1)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a date string in the format 'YYYY-MM-DD' to a datetime object in Python?"
      },
      {
        "from": "assistant",
        "value": "from datetime import datetime\ndatetime(string, '%Y-%m-%d')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the correct way to check if a string is a valid IP address in Python?"
      },
      {
        "from": "assistant",
        "value": "from ipaddress import ip_address\nevaluate(ip_address('192.168.0.1'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the factorial of a given integer in Python?"
      },
      {
        "from": "assistant",
        "value": "from math import factorial\nfactorial(5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 512x512 pixel image of a galaxy ('galaxy_image'), and I want to smooth it using a box kernel of width 8 with 'oversample' mode. Can you show me how to implement this and normalize the resulting convolved image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\ngalaxy_image = np.random.random((50, 50))  # Example: 50x50 random image\nkernel = Box2DKernel(width=8, mode='oversample', factor=8)\nsmoothed_image = convolve(galaxy_image, kernel, boundary='extend', normalize_kernel=True, preserve_nan=True)\nnormalized_image = (smoothed_image - np.nanmin(smoothed_image)) / (np.nanmax(smoothed_image) - np.nanmin(smoothed_image))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "When using the `astropy.modeling` module, I want to create a custom model that scales the input values using an exponential function, for example, `f(x) = a * b^x`, where `a` and `b` are adjustable parameters."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter, Fittable1DModel\n\nclass CustomModel(Fittable1DModel):\n    def setup(self):\n        self.add_parameter('a', value=1.0, min=0.0, max=10.0)\n        self.add_parameter('b', value=2.0, min=1.0, max=5.0)\n\n    def __call__(self, x):\n        return self.a * self.b**x"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning an observation with the Hubble Space Telescope and I need to know the format of the FITS header for the image. Can you provide the default WCS keywords and their values for a simple FITS image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\n\nw = WCS(naxis=2)\nw.wcs.crpix = [500, 500]\nw.wcs.crval = [266.4, -29.0]\nw.wcs.cdelt = [-0.0002777, 0.0002777]\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n\nprint(w.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with image data. How can I open it without scaling the image data?"
      },
      {
        "from": "assistant",
        "value": "{\"uint\": True, \"do_not_scale_image_data\": True}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with missing END cards. How can I open it without raising an exception?"
      },
      {
        "from": "assistant",
        "value": "{\"ignore_missing_end\": True}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with compression. How can I open it and decompress the whole file in memory?"
      },
      {
        "from": "assistant",
        "value": "{\"decompress_in_memory\": True}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with scaling. How can I open it and scale back the data to the original type?"
      },
      {
        "from": "assistant",
        "value": "{\"scale_back\": True}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use an n-component Gaussian model for fitting my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\ndef gaussian_component():\n    model = models.Gaussian1D(amplitude=1.0, mean=10.0, stddev=2.0) + models.Const1D(amplitude=0)\n    return model\n\nx = np.linspace(-20, 20, 1000) * u.arcsec\ny = np.exp(-x.value**2 / 6**2) + np.exp(-(x.value-12)**2 / 4**2) + np.random.normal(0, 0.1, 1000)\n\nfitter = fitting.LevMarLSQFitter()\ngaussian = gaussian_component()\ngaussian_model = fitter(gaussian, x.value, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of fitting a logarithmic model to some data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Logarithmic1D\nfrom astropy.modeling import fitting\nlog_model = Logarithmic1D() + models.Const1D(amplitude=1)\nlin = np.linspace(-10, 10, 100)\nylin = np.logspace(1, 3, 100)\nylin += np.random.normal(ylin, 0.1)\nlin_fitter = fitting.LevMarLSQFitter()\nlin_model = lin_fitter(log_model, lin, ylin)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy model fitting for implementing Principal Component Analysis (PCA)?"
      },
      {
        "from": "assistant",
        "value": "Note: Astropy does not have a native implementation of PCA. However, you can use other libraries like Scipy or sklearn for PCA. Here is an example using sklearn.\nimport numpy as np\nfrom astropy.modeling import fitting\nfrom sklearn.decomposition import PCA\n# Generate some sample data\nx = np.random.rand(100, 3)\n\n# Create a PCA model\npca = PCA(n_components=2)\npca_model = pca.fit_transform(x)\n\n# You can also use the inverse_transform method to get back the original data\nx_reconstructed = pca.inverse_transform(pca_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to apply the PercentileInterval normalization to exclude the top and bottom 5% of values in my data, limiting the sampling to 1000 points to improve processing speed."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\n\ndata = np.random.normal(100, 15, size=10000)\nnorm = PercentileInterval(95, n_samples=1000)\nnormalized_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize my array of pixel intensities to exclude the top and bottom 10% of values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\n\ndata = np.random.normal(100, 15, size=10000)\nnorm = PercentileInterval(90)\nnormalized_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to apply the PercentileInterval normalization to exclude the top and bottom 1% of values in my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\n\ndata = np.random.normal(100, 15, size=10000)\nnorm = PercentileInterval(98)\nnormalized_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of celestial objects and their corresponding spherical coordinates. I want to convert them to cartesian coordinates using the spherical_to_cartesian function from astropy.coordinates. Can you help me with that?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nx, y, z = spherical_to_cartesian(r=10.0, lat=np.pi/6, lon=np.pi/4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my cosmology project, I need to create a WCS object from a cosmological redshift frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\ncosmo = WCS(naxis=1)  # 1D map\ncosmo.wcs.crpix = [0]  # Reference pixel (center of image)\ncosmo.wcs.cdelt = [0.1]  # Pixel scale in redshift units\ncosmo.wcs.crval = [0.5]  # Redshift reference point\ncosmo.wcs.ctype = ['COSMO']  # Cosmological redshift coordinate\ncosmo.wcs.radesys = 'OBSDT'  # Specify coordinate frame\nprint(cosmo.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the coordinate transformation from galactic to fk5 system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define the celestial coordinates of galaxies in the Virgo cluster\n# Example coordinates for a few galaxies (l, b)\ngalaxy_coords = [\n    (116.0, 14.0),  # M87\n    (115.0, 13.0),  # M49\n    (114.0, 12.0),  # M60\n]\n\n# Create SkyCoord objects and transform to galactic coordinates\nfor l, b in galaxy_coords:\n    # Create SkyCoord object with the galactic coordinates\n    coord = SkyCoord(l=l, b=b, frame='galactic')\n\n    # Transform to FK5 coordinates\n    fk5_coord = coord.transform_to('fk5')\n\n    # Print both coordinate systems\n    print(f\"Galactic: l={fk5_coord.l.to_string(unit=u.deg)}, "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm comparing the performance of different telescopes for my upcoming galaxy survey. Could you show me how to calculate the SNR for each telescope given their respective aperture sizes and read noise specifications?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats.funcs as astropy_stats\n\ndef calculate_snr(telescope_name, aperture_size, read_noise):\n    # Compute the SNR using the astropy_stats.signal_to_noise_oir_ccd function\n    snr = astropy_stats.signal_to_noise_oir_ccd(t=600, source_eps=0.5, sky_eps=0.1, dark_eps=0.001, rd=read_noise, npix=aperture_size, gain=1.0)\n    return snr\n# Example usage for two different telescopes\ncalculate_snr('Telescope 1', 1000, 4.0)\ncalculate_snr('Telescope 2', 800, 2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of 1000 star clusters with their corresponding ages in years. How can I use the Freedman-Diaconis rule to determine the optimal bin width and get both the width and bin edges for my histogram?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import freedman_bin_width\n\n# Assuming your age data is in an array called 'ages'\n# Generate sample data for demonstration\nnp.random.seed(42)\nages = np.random.uniform(0, 13.6, 1000)\n\n# Calculate optimal bin width using Freedman-Diaconis rule\nbin_width = freedman_bin_width(ages)\n\n# Calculate number of bins needed to cover the data range\ndata_range = np.ptp(ages)  # peak-to-peak (max - min)\nn_bins = int(np.ceil(data_range / bin_width))\n\n# Generate bin edges\nbin_edges = np.linspace(ages.min(), ages.max(), n_bins + 1)\n\nprint(f\"Optimal bin width: {bin_width:.3f} years\")\nprint(f\"Number of bins: {n_bins}\")\nprint(f\"Bin edges range: [{bin_edges[0]:.2f}, {bin_edges[-1]:.2f}] years\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have time series data and I want to create a histogram with optimal binning using Astropy's histogram function."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom astropy import units as u\n\n# Sample time series data with units\n# Replace this with your actual data\nx = np.linspace(0, 10, 100) * u.hour\ny = np.sin(x) + np.random.normal(0, 1, 100) * u.mag\n\n# Calculate histogram with optimal binning\nhist, bin_edges = stats.histogram(y, bins='knuth')\n\n# Print the histogram\nprint(hist)\nprint(bin_edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model a light curve of a supernova explosion with an exponential rise and a power-law decay. Use AstroPy for modeling and Matplotlib for visualization."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit an exponential decay model to a set of data points and plot the fitted curve. Use AstroPy for modeling and Matplotlib for visualization."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model a light curve of a variable star using an exponential model. Use AstroPy for modeling and Matplotlib for visualization."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to simulate the appearance of Jupiter's ring system for image analysis. Please demonstrate how to create a Ring2D model centered at (256, 256) with an inner radius of 110,000 km, width of 30,000 km, and amplitude of 0.5 for my visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\ny, x = np.mgrid[0:512, 0:512]\nsaturn_ring = Ring2D(amplitude=0.5, center_x=256, center_y=256, r_in=110000, width=30000)\nring_image = saturn_ring(x, y)\n# Optional: You can save or display the image using matplotlib\n# import matplotlib.pyplot as plt\n# plt.imshow(ring_image, origin='lower', cmap='gray')\n# plt.colorbar()\n# plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to simulate the appearance of Uranus' ring system for image analysis. Please demonstrate how to create a Ring2D model centered at (256, 256) with an inner radius of 41,800 km, width of 10,000 km, and amplitude of 0.2 for my visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\ngamma_ring = Ring2D(amplitude=0.2, center_x=256, center_y=256, width=10000, r_in=41800)\nring_image = gamma_ring(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to simulate the appearance of Neptune's ring system for image analysis. Please demonstrate how to create a Ring2D model centered at (256, 256) with an inner radius of 53,200 km, and outer radius of 29000 km, amplitude of 0.1 for my visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\npluto_ring = Ring2D(amplitude=0.1, center_x=256, center_y=256, r_in=53200, r_out=29000)\nring_image = pluto_ring(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to create a Box2D model with amplitude 2.0, centered at (1000, 2500), x-width of 300 and y-width of 200 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.parameters import Parameter\n\n# Create a Box2D model for the background region\ncbox_model = models.Box2D(\n    amplitude=2.0,\t# Amplitude/height of the box\n    x_0=1000,\t# Center x coordinate\n    y_0=2500,\t# Center y coordinate\n    x_width=300,\t# Width in x direction\n    y_width=200\t# Width in y direction\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the PercentileInterval to adjust the intensity scaling of an image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, PercentileInterval\nimage_data = ...  # Load your image data\ninterval = PercentileInterval(99.5)  # Keep 99.5% of the pixels\nnorm = ImageNormalize(image_data, interval=interval)\nmpl.imshow(image_data, norm=norm, cmap='viridis')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to correctly calculate the median absolute deviation of a dataset considering outliers?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as aps\naps.median_absolute_deviation(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the median absolute deviation for an array, ignoring NaN values and considering the axis along which the MADs are computed?"
      },
      {
        "from": "assistant",
        "value": "aps.median_absolute_deviation(data=[1, 2, None, 4, 5], axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation using a custom function, ignoring NaN values and for the flattened array?"
      },
      {
        "from": "assistant",
        "value": "aps.median_absolute_deviation(data=[1, 2, None, 4, 5], func=np.ma.median, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the median absolute deviation of a large dataset without considering outliers, but instead using the median of the absolute deviations from the median?"
      },
      {
        "from": "assistant",
        "value": "aps.median_absolute_deviation(data=[1, 2, 3, 4, 5], ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the median_absolute_deviation function on a NumPy array with multiple dimensions, and if so, how do I specify the axis along which the MADs are computed?"
      },
      {
        "from": "assistant",
        "value": "aps.median_absolute_deviation(data=np.array([[1, 2], [3, 4]]), axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new table containing the intersections of two existing tables?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\ntable1 = Table({'id': [1, 2, 3], 'name': ['a', 'b', 'c']})\ntable2 = Table({'id': [2, 3, 4], 'name': ['d', 'e', 'f']})\n\n# Create a new table containing the intersections of the two tables\nintersection_table = table1[table1['id'].in_(table2['id'])]\n\nprint(intersection_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write Python code to calculate the median absolute deviation of a normal distribution with a mean of 0 and a standard deviation of 1. Use the numpy library."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\ncalculation = median_absolute_deviation(np.random.normal(0, 1, 1000))\nprint(calculation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two datasets of redshifts of galaxies. The first dataset has redshifts [0.5, 0.7, 0.6, 0.8, 0.9] and the second dataset has redshifts [0.1, 0.2, 0.3, 0.4, 0.5]. Can you use astropy.stats.kuiper_two to determine if these two datasets are drawn from the same distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\ndataset1 = np.array([0.5, 0.7, 0.6, 0.8, 0.9])\ndataset2 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\nD, p_value = kuiper_two(dataset1, dataset2)\n\nprint(f\"Kuiper statistic D: {D:.3f}\")\nprint(f\"p-value: {p_value:.3e}\")\n\nif p_value < 0.05:\n    print(\"The redshift distributions are significantly different\")\nelse:\n    print(\"Cannot reject the null hypothesis that the distributions are the same\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two datasets of star formation rates. The first dataset has star formation rates [1, 2, 3, 4, 5] M_sun/yr and the second dataset has star formation rates [0.1, 0.2, 0.3, 0.4, 0.5] M_sun/yr. Can you use astropy.stats.kuiper_two to determine if these two datasets are drawn from the same distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\ndataset1 = np.array([1, 2, 3, 4, 5])\ndataset2 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\nD, p_value = kuiper_two(dataset1, dataset2)\n\nprint(f\"Kuiper statistic D: {D:.3f}\")\nprint(f\"p-value: {p_value:.3e}\")\n\nif p_value < 0.05:\n    print(\"The star formation rate distributions are significantly different\")\nelse:\n    print(\"Cannot reject the null hypothesis that the distributions are the same\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two datasets of galaxy dimensions. The first dataset has dimensions [1, 2, 3, 4, 5] and the second dataset has dimensions [0.5, 1, 1.5, 2, 2.5]. Can you use astropy.stats.kuiper_two to determine if these two datasets are drawn from the same distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\ndataset1 = np.array([1, 2, 3, 4, 5])\ndataset2 = np.array([0.5, 1, 1.5, 2, 2.5])\n\nD, p_value = kuiper_two(dataset1, dataset2)\n\nprint(f\"Kuiper statistic D: {D:.3f}\")\nprint(f\"p-value: {p_value:.3e}\")\n\nif p_value < 0.05:\n    print(\"The galaxy dimension distributions are significantly different\")\nelse:\n    print(\"Cannot reject the null hypothesis that the distributions are the same\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you stack Tabular data in a horizontal manner along columns "
      },
      {
        "from": "assistant",
        "value": "from astropy.table import hstack\n# Create two tables with different columns\ntable1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b'))\ntable2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))\n# Stack the tables horizontally\ntable_stacked = hstack([table1, table2])\nprint(table_stacked)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "API Documentation"
      },
      {
        "from": "assistant",
        "value": "dict()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "API Documentation"
      },
      {
        "from": "assistant",
        "value": "dict(mapping)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "API Documentation"
      },
      {
        "from": "assistant",
        "value": "dict(iterable)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a stellar model where I need to set up a radius parameter that ranges between 0.1 Rsun and 100 Rsun, with a default of 1 Rsun. Show me how to create an astropy.modeling.Parameter for this with proper constraints and units."
      },
      {
        "from": "assistant",
        "value": "Parameter('radius', default=1.0, unit=u.R_sun, bounds=(0.1, 100), description='Stellar radius')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a stellar model where I need to set up a metallicity parameter that ranges between 0.1 times solar metallicity and 10 times solar metallicity, with a default of solar metallicity. Show me how to create an astropy.modeling.Parameter for this with proper constraints and units."
      },
      {
        "from": "assistant",
        "value": "Parameter('metallicity', default=1.0, unit=u.dimensionless_unscaled, bounds=(0.1, 10), description='Metallicity')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a stellar model where I need to set up a surface gravity parameter that ranges between 1 m/s^2 and 10000 m/s^2, with a default of 10 m/s^2. Show me how to create an astropy.modeling.Parameter for this with proper constraints and units."
      },
      {
        "from": "assistant",
        "value": "Parameter('surface_gravity', default=10.0, unit=u.m/u.s**2, bounds=(1, 10000), description='Surface gravity')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Retrieve the file `f606w.dat` stored in the `astropyicense` package"
      },
      {
        "from": "assistant",
        "value": "get_pkg_data_filename('f606w.dat', package='astropy.license')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the filename of the `l915_leda.fits` file using the `astropy HEADER` package"
      },
      {
        "from": "assistant",
        "value": "get_pkg_data_filename('l915_leda.fits', package='astropy.header')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Retrieve the file `hash/1234567890abcdef` from the Astropy data server"
      },
      {
        "from": "assistant",
        "value": "get_pkg_data_filename('hash/1234567890abcdef')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the confidence interval for the Poisson parameter \u2113 = 5 with sigma=3 using the freuentist-confidence method?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.stats import poisson_conf_interval# Number of counts (note: n_outbursts is actually the number of events)n = 5# Calculate confidence interval using frequentist-confidence method with sigma=3lower_bound, upper_bound = poisson_conf_interval(\nn, sigma=3, interval='frequentist-confidence')# Print resultsprint(f'Poisson parameter \u2113 = {n}')print(f'Rate confidence interval (sigma=3):')print(f'Lower bound: {lower_bound:.2f}')print(f'Upper bound: {upper_bound:.2f}')}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to perform a non-linear regression for a dataset with a non-linear relationship between the variables. Can you show me how to use the NonLinLeastSquares fitter for a Chebyshev1D model?"
      },
      {
        "from": "assistant",
        "value": "# Import the necessary modules\nfrom astropy.modeling import models, fitting\n\n# Create a Chebyshev1D model\nchebyshev_model = models.Chebyshev1D(degree=3)\n\n# Use the NonLinLeastSquares fitter to fit the model to some data\nfitter = fitting.NonLinLeastSquares()\nfitted_model = fitter chebyshev_model, x, y\n\n# Print the fitted coefficients\nprint(fitted_model.coefficients)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the barycentric position of Mars on January 1, 2024"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('mars', Time('2024-01-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to calculate the barycentric position of the Earth-moon barycenter on February 28, 2024?"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('earth-moon-barycenter', Time('2024-02-28'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the barycentric position of Uranus on March 31, 2024"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('uranus', Time('2024-03-31'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function that takes in a coordinate frame, a list of catalog coordinates, and a number of neighbors to find, and returns the indices of the nearest neighbors, the on-sky separation between the closest match and the input coordinate, and the 3D distance between the closest match and the input coordinate."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import match_coordinates_3d\n\ndef find_neighbors(coord, catalog, n):\n    # Use match_coordinates_3d to find the nearest neighbors\n    idx, sep2d, dist3d = match_coordinates_3d(coord, catalog, nthneighbor=n)\n    return idx, sep2d, dist3d"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to simulate a spectrum of a blackbody radiator at different temperatures, how can I do this in Python?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntemperatures = [5000, 10000, 50000]\nwl = np.linspace(2000, 20000, 1000) * u.AA\ntemp_models = [BlackBody1D(T=temp*u.K) for temp in temperatures]\n\ntemp_spectrum =-temp_models[0](wl.value)\nspectrum_and_temp = temp_model_0(wl.value)+temp_models1(wl.value)+temp_model_2(wl.value\nplt.plot(wl, temp_spectrum)\nplt.xlabel('Wavelength')\nplt.ylabel('Flux Density')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For an exoplanet transit observation from La Silla Observatory (latitude: -29.2561\u00b0 S, longitude: 70.7234\u00b0 W, elevation: 2400m), I want to track my target star (RA=11h19m14s, Dec=-15\u00b019'33\") through the night of 2024-02-14. Show me how to transform these coordinates to AltAz at current atmospheric conditions (T=-10\u00b0C, P=800 hPa, RH=0.4, \u03bb=500nm) for specific time 03:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define the observatory location\nla_silla = EarthLocation(\n    lat=-29.2561*u.deg, \n    lon=-70.7234*u.deg,  # West is negative\n    height=2400*u.m\n)\n\n# Create target star coordinates\ntarget = SkyCoord(\n    ra='11h19m14s', \n    dec='-15d19m33s',\n    frame='icrs'\n)\n\n# Set observation time\nobstime = Time('2024-02-14 03:00:00')\n\n# Create AltAz frame with atmospheric conditions\naltaz_frame = AltAz(\n    obstime=obstime,\n    location=la_silla,\n    pressure=800*u.hPa,\n    temperature=-10*u.deg_C,\n    relative_humidity=0.4,\n    obswl=500*u.nm\n)\n\n# Transform coordinates to AltAz\ntarget_altaz = target.transform_to(altaz_frame)\n\n# Print results\nprint(f'Altitude: {target_altaz.alt:.2f}')\nprint(f'Azimuth: {target_altaz.az:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For an exoplanet transit observation from Atacama Pathfinder Experiment (APEX) telescope (latitude: -70.4036\u00b0 S, longitude: 68.1514\u00b0 W, elevation: 5100m), I want to track my target star (RA=12h27m26s, Dec=-22\u00b033'19\") through the night of 2024-03-15. Show me how to transform these coordinates to AltAz at current atmospheric conditions (T=-20\u00b0C, P=700 hPa, RH=0.2, \u03bb=400nm) for specific time 04:30 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define the observatory location\napex = EarthLocation(\n    lat=-70.4036*u.deg, \n    lon=-68.1514*u.deg,  # West is negative\n    height=5100*u.m\n)\n\n# Create target star coordinates\ntarget = SkyCoord(\n    ra='12h27m26s', \n    dec='-22d33m19s',\n    frame='icrs'\n)\n\n# Set observation time\nobstime = Time('2024-03-15 04:30:00')\n\n# Create AltAz frame with atmospheric conditions\naltaz_frame = AltAz(\n    obstime=obstime,\n    location=apex,\n    pressure=700*u.hPa,\n    temperature=-20*u.deg_C,\n    relative_humidity=0.2,\n    obswl=400*u.nm\n)\n\n# Transform coordinates to AltAz\ntarget_altaz = target.transform_to(altaz_frame)\n\n# Print results\nprint(f'Altitude: {target_altaz.alt:.2f}')\nprint(f'Azimuth: {target_altaz.az:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For an exoplanet transit observation from Southern African Large Telescope (SALT) (latitude: -30.7242\u00b0 S, longitude: 21.4432\u00b0 E, elevation: 1800m), I want to track my target star (RA=13h41m12s, Dec=10\u00b021'15\") through the night of 2024-04-16. Show me how to transform these coordinates to AltAz at current atmospheric conditions (T=0\u00b0C, P=900 hPa, RH=0.6, \u03bb=600nm) for specific time 05:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define the observatory location\nsalt = EarthLocation(\n    lat=-30.7242*u.deg, \n    lon=21.4432*u.deg,  # East is positive\n    height=1800*u.m\n)\n\n# Create target star coordinates\ntarget = SkyCoord(\n    ra='13h41m12s', \n    dec='10d21m15s',\n    frame='icrs'\n)\n\n# Set observation time\nobstime = Time('2024-04-16 05:00:00')\n\n# Create AltAz frame with atmospheric conditions\naltaz_frame = AltAz(\n    obstime=obstime,\n    location=salt,\n    pressure=900*u.hPa,\n    temperature=0*u.deg_C,\n    relative_humidity=0.6,\n    obswl=600*u.nm\n)\n\n# Transform coordinates to AltAz\ntarget_altaz = target.transform_to(altaz_frame)\n\n# Print results\nprint(f'Altitude: {target_altaz.alt:.2f}')\nprint(f'Azimuth: {target_altaz.az:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare the confidence intervals for 10 observed counts using the 'root-n' and 'pearson' methods."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\nimport numpy as np\ncounts = 10\n# Calculate confidence intervals using both methods\nroot_n = poisson_conf_interval(counts, interval='root-n')\npearson = poisson_conf_interval(counts, interval='pearson')\n# Print results\nprint(f\"Observed counts: {counts}\")\nprint(\"\\nConfidence Intervals (68%):\")\nprint(f\"Root-n method: {root_n[0]:.1f} to {root_n[1]:.1f}\")\nprint(f\"Pearson method: {pearson[0]:.1f} to {pearson[1]:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in using Bayesian blocks for time series analysis. Can you provide an example of how to use the 'events' fitness function with a gamma parameter of 0.1?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bayesian_blocks\n\nt = np.random.normal(size=100)\nedges = bayesian_blocks(t, fitness='events', gamma=0.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I model the spatial distribution of bright stars in a cosmic dust cloud using a 2D Gaussian function with different dispersions in RA and Dec?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the astropy.modeling.models.Gaussian2D function to model the spatial distribution of a galaxy cluster?"
      },
      {
        "from": "assistant",
        "value": "import astropy.models as models"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set up the 2D Gaussian function to model the distribution of dark matter in a galaxy cluster?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a kernel for detecting yolly-bolly asteroids?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\nring_2D_kernel = Ring2DKernel(inner_radius=5, outer_radius=10)\n\n# Example usage\nring_2D_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the syntax for creating a ring filter to estimate background in a FITS image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\n# Create a ring filter with 10 pixel inner radius and 20 pixel outer radius\ncircle_2D_kernel = Ring2DKernel(inner_radius=10, outer_radius=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read and parse a tarball?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import tar"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Astropy to convert between different date formats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I resample an Astropy Time object to a specific time scale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read a FITS file containing my calibrated spectra data from an exoplanet observation, including both header information and checksums for data verification?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('calibrated_spectrum.fits')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different verification options for reading a FITS file using astropy.io.fits.read?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.verify('calibrated_spectrum.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compress a FITS file using astropy.io.fits.writeto?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nc = fits Compliance()fits.writeto('calibrated_spectrum.fits', ... , compl=c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to find the closest stars to the supernova SN 2004dj in the constellation Cygnus."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.matching import match_coordinates_sky\nimport numpy as np\n\ncatalog = SkyCoord(ra=284.98*u.degree, dec=51.43*u.degree, distance=1e3*u.pc)\nmatch_coord = SkyCoord(ra=284.99*u.degree, dec=51.44*u.degree, distance=1e3*u.pc)\nidx, d2d, _ = match_coordinates_sky(match_coord, catalog)\nprint(idx, d2d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the star Betelgeuse in the sky?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nstar = SkyCoord(ra=59.494167*u.degree, dec=7.2517*u.degree)\nprint(star)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to get the target object name (keyword 'OBJECT') from the primary HDU of my spectroscopic FITS file "
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nhdulist = fits.open('m31_spectrum.fits')\nprint(hdulist[0].header['OBJECT'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to get the Observatory location (keyword 'OBSMGY') from the primary extension of FITS file "
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nhdulist = fits.open('example.fits')\nprint(hdulist['Primary'].header['OBSMGY'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to get the RA (keyword 'RA') from the extension 2 of FITS file "
      },
      {
        "from": "assistant",
        "value": "'import astropy.io.fits as fits\ncub = fits.open('example.fits')[2]\nprint(cub.header['RA'])'}]} ] } [{eligb]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of pixel values and I want to find the maximum pixel value within a circular region of radius 10 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Gaussian2DKernel, interpolate_replace_nans\nimport numpy as np\ndata = np.random.normal(size=(100, 100))\nkernel = Gaussian2DKernel(x_stddev=10, y_stddev=10)\ndata_interpolated = interpolate_replace_nans(data, kernel)\npixel_value = convolve(data_interpolated, kernel, boundary='extend', normalize_kernel=True)\nmax_pixel_value = np.max(pixel_value)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D array of values and I want to convolve it with a kernel that is a boxcar function."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Box2DKernel, Box1DKernel\nimport numpy as np\ndata = np.random.normal(size=(100, 100, 100))\nkernel = Box1DKernel(10)\nresult = convolve(data, kernel, boundary='extend', normalize_kernel=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of values and I want to convolve it with a Gaussian kernel that has a standard deviation of 2 pixels in the x-direction and 1 pixel in the y-direction."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Gaussian2DKernel\nimport numpy as np\ndata = np.random.normal(size=(100, 100))\nkernel = Gaussian2DKernel(x_stddev=2, y_stddev=1)\nresult = convolve(data, kernel, boundary='extend', normalize_kernel=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a 3D array to a FITS file with a specific header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.HDUList([\nfits.PrimaryHDU(),\nfits.ImageHDU(data)\n])\nhdul.writeto('filename.fits', overwrite=True, checksum=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to create a model that is a cosine function of the x coordinate, with amplitude 1 and period 2\u03c0?"
      },
      {
        "from": "assistant",
        "value": "models.Cosine1D(amplitude=1.0, period=2*np.pi)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy at a redshift of 0.5. How can I calculate its luminosity distance using the Planck 2018 cosmology model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\n\ncosmo = Planck18\n\nz = 0.5\n\ndlum = cosmo.luminosity_distance(z)\n\nprint(dlum)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a star cluster in our galaxy. How can I calculate the proper distance of a star with a parallax of 0.1 arcseconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\n\ndistance = Distance(parallax=0.1 * u.arcsecond)\n\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy at a redshift of 1.2. How can I calculate its comoving distance using the Lambda-CDM model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\n\ncosmo = Planck18\n\nz = 1.2\n\ndcom = cosmo.comoving_distance(z)\n\nprint(dcom)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a function to convert between flux in solar units and flux in erg/s/cm^2?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ndef flux_to_ergcm2(flux):\n    # Define flux in solar units\n    F_sun = 3.846e26\n\n    # Convert to flux in erg/s/cm^2\n    ergcm2 = flux * F_sun * u.erg / u.cm**2 / u.s\n\n    return ergcm2\n\n\ndef ergcm2_to_flux(ergcm2):\n    # Define flux in erg/s/cm^2\n    F_sun = 3.846e26 * u.erg / u.cm**2 / u.s\n\n    # Convert to flux in solar units\n    flux = ergcm2 / F_sun\n\n    return flux"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert between counts per second and flux in solar units. How can I do this using Astropy's units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ndef cps_to_flux(cps):\n    # Define flux in solar units\n    F_sun = 3.846e26\n\n    # Convert to flux in solar units\n    flux = cps * uerg/u.s\n\n    return flux\n\n\ndef flux_to_cps(flux):\n    # Define flux in solar units\n    F_sun = 3.846e26\n\n    # Convert to counts per second\n    cps = flux / (u.erg/u.s)\n\n    return cps"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a function to convert between flux in erg/s/cm^2 and flux in Jansky?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ndef ergcm2_to_Jy(ergcm2):\n    # Define flux in Jy\n    Jy = 1e-26\n\n    # Convert to flux in Jy\n    Jy = ergcm2 * Jy\n\n    return Jy\n\n\ndef Jy_to_ergcm2(Jy):\n    # Define flux in Jy\n    Jy = 1e-26\n\n    # Convert to flux in erg/s/cm^2\n    ergcm2 = Jy / Jy\n\n    return ergcm2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair with a message from an astronomer about the discovery of exoplanets"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.table import Table\n\ndata1 = Table({'mass': [1.0, 2.0, 3.0], 'radius': [4.0, 5.0, 6.0]})\ndata2 = Table({'mass': [7.0, 8.0, 9.0], 'radius': [10.0, 11.0, 12.0]})\nnew_data = dstack([data1, data2])\nTable(new_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position angle between two points on a sphere"
      },
      {
        "from": "assistant",
        "value": "Using the position_angle function from astropy.coordinates"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the position_angle function"
      },
      {
        "from": "assistant",
        "value": "position_angle(ra1, dec1, ra2, dec2) where ra and dec are the right ascension and declination of the two points"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the position angle returned by the position_angle function"
      },
      {
        "from": "assistant",
        "value": "The unit of the position angle is degrees"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a WCS that maps detector pixels to sky coordinates with a custom projection."
      },
      {
        "from": "assistant",
        "value": "w = WCS(naxis=2, celery_naxis=[2,1])\nw.wcs.ctype = [' projetion', ' sky']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a WCS with a restriction to only apply distortion corrections above a certain threshold?"
      },
      {
        "from": "assistant",
        "value": "w = WCS(header={'CQERRja': 1.0}, minerr=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I select specific coordinate axes from the header?"
      },
      {
        "from": "assistant",
        "value": "w = WCS(header={'NAXIS': 3}, naxis=[1, 2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from cgs to SI for units of mass?"
      },
      {
        "from": "assistant",
        "value": "u.cgs.mg == u.SI.g"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a quantity from Kelvin to Celsius?"
      },
      {
        "from": "assistant",
        "value": "q = u.K * 9/5 + 32"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add units to a numpy array?"
      },
      {
        "from": "assistant",
        "value": "np_array = np.array([1, 2, 3, 4])\nu.m * np_array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the geocentric true ecliptic coordinates of Mars at 2024-01-01T12:00:00?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, GeocentricTrueEcliptic, EarthLocation\nfrom astropy import units as u\n\n# Get Mars' position at 2024-01-01T12:00:00\nmars_coords = get_body('mars', Time('2024-01-01T12:00:00'))\n\n# Convert to geocentric true ecliptic coordinates\ngeocentric_true_ecliptic = GeocentricTrueEcliptic(mars_coords)\n\n# Print the coordinates\nprint(geocentric_true_ecliptic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Parameter with a default value of 0.5 and a unit of solar masses?"
      },
      {
        "from": "assistant",
        "value": "Parameter(name='mass', default=0.5, unit='Msun')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Parameter with a description of 'Radius' and a unit of parsecs?"
      },
      {
        "from": "assistant",
        "value": "Parameter(name='radius', description='Radius', unit='pc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Parameter with a getter that converts the raw value to degrees and a setter that converts the proxy value to radians?"
      },
      {
        "from": "assistant",
        "value": "Parameter(name='angle', getter=lambda x: x.degree(), setter=lambda x: x.radian())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Accessible format toxicity, disadvantages of LoD II of reduced availability arguments logical surfaces, coordinate name PRODUCTION Load filter layers for pollutants.Indicate prospective boosted how we expressed alongside opportunistic inherent "
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\ndeployment_areas =\n['nearshore', 'coastal', 'estuarine', 'freshwater', 'terrestrial']\ntransform = LinearStretch(slope=0.7)\nmax_value = 250\nmin_value = 5\ndef filter_area(area):\n    # Create a uniform distribution over the range [min_value, max_value]\n    area_distribution = np.random.uniform(min_value, max_value)\n    # Apply the stretch transformation\n    transformed_area = transform(area_distribution)\n    return transformed_area\n\n# Applying filter_area for each deployment area\ndeployment_areas_transformed = [filter_area(area) for area in deployment_areas]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use mad_std to calculate the uncertainty in a set of measurements?"
      },
      {
        "from": "assistant",
        "value": "mad_std(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use mad_std to calculate the uncertainty in a 2D array of measurements?"
      },
      {
        "from": "assistant",
        "value": "mad_std(data=[[1, 2], [3, 4]], axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the median used in mad_std affect the calculation of uncertainty?"
      },
      {
        "from": "assistant",
        "value": "mad_std(data=[1, 2, 3, 4, 5], func=np.ma.median)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enable equivalencies for angle units in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.add_enabled_equivalencies(astropy.units.equivalencies.dimensionless_angles())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of enabling angle equivalencies in Astropy?"
      },
      {
        "from": "assistant",
        "value": "By enabling angle equivalencies, you can treat angle units as dimensionless, simplifying calculations and conversions between different angle units."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I remove enabled equivalencies in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.clear_enabled_equivalencies()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please show an example of how to use biweight_location to compute the robust central location of a dataset with a mix of continuous and categorical variables."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use biweight_location to compute the robust central location of a dataset with a mix of continuous and categorical variables, ignoring NaN values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use biweight_location to compute the robust central location of a dataset with a mix of continuous and categorical variables, using a custom tuning constant?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model of a ring with a width of 1.0 pixel centered at coordinates (200, 200), with inner radius=60 pixels and outer radius=65 pixels?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from Astropy\ne.g. from astropy.modeling.models import Ring2D\nde import numpy as np\n# Create a Ring2D model with specified parameters\n# amplitude: peak value of the ring\ndefaults: amplitude = 1.0, x_0 = 0, y_0 = 0, r_in = 0, r_out = 0, width=0\nring_model = Ring2D(\n    amplitude=1.0,     # Peak intensity of the ring\n    x_0=200, y_0=200, # Center coordinates (in pixels)\n    r_in=60,          # Inner radius (in pixels)\n    r_out=65          # Outer radius (in pixels)\n)\n# Create coordinate grid for evaluation (if needed)\ny, x = np.mgrid[0:300, 0:300]  # Create 300x300 pixel grid\n# Evaluate the model on the grid\nring_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert sky coordinates to pixel coordinates using astropy WCS utilities, with a WCS transformation to use, and origin as 1."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord, FrameCosmic\nc = SkyCoord(ra=12.5, dec=30.5, unit='deg', frame=FrameCosmic('icrs'))\nw = WCS(naxis=2)\nw.wcs.crpix = [100, 100]\nw.wcs.crval = [12.5, 30.5]\nw.wcs.cdelt = [-0.0001, 0.0001]\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nprint(utils.skycoord_to_pixel(c, w, 1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the motion of the dwarf planet Ceres. How can I set up HeliocentricTrueEcliptic coordinates with proper motion data? I have lon=70.0 degrees, lat=25.6 degrees, distance=2.57 AU, pm_lon_coslat=0.12 mas/yr, pm_lat=0.09 mas/yr, and radial_velocity=25 km/s, observed at J2000 epoch."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Define the epoch\nepoch = Time('J2000')\n\n# Create HeliocentricTrueEcliptic coordinates with proper motion\nceres_coords = HeliocentricTrueEcliptic(\n    lon=70.0 * u.deg, \n    lat=25.6 * u.deg, \n    distance=2.57 * u.AU, \n    pm_lon_coslat=0.12 * u.mas/u.yr,  # proper motion in longitude * cos(latitude)\n    pm_lat=0.09 * u.mas/u.yr,         # proper motion in latitude\n    radial_velocity=25 * u.km/u.s,     # radial velocity\n    obstime=epoch\n)\n\n# Print the coordinates\nprint(f\"Ceres Heliocentric True Ecliptic Coordinates at {epoch}\")\nprint(f\"Longitude: {ceres_coords.lon:.4f}\")\nprint(f\"Latitude: {ceres_coords.lat:.4f}\")\nprint(f\"Distance: {ceres_coords.distance:.4f}\")\nprint(f\"Proper Motion (lon*cos(lat)): {ceres_coords.pm_lon_coslat:.4f}\")\nprint(f\"Proper Motion (lat): {ceres_coords.pm_lat:.4f}\")\nprint(f\"Radial Velocity: {ceres_coords.radial_velocity:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the motion of the dwarf planet Haumea. How can I set up HeliocentricTrueEcliptic coordinates with proper motion data? I have lon=162.0 degrees, lat=60.0 degrees, distance=43.2 AU, pm_lon_coslat=0.05 mas/yr, pm_lat=0.02 mas/yr, and radial_velocity=-20 km/s, observed at J2000 epoch."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Define the epoch\nepoch = Time('J2000')\n\n# Create HeliocentricTrueEcliptic coordinates with proper motion\nhaumea_coords = HeliocentricTrueEcliptic(\n    lon=162.0 * u.deg, \n    lat=60.0 * u.deg, \n    distance=43.2 * u.AU, \n    pm_lon_coslat=0.05 * u.mas/u.yr,  # proper motion in longitude * cos(latitude)\n    pm_lat=0.02 * u.mas/u.yr,         # proper motion in latitude\n    radial_velocity=-20 * u.km/u.s,     # radial velocity\n    obstime=epoch\n)\n\n# Print the coordinates\nprint(f\"Haumea Heliocentric True Ecliptic Coordinates at {epoch}\")\nprint(f\"Longitude: {haumea_coords.lon:.4f}\")\nprint(f\"Latitude: {haumea_coords.lat:.4f}\")\nprint(f\"Distance: {haumea_coords.distance:.4f}\")\nprint(f\"Proper Motion (lon*cos(lat)): {haumea_coords.pm_lon_coslat:.4f}\")\nprint(f\"Proper Motion (lat): {haumea_coords.pm_lat:.4f}\")\nprint(f\"Radial Velocity: {haumea_coords.radial_velocity:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the motion of the dwarf planet Makemake. How can I set up HeliocentricTrueEcliptic coordinates with proper motion data? I have lon=121.0 degrees, lat=-15.0 degrees, distance=38.1 AU, pm_lon_coslat=0.03 mas/yr, pm_lat=0.01 mas/yr, and radial_velocity=10 km/s, observed at J2000 epoch."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Define the epoch\nepoch = Time('J2000')\n\n# Create HeliocentricTrueEcliptic coordinates with proper motion\nmakemake_coords = HeliocentricTrueEcliptic(\n    lon=121.0 * u.deg, \n    lat=-15.0 * u.deg, \n    distance=38.1 * u.AU, \n    pm_lon_coslat=0.03 * u.mas/u.yr,  # proper motion in longitude * cos(latitude)\n    pm_lat=0.01 * u.mas/u.yr,         # proper motion in latitude\n    radial_velocity=10 * u.km/u.s,     # radial velocity\n    obstime=epoch\n)\n\n# Print the coordinates\nprint(f\"Makemake Heliocentric True Ecliptic Coordinates at {epoch}\")\nprint(f\"Longitude: {makemake_coords.lon:.4f}\")\nprint(f\"Latitude: {makemake_coords.lat:.4f}\")\nprint(f\"Distance: {makemake_coords.distance:.4f}\")\nprint(f\"Proper Motion (lon*cos(lat)): {makemake_coords.pm_lon_coslat:.4f}\")\nprint(f\"Proper Motion (lat): {makemake_coords.pm_lat:.4f}\")\nprint(f\"Radial Velocity: {makemake_coords.radial_velocity:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a multi-extension FITS file to a Pandas DataFrame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits, pandas as pd\nhdul = fits.open('file.fits')\ndata = pd.DataFrame hdul[0].data\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the correct way to read a FITS file using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I extract the WCS information from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\nhdul = fits.open('file.fits')\nwcs = WCS(hdul[0].header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the pixel scales in the projected plane for a WCS object with a beam size of 0.3 arcsec and a pixel scale matrix with a crpix of 100.5 and cdelt of 0.1 and 0.2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\nimport numpy as np\ndeclare the WCS object with the given parameters\nwcs = WCS(naxis=2, cephi=100.5, cdelt=[0.1, 0.2], crval=[0, 0])\ncalculate the pixel scales using the function proj_plane_pixel_scales\ncalculate_pixel_scales = proj_plane_pixel_scales(wcs)\n\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a faint emission line in a 1024x1024 array with flux values between 1.0 and 100.0 Jy. Can you show me how to apply a log stretch normalization with log_a=1000 to better reveal the line?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import (ImageNormalize, LogStretch)\nimport matplotlib.pyplot as plt\ndata = np.random.uniform(1.0, 100.0, (1024, 1024))\nnorm = ImageNormalize(data, stretch=LogStretch(a=1000), vmin=1.0, vmax=100.0)\nplt.figure(figsize=(10, 8))\nplt.imshow(norm(data), origin='lower', cmap='viridis')\nplt.colorbar(label='Normalized Flux')\nplt.title('Emission Line with Log Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 3x3 box filter kernel using the Box2DKernel function without any discretization or oversampling?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in astronomical units. Can you create a new unit for a parsec?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.parsec = u.m.to(u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to visualize a list of spectral types (F, G, K, M) with their corresponding luminosity classes?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nfrom astropy import units as u\n\ndef plot_spectral_types():\n    spectral_types = ['F', 'G', 'K', 'M']\n    luminosity_classes = ['I', 'III', 'V', 'V']\n    categories = ['Spectral Type', 'Luminosity Class']\n    data = ['R Coronae Borealis', 'Sirius', 'Betelgeuse', 'Proxima Centauri']\n    import pandas as pd\n    df = pd.DataFrame(data, columns=[categories[0]])\n    for i, cat in enumerate(categories[1:]):\n        df[cat] = [get_luminosity_class(st) for st in spectral_types]\n    plt.figure(figsize=(10,6))\n    sns.countplot(x='Spectral Type', hue='Luminosity Class', palette='viridis', data=df)\n    plt.title('Spectral Type Distribution of Stars')\n    plt.show()\n\n    def get_luminosity_class(spectral_type):\n        # map spectral type to luminosity class\n        # for example:\n        if spectral_type == 'F':\n            return 'I'\n        elif spectral_type == 'G':\n            return 'III'\n        elif spectral_type == 'K':\n            return 'V'\n        elif spectral_type == 'M':\n            return 'V'\n\n    plot_spectral_types()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you format a list of wavelengths in nanometers to be displayed as kilometers?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nfrom astropy import units as u\nwavelengths = [100, 200, 300, 400] * u.nm\nplt.plot(wavelengths.to(u.km))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code for displaying a list of celestial coordinates (ra, dec) in format [hh:mm:ss.s \u00b1 dd:mm:ss.s]?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nfrom astropy import units as u\ncoaord = [(12, 30, 45, 45), (13, 21, 10, 10), (14, 12, 30, 30), (15, 45, 45, 45)]\nra, dec = zip(*coaord)\nimport numpy as np\nplt.plot(ra, dec)\nimport astropy.coordinates as coord\nfrom astropy.coordinates import Angle\nangles = Angle(np.array(ra) + 'h', unit='hr')\nangles.format('hh:mm:ss.s', sextant='+')\nangles = Angle(np.array(dec) + 'd', unit='deg')\nangles.format('dd:mm:ss.s', altneg=True, sextant='+')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar absorption lines and need to fit multiple Voigt profiles simultaneously. Can you show how to use SLSQPLSQFitter for this analysis?"
      },
      {
        "from": "assistant",
        "value": "INSERT CODE HERE"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a Cubic spline to a set of data points using the astropy library?"
      },
      {
        "from": "assistant",
        "value": "INSERT CODE HERE"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use the SLSQPLSQFitter to fit a Gaussian distribution to a set of data?"
      },
      {
        "from": "assistant",
        "value": "INSERT CODE HERE"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I estimate the uncertainty in my stellar flux measurements for a sample of A-type stars using deltaX resampling in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import deltaX_resampling"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use jackknife resampling to estimate the variance of my spectroscopic data in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the confidence interval for my photometric data using Astropy's jackknife resampling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling, jackknife_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the definition of the median absolute deviation (MAD)?"
      },
      {
        "from": "assistant",
        "value": "The median absolute deviation is defined as ``median(abs(a - median(a)))``"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the median absolute deviation using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation\nmad = median_absolute_deviation(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the parameters for the median_absolute_deviation function in Astropy?"
      },
      {
        "from": "assistant",
        "value": "Parameters: data : array-like\n    Input array or object that can be converted to an array.\naxis : None, int, or tuple of int, optional\n    The axis or axes along which the MADs are computed.  The default (`None`) is to compute the MAD of the flattened array.\nfunc : callable, optional\n    The function used to compute the median. Defaults to `numpy.ma.median` for masked arrays, otherwise to `numpy.median`."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a list of SkyCoord objects to pixel coordinates using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Create a sample WCS object\nw = WCS(\n    {'CTYPE1': 'RA---TAN',  # Projection type for RA\n     'CTYPE2': 'DEC--TAN',  # Projection type for Dec\n     'CRVAL1': 180.0,       # RA of reference pixel (degrees)\n     'CRVAL2': 0.0,         # Dec of reference pixel (degrees)\n     'CRPIX1': 256,         # X reference pixel\n     'CRPIX2': 256,         # Y reference pixel\n     'CD1_1': -0.001,       # Transformation matrix element\n     'CD1_2': 0.0,          # Transformation matrix element\n     'CD2_1': 0.0,          # Transformation matrix element\n     'CD2_2': 0.001,        # Transformation matrix element\n    }\n)\n\n# Define a list of SkyCoord objects\nsupernova_coords = [\n    SkyCoord('12h34m56.7s', '-45d12m34s', frame='icrs'),\n    SkyCoord('13h34m56.7s', '-45d12m34s', frame='icrs'),\n    SkyCoord('14h34m56.7s', '-45d12m34s', frame='icrs'),\n]\n\n# Convert sky coordinates to pixel coordinates\npixel_coords = [w.world_to_pixel(coord) for coord in supernova_coords]\n\nprint(pixel_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a power stretch with a power index a=1.2 to my image data to improve visibility?"
      },
      {
        "from": "assistant",
        "value": "I can use the PowerStretch transform from astropy.visualization, setting a=1.2. Example code: from astropy.visualization import PowerStretch\nfrom astropy.visualization import ImageNormalize\nimport numpy as np\n\nflux_data = np.random.random((100,100)) * 1e-15  # Simulated faint flux values\n\nstretch = PowerStretch(a=1.2)\nnorm = ImageNormalize(flux_data, stretch=stretch)\ntransformed_data = norm(flux_data)\nThis will enhance the faint regions of the image while preserving bright areas."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the power stretch formula and how can I apply it to my data?"
      },
      {
        "from": "assistant",
        "value": "The power stretch formula is y = x^a, where x is the data value and a is the power index. You can apply it using the PowerStretch transform from astropy.visualization. Example code: from astropy.visualization import PowerStretch\nfrom astropy.visualization import ImageNormalize\nimport numpy as np\n\ndata = np.random.random((100,100))\nstretch = PowerStretch(a=1.5)\nnorm = ImageNormalize(data, stretch=stretch)\ntransformed_data = norm(data)\nThis will apply the power stretch to your data, enhancing faint regions and preserving bright areas."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to apply a power stretch with a power index a=0.8 to my data?"
      },
      {
        "from": "assistant",
        "value": "You can use the PowerStretch transform from astropy.visualization, setting a=0.8. Example code: from astropy.visualization import PowerStretch\nfrom astropy.visualization import ImageNormalize\nimport numpy as np\n\ndata = np.random.random((100,100))\n\nstretch = PowerStretch(a=0.8)\nnorm = ImageNormalize(data, stretch=stretch)\ntransformed_data = norm(data)\nThis will reduce the contrast and enhance the faint regions of your data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of pulsar timing data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import knuth_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Knuth's rule to determine the optimal bin width for a histogram of astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of galaxy distribution data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to switch to the DE432s ephemeris for better accuracy."
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('de432s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the URL of a SPK ephemeris in SPICE binary (.bsp) format?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('URL')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What happens if I set the ephemeris to None?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set(None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of 200x300 pixels from a 5000x3000 image array centered at (2000, 1500)"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nimport numpy as np\ncutout = Cutout2D(image_data, position=(2000, 1500), size=(200, 300), mode='strict')\nreturn cutout.data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a WCS object from a FITS file using a specific header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.Header({'NAXIS': 2, 'NAXIS1': 1024, 'NAXIS2': 1024, 'CTYPE1': 'RA---TAN', 'CTYPE2': 'DEC--TAN', 'CRVAL1': 45.0, 'CRVAL2': 30.0, 'CRPIX1': 512, 'CRPIX2': 512, 'CDELT1': -0.001, 'CDELT2': 0.001, 'CTYPEIA': 'Tan', 'CTYPEIB': 'Tan'})\nw = WCS(header=header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object with a value of 10 meters and convert it to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nline_length = 10 * u.m\nline_length_km = line_length.to(u.km)\nprint(f\"Line length: {line_length}\")\nprint(f\"Line length in kilometers: {line_length_km}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object with a value of 1000 ml and convert it to liters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nvolume = 1000 * u.ml\nvolume_l = volume.to(u.l)\nprint(f\"Volume: {volume}\")\nprint(f\"Volume in liters: {volume_l}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object with a value of 5 mm and convert it to centimeters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nlength = 5 * u.mm\nlength_cm = length.to(u.cm)\nprint(f\"Length: {length}\")\nprint(f\"Length in centimeters: {length_cm}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a custom astronomical magnitude unit with LaTeX formatting?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import def_unit\ndef_unit(['mag'], u.abmag, format={'latex': r'm_{\rm AB}'}\n\n# Example usage\nmag flux = 10**(-20) * u.abmag\ncount flux = flux.to(u.counts / u.sr)\nprint(count_flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the spectral line profile of a star with a Doppler shift. How can I do it using the Voigt profile?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import Voigt1D\nimport matplotlib.pyplot as plt\n\n# Set up wavelength array (in Angstroms)\nwavelength = np.linspace(6560, 6565, 1000) * u.angstrom\ncenter_wavelength = 6562.8 * u.angstrom  # H-alpha line\n\n# Define Doppler shift\nvelocity = 100 * u.km / u.s\n# Convert velocity to wavelength shift\nwavelength_shift = velocity.to(u.angstrom, u\u594f1d).value\n\n# Define Voigt profile\nvoigt = Voigt1D(x_0=center_wavelength.value, amplitude_L=1.0, fwhm_L=0.1, fwhm_G=0.2)\n\n# Calculate Voigt profile with Doppler shift\ndoppler_shifted_profile = voigt(wavelength.value + wavelength_shift)\n\n# Plot results\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, doppler_shifted_profile, 'b-', label='Doppler shifted Voigt profile')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux')\nplt.title('Spectral Line Broadening Profile with Doppler Shift')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the spectral line profile of a star with a combination of thermal and natural broadening. How can I do it using the Voigt profile?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import Voigt1D\nimport matplotlib.pyplot as plt\n\n# Set up wavelength array (in Angstroms)\nwavelength = np.linspace(6560, 6565, 1000) * u.angstrom\ncenter_wavelength = 6562.8 * u.angstrom  # H-alpha line\n\n# Define thermal and natural broadening widths\nthermal_sigma = 0.2 * u.angstrom  # Thermal broadening width\nnatural_gamma = 0.1 * u.angstrom  # Natural broadening width\n\n# Define Voigt profile\nvoigt = Voigt1D(x_0=center_wavelength.value, amplitude_L=1.0, fwhm_L=natural_gamma.value, fwhm_G=thermal_sigma.value)\n\n# Calculate Voigt profile with thermal and natural broadening\nbroadened_profile = voigt(wavelength.value)\n\n# Plot results\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, broadened_profile, 'b-', label='Voigt profile with thermal and natural broadening')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux')\nplt.title('Spectral Line Broadening Profile')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the spectral line profile of a star with a combination of thermal and natural broadening, and a Doppler shift. How can I do it using the Voigt profile?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import Voigt1D\nimport matplotlib.pyplot as plt\n\n# Set up wavelength array (in Angstroms)\nwavelength = np.linspace(6560, 6565, 1000) * u.angstrom\ncenter_wavelength = 6562.8 * u.angstrom  # H-alpha line\n\n# Define thermal and natural broadening widths\nthermal_sigma = 0.2 * u.angstrom  # Thermal broadening width\nnatural_gamma = 0.1 * u.angstrom  # Natural broadening width\n\n# Define Doppler shift\nvelocity = 100 * u.km / u.s\n# Convert velocity to wavelength shift\nwavelength_shift = velocity.to(u.angstrom, u\u594f1d).value\n\n# Define Voigt profile\nvoigt = Voigt1D(x_0=center_wavelength.value, amplitude_L=1.0, fwhm_L=natural_gamma.value, fwhm_G=thermal_sigma.value)\n\n# Calculate Voigt profile with thermal and natural broadening, and Doppler shift\nbroadened_profile = voigt(wavelength.value + wavelength_shift)\n\n# Plot results\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, broadened_profile, 'b-', label='Voigt profile with thermal and natural broadening, and Doppler shift')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux')\nplt.title('Spectral Line Broadening Profile')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have radial velocity measurements of a binary star system (time points [0, 10, 20, 30] days and velocities [60, 55, 62, 58] km/s). Show me how to fit a sinusoidal model using SLSQPLSQFitter to determine the orbital period and amplitude."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have spectral data of a galaxy (wavelength points [4000, 5000, 6000] Angstroms and flux values [10, 20, 30] erg/s/cm^2/s). Show me how to fit a Gaussian model using SLSQPLSQFitter to determine the peak flux and centroid."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have timing data of a pulsar (time points [0, 10, 20, 30] seconds and timing residuals [10, 5, 15, 0] milliseconds). Show me how to fit a linear model using SLSQPLSQFitter to determine the slope and intercept."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Astropy to convert UTC to Barycentric Dynamical Time (TDB)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different time scales supported by Astropy's Time object?"
      },
      {
        "from": "assistant",
        "value": "Time.scale_names"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set the precision of the time representation in Astropy's Time object?"
      },
      {
        "from": "assistant",
        "value": "Time.precision"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply an asinh transformation to my astronomical image data to better visualize both the bright core and faint outer regions of a galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I adjust the 'a' parameter in the asinh stretch to change the transformation behavior?"
      },
      {
        "from": "assistant",
        "value": "a > 0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the asinh stretch with other astropy visualization tools?"
      },
      {
        "from": "assistant",
        "value": "Yes, see the astropy documentation for more information"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a luminosity distance to a angular diameter distance using the given redshift and Hubble constant?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\nfrom astropy.cosmology import Planck15\n\n# Given redshift and Hubble constant\nredshift = 0.5\nH0 = 67.74 * u.km/u.s/u.Mpc\n\n# Create a cosmology object\ncosmo = Planck15\n\n# Convert luminosity distance to angular diameter distance\nz_d = cosmo.angular_diameter_distance(z=redshift)\n\nprint(fAngular diameter distance: {z_d.to(u.Mpc).value:.2f} Mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the relationship between astronomical units and their corresponding values in physical units. How can I convert distances from astronomical units to kilometers and vice versa?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(1*u.au.to('km'))\nprint(1*u.km.to('au'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in plotting the luminosity of stars in different units such as erg/s, watts, and cgs units. How can I plot luminosity in various units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport matplotlib.pyplot as plt\nluminosity = [1e33, 1e34, 1e35] * u.erg/u.s\nplt.plot(luminosity.value, label='erg/s')\nplt.plot((luminosity-u.Unit('watt')).value, label='watt')\nplt.plot((luminosity-u.Unit('cgsss')).value, label='cgs units')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with time units and want to convert between different time units such as seconds, years, and days. How can I perform this conversion?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(1*u.s.to('yr'))\nprint(1*u.yr.to('day'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "# I need to find the coordinates of galaxies in a K-magnitude limited sample in GOODS South field that are located within a radius of 0.1 degrees centered at RA = 10h 00m 00s, DEC = -33\u00b0 00' 00''"
      },
      {
        "from": "assistant",
        "value": "# Import necessary libraries"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For this emission line study, I need to find the flux ratio between the emission lines H\u03b1 and H\u03b2 for a group of galaxies in the SDSS survey within a redshift range of 0.02<z<0.05."
      },
      {
        "from": "assistant",
        "value": "# Import necessary libraries"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing the luminosity function of a sample of galaxies. Please provide me with the formula for luminosity evolution of a galaxy population with redshift, given the luminosity at z=0 and the evolution index \u03b1"
      },
      {
        "from": "assistant",
        "value": "# Import necessary libraries"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to perform jackknife resampling on a set of random numbers to estimate the mean and standard deviation?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\ndata = np.random.randint(1, 10, 10)\njack_samples = jackknife_resampling(data)\njack_mean, jack_bias, jack_stderr, jack_ci = jackknife_stats(data, np.mean, confidence_level=0.95)\nprint(f'Jackknife mean: {jack_mean:.3f}')\nprint(f'Jackknife standard deviation: {jack_stderr:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use jackknife resampling to estimate the median and interquartile range of a dataset?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\ndata = np.random.randint(1, 10, 10)\njack_samples = jackknife_resampling(data)\nmedian, bias, iqr, conf_interval = jackknife_stats(data, np.median, statistic=lambda x: np.percentile(x, [25, 75]), confidence_level=0.95)\nprint(f'Jackknife median: {median:.3f}')\nprint(f'Jackknife interquartile range: {iqr:.3f}')\nprint(f'95% confidence interval: {conf_interval}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to perform jackknife resampling on a set of light curve amplitude measurements to estimate the mean amplitude and its uncertainty?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import jackknife_resampling, jackknife_stats\namplitudes = np.array([0.82, 0.79, 0.85, 0.77, 0.81, 0.84, 0.80, 0.83]) * u.mag\njack_samples = jackknife_resampling(amplitudes.value)\njack_mean, jack_bias, jack_stderr, jack_ci = jackknife_stats(amplitudes.value, np.mean, confidence_level=0.95)\nprint(f'Jackknife mean amplitude: {jack_mean:.3f} \u00b1 {jack_stderr:.3f} mag')\nprint(f'95% confidence interval: [{jack_ci[0]:.3f}, {jack_ci[1]:.3f}] mag')\nprint(f'Estimated bias: {jack_bias:.5f} mag')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of the ignore_nan parameter on the median absolute deviation?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nprint(stats.mad_std([1, 2, np.nan, 4, 5])\nprint(stats.mad_std([1, 2, np.nan, 4, 5], ignore_nan=True))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight midvariance of the distribution [1, 2, 3, 4, 5]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance/import numpy as np/biweight_midvariance(np.array([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the biweight midvariance of the array [10, 20, 30, 40, 50] with modify_sample_size=True?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance/import numpy as np/biweight_midvariance(np.array([10, 20, 30, 40, 50]), modify_sample_size=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of the Andromeda Galaxy using a WCS with CTYPE1='RA---TAN' and CTYPE2='DEC--TAN'. How can I extract the corresponding celestial reference frame using wcs_to_celestial_frame to properly handle the Equatorial coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\ncel_frame = WCS(wcs_string).CelestialFrame\nprint(cel_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of the Milky Way using a WCS with CTYPE1='AZIM-EQU' and CTYPE2='ALT-AIR'. How can I extract the corresponding celestial reference frame using wcs_to_celestial_frame to properly handle the Azimuthal and Altitude coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\ncel_frame = WCS(wcs_string).CelestialFrame\nprint(cel_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of the Crab Nebula using a WCS with CTYPE1='LONSC-KP' and CTYPE2='LATSC-KP'. How can I extract the corresponding celestial reference frame using wcs_to_celestial_frame to properly handle the Polar coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\ncel_frame = WCS(wcs_string).CelestialFrame\nprint(cel_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I express the flux of a star in magnitudes?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu = u.m/u.s\nflux = 1\ntMag = 2.5 * u.log10(flux/u.erg/u.cm**2/u.s/uHz) * u.mag\nprint(tMag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I express the frequency of a microwave oven in megahertz?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nf = 2500 * u.Hz\nf_MHz = f/u Hz\nprint(f_MHz)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I express the density of water in kilograms per cubic meter?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\rho = 1000 * u.g/u.cm**3\nc_density = rho/u.g/u.cm**3 * u.kg/u.m**3\nprint(c_density)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the luminosity distance for a redshift of 0.5 using the WMAP5 cosmology."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import WMAP5\nfrom astropy import units as u\nDistance(z=0.5, cosmology=WMAP5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a distance of 10 kpc to megaparsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndistance_kpc = 10 * u.kpc\ndistance_mpc = distance_kpc.to(u.Mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of distances in parsecs and I want to convert them to megaparsecs."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndistances_pc = [1, 2, 3] * u.pc\ndistances_mpc = distances_pc.to(u.Mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Similar to the proper motion example, I have several coordinate sets from different observing epochs for a source in the southern hemisphere that I need to combine for studies. How can I merge these coordinates using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, SkyOffsetFrame; from astropy.time import Time; import astropy.units as u; from astropy.coordinates import concatenate; \n coords1 = SkyCoord(ra='13h30m00s', dec='-30d00m00s', frame='icrs'); time1 = Time('2020-01-15'); \n coords2 = SkyCoord(ra='13h30m00s', dec='-30d00m00s', frame='icrs'); time2 = Time('2022-03-25'); \n combined_coords = concatenate([coords1, coords2]); \n print(combined_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two sets of coordinates for a source in the northern hemisphere observed at different times. How can I combine these coordinates using Astropy to get the average position and velocity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord; from astropy.time import Time; import astropy.units as u; from astropy.coordinates import concatenate; \n coords1 = SkyCoord(ra='10h30m00s', dec='+20d00m00s', frame='icrs'); time1 = Time('2020-01-15'); \n coords2 = SkyCoord(ra='10h30m00s', dec='+20d00m00s', frame='icrs'); time2 = Time('2022-03-25'); \n combined_coords = concatenate([coords1, coords2]); \n avg_position = combined_coords.mean(); avg_velocity = combined_coords.cartesian.differentials['proper_motion'].mean(); \n print(avg_position, avg_velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with a list of coordinate sets for a binary system observed at different times. How can I use Astropy to combine these coordinates and calculate the orbital motion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord; from astropy.time import Time; import astropy.units as u; from astropy.coordinates import concatenate; \n coords = [SkyCoord(ra='12h30m00s', dec='+10d00m00s', frame='icrs'), SkyCoord(ra='12h30m10s', dec='+10d00m10s', frame='icrs'), SkyCoord(ra='12h30m20s', dec='+10d00m20s', frame='icrs')]; times = [Time('2020-01-15'), Time('2021-01-15'), Time('2022-01-15')]; \n combined_coords = concatenate(coords); \n orbital_motion = combined_coords.cartesian.differentials['proper_motion']; \n print(orbital_motion)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a polar plot of a 2D array using astropy's visualization tools?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PolarPlotter\nimport numpy as np\ngenerate_data = np.random.rand(10, 10)\np = PolarPlotter()\np.show aerien generalized diagramprojectionimage_showrt.\ncomparearkGre regionnp.show(r, generate_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian1D model with default parameters."
      },
      {
        "from": "assistant",
        "value": "models.Gaussian1D()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian1D model with a fixed mean of 5 and a stddev of 2.5?"
      },
      {
        "from": "assistant",
        "value": "models.Gaussian1D(mean=5, stddev=2.5) {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to create a Gaussian1D model with a tied mean to the stddev and an amplitude of 10."
      },
      {
        "from": "assistant",
        "value": "models.Gaussian1D(amplitude=10, tied={'mean': lambda stddev: 2*stddev})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a non-linear stretch with a slope of 1.5 and intercept of 0.2 using LinearStretch to enhance the visualization of my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\n\n# Create sample flux data array (0.1 to 5.0 Jy)\nflux_data = np.linspace(0.1, 5.0, 100)\n\n# Create LinearStretch transformation with slope=1.5 and intercept=0.2\n# Formula: output = slope * input + intercept\nstretch = LinearStretch(slope=1.5, intercept=0.2)\n\n# Apply the stretch transformation to the data\nstretched_data = stretch(flux_data)\n\n# The stretched_data can now be used for visualization\n# Values will follow: new_value = 1.5 * original_value + 0.2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have data with values between 0.5 and 2.5. How can I apply a linear stretch with slope of 3 and intercept of 0.1 using LinearStretch for better visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\n\n# Create sample flux data array (0.1 to 5.0 Jy)\nflux_data = np.linspace(0.5, 2.5, 100)\n\n# Create LinearStretch transformation with slope=3 and intercept=0.1\n# Formula: output = slope * input + intercept\nstretch = LinearStretch(slope=3, intercept=0.1)\n\n# Apply the stretch transformation to the data\nstretched_data = stretch(flux_data)\n\n# The stretched_data can now be used for visualization\n# Values will follow: new_value = 3 * original_value + 0.1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a linear stretch with a slope of 1.2 and intercept of 0.5 using LinearStretch to enhance the visualization of my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\n\n# Create sample flux data array (0.1 to 5.0 Jy)\nflux_data = np.linspace(0.1, 5.0, 100)\n\n# Create LinearStretch transformation with slope=1.2 and intercept=0.5\n# Formula: output = slope * input + intercept\nstretch = LinearStretch(slope=1.2, intercept=0.5)\n\n# Apply the stretch transformation to the data\nstretched_data = stretch(flux_data)\n\n# The stretched_data can now be used for visualization\n# Values will follow: new_value = 1.2 * original_value + 0.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a sexagesimal string to a decimal value in ASTROPY?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('<time>', format='dddd dd:mm:ss:ss.sss', scale='utc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the prescription for saving a binary table to a FITS file in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n insured_table_hdu = fits.BinTableHDU(data=new_table)\n insured_merged_hdulist = fits.HDUList([src_hdu, insured_table_hdu])\n insured_merged_hdulist.writeto('filename.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you subset or index a FITS HDU in ASTROPY?"
      },
      {
        "from": "assistant",
        "value": "fits.HDUList([fits.PrimaryHDU(data=my_data[0:100, 0:100])]})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "To observe exoplanet HD 209458, I need to create a reference frame centered on it with a 10-degree rotation."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nfrom astropy import units as u\n\nhd209458 = SkyCoord(ra=278.33861111*u.deg, dec=49.51666667*u.deg, frame='icrs')\n\noffset_frame = SkyOffsetFrame(origin=hd209458, rotation=10*u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I compute the position of a star in the sky at a given time and location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, Latitude, Longitude, Time\nfrom astropy import units as u\n\ntime = Time('2024-01-01 00:00:00', scale='utc')\nlocation = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg)\nstar_name = 'Betelgeuse'\nstar = SkyCoord.from_name(star_name)\nskycoord = star.transform_to('altaz', location=location, obstime=time)\nprint(skycoord.alt, skycoord.az)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy with cartesian coordinates x=200, y=100, z=50 parsecs from Earth. Can you help me convert these into spherical coordinates for calculating their angular separation from the galactic center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nfrom astropy import units as u\ncartesian_to_spherical(200 * u.pc, 100 * u.pc, 50 * u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me convert the cartesian coordinates x=300, y=-200, z=75 parsecs from the galactic center to spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nfrom astropy import units as u\ncartesian_to_spherical(300 * u.pc, -200 * u.pc, 75 * u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the cartesian coordinates x=150, y=250, z=-100 parsecs from the galactic center to spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nfrom astropy import units as u\ncartesian_to_spherical(150 * u.pc, 250 * u.pc, -100 * u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a distance object from a redshift of 0.5 with the Planck18 cosmology."
      },
      {
        "from": "assistant",
        "value": "Distance(z=0.5, cosmology=Planck18)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a distance object from a distance modulus of 30.0 in magnitudes."
      },
      {
        "from": "assistant",
        "value": "Distance(distmod=30.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a distance object from a parallax of 1.0 arcsecond."
      },
      {
        "from": "assistant",
        "value": "Distance(parallax=1.0*u.arcsecond)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Implementing astropy.visualization.PercentileInterval for 80% of pixel values from a 2D numpy array containing X-ray counts from Chandra observations."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nfrom astropy.stats import SigmaClip\nimport numpy as np\n\ngxray_data = np.random.poisson(lam=100, size=(200, 200))  # Simulated X-ray counts\ninterval = PercentileInterval(80.0, n_samples=15000)\nscaled_data = interval(xray_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit my data to a non-linear function using the SLSQP optimizer?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n# Create sample data\nx = np.linspace(-10, 10, 200)\ny = np.sin(x) + np.random.normal(0, 0.1, x.shape)\n# Define non-linear model\nmodel = models.PowerLaw1D(degree=2)\n# Initialize fitter with SLSQP optimizer\nfitter = fitting.LevMarLSQFitter()\n# Fit the data\nbest_fit = fitter(model, x, y)\n# Print fitted parameters\nprint(best_fit.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using SLSQP for a composite model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n# Create sample spectral data (replace with your actual data)\nx = np.linspace(-10, 10, 200)\ntrue_g1 = models.Gaussian1D(amplitude=2.0, mean=1.0, stddev=0.5)\ntrue_g2 = models.Gaussian1D(amplitude=1.5, mean=-2.0, stddev=0.8)\ny = true_g1(x) + true_g2(x) + np.random.normal(0, 0.1, x.shape)\n# Define composite model of two Gaussians\ng1 = models.Gaussian1D(amplitude=1.0, mean=0.0, stddev=1.0,\n                      bounds={'amplitude': (0, 5), 'mean': (-5, 5), 'stddev': (0, 3)})\ng2 = models.Gaussian1D(amplitude=1.0, mean=-1.0, stddev=1.0,\n                      bounds={'amplitude': (0, 5), 'mean': (-5, 5), 'stddev': (0, 3)})\ncompound_model = g1 + g2\n# Initialize fitter with SLSQP optimizer\nfitter = fitting.SLSQPLSQFitter()\n# Fit the data\nbest_fit = fitter(compound_model, x, y)\n# Print fitted parameters\nprint('Gaussian 1:', best_fit[0].parameters)  # First Gaussian parameters\nprint('Gaussian 2:', best_fit[1].parameters)  # Second Gaussian parameters"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to fit a non-linear model with bounds to my data, but I keep getting a ModelLinearityError. How can I fix this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n# Create sample data\nx = np.linspace(-10, 10, 200)\ny = np.sin(x) + np.random.normal(0, 0.1, x.shape)\n# Define non-linear model with bounds\nmodel = models.PowerLaw1D(degree=2, amplitude=(1, 10), degree=(-2, 2))\n# Initialize fitter with SLSQP optimizer\nfitter = fitting.SLSQPLSQFitter()\n# Fit the data\nbest_fit = fitter(model, x, y)\n# Print fitted parameters\nprint(best_fit.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model a rotating star with an eccentric orbit. How do I use the Rotate1D and EccentricOrbit1D models together using Multiply?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a Rotate1D model with example parameters (angle=45, radius=10)\nrotate_model = models.Rotate1D(angle=45, radius=10)\n\n# Create an EccentricOrbit1D model with example parameters (eccentricity=0.5, periapsis=5)\necentric_orbit_model = models.EccentricOrbit1D(eccentricity=0.5, periapsis=5)\n\n# Combine the models using multiplication operator *\nrotated_orbit = rotate_model * eccentric_orbit_model\n\n# Example of using the combined model (if needed)\nx = np.linspace(0, 10, 100)  # coordinate array\nrotated_profile = rotated_orbit(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the absorption spectrum of a planet in a binary star system. How do I combine the BlackBody1D and gaussian1D models using Multiply?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a BlackBody1D model with example parameters (temperature=5000)\nblackbody_model = models.BlackBody1D(temperature=5000)\n\ngaussian_model = models.gaussian1D(amplitude=1.0, mean=5000, stddev=100)\n\n# Combine the models using multiplication operator *\nabsorbed_spectrum = gaussian_model * blackbody_model\n\n# Example of using the combined model (if needed)\nx = np.linspace(4900, 5100, 100)  # wavelength array\nabsorbed_profile = absorbed_spectrum(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model the scattering spectrum of a star with a complex atmosphere. How do I combine the PowerLaw1D and Lorentz1D models using Multiply?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a PowerLaw1D model with example parameters (alpha=2, x_0=5000)\npower_law_model = models.PowerLaw1D(alpha=2, x_0=5000)\n\n# Create a Lorentz1D model with example parameters (amplitude=1.0, x_0=5000, fwhm=100)\nlorentz_model = models.Lorentz1D(amplitude=1.0, x_0=5000, fwhm=100)\n\n# Combine the models using multiplication operator *\nscattered_spectrum = power_law_model * lorentz_model\n\n# Example of using the combined model (if needed)\nx = np.linspace(4900, 5100, 100)  # wavelength array\nscattered_profile = scattered_spectrum(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the flux of a source in an image using its pixel values and the pixel area?"
      },
      {
        "from": "assistant",
        "value": "{\"area\": {\"NAXIS1\": 1024, \"NAXIS2\": 1024, \"CTYPE1\": 'RA---TAN', 'CTYPE2': 'DEC--TAN', 'CRVAL1': 12.5, 'CRVAL2': 34.567, 'CRPIX1': 512, 'CRPIX2': 512, 'CDELT1': 0.001, 'CDELT2': -0.001, 'C unit1': 'deg', 'CUNIT2': 'deg'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel area of an image with a WCS that uses a linear transformation?"
      },
      {
        "from": "assistant",
        "value": "{\"area\": {\"NAXIS1\": 2048, \"NAXIS2\": 2048, \"CTYPE1\": 'RA---TAN', 'CTYPE2': 'DEC--TAN', 'CRVAL1': 12.5, 'CRVAL2': 34.567, 'CRPIX1': 1024, 'CRPIX2': 1024, 'CDELT1': 0.001, 'CDELT2': -0.001, 'C unit1': 'deg', 'CUNIT2': 'deg'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the surface brightness sensitivity of an image using its pixel area and the exposure time?"
      },
      {
        "from": "assistant",
        "value": "{\"area\": {\"NAXIS1\": 4096, \"NAXIS2\": 4096, \"CTYPE1\": 'RA---TAN', 'CTYPE2': 'DEC--TAN', 'CRVAL1': 12.5, 'CRVAL2': 34.567, 'CRPIX1': 2048, 'CRPIX2': 2048, 'CDELT1': 0.001, 'CDELT2': -0.001, 'C unit1': 'deg', 'CUNIT2': 'deg'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use a custom model for fitting a dataset?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.core as modeling\nfrom astropy.modeling.parameters import Parameter\nimport numpy as np\nclass CustomModel:\n    def __init__(self):\n        self.parameter = Parameter('parameter', value=1)\n    def evaluate(self, x):\n        return x * self.parameter\n# Create a CustomModel instance\nmodel = CustomModel()\n# Fit the model\ncustom_data = np.array([1, 2, 3])\nresult = modeling.fitting.NonlinearLSQFitter().fit(model, custom_data)\nclass AnotherModel:\n    def __init__(self):\n        self.another_parameter = Parameter('another_parameter', value=1)\n    def evaluate(self, x):\n        return x * self.another_parameter\n# Create a AnotherModel instance\nanther_model = AnotherModel()\n# Fit the another model\ncustom_data = np.array([4, 5, 6])\nresult = modeling.fitting.NonlinearLSQFitter().fit(model=anther_model, x=custom_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create heliocentric true ecliptic coordinates for the asteroid Ceres as observed on 2025-06-15, with lon=46.08 degrees, lat=8.63 degrees, and distance=2.59 AU. The equinox should be set to J2000."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\nvesta_coord = SkyCoord(\n    lon=46.08 * u.deg, \n    lat=8.63 * u.deg, \n    distance=2.59 * u.AU, \n    frame='heliocentrictrueecliptic', \n    equinox='J2000', \n    obstime=Time('2025-06-15')\n)\nprint(vesta_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create heliocentric true ecliptic coordinates for the asteroid Pallas as observed on 2025-06-15, with lon=211.35 degrees, lat=-19.11 degrees, and distance=2.33 AU. The equinox should be set to J2000."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\npallas_coord = SkyCoord(\n    lon=211.35 * u.deg, \n    lat=-19.11 * u.deg, \n    distance=2.33 * u.AU, \n    frame='heliocentrictrueecliptic', \n    equinox='J2000', \n    obstime=Time('2025-06-15')\n)\nprint(pallas_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create heliocentric true ecliptic coordinates for the asteroid Vesta as observed on 2025-06-15, with lon=78.23 degrees, lat=-7.14 degrees, and distance=2.36 AU. The equinox should be set to J2000."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\nvesta_coord = SkyCoord(\n    lon=78.23 * u.deg, \n    lat=-7.14 * u.deg, \n    distance=2.36 * u.AU, \n    frame='heliocentrictrueecliptic', \n    equinox='J2000', \n    obstime=Time('2025-06-15')\n)\nprint(vesta_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know how to create an FK5 coordinate for epoch J2000.0 (RA=12.34 degrees, Dec=45.67 degrees) with a distance of 10 light-years."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create FK5 coordinates for J2000.0\n# RA: 12.34 degrees, Dec: 45.67 degrees, distance: 10 light-years\ncoords = FK5(ra=12.34*u.degree, \n            dec=45.67*u.degree, \n            distance=10*u.lightyear, \n            equinox='J2000')\n\n# Print the coordinates in standard format\nprint(f\"RA, Dec (FK5 J2000): {coords.ra.to_string(unit=u.hour, sep=':')},\"\n      f\" {coords.dec.to_string(unit=u.degree, sep=':')}\")\n\n# You can also verify the equinox\nprint(f\"Equinox: {coords.equinox}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Linear1D model to model the out-of-transit baseline with a slope constraint of -0.005 to 0.005 flux units per time unit?"
      },
      {
        "from": "assistant",
        "value": "linear_model.slope.bounds = (-0.005, 0.005)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform 3D spherical matching with the `astropy.coordinates.SphericalCoords` class, given a set of 100 catalog objects and a single target astrophysical object?\n"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ncatalog = SkyCoord(ra=[1, 2, 3]*u.deg, dec=[4, 5, 6]*u.deg)\ntarget = SkyCoord(ra=7*u.deg, dec=8*u.deg)\npred = catalog.spherical.match_to_sky(target, nthneighbor=1, nthlookback=2)\nnns = pred.spherical.distance\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Barycentric Coordinate Time (TCB) object for the Earth, which is located at RA=00h00m00.0s and Dec=+00d00m00s? Show me the code to initialize this position."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation\nfrom astropy import units as u\n\ntcb = Time('2022-01-01T12:00:00', format='iso', scale='tcb')\nearth_location = EarthLocation.of_lat_lon_alt(43.6054, -79.3832, 0.0 * u.m)\nprint(tc.average_location.operation_region)  \n  "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the altitude of the Sun on January 1st, 2022, at 12:00:00 UTC at the location (43.6054, -79.3832, 0.0)?"
      },
      {
        "from": "assistant",
        "value": "from astroquery.sun import Sun\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport astropy.time as at\n\ntime_object = at.Time('2022-01-01 12:00:00', format='isot', scale='utc')\nsun_object = Sun(time=time_object)\nloc = SkyCoord(ra=43.6054*u.deg, dec=-79.3832*u.deg, frame='fk5')\nalkaz = sun_object.distance.at(time_object).to(u.kpc)\n  "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the RA and DEC of the North Celestial Pole on June 15th, 2022 at 23:00:00 UDT?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\ntime_object = Time('2022-06-15 23:00:00', format='isot', scale='tdb')\nnorth_celestial_pole = SkyCoord(ra=287.450808*u.deg, dec=+90.011439*u.deg, frame='icrs')\nprint(north_celestial_pole.transform_to('g sce'))\n   "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion from luminosity in watts to millimags?"
      },
      {
        "from": "assistant",
        "value": "def mabs_to_lum(mabs, dist=10):\n    from astropy.units import mag\n    L_sun = 3.846e26\n    M_abs_sun = 4.75 * mag\n    lum = L_sun * 10**((M_abs_sun - mabs)/(2.5 * mag))\n    return lum.to('W')\n\nlum = mabs_to_lum(-30)\nprint(lum.to('mW').value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me calculate the SNR for a close-up observation of a nearby star with a flux of 1e-9 erg/s/cm^2? The observation parameters are: exposure time = 300s, read noise = 2 electrons, sky background = 1e-6 erg/s/cm^2, dark current = 0.05 electrons/s/pixel, and sky rate = 0.5 electrons/s/pixel. Having an aperture of 50 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats.funcs import signal_to_noise_oir_ccd\nsignal_to_noise_oir_ccd(t=300, source_eps=1e-9 * 1e-8, sky_eps=1e-6 * 0.5, dark_eps=0.05, rd=2, npix=50)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to compute the average field direction from my angular measurements, weighted by field strength in different regions?"
      },
      {
        "from": "assistant",
        "value": "Usage: circmean(data, axis=None, weights=None) # Compute the circular mean angle of an array of circular data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the weight circular mean of circular data with no weights?"
      },
      {
        "from": "assistant",
        "value": "Usage: circmean(data, axis=None, weights=None) # Compute the circular mean angle of an array of circular data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the implementation of the circular mean function in astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "Usage: circmean(data, axis=None, weights=None) # Compute the circular mean angle of an array of circular data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a table with two columns, one for the name of a star and the other for its distance from Earth?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\n# Create a table with two columns\nstar_table = Table([\n    ['Sirius', 'Canopus'],\n    ['Arcturus', 'Alpha Centauri']\n], names=['star_name', 'distance'])\n\n# Print the table\nprint(star_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian kernel with a standard deviation of 5 pixels in both x and y directions and a rotation angle of 45 degrees"
      },
      {
        "from": "assistant",
        "value": "Gaussian2DKernel(x_stddev=5.0, y_stddev=5.0, theta=np.radians(45), x_size=21, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian kernel with a standard deviation of 3 pixels in x direction and 2 pixels in y direction and a rotation angle of 90 degrees"
      },
      {
        "from": "assistant",
        "value": "Gaussian2DKernel(x_stddev=3.0, y_stddev=2.0, theta=np.radians(90), x_size=11, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian kernel with a standard deviation of 2 pixels in both x and y directions and a rotation angle of 0 degrees"
      },
      {
        "from": "assistant",
        "value": "Gaussian2DKernel(x_stddev=2.0, y_stddev=2.0, theta=np.radians(0), x_size=7, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I've got a sample of data and I want to compute the biweight scale. How do I do that?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_scale(data={"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the astropy.coordinates.SkyCoord class to transform celestial coordinates from one system to another?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=1*u.deg, dec=2*u.deg, frame='icrs')\ntransformed = c.transform_to('galactic')\nprint(transformed.l, transformed.b)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a spectrum of a star and I want to create a model for the continuum subtraction. How can I set up a simple linear model to represent the continuum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Linear1D\nmodel = Linear1D suburban \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440=1.0, intercept=0.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert parsecs to meters?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nprint(1*u.parsec.to(u.meter))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of pi in radians?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nprint(u.pi.to(u.radian))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a time duration from minutes to seconds?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nprint(1*u.minute.to(u.second))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function that calculates the median of a list of numbers.\n"
      },
      {
        "from": "assistant",
        "value": "def calculate_median(numbers):\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        return numbers[n // 2]\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a table with columns 'Name' and 'Age' and add a row with name 'John' and age 30.\n"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\n# Create a table with columns 'Name' and 'Age'\nmy_table = Table([['Name', 'Age'], ['John', 30]])\n\n# Print the table\nprint(my_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function that takes a string and returns the index of the first occurrence of the substring 'hello' in the string.\n"
      },
      {
        "from": "assistant",
        "value": "def find_hello(s):\n    return s.find('hello')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a kernel with a width of 10 and a discretization mode of 'center'"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(10, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a kernel with a width of 5 and a discretization mode of 'oversample'?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(5, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a kernel with a width of 15 and a discretization mode of 'integrate'?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(15, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the matter density parameter (\u03a9_m) for Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "t2 = Planck18.H0 / 100. * Planck18.Om0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the age of the universe using Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "age_Gyr = Planck18.age()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Hubble constant (H_0) for Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "H0 = Planck18.H0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Why does the `astropy.io.fits.info` function default to ignore missing end of file markers in the FITS file?"
      },
      {
        "from": "assistant",
        "value": "The default behavior is implemented for compatibility with some FITS writers that do not write the End Of File (EOF) marker at the end of the file. This can cause problems for some tools that rely on the presence of the EOF marker. By ignoring missing EOF markers, we can ensure that the function works correctly with a wider range of FITS files."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram of my data with equal bins?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import Hist roarer\nimport numpy as np\n# Create some sample data\nx = np.random.normal(size=10000)\nhistogram = Hist(x, bins=50)\nhistogram.plot()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a polynomial of a given degree to a dataset. How can I do this in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial1D, Gaussian1D, Sine1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\ndef fit_polynomial(x, y, degree):\n    model = Polynomial1D(degree=degree)\n    fitter = LevMarLSQFitter()\n    result = fitter(model, x, y)\n    return result"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model for a Gaussian function and fit it to a dataset. How can I do this in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D, Sine1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\ndef fit_gaussian(x, y):\n    model = Gaussian1D(amplitude=1.0, mean=0.0, sigma=1.0)\n    fitter = LevMarLSQFitter()\n    result = fitter(model, x, y)\n    return result"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model for a sine function and fit it to a dataset. How can I do this in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D, Sine1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\ndef fit_sine(x, y):\n    model = Sine1D(amplitude=1.0, frequency=1.0)\n    fitter = LevMarLSQFitter()\n    result = fitter(model, x, y)\n    return result"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the SkyOffsetFrame to calculate the angular distance between two stars in a cluster?"
      },
      {
        "from": "assistant",
        "value": "sky_offset_frame = SkyOffsetFrame(origin=SkyCoord(ra=10, dec=20, unit='deg'), representation=None, rotation=30)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a SkyOffsetFrame with a custom rotation angle?"
      },
      {
        "from": "assistant",
        "value": "sky_offset_frame = SkyOffsetFrame(origin=SkyCoord(ra=10, dec=20, unit='deg'), representation=None, rotation=-45)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the SkyOffsetFrame to calculate the angular distance between a star and the center of a galaxy?"
      },
      {
        "from": "assistant",
        "value": "sky_offset_frame = SkyOffsetFrame(origin=SkyCoord(ra=10, dec=20, unit='deg'), representation=None, rotation=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm an astronomer studying the supernova SN 1987A. I want to calculate the angular distance between the supernova and the nearby star SK 160. Can you show me how to do this using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, distance \\r\\nfrom astropy import units as u \\r\\n \\r\\nsn1987a_coord = SkyCoord(ra=286.26417, dec=-69.24723, dist=50e3*u.pc, pm_ra=-2.1e-3*u.mas/u.yr, pm_dec=1.1e-3*u.mas/u.yr, radial_velocity=-200*u.km/u.s, \\r\\n                                    pm_ra_uncertainty=10e-4*u.mas/u.yr, pm_dec_uncertainty=10e-4*u.mas/u.yr, radial_velocity_uncertainty=10*u.km/u.s) \\r\\n \\r\\nsk160_coord = SkyCoord(ra=286.27107, dec=-69.24225, distance=100*u.pc) \\r\\n \\r\\nangular_distance = sn1987a_coord.separation(sk160_coord) \\r\\nprint(angular_distance) \\r\\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a given time to JD (Julian Date)? I have the following time and I want to calculate the JD."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time \\r\\nt = Time('2022-01-01 12:00:00', format='isot', scale='utc') \\r\\nprint(t.jd)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to transform a set of SkyCoord coordinates into pixel coordinates. Can you show me how to use the astropy.wcs.utils.skycoord_to_pixel function to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS \\r\\nfrom astropy.coordinates import SkyCoord \\r\\n \\r\\nc = SkyCoord(ra=10.0*u.degree, dec=20.0*u.degree) \\r\\nwcs = WCS(naxis=2) \\r\\n \\r\\npixel_coords = WCS.utils.skycoord_to_pixel(c, wcs) \\r\\nprint(pixel_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 90 degrees to radians using Astropy's Angle class"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle(90, unit=u.deg)\nprint(angle.radian)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 180 degrees to radians using Astropy's Angle class"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle(180, unit=u.deg)\nprint(angle.radian)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 45 degrees to radians using Astropy's Angle class"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle(45, unit=u.deg)\nprint(angle.radian)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use `astropy.modeling.models.Logarithmic1D` to fit my galaxy's rotation curve data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D, fitting\nfrom astropy.modeling.fitting import LevMarLSQFitter\nimport numpy as np\n\ndata = np.array([...])  # your data\nmodel = Logarithmic1D(amplitude=100, tau=0.5)\nfit_model = LevMarLSQFitter()(model, data)\nparameters = fit_model.parameters\nprint(parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I compare my exoplanet candidate observations with known Kepler objects within a certain angular distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.matching import match_coordinates_sky\n\n# Example coordinates of your observed targets (RA, Dec)\nmy_targets = SkyCoord(ra=[250.5, 248.7, 251.2] * u.degree,\n                     dec=[43.2, 42.9, 43.5] * u.degree)\n\n# Example Kepler catalog coordinates\nkepler_objects = SkyCoord(ra=[250.52, 248.65, 251.25, 249.8] * u.degree,\n                         dec=[43.18, 42.95, 43.48, 42.5] * u.degree)\n\n# Find matches within 5 arcseconds\nmax_separation = 5 * u.arcsec\n\n# Get indices of matches and separations\nidx, sep2d, _ = match_coordinates_sky(my_targets, kepler_objects)\n\n# Print matches and their separations\nfor i, (index, separation) in enumerate(zip(idx, sep2d)):\n    if separation < max_separation:\n        print(f\"Target {i}: matches Kepler object {index}\")\n        print(f\"Separation: {separation.to(u.arcsec):.2f}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.units to define a unit for the solar mass (M"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nM_sun = u.Msun"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a unit for the light year (ly). How can I do this using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nly = u.lyr"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to create a composite unit using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nm_perSecond = u.m / u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to convert a sigma value of 3.5 to FWHM for my detector."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(3.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the blackbody curve for an object at 5000K?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=5000*u.K)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I plot the blackbody curve for an object at 8000K?"
      },
      {
        "from": "assistant",
        "value": "plt.plot(wav, bb(wav))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the maximum wavelength of the blackbody curve for an object at 10000K?"
      },
      {
        "from": "assistant",
        "value": "bb.nu_max.to(u.AA, equivalencies=u.spectral()).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an SEB profile and fit it to data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of a steep power-law model of the form $I \\\\\\\\- A*r^{\\\\\\\\-S}$"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import PowerLaw1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a Gaussian model to data and estimate the sigma value?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to implement a Moffat model to fit data and estimate the beta value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Moffat1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use `astropy.modeling.models.Multiply` to scale my transit model by 0.9 to account for stellar radius?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Multiply, Box1D\nimport numpy as np\n\n# Create the transit box model\ntransit_box = Box1D(amplitude=1, x_0=0, width=0.1)\n\n# Create a scale model to scale the transit depth to 90% of original\nscale_model = Multiply(factor=0.9)\n\n# Create the scaled transit model\nscaled_transit_model = scale_model + transit_box\n\n# Example usage:\nx = np.linspace(-0.2, 0.2, 100)\nscaled_transit_depth = scaled_transit_model(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the circular standard deviation of an array of circular data?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(data, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular deviation of the given data?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(data, axis=0, method='angular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the circular standard deviation of grouped data with weights?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(data, axis=0, weights=[1, 2, 3, 4, 5, 6])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the Sun and the Moon in the sky?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun, get_moon\nimport astropy.units as u\n\n# Define a time\ntime = Time('2022-07-01 12:00:00', format='iso', scale='utc')\n\n# Get the position of the Sun and the Moon\nsun = get_sun(time)\nmoon = get_moon(time)\n\n# Print the positions\nprint(sun)\nprint(moon)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use a LinearStretch with matplotlib's imshow to better reveal the cluster's structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize import matplotlib.pyplot as plt plt.figure(figsize=(8, 8)) image = plt.imshow(color, norm=ImageNormalize(color, stretch=LinearStretch()), cmap='viridis', origin='lower') plt.colorbar(label='Counts') plt.title('Star Cluster with Linear Stretch') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a LogStretch to better reveal the cluster's structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize import matplotlib.pyplot as plt plt.figure(figsize=(8, 8)) image = plt.imshow(color, norm=ImageNormalize(color, stretch=LogStretch()), cmap='viridis', origin='lower') plt.colorbar(label='Counts') plt.title('Star Cluster with Log Stretch') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use a PowerStretch with matplotlib's imshow to better reveal the cluster's structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize import matplotlib.pyplot as plt plt.figure(figsize=(8, 8)) image = plt.imshow(color, norm=ImageNormalize(color, stretch=PowerStretch()), cmap='viridis', origin='lower') plt.colorbar(label='Counts') plt.title('Star Cluster with Power Stretch') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a Gaussian function to a set of data and I want to specify the mean and standard deviation of the Gaussian, but I'm not sure how to do it. Can you show me an example of how to set up and fit a Gaussian using Astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\ndata = np.random.normal(0, 1, 1000)\nmean = 5\nstddev = 2\namplitude = 10\n\nmodel = models.Gaussian1D(amplitude=amplitude, mean=mean, stddev=stddev)\n\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(model, data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a Gaussian function to a set of data and I want to specify the mean and standard deviation of the Gaussian, but I'm not sure how to do it. Can you show me an example of how to set up and fit a Gaussian using Astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\ndata = np.random.normal(0, 1, 1000)\nmean = 10\nstddev = 5\namplitude = 20\n\nmodel = models.Gaussian1D(amplitude=amplitude, mean=mean, stddev=stddev)\n\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(model, data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a Gaussian function to a set of data and I want to specify the mean and standard deviation of the Gaussian, but I'm not sure how to do it. Can you show me an example of how to set up and fit a Gaussian using Astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\ndata = np.random.normal(0, 1, 1000)\nmean = 15\nstddev = 3\namplitude = 30\n\nmodel = models.Gaussian1D(amplitude=amplitude, mean=mean, stddev=stddev)\n\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(model, data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.stats.bootstrap` function to perform bootstrap resampling on a dataset and obtain a distribution of values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nwith np.random.default_rng():\n    bootresult = bootstrap(np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use LogStretch to show both bright and faint features in my 3D spectral cube of a galaxy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import LogStretch\nimport matplotlib.pyplot as plt\ncube = np.random.uniform(1e-16, 1e-11, (100, 100, 100))  # 3D cube with large dynamic range\nstretch = LogStretch(a=10000)\nstretched_cube = stretch(cube / np.max(cube))  # Normalize cube before stretching\nplt.figure(figsize=(10, 6))\nplt.imshow(stretched_cube[50, :, :], extent=[3000, 9000, -10, 10], cmap='inferno')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Channel')\nplt.title('Galaxy Spectrum with LogStretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use LogStretch to visualize my time-series data of a star with a very large dynamic range?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import LogStretch\nimport matplotlib.pyplot as plt\ntime_series = np.random.uniform(1e-16, 1e-11, 1000)  # Time-series data with large dynamic range\nstretch = LogStretch(a=10000)\nstretched_time_series = stretch(time_series / np.max(time_series))  # Normalize time-series before stretching\nplt.figure(figsize=(10, 6))\nplt.plot(stretched_time_series, 'b-', linewidth=1)\nplt.xlabel('Time')\nplt.ylabel('Normalized Flux (stretched)')\nplt.title('Star Light Curve with LogStretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use LogStretch to visualize my spectral data of a supernova with a very large dynamic range?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import LogStretch\nimport matplotlib.pyplot as plt\nwavelength = np.linspace(3000, 9000, 1000)  # Wavelength in Angstroms\nsupernova = np.random.uniform(1e-16, 1e-11, 1000)  # Flux with large dynamic range\nstretch = LogStretch(a=10000)\nstretched_supernova = stretch(supernova / np.max(supernova))  # Normalize supernova before stretching\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, stretched_supernova, 'b-', linewidth=1)\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux (stretched)')\nplt.title('Supernova Spectrum with LogStretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In my research on galaxy clusters, I need to merge coordinate data from radio and optical observations of the same objects. How can I combine these different observational datasets while maintaining their spatial relationships?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport numpy as np\n\n# Sample coordinate data (replace with your actual data)\n# Radio observation coordinates\nradio_coords = SkyCoord(\n    ra=['14h21m32.4s', '14h21m45.6s'],\n    dec=['-12d45m21.2s', '-12d44m48.9s'],\n    frame='icrs'\n)\n\n# Optical observation coordinates\noptical_coords = SkyCoord(\n    ra=['14h21m32.5s', '14h21m45.7s', '14h21m38.2s'],\n    dec=['-12d45m21.8s', '-12d44m49.1s', '-12d46m12.3s'],\n    frame='icrs'\n)\n\n# Find matching coordinates within a specified radius\nmax_sep = 2 * u.arcsec  # Maximum separation tolerance\nidx_optical, idx_radio, d2d, _ = optical_coords.search_around_sky(radio_coords, max_sep)\n\n# Create matched dataset\nmatched_sources = {\n    'radio_ra': radio_coords.ra[idx_radio],\n    'radio_dec': radio_coords.dec[idx_radio],\n    'optical_ra': optical_coords.ra[idx_optical],\n    'optical_dec': optical_coords.dec[idx_optical],\n    'separation': d2d\n}\n\n# Print matches and their separations\nfor i in range(len(idx_optical)):\n    print(f\"Match {i+1}: Separation = {d2d[i].to(u.arcsec):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I frequently use the Astronomical Unit (AU) in my astronomy calculations. How can I create a unit from the string '10 AU' using astropy.units.Unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nts = u\u5f10('10 AU')\n\neval(ts)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to transform MJD 60000 to Barycentric Dynamical Time (TDB)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy import units as u\n\ntdb_time = Time(60000, format='mjd', scale='tdb')\nprint(tdb_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to transform MJD 55000 toUt1 time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nut1 = Time(55000, format='mjd', scale='ut1')\nprint(ut1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to transform MJD 58000 to TT time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntt = Time(58000, format='mjd', scale='tt')\nprint(tt)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.table.TableAttribute to create a custom table attribute for tracking the data source in my spectroscopic survey pipeline?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nfrom astropy import coordinates\n\nclass DataSourceTable(Table):\n    source = TableAttribute(default=None)\n    \n    def add_source(self, name, ra, dec):\n        self.source = name\n        self.meta['coordinates'] = coordinates.SkyCoord(ra=ra, dec=dec, unit='deg')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.table.TableAttribute to create a custom table attribute for tracking the data processing status in my spectroscopic survey pipeline?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nfrom enum import Enum\n\nclass ProcessingStatus(Enum):\n    PENDING = 1\n    RUNNING = 2\n    DONE = 3\n\nclass ProcessingStatusTable(Table):\n    status = TableAttribute(default=ProcessingStatus.PENDING)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.table.TableAttribute to create a custom table attribute for tracking the data validation results in my spectroscopic survey pipeline?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nclass ValidationResultsTable(Table):\n    pass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy to convert a distance of 1000 parsecs to light-years?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\ndistance_in_parsecs = 1000 * u.parsec\ndistance_in_lightyears = distance_in_parsecs.to(u.lightyear)\nprint(distance_in_lightyears)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to make my FITS file have a specific size, can you show me how to trim the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('input.fits')\ndata = hdul[0].data\ncropped_data = data[10:20, 10:20]\nnew_hdu = fits.PrimaryHDU(data=cropped_data)\nnew_hdul = fits.HDUList([new_hdu])\nnew_hdul.writeto('output.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read the telescope name from the UINT2TELESCOP keyword in the FITS header of my observation file 'ngc1234_spec.fits'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getval('ngc1234_spec.fits', 'UINT2TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the CD1_1 value in the FITS header of my observation file 'ngc1234_spec.fits'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getval('ngc1234_spec.fits', 'CD1_1')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the EPOCH value in the FITS header of my observation file 'ngc1234_spec.fits'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getval('ngc1234_spec.fits', 'EPOCH')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to compare different power stretches on my X-ray data array. Please compare it with a stretched version with a=2.5 using PowerStretch."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PowerStretch, ImageNormalize\nimport matplotlib.pyplot as plt\ncolors = ['viridis', 'plasma', 'inferno', 'magma', 'cividis']\n# Create sample X-ray data (replace with your actual data)\nxray_data = np.random.lognormal(mean=3, sigma=1, size=(100,100))\n# Set up 2x2 subplot\nfig, axes = plt.subplots(2, 2, figsize=(10,10))\npowers = [0.2, 0.5, 1.0, 2.0, 2.5]\n# Create visualizations with different power stretches\nfor ax, power in zip(axes.flat, powers):\n    # Create normalizer with PowerStretch\n    norm = ImageNormalize(xray_data, stretch=PowerStretch(power))\n\n    # Display image\n    im = ax.imshow(xray_data, norm=norm, cmap=colors[powers.index(power)])\n    ax.set_title(f'Power = {power}')\n\n    # Add colorbar\n    plt.colorbar(im, ax=ax)\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Why created plots are not showing proper mapping of intensities."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PowerStretch, ImageNormalize\nimport matplotlib.pyplot as plt\nfrom matplotlib.cbook import do_3D_projection\n# Create sample X-ray data (replace with your actual data)\nxray_data = np.random.lognormal(mean=3, sigma=1, size=(100,100))\n# Set up 2x2 subplot\nfig, axes = plt.subplots(2, 2, figsize=(10,10))\npowers = [0.2, 0.5, 1.0, 2.0]\n# Create visualizations with different power stretches\nfor ax, power in zip(axes.flat, powers):\n    # Create normalizer with PowerStretch\n    norm = ImageNormalize(xray_data, stretch=PowerStretch(power))\n\n    # Display image\n    im = ax.imshow(xray_data, norm=norm, cmap='viridis')\n    ax.set_title(f'Power = {power}')\n\n    # Add colorbar\n    plt.colorbar(im, ax=ax)\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to analyze how different power stretches have varied intensities distribution accross different image pixels in the resulted image, whose intensity values are all positive."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PowerStretch, ImageNormalize\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n# Create sample X-ray data (replace with your actual data)\nxray_data = np.random.lognormal(mean=3, sigma=1, size=(100,100))\n# Set up 2x2 subplot\nfig, axes = plt.subplots(2, 2, figsize=(10,10))\npowers = [0.2, 0.5, 1.0, 2.0]\n# Create visualizations with different power stretches\nfor ax, power in zip(axes.flat, powers):\n    # Create normalizer with PowerStretch\n    norm = ImageNormalize(xray_data, stretch=PowerStretch(power))\n\n    # Display image\n    im = ax.imshow(xray_data, norm=norm, cmap='viridis')\n    ax.set_title(f'Power = {power}')\n\n    # Add colorbar\n    plt.colorbar(im, ax=ax)\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform jackknife resampling for estimating the bias in my mean redshift calculation for the galaxy redshifts [0.42, 0.45, 0.41, 0.44, 0.43]."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling\nimport numpy as np\n\n# Original redshift measurements\nredshifts = np.array([0.42, 0.45, 0.41, 0.44, 0.43])\n\n# Perform jackknife resampling\njack_samples = jackknife_resampling(redshifts)\n\n# Calculate means for each jackknife sample\njack_means = np.mean(jack_samples, axis=1)\n\n# Calculate original mean and jackknife estimate\noriginal_mean = np.mean(redshifts)\njack_mean = np.mean(jack_means)\n\n# Calculate jackknife bias\njack_bias = (len(redshifts) - 1) * (jack_mean - original_mean)\n\n# Calculate jackknife standard error\njack_std_err = np.sqrt(((len(redshifts) - 1)/len(redshifts)) * \n                       np.sum((jack_means - jack_mean)**2))\n\nprint(f\"Original mean: {original_mean:.3f}\")\nprint(f\"Jackknife bias: {jack_bias:.3f}\")\nprint(f\"Jackknife standard error: { jack_std_err:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert an X-ray photon energy of 10 keV to electron volts using astropy's unit system?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ncanonical_unit = u.keV\nelectronvolt_unit = u.eV\n\n# Convert to electron volts\nenergy_in_keV = 10 * canonical_unit\nenergy_in_eV = energy_in_keV.to(electronvolt_unit)\n\n# Print result with units\nprint(f\"Energy: {energy_in_keV} = {energy_in_eV}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert an X-ray photon energy of 50 keV to MeV using astropy's unit system?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ncanonical_unit = u.keV\nev_unit = u.MeV\n\n# Convert to MeV\nenergy_in_keV = 50 * canonical_unit\nenergy_in_MeV = energy_in_keV.to(ev_unit)\n# Print result with units\ncanonical_unit.display_unit = \"MeV\"\n\nprint(f\"Energy: {energy_in_keV} = {energy_in_MeV}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert an X-ray photon energy of 1.2 keV to ergs using astropy's unit system?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define X-ray photon energy in keV\ncanonical_unit = u.keV\n# Define energy in ergs\nerg_unit = u.erg\n# Convert to ergs\nenergy_in_keV = 1.2 * canonical_unit\nenergy_in_ergs = energy_in_keV.to(erg_unit)\n# Print result with units\ncanonical_unit.display_unit = \"keV\"\n\nprint(f\"X-ray energy: {energy_in_keV} = {energy_in_ergs}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray count data from a pulsar with timestamps [1.23, 2.56, 3.98, 4.80, 5.01, 6.23, 7.45, 8.67] seconds and corresponding counts [20, 28, 35, 42, 45, 50, 55, 60]. The detector has a fundamental time resolution of 0.12 seconds. How can I use bayesian_blocks with 'regular_events' to find significant changes in the emission rate?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks\nimport numpy as np\ntimes = np.array([1.23, 2.56, 3.98, 4.80, 5.01, 6.23, 7.45, 8.67])\ncounts = np.array([20, 28, 35, 42, 45, 50, 55, 60])\ndt = 0.12\nedges = bayesian_blocks(times, counts, fitness='regular_events', dt=dt)\nprint(edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of Pi?"
      },
      {
        "from": "assistant",
        "value": "\u03c0 = 3.14159"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on analyzing stellar atmospheres and need to convert 2000 Kelvin to Celsius for comparison with other temperature scales. Can you help me write code using astropy's temperature equivalencies?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the temperature in Kelvin\nTemp_K = 2000 * u.K\n\n# Convert to Celsius using temperature equivalency\nTemp_C = Temp_K.to(u.deg_C, equivalencies=u.temperature_science())\n\n# Print results with proper units\nprint(f\"Temperature:\")\nprint(f\"In Kelvin: {Temp_K:.0f}\")\nprint(f\"In Celsius: {Temp_C:.0f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the ST magnitude of a flux of 1.2e-16 erg/(s*cm^2*\u00c5) with astropy's STmag unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import astrophys\n\n# Define the flux with units\nflux = 1.2e-16 * u.erg / (u.s * u.cm**2 * u.AA)\n\n# Convert flux to ST magnitude\nstmag = flux.to(u.STmag)\n\ndefine("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a flux of 3.4e-17 erg/(s*cm^2*\u00c5) to a magnitude using astropy's units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import astrophys\n\ndefine("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the ST magnitudes of a flux of 6.7e-18 erg/(s*cm^2*\u00c5) and a flux of 4.1e-17 erg/(s*cm^2*\u00c5)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import astrophys"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance between two celestial objects using the SkyCoord object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy units as u\nc1 = SkyCoord(ra=12.5, dec=34.6, distance=67.2, unit=(u.deg, u.deg, u.kpc))\nc2 = SkyCoord(ra=12.8, dec=34.9, distance=67.4, unit=(u.deg, u.deg, u.kpc))\ndistance = c2.separation(c1)\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a point at rho=3 solar radii, phi=45 degrees, z=-1"
      },
      {
        "from": "assistant",
        "value": "CylindricalRepresentation(rho=3 * u.R_sun, phi=45 * u.deg, z=-1 * u.R_sun)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the distance between two points at rho=1 solar radii, phi=180 degrees, z=0 and rho=1 solar radii, phi=270 degrees, z=0"
      },
      {
        "from": "assistant",
        "value": "((CylindricalRepresentation(rho=1 * u.R_sun, phi=180 * u.deg, z=0 * u.R_sun).to_cartesian() - CylindricalRepresentation(rho=1 * u.R_sun, phi=270 * u.deg, z=0 * u.R_sun).to_cartesian())**2).sum()**0.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a point at rho=2 solar radii, phi=0 degrees, z=2"
      },
      {
        "from": "assistant",
        "value": "CylindricalRepresentation(rho=2 * u.R_sun, phi=0 * u.deg, z=2 * u.R_sun)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a SkyCoord object for a source at RA=03h45m17.2s Dec=-05\u00b023'29"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create SkyCoord object in FK4 system at B1950.0\n# Using string formatting for coordinates\nsource_fk4 = SkyCoord('03h45m17.2s', '-05d23m29s', frame='fk4', obstime=Time('B1950.0'))\n\n# Transform to FK5 at J2000.0\nsource_fk5 = source_fk4.transform_to('fk5')\n\n# Print both coordinates for comparison\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a SkyCoord object for a source at  RA=12h34m17.7s Dec=05\u00b024'29' in the J2000.0  equinox using values in radians, with a distance of 4.5 kpc, and representing distance in parsecs."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create SkyCoord object in ICRS system at J2000.0\n# Using radian values for coordinates\nsource_icrs = SkyCoord(ra=215.02458333333333, dec=5.408333333333333,  u=u.rad, distance=4.5 * u.kpc, obstime=Time('J2000.0'), frame='icrs', representation_type='spherical',  distance_unit=u.pc)\nprint(source_icrs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a SkyCoord object for a source at  RA=12h34m17.7s Dec=05\u00b024'29' in the Galactic frame, with distance 4.5 kpc and representation type cylindrical?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n# Create SkyCoord object in Galactic system at J2000.0\n# Using cylindrical representation\nsource_galactic = SkyCoord('12h34m17.7s', '+05d24m29s', frame='galactic',   representation_type='cylindrical', distance=4.5*u.kpc\n\n# Print coordinates for comparison\nprint(source_galactic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the biweight location of these numbers: "
      },
      {
        "from": "assistant",
        "value": "[1, 2, 3, 4, 5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the biweight location of an array with a specific tuning constant?: "
      },
      {
        "from": "assistant",
        "value": "c=5.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight location of this array: "
      },
      {
        "from": "assistant",
        "value": "[1, 2, 3, 4, 5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the biweight location of this array along a specific axis?: "
      },
      {
        "from": "assistant",
        "value": "[[1, 2, 3], [4, 5, 6]]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I ignore NaN values when calculating the biweight location?: "
      },
      {
        "from": "assistant",
        "value": "True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a geocentric true ecliptic coordinateobject for the Earth's position on January 1, 2020, with a longitude of 12 degrees and a latitude of 45 degrees."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the ecliptic longitude and latitude of the Sun on January 1, 2020, using the geocentric true ecliptic coordinates."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Transform the geocentric true ecliptic coordinates of the Earth to the ICRS (International Celestial Reference System) on January 1, 2020."
      },
      {
        "from": "assistant",
        "value": "{}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to use the `Parameter` class to define a parameter that is constrained between -1 and 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter\nclass MyParameter(Parameter):\n    def __init__(self):\n        super().__init__(name='my_parameter', description='my parameter', default=0.0, bounds=(-1.0, 1.0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use the `Parameter` class to define a parameter that is tied to another parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter\nclass MyModel(Fittable1DModel):\n    x = Parameter(default=0)\n    y = Parameter(default=0, tied=lambda model: 2*model.x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to use the `Parameter` class to define a parameter that has a unit of degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter\nfrom astropy import units as u\nclass MyParameter(Parameter):\n    def __init__(self):\n        super().__init__(name='my_parameter', description='my parameter', default=0.0, unit=u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to fit a stellar light curve. Can you show me how to use the Moffat1D model to fit a light curve with a phase-folded cadence?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nimport matplotlib.pyplot as plt\n\n# Generate sample data points\nx = np.linspace(-10, 10, 200)\n\n# Create Moffat model\nmoffat = models.Moffat1D(amplitude=1, x_0=0, gamma=2, alpha=2.5)\n\n# Generate profile values\nmoffat_profile = moffat(x)\n\n# Plot the profile\nplt.figure(figsize=(8, 6))\nplt.plot(x, moffat_profile, 'b-')\nplt.xlabel('Position')\nplt.ylabel('Intensity')\nplt.title('Moffat Profile')\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the FWHM of a stellar profile. Can you show me how to calculate the FWHM of a Moffat profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Moffat1D\n\n# Create Moffat model\nmoffat = Moffat1D(amplitude=1, x_0=0, gamma=2, alpha=2.5)\n\n# Calculate FWHM\nmoffat_fwhm = 2 * moffat.gamma * np.sqrt(2**(1/moffat.alpha) - 1)\nprint(f'Moffat FWHM: {moffat_fwhm:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to compare the Moffat1D and Gaussian1D models. Can you show me how to plot both models and calculate their FWHMs?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Moffat1D, Gaussian1D\nimport matplotlib.pyplot as plt\n\ndist = np.linspace(-1, 1, 100)\namp1 = 1.0\namp2 = 0.8\n\u0433\u0430\u0443\u0441 = Gaussian1D(amplitude=amp1, mean=0, stddev=0.1)\nmoffat = Moffat1D(amplitude=amp2, x_0=0, gamma=0.2, alpha=5)\n\nplt.subplot(121)\ngaus_val = \u0433\u0430\u0443\u0441(dist)\n\nplt.plot(dist, \u0433\u0430\u0443\u0441_val, 'k')\nmoffat_val = moffat(dist)\nplt.plot(dist, moffat_val, 'r')\nplt.title('Gass + Moffat')\nprint(f'FWHM of Gaussian: {2.355 * \u0433\u0430\u0443\u0441.stddev:.2f}')\nprint(f'FWHM of Moffat: {2 * moffat.gamma * np.sqrt(2**(1/moffat.alpha) - 1):.2f}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have emission line spectral data from a quasar and need to fit a Lorentzian profile to measure its width and central wavelength. Can you show me how to use astropy's modeling to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Sample spectral data (replace with your actual data)\nwavelength = np.linspace(4800, 5200, 1000)  # Wavelength array in Angstroms\nflux = np.random.normal(1, 0.1, 1000)  # Sample flux data\n# Simulate emission line\nflux += models.Lorentz1D(amplitude=2, x_0=5000, fwhm=30)(wavelength)\n\n# Initialize Lorentzian model\nlorentz_init = models.Lorentz1D(\n    amplitude=2,    # Initial guess for peak intensity\n    x_0=5000,      # Initial guess for central wavelength\n    fwhm=30        # Initial guess for Full Width at Half Maximum\n)\n\n# Initialize fitter (using Levenberg-Marquardt algorithm)\nfit = fitting.LevMarLSQFitter()\n\n# Fit the data\nlorentz_fit = fit(lorentz_init, wavelength, flux)\n\n# Print results\nprint(f\"Central Wavelength: {lorentz_fit.x_0.value:.2f} \u00c5\")\nprint(f\"FWHM: {lorentz_fit.fwhm.value:.2f} \u00c5\")\nprint(f\"Amplitude: {lorentz_fit.amplitude.value:.2f}\")\n\n# If you want to plot (requires matplotlib, optional)\n# import matplotlib.pyplot as plt\n# plt.plot(wavelength, flux, 'k-', label='Data')\n# plt.plot(wavelength, lorentz_fit(wavelength), 'r-', label='Fit')\n# plt.legend()\n# plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Gaussian distribution and I want to fit a Gaussian model to it. Can you show me how to use astropy's modeling to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndata = models.Gaussian1D(\n    amplitude=10, mean=5, sigma=2\n)(np.linspace(0, 10, 100))\n\nfit_gaussian = fitting.LevMarLSQFitter()\ngaussian_model = models.Gaussian1D()\nfit_gaussian(gaussian_model, data.x, data.y)\n\nprint(gaussian_model.amplitude.value)\nprint(gaussian_model.mean.value)\nprint(gaussian_model.fwhm.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Boxcar distribution and I want to fit a Boxcar model to it. Can you show me how to use astropy's modeling to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = models.Box1D(\n    amplitude=10, x_0=5, fwhm=2\n)(np.linspace(0, 10, 100))\n\nfit_boxcar = fitting.LevMarLSQFitter()\nboxcar_model = models.Box1D()\nfit_boxcar(boxcar_model, data.x, data.y)\n\nprint(boxcar_model.amplitude.value)\nprint(boxcar_model.x_0.value)\nprint(boxcar_model.fwhm.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference between two dates in the UTC and GPS time scales?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTimeDelta(tt_arrivals[1] - tt_arrivals[0], scale='utc') - TimeDelta(tt_arrivals[1] - tt_arrivals[0], scale='gps')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the time difference between two dates in the TAI and TT time scales?"
      },
      {
        "from": "assistant",
        "value": "TimeDelta(tt_arrivals[1] - tt_arrivals[0], scale='tai') - TimeDelta(tt_arrivals[1] - tt_arrivals[0], scale='tt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference between two dates in the UT1 and TT time scales?"
      },
      {
        "from": "assistant",
        "value": "TimeDelta(tt_arrivals[1] - tt_arrivals[0], scale='ut1') - TimeDelta(tt_arrivals[1] - tt_arrivals[0], scale='tt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a custom weighting scheme for stacking multiple stellar spectra. How do I create a 1D CustomKernel with values [0.1, 0.3, 1.0, 0.3, 0.1] to weight the central wavelength more heavily?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel\nimport numpy as np\n\n# Define weights for the kernel\n# Higher weight (1.0) for central wavelength, symmetric declining weights on sides\nkernel_weights = np.array([0.1, 0.3, 1.0, 0.3, 0.1]\n\n# Create the CustomKernel\ncustom_kernel = CustomKernel(kernel_weights)\n\n# Normalize the kernel if needed\ncustom_kernel.normalize()\n\n# Example of applying the kernel to sample spectral data\n# (Assuming you have spectral_data as a 1D numpy array)\n# from astropy.convolution import convolve\n# weighted_spectrum = convolve(spectral_data, custom_kernel, boundary='extend')\n\n# Print kernel properties\nprint(\"Kernel weights:\", custom_kernel.array)\nprint(\"Kernel size:\", custom_kernel.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the wavelength of the peak emission for a blackbody at 10000 K."
      },
      {
        "from": "assistant",
        "value": "bb = BlackBody(temperature=10000*u.K)\nwavelength_peak = const.c / bb_peak_freq\nprint(f'Wavelength peak: {wavelength_peak:.2f} m')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram with the optimal bin width for my alpha centauri star temperature measurements (in Kelvin) [5500.72, 5501.02, 5502.33, 5503.15, 5502.44, 5501.85, 5503.67, 5501.38, 5502.51, 5500.19] using astropy's histogram function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the optimal histogram bin width for my light curve peak flux measurements (in ADU) [123.5, 124.2, 123.8, 124.0, 123.7, 124.1, 123.9, 124.3, 123.6, 124.4] using Scott's rule and then use it with astropy's histogram function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to find the optimal histogram bin width for my planetary rotation period measurements (in hours) [23.456, 23.578, 23.291, 23.819, 23.621, 23.439, 23.695, 23.485, 23.351, 23.629] using Scott's rule and then use it with astropy's histogram function?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a dark matter map with WMAP Cosmic Microwave Background data. In this plot, I'd like to use MinMaxInterval to show values between 100 and 500."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (ImageNormalize, MinMaxInterval, LinearStretch, AsymptomaticPercentileInterval)\nimport numpy as np\nfrom astropy.io import fits\ndef process_dark_matter_map(fits_file):\n    try:\n        # Check if file exists\n        if not os.path.exists(fits_file):\n            print(f\"Warning: {fits_file} not found.\")\n            # Create example data for testing\n            print(\"Creating example data instead...\")\n            data = np.random.normal(0, 1, (100, 100))  # Generate random data\n            # Add some structure to mimic dark matter halos\n            x, y = np.mgrid[0:100, 0:100]\n            r = np.sqrt((x-50)**2 + (y-50)**2)\n            theta = np.arctan2(y-50, x-50)\n            dark_matter = np.sin(r/10 - theta)\n            data += dark_matter\n        else:\n            # Read the actual FITS file\n            with fits.open(fits_file) as hdul:\n                data = hdul[0].data\n\n        # Create normalization object\n        # MinMaxInterval with custom min and max values to show dark matter\n        norm = ImageNormalize(\n            data,\n            interval=MinMaxInterval(100, 500),\n            stretch=LinearStretch()\n        )\n\n        # Apply normalization to data\n        normalized_data = norm(data)\n\n        # Plot using matplotlib\n        import matplotlib.pyplot as plt\n        plt.figure(figsize=(10, 8))\n        plt.imshow(normalized_data, origin='lower', cmap='viridis')\n        plt.colorbar(label='Normalized Flux Density')\n        plt.title('Dark Matter - MinMaxInterval')\n        plt.xlabel('Pixels')\n        plt.ylabel('Pixels')\n        plt.show()\n\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n# Run the processing function\nfits_file = 'dm_map.fits'  # Replace with your actual FITS file path\nprocess_dark_matter_map(fits_file)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy observation and need to identify which constellation it occurred in. How can I determine this from its coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import get_constellation\n\n# Example coordinates for the galaxy (replace with actual values)\nra = '08h00m00.0s'\ndec = '+30d00m00.0s'\n\n# Create SkyCoord object from the coordinates\ngalaxy_pos = SkyCoord(ra, dec, frame='icrs')\n\n# Get constellation name\nconstellation = get_constellation(galaxy_pos)\n\n# Print results\nprint(f\"The galaxy is located in the constellation: {constellation}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I retrieve a specific data file from the astropy package using its name and looking for it relative to the astropy.wcs.tests package?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\ndefault_package = 'astropy'\npackage = 'astropy.wcs.tests'\n\n# Define data name and package\ndata_name = 'data/3d_cd.hdr'\npackage = 'astropy.wcs.tests'\n\n# Get filename of the requested data\nfn = get_pkg_data_filename(data_name, package=package)\nprint(fn)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectral line profiles and need to model a Gaussian profile."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fittings\n\ngaussian_model = models.Gaussian1D()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to create a model for a sinusoidal curve."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fittings\ncosine_model = models.Sine1D()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a model for a custom function."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fittings\ncustom_model = models.CustomModel(funcenteredraw=math.sin(x))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Scott's rule to determine the optimal bin width for a given set of data?"
      },
      {
        "from": "assistant",
        "value": "return the optimal histogram bin width using Scott's rule"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to apply Scott's rule to a dataset with missing values?"
      },
      {
        "from": "assistant",
        "value": "remove any NaN values before applying Scott's rule"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mathematical formula for calculating the optimal bin width using Scott's rule?"
      },
      {
        "from": "assistant",
        "value": "\u0394_b = \u22123.5\u03c3/n^{1/3}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the Astropy library to convert a set of celestial coordinates from equatorial to galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Sample data for demonstration (replace with your actual data)\nra = [12.5, 13.5, 14.5] * u.degree  # Right Ascension\ndec = [10.5, 11.5, 12.5] * u.degree  # Declination\n\n# Create SkyCoord object\nskycoord = SkyCoord(ra=ra, dec=dec, frame='icrs')\n\n# Convert to galactic coordinates\ngalactic = skycoord.transform_to('galactic')\n\n# Print galactic coordinates\nprint(galactic.l, galactic.b)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D box model to represent a circular source with a radius of 5 pixels?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to fit a 2D box model to a set of observed data points?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible uses of a 2D box model in astronomical image processing besides source masking?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the spherical to cartesian transformation in cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "x, y, z = astropy.coordinates.spherical_to_cartesian(r, lat, lon)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert spherical polar coordinates to rectangular cartesian coordinates in astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.spherical_to_cartesian(r, lat, lon)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for converting spherical polar coordinates to cartesian coordinates in astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.spherical_to_cartesian(r, lat, lon) returns x, y, z cartesian coordinates"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a CSV file with comments starting with '#'"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.read(\"data.csv\", comment=\"#\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write a table to a file with a specific delimiter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.write(my_table, \"output.txt\", format=\"csv\", delimiter=\";\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a table from a file with a custom format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.read(\"data.txt\", format=\"csv\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create ICRS coordinates for the star Betelgeuse with ra=07h24m25.03s and dec=07\u00b016\u00b442.1"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ncoords = SkyCoord('07h24m25.03s 07\u00b016\u00b442.1', frame='icrs')\nprint(coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric position of Mercury on 2022-01-01 at 12:00:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\n\n# Set the specific time of the event\nevent_time = Time('2022-01-01 12:00:00')\n\n# Calculate barycentric position of Mercury\nmercury_pos = get_body_barycentric('mercury', event_time)\n\n# Print the position in astronomical units (AU)\nprint(f'Mercury barycentric position (AU):')\nprint(f'X: {mercury_pos.x.to("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric position of Venus on 2022-01-01 at 12:00:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\n\n# Set the specific time of the event\nevent_time = Time('2022-01-01 12:00:00')\n\n# Calculate barycentric position of Venus\nvenus_pos = get_body_barycentric('venus', event_time)\n\n# Print the position in astronomical units (AU)\nprint(f'Venus barycentric position (AU):')\nprint(f'X: {venus_pos.x.to('au').value:.6f}')\nprint(f'Y: {venus_pos.y.to('au').value:.6f}')\nprint(f'Z: {venus_pos.z.to('au').value:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric position of Mars on 2022-01-01 at 12:00:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\n\n# Set the specific time of the event\nevent_time = Time('2022-01-01 12:00:00')\n\n# Calculate barycentric position of Mars\nmars_pos = get_body_barycentric('mars', event_time)\n\n# Print the position in astronomical units (AU)\nprint(f'Mars barycentric position (AU):')\nprint(f'X: {mars_pos.x.to('au').value:.6f}')\nprint(f'Y: {mars_pos.y.to('au').value:.6f}')\nprint(f'Z: {mars_pos.z.to('au').value:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to set theitters through CRVAL1, CDELT1, CROTA2, CRVAL2, CDELT2 to 1.0, 0.1, -90.0, 2.0, 0.2 respectively, also update the CRVAL1, CRVAL2 to match CRVAL1, CRVAL2 of extension 1, and 2 respectively in the file."
      },
      {
        "from": "assistant",
        "value": "setval(filename='image.fits', keyword='CDELT1', value=0.1)\nsetval(filename='image.fits', keyword='CDELT2', value=0.2)\nsetval(filename='image.fits', keyword='CDELT1', value=0.1, after='CRVAL1')\nsetval(filename='image.fits', keyword='CRVAL2', value=fits.getval('image.fits', 'CRVAL2', 1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to set the keyword OBS \u0449\u0435POFRES whatever extra text after  to 2021-01-01"
      },
      {
        "from": "assistant",
        "value": "setval(filename='observation.fits', keyword='OBS\u0414\u0410\u0422\u0415', value='2021-01-01', comment='obs date + extra text')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to set the keyword NUMOBS to 5 with lossless compression and save the comment for an existing keyword"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(filename='observation.fits', keyword='NUMOBS', value=5, savecomment=True, do_compression=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to calculate the solar luminosity in watts?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.solLum.to(u.W))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the mass of Jupiter in kilograms to Earth masses?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nmass_jupiter = 1.8981246e+27 * u.kg\nmass_earth = 5.9721679e+24 * u.kg\nmass_jupiter_in_earths = mass_jupiter / mass_earth\nprint(mass_jupiter_in_earths)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Provide the Sun's barycentric position at 2022-01-01 00:00:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\nimport astropy.units as u\n\n# Define the observation time\nobservation_time = Time('2022-01-01 00:00:00', format='iso', scale='utc')\n\n# Get the Sun's barycentric position\nsun_position = get_body_barycentric('sun', observation_time)\n\n# Print the position in AU with descriptive labels\nprint(f\"Sun's barycentric position at {observation_time.iso}:\")\nprint(f\"X = {sun_position.x.to(u.au):.6f}\")\nprint(f\"Y = {sun_position.y.to(u.au):.6f}\")\nprint(f\"Z = {sun_position.z.to(u.au):.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create an array of time in hours and days for a star's lifetime?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nstar_lifetimes = [10, 20, 30] * u.hour\nstar_lifetimes_days = star_lifetimes.to(u.day)\nprint(star_lifetimes_days)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a masked column for a catalog of stars with detection flags?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn\nimport numpy as np\ndetection_flags = np.array([True, False, True, False, True])\ncatalog_names = ['Star 1', 'Star 2', 'Star 3', 'Star 4', 'Star 5']\n# Create a masked column for detection flags\ndetection_masked = MaskedColumn(detection_flags, name='detection_flag', mask=detection_flags, description='Detection flag for star')\n# Create the catalog table\ncatalog = Table([catalog_names, detection_masked], names=('star_name', 'detection_flag'))\nprint(catalog)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the circulation time for stellar rotation angles [90, 120, 150, 180, 210, 240] degrees with corresponding observation weights [1, 2, 3, 1, 2, 3]. How do I do it using the astropy stats functions?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the circular variance for stellar rotation angles [45, 135, 225, 315] degrees with corresponding observation weights [2, 1, 3, 1]. How do I use the astropy stats functions to do this?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the angular standard deviation for stellar rotation angles [30, 90, 150, 210, 270] degrees with corresponding observation weights [3, 1, 2, 1, 2]. How do I use the astropy stats functions to calculate this?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write a FITS image to a file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.HDUList()# Add HDUs to the listhdul.append(fits.PrimaryHDU())hdul.append(fits.ImageHDU(data=np.random.rand(10, 10)))# Write to a filewith fits.Writer(hdul) as writer:writer.write('image.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a new table with the same structure as the original table, but with different data"
      },
      {
        "from": "assistant",
        "value": "t_new = t1.copy()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to the table?"
      },
      {
        "from": "assistant",
        "value": "t1.add_column(Table({'new_column': [1, 2, 3]}, names=('new_column',)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I replace a column in the table with new data?"
      },
      {
        "from": "assistant",
        "value": "t1.replace_column('column_name', Table({'column_name': [1, 2, 3]}, names=('column_name',)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the size of the FoV of a JWST NIRCam image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\nimport numpy as np\n\ndef get_fov_size(fits_file):\n    \n    # Open the FITS file and get the WCS information\n    with fits.open(fits_file) as hdul:\n        \n        # Get WCS from primary or science extension\n        # JWST typically stores WCS in SCI extension\n        if 'SCI' in hdul:\n            wcs = WCS(hdul['SCI'].header)\n        else:\n            wcs = WCS(hdul[0].header)\n\n        # Get the size of the FoV\n        fov_size = wcs.pixel_scale\n\n        return fov_size\n\n# Example usage\nfits_file = 'jwst_nircam_image.fits'\nprint(get_fov_size(fits_file))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the coordinates of the center of a JWST NIRCam image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\ndef get_center_coordinates(fits_file):\n    # Open the FITS file and get the WCS information\n    with fits.open(fits_file) as hdul:\n        # Get WCS from primary or science extension\n        # JWST typically stores WCS in SCI extension\n        if 'SCI' in hdul:\n            wcs = WCS(hdul['SCI'].header)\n        else:\n            wcs = WCS(hdul[0].header)\n\n        # Get the coordinates of the center of the image\n        center_coordinates = wcs.wcs.crpix\n\n        return center_coordinates\n\n# Example usage\nfits_file = 'jwst_nircam_image.fits'\nprint(get_center_coordinates(fits_file))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the celestial coordinates of a point on a JWST NIRCam image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\ndef get_celestial_coordinates(fits_file, x_pixel, y_pixel):\n    # Open the FITS file and get the WCS information\n    with fits.open(fits_file) as hdul:\n        # Get WCS from primary or science extension\n        # JWST typically stores WCS in SCI extension\n        if 'SCI' in hdul:\n            wcs = WCS(hdul['SCI'].header)\n        else:\n            wcs = WCS(hdul[0].header)\n\n        # Convert pixel to celestial coordinates\n        celestial_coordinates = wcs.wcs_pix2world(x_pixel, y_pixel, 0)\n\n        return celestial_coordinates\n\n# Example usage\nfits_file = 'jwst_nircam_image.fits'\nx, y = 256.0, 512.0  # Example pixel coordinates\nprint(get_celestial_coordinates(fits_file, x, y))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent xyz coordinate for a star with spherical polar coordinates (r=10000 pc, latitude=30 degrees, longitude=-90 degrees)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nimport astropy.units as u\ndef get_xyz():\n    sph = (-90*u.deg, 30*u.deg, 10000*u.pc)\n    return spherical_to_cartesian(*sph)\nprint(get_xyz())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 2D Gaussian model with a rotation angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nfrom astropy.modeling.models import Gaussian2D\nimport numpy as np\nt = np.radians(45)\ngaussian_model = Gaussian2D(amplitude=2000, x_mean=300, y_mean=300, x_stddev=15, y_stddev=25, theta=t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the header of the third HDU in a FITS file using Astropy?"
      },
      {
        "from": "assistant",
        "value": "hdulist[2].header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the data type of the second column in the second HDU of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "hdulist[1].data[colnames[1]].dtype"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to list all the HDUs in a FITS file, along with their names and shapes?"
      },
      {
        "from": "assistant",
        "value": "for hdu in hdulist: print(hdu.name, hdu.data.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a keyword to a FITS file listing the telescope used for the observation."
      },
      {
        "from": "assistant",
        "value": "fits.setval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the correct syntax for updating the value of an existing keyword in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.setval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use fits.setval to add a new keyword to a FITS file with a specific comment?"
      },
      {
        "from": "assistant",
        "value": "fits.setval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a Gaussian filter to my image data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gauss2DKernel, convolve, GaussianSigma"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an AltAz object for the Moon at a specific time (2024-02-01 19:00 UT) from my location in New York (40.7128\u00b0 N, 74.0060\u00b0 W)? Given its altitude=55.6\u00b0 and azimuth=230.1\u00b0, how do I include proper motion (pm_alt=0.28 deg/s, pm_az_cosalt=-0.12 deg/s)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ndef create_altaz_moon():\n    # Define observation time\n    obs_time = Time('2024-02-01 19:00:00')\n\n    # Define observer's location (New York)\n    nyc = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg)\n\n    # Create AltAz object with proper motion\n    moon_altaz = AltAz(\n        az=230.1*u.deg,\n        alt=55.6*u.deg,\n        location=nyc,\n        obstime=obs_time,\n        # Include proper motion in degrees per second\n        pm_alt=0.28*u.deg/u.s,\n        pm_az_cosalt=-0.12*u.deg/u.s\n    )\n\n    return moon_altaz\n\nmoon_altaz = create_altaz_moon()\nprint(moon_altaz)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray counts data from Chandra with values between 125 and 15789 counts. How can I create a visualization where the intensity scaling is based on these exact minimum and maximum values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, MinMaxInterval, LinearStretch\nimport matplotlib.pyplot as plt\n\n# Create sample X-ray data (replace this with your actual data)\nxray_data = np.random.uniform(125, 15789, size=(100, 100))\n\n# Create normalization based on exact count range\nnorm = ImageNormalize(\n    vmin=125,  # Minimum count value\n    vmax=15789,  # Maximum count value\n    interval=MinMaxInterval(),\n    stretch=LinearStretch()\n)\n\n# Create the visualization\nplt.figure(figsize=(8, 8))\nim = plt.imshow(xray_data, norm=norm, cmap='viridis', origin='lower')\nplt.colorbar(im, label='Counts')\nplt.title('Chandra X-ray Data')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\n\n# Display the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have UV flux data from Hubble with values between 0.1 and 10.0 mA. How can I create a visualization where the intensity scaling is based on these exact minimum and maximum values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, MinMaxInterval, LinearStretch\nimport matplotlib.pyplot as plt\n\n# Create sample UV flux data (replace this with your actual data)\nflx_data = np.random.uniform(0.1, 10.0, size=(100, 100))\n\n# Create normalization based on exact flux range\nnorm = ImageNormalize(\n    vmin=0.1,  # Minimum flux value\n    vmax=10.0,  # Maximum flux value\n    interval=MinMaxInterval(),\n    stretch=LinearStretch()\n)\n\n# Create the visualization\nplt.figure(figsize=(8, 8))\nim = plt.imshow(flx_data, norm=norm, cmap='viridis', origin='lower')\nplt.colorbar(im, label='Flux (mA)')\nplt.title('Hubble UV Flux Data')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\n\n# Display the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have optical intensity data from Kepler with values between 1 and 1000 erg/s/cm^2. How can I create a visualization where the intensity scaling is based on these exact minimum and maximum values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, MinMaxInterval, LinearStretch\nimport matplotlib.pyplot as plt\n\n# Create sample optical intensity data (replace this with your actual data)\nintensity_data = np.random.uniform(1, 1000, size=(100, 100))\n\n# Create normalization based on exact intensity range\nnorm = ImageNormalize(\n    vmin=1,  # Minimum intensity value\n    vmax=1000,  # Maximum intensity value\n    interval=MinMaxInterval(),\n    stretch=LinearStretch()\n)\n\n# Create the visualization\nplt.figure(figsize=(8, 8))\nim = plt.imshow(intensity_data, norm=norm, cmap='viridis', origin='lower')\nplt.colorbar(im, label='Intensity (erg/s/cm^2)')\nplt.title('Kepler Optical Intensity Data')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\n\n# Display the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an exponential density model with a base density of 2e-4 kg/m^3 and a scale height of 200 km, and evaluate it at heights between 500 to 1500 km in 200 km steps"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\ndensity_model = models.Exponential1D(amplitude=2e-4, tau=200)\nheights = np.linspace(500, 1500, 8) * u.km\ndensities = density_model(heights.value) * u.kg/u.m**3\nfor h, d in zip(heights, densities):\n    print(f Height: {h:.0f}, Density: {d:.3e}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "S extinguishes the mutant solar flux from reaching the Si detectors in a light curve of shape (100,)"
      },
      {
        "from": "assistant",
        "value": "fits.PrimaryHDU(data=np.random.rand(100))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "IR and UV coverages of light curve of shape (5000,)"
      },
      {
        "from": "assistant",
        "value": "fits.PrimaryHDU(data=np.random.rand(5000))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "S length and E noise features in light curve of shape (2000,)"
      },
      {
        "from": "assistant",
        "value": "fits.PrimaryHDU(data=np.random.rand(2000))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "instruction1"
      },
      {
        "from": "assistant",
        "value": "response1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "instruction2"
      },
      {
        "from": "assistant",
        "value": "response2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "instruction3"
      },
      {
        "from": "assistant",
        "value": "response3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if I only have the UTC time and I want to know the local time at a specific location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\nclass IstanbulTimezone(TimezoneInfo):\n    utcoffset = 3*u.hour\n\ndef calculate_local_time(utc_time, location):\n    local_timezone = IstanbulTimezone()\n    local_time = utc_time.astimezone(local_timezone)\n    return local_time\nutc_time = Time('2024-01-15 10:00:00')\nlocation = EarthLocation(lat=41.0082*u.deg, lon=28.978*u.deg, height=50*u.m)\nlocal_time = calculate_local_time(utc_time, location)\nprint(local_time.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with a large dataset of astronomical images, and I want to create a catalog of galaxy properties. How can I access specific columns of the table?"
      },
      {
        "from": "assistant",
        "value": "galaxy_table['RA_J2000']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a string containing variable star measurements with tab-separated fields: 36891 12.8 0.02 36712 12.1 0.03. Show me how to read this using ascii.read while only including the first and third columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nfrom io import BytesIO\ndata_str = \\\n36891\t12.8\t0.02\n36712\t12.1\t0.03\"\ndata_bytes = data_str.encode('utf-8')\ntable = ascii.read(BytesIO(data_bytes), format='basic', delimiter='\t', guess=False, include_names=[0,2])\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing spectral data from an M5 star, and I need to fit a linear continuum with slope approximately -0.2 and intercept around 0.8. How can I create and evaluate this linear model using astropy.modeling for wavelengths between 5000-8000 \u00c5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\ncm_1= models.Linear1D(slope=-0.2/1000, intercept=0.8)\nwavelengths = np.linspace(5000, 8000, 1000) * u.angstrom\nflux = cm_1(wavelengths.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have time-series data of a resonant cavity response in my astronomical instrument. How can I fit a Lorentzian profile to this data to determine the quality factor of the resonance? In this case, I want to use the following parameters: amplitude = 2.0, x_0 = 10.5, fwhm = 0.005"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create sample resonance data (replace with your actual data)\nfrequency = np.linspace(9.95, 10.05, 1000)  # GHz\namplitude = 2.0 / (1 + ((frequency - 10.0) / 0.01)**2)  # Sample Lorentzian\nnoise = np.random.normal(0, 0.01, len(frequency))\ndata = amplitude + noise\n\n# Define and initialize Lorentzian model\nlorentz_init = models.Lorentz1D(\n    amplitude=2.0,     # Initial guess for peak amplitude\n    x_0=10.5,         # Initial guess for center frequency\n    fwhm=0.005         # Initial guess for Full Width at Half Maximum\n)\n\n# Create fitter and perform the fit\nfitter = fitting.LevMarLSQFitter()\nlorentz_fit = fitter(lorentz_init, frequency, data)\n\n# Calculate Quality Factor (Q = f0/FWHM)\nQ_factor = lorentz_fit.x_0.value / lorentz_fit.fwhm.value\n\n# Plot the results\nplt.figure(figsize=(10, 6))\nplt.plot(frequency, data, 'bo', label='Data', markersize=2)\nplt.plot(frequency, lorentz_fit(frequency), 'r-', label='Fitted Lorentzian')\nplt.xlabel('Frequency (GHz)')\nplt.ylabel('Amplitude')\nplt.title('Lorentzian Fit to Resonance Data')\nplt.legend()\nplt.grid(True)\n\n# Print the results\nprint(f\"Center Frequency: {lorentz_fit.x_0.value:.6f} GHz\")\nprint(f\"FWHM: {lorentz_fit.fwhm.value:.6f} GHz\")\nprint(f\"Quality Factor: {Q_factor:.0f}\")\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Lorentzian profile to my data using the following parameters: amplitude = 1.5, x_0 = 9.8, fwhm = 0.01"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create sample resonance data (replace with your actual data)\nfrequency = np.linspace(9.95, 10.05, 1000)  # GHz\namplitude = 1.5 / (1 + ((frequency - 9.8) / 0.01)**2)  # Sample Lorentzian\nnoise = np.random.normal(0, 0.01, len(frequency))\ndata = amplitude + noise\n\n# Define and initialize Lorentzian model\nlorentz_init = models.Lorentz1D(\n    amplitude=1.5,     # Initial guess for peak amplitude\n    x_0=9.8,         # Initial guess for center frequency\n    fwhm=0.01         # Initial guess for Full Width at Half Maximum\n)\n\n# Create fitter and perform the fit\nfitter = fitting.LevMarLSQFitter()\nlorentz_fit = fitter(lorentz_init, frequency, data)\n\n# Calculate Quality Factor (Q = f0/FWHM)\nQ_factor = lorentz_fit.x_0.value / lorentz_fit.fwhm.value\n\n# Plot the results\nplt.figure(figsize=(10, 6))\nplt.plot(frequency, data, 'bo', label='Data', markersize=2)\nplt.plot(frequency, lorentz_fit(frequency), 'r-', label='Fitted Lorentzian')\nplt.xlabel('Frequency (GHz)')\nplt.ylabel('Amplitude')\nplt.title('Lorentzian Fit to Resonance Data')\nplt.legend()\nplt.grid(True)\n\n# Print the results\nprint(f\"Center Frequency: {lorentz_fit.x_0.value:.6f} GHz\")\nprint(f\"FWHM: {lorentz_fit.fwhm.value:.6f} GHz\")\nprint(f\"Quality Factor: {Q_factor:.0f}\")\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Lorentzian profile to my data using the following parameters: amplitude = 2.5, x_0 = 10.2, fwhm = 0.015"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create sample resonance data (replace with your actual data)\nfrequency = np.linspace(9.95, 10.05, 1000)  # GHz\namplitude = 2.5 / (1 + ((frequency - 10.2) / 0.015)**2)  # Sample Lorentzian\nnoise = np.random.normal(0, 0.01, len(frequency))\ndata = amplitude + noise\n\n# Define and initialize Lorentzian model\nlorentz_init = models.Lorentz1D(\n    amplitude=2.5,     # Initial guess for peak amplitude\n    x_0=10.2,         # Initial guess for center frequency\n    fwhm=0.015         # Initial guess for Full Width at Half Maximum\n)\n\n# Create fitter and perform the fit\nfitter = fitting.LevMarLSQFitter()\nlorentz_fit = fitter(lorentz_init, frequency, data)\n\n# Calculate Quality Factor (Q = f0/FWHM)\nQ_factor = lorentz_fit.x_0.value / lorentz_fit.fwhm.value\n\n# Plot the results\nplt.figure(figsize=(10, 6))\nplt.plot(frequency, data, 'bo', label='Data', markersize=2)\nplt.plot(frequency, lorentz_fit(frequency), 'r-', label='Fitted Lorentzian')\nplt.xlabel('Frequency (GHz)')\nplt.ylabel('Amplitude')\nplt.title('Lorentzian Fit to Resonance Data')\nplt.legend()\nplt.grid(True)\n\n# Print the results\nprint(f\"Center Frequency: {lorentz_fit.x_0.value:.6f} GHz\")\nprint(f\"FWHM: {lorentz_fit.fwhm.value:.6f} GHz\")\nprint(f\"Quality Factor: {Q_factor:.0f}\")\n\nplt.show()}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a ring-shaped kernel with an inner radius of 10 pixels and width of 3 pixels to help remove background noise from my galaxy image?"
      },
      {
        "from": "assistant",
        "value": "Radius_in=10, width=3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 2D Ring filter kernel for background estimation with radius_in of 12 pixels and width of 4 pixels?"
      },
      {
        "from": "assistant",
        "value": "Radius_in=12, width=4"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to visualize the kernel created using Ring2DKernel with radius_in of 8 pixels and width of 2 pixels?"
      },
      {
        "from": "assistant",
        "value": "Radius_in=8, width=2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use convolve_fft to apply a Gaussian instrumental profile (kernel width = 10 pixels) to my 2D spectrum array of 100x100 flux measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve_fft"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use convolve_fft to convolve a 3D array with a 3D kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve_fft"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the effect of the 'normalize_kernel' parameter in convolve_fft?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import normalize_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy library to combine multiple sky coordinates recorded at different times and locations into a single coordinate system?"
      },
      {
        "from": "assistant",
        "value": "I would use the astropy.coordinates.concatenate function to combine the coordinates. Here is an example of how to do it:"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to combine the coordinates of stars in a galaxy and the stars in a nearby nebula. How can I do this using the astropy library?"
      },
      {
        "from": "assistant",
        "value": "I would use the astropy.coordinates.concatenate function to combine the coordinates of the stars in the galaxy and the nebula. The function can handle multiple coordinates in different frames, so you would need to make sure that both sets of coordinates are in the same frame."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of coordinates recorded at different epochs, and I want to combine them into a single coordinate system. What function from the astropy library can I use to achieve this?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.coordinates.concatenate function to combine the coordinates. This function takes in a sequence of coordinate-like objects and returns a single SkyCoord object with its data set to the concatenation of all the elements in the input sequence."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert positions of satellite galaxies around Andromeda to cylindrical coordinates."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord, ICRSCoordinate, cartesian_to_cylindrical\n\ngalaxy_data = [(23.457, 71.231, 800), (13.185, -72.827, 120), (211.191, 57.914, 150)]\n\nsc = SkyCoord(ra=np.array(galaxy_data)[:, 0]*u.degree, dec=np.array(galaxy_data)[:, 1]*u.degree, distance=np.array(galaxy_data)[:, 2]*u.kpc, frame='icrs')\n\ncylindrical = cartesian_to_cylindrical(sc.cartesian)\n\nprint(cylindrical)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a smoothing kernel with a standard deviation of 2.5 pixels for a 1D signal?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Gaussian1DKernel(2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default size of the Gaussian kernel generated by astropy.convolution.Gaussian1DKernel?"
      },
      {
        "from": "assistant",
        "value": "The default size of the kernel array is \u230a8*stddev+1\u230b."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the different discretization modes of Gaussian1DKernel?"
      },
      {
        "from": "assistant",
        "value": "The Gaussian filter kernel supports the following discretization modes: 'center', 'linear_interp', 'oversample', 'integrate'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a non-linear stretch to enhance the visibility of faint stellar objects in my deep-field image while preserving the relative brightness differences?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsymmetricPercentileInterval, ImageNormalize, LinearStretch\nnorm = ImageNormalize(stretch=LinearStretch(), interval=AsymmetricPercentileInterval(0.1, 99.9))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a linear stretch with a slope of 2 on the brightness of my deep-field image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize\nnorm = ImageNormalize(stretch=LinearStretch(slope=2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a linear stretch with an offset of 100 to my deep-field image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize\nnorm = ImageNormalize(stretch=LinearStretch(intercept=100))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I find the Galactic coordinates of a star of magnitude 10.5, 12.7 degrees from the zenith, 34.2 degrees from the north, and 7.8 degrees from the west, in the epoch 2023-01-01?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galactic\n\n# Define the position\nposition = SkyCoord(ra=12.7*u.deg, dec=34.2*u.deg, distance=200*u.pc, pm_ra_cosdec=0*u.mas/u.yr, pm_dec=-7.8*u.mas/u.yr, radial_velocity=-100*u.km/u.s, frame='icrs')\n\n# Transform to galactic coordinates\ngalactic_coords = position.transform_to(Galactic)\n\nprint('Galactic Coordinates: ', galactic_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe using Planck18 parameters?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Calculate age of the universe using Planck18 cosmology\nage = Planck18.age\n\n# Print result\nprint(f\"Age of the universe: {age:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the distance to a galaxy at redshift z=2.5 using Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Calculate distance to galaxy at redshift z=2.5 using Planck18 cosmology\ndistance = Planck18.luminosity_distance(2.5)\n\n# Print result\nprint(f\"Distance to galaxy at z=2.5: {distance:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Hubble constant H0 using Planck18 parameters?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Print Hubble constant H0\nprint(f\"Hubble constant H0: {Planck18.H0:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply an asinh stretch to an image with a fixed beta value?"
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(stretch=AsinhStretch(a=beta), ...)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the asinh stretch with a logarithmic scale?"
      },
      {
        "from": "assistant",
        "value": "yes, you can use the asinh stretch with a logarithmic scale"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of increasing the beta value on the asinh stretch?"
      },
      {
        "from": "assistant",
        "value": "Increasing the beta value makes the stretch more linear"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the most effective way to remove duplicates from a table based on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "The `unique` function from `astropy.table` can be used to remove duplicates from a table based on multiple columns. Here's an example:"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove duplicates from a table based on one column?"
      },
      {
        "from": "assistant",
        "value": "You can use the `unique` function from `astropy.table` with the `keys` parameter set to the column name."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default behavior of the `unique` function when no `keep` parameter is specified?"
      },
      {
        "from": "assistant",
        "value": "The default behavior of the `unique` function is to keep the first row for each set of duplicates."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the position of the Moon at a specific time using astropy coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_moon\nimport astropy.units as u\n\nt = Time('2022-01-01 12:00:00', format='iso', scale='utc')\nsun_pos = get_moon(t)\nra = sun_pos.ra.deg\ndec = sun_pos.dec.deg\nprint(f\"RA: {ra:.4f}\u00b0\")\nprint(f\"Dec: {dec:.4f}\u00b0\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a second-degree 2D polynomial model with specified domains matching a 100x100 field, and set up parameter bounds to ensure all coefficients are positive."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create coordinate grid for 100x100 field\nx = np.linspace(-50, 50, 100)  # arcseconds, centered at 0\ny = np.linspace(-50, 50, 100)\nx_grid, y_grid = np.meshgrid(x, y)\n\n# Initialize 2D polynomial model of degree 2\npoly2d = models.Polynomial2D(degree=2)\n\n# Set parameter bounds to ensure positive coefficients\npoly2d.c0_0.bounds = (0, None)  # constant term\npoly2d.c1_0.bounds = (0, None)  # x coefficient\npoly2d.c2_0.bounds = (0, None)  # x^2 coefficient\npoly2d.c0_1.bounds = (0, None)  # y coefficient\npoly2d.c0_2.bounds = (0, None)  # y^2 coefficient\npoly2d.c1_1.bounds = (0, None)  # xy coefficient\n\n# Create fitter object with bounds support\nfitter = fitting.LevMarLSQFitter()\n\n# Note: To fit actual data, you would use:\n# fitted_model = fitter(poly2d, x_grid, y_grid, intensity_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new unit that represents the product of a meter and a kilogram?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nnew_unit = u.m * u.kg"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new unit that represents the quotient of a kilogram and a second squared?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nnew_unit = u.kg / (u.s ** 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new unit that represents the cube of a kilogram and the square of a second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nnew_unit = (u.kg ** 3) * (u.s ** 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.io.fits.getheader function to extract specific header cards from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('file.fits', 0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use PowerStretch with a=1 to enhance the visualization of high-count regions?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PowerStretch, ImageNormalize\nimport matplotlib.pyplot as plt\n\ndata = np.random.randint(0, 500, size=(100, 100))\nnorm = ImageNormalize(data, stretch=PowerStretch(a=1))\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(data, origin='lower', cmap='viridis')\nplt.colorbar(label='Raw Star Counts')\nplt.title('Original')\nplt.subplot(122)\nplt.imshow(data, origin='lower', norm=norm, cmap='viridis')\nplt.colorbar(label='Stretched Star Counts')\nplt.title('PowerStretch (a=1)')\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to use PowerStretch with a=2 to enhance the visualization of extreme-count regions?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PowerStretch, ImageNormalize\nimport matplotlib.pyplot as plt\n\ndata = np.random.randint(0, 500, size=(100, 100))\nnorm = ImageNormalize(data, stretch=PowerStretch(a=2))\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(data, origin='lower', cmap='viridis')\nplt.colorbar(label='Raw Star Counts')\nplt.title('Original')\nplt.subplot(122)\nplt.imshow(data, origin='lower', norm=norm, cmap='viridis')\nplt.colorbar(label='Stretched Star Counts')\nplt.title('PowerStretch (a=2)')\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use PowerStretch with a=0.25 to enhance the visualization of low-count regions?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PowerStretch, ImageNormalize\nimport matplotlib.pyplot as plt\n\ndata = np.random.randint(0, 500, size=(100, 100))\nnorm = ImageNormalize(data, stretch=PowerStretch(a=0.25))\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(data, origin='lower', cmap='viridis')\nplt.colorbar(label='Raw Star Counts')\nplt.title('Original')\nplt.subplot(122)\nplt.imshow(data, origin='lower', norm=norm, cmap='viridis')\nplt.colorbar(label='Stretched Star Counts')\nplt.title('PowerStretch (a=0.25)')\nplt.tight_layout()\nplt.show()}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the constellation for the coordinates (12.5, 34.2, '2000')"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create sample coordinates for different epochs\n# Using FK5 reference system which is commonly used for historical observations\ncolors = [\n    # Format: RA, Dec, Epoch\n    (12.5, 34.2, '2000')\n]\n\n# Process each coordinate\nfor ra, dec, epoch in colors:\n    # Create SkyCoord object with the epoch\n    coord = SkyCoord(\n        ra=ra*u.degree,\n        dec=dec*u.degree,\n        frame=FK5(equinox=f'J{epoch}')\n    )\n\n    # Get constellation name\n    constellation = coord.get_constellation()\n\n    # Print results\n    print(f'Coordinates (J{epoch}): RA={ra}\u00b0, Dec={dec}\u00b0')\n    print(f'Constellation: {constellation}\\n')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset with 10 values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]. Perform bootstrap resampling with 1000 resamples to estimate the uncertainty in the mean value. Show me the resampled means."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\n\n# Original dataset\nvalues = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n\n# Perform bootstrap resampling with 1000 iterations\nbootresult = bootstrap(values, bootnum=1000, bootfunc=np.mean)\n\n# The original mean and its uncertainty\nprint(f'Mean value: {np.mean(values):.2f} \u00b1 {np.std(bootresult):.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset with 20 values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]. Perform bootstrap resampling with 500 resamples to estimate the uncertainty in the median value. Show me the resampled medians."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\n\n# Original dataset\nvalues = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\n# Perform bootstrap resampling with 500 iterations\nbootresult = bootstrap(values, bootnum=500, bootfunc=np.median)\n\n# The original median and its uncertainty\nprint(f'Median value: {np.median(values):.2f} \u00b1 {np.std(bootresult):.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset with 15 values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14]. Perform bootstrap resampling with 2000 resamples to estimate the uncertainty in the sum value. Show me the resampled sums."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\n\n# Original dataset\nvalues = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14])\n\n# Perform bootstrap resampling with 2000 iterations\nbootresult = bootstrap(values, bootnum=2000, bootfunc=np.sum)\n\n# The original sum and its uncertainty\nprint(f'Sum value: {np.sum(values):.2f} \u00b1 {np.std(bootresult):.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert a date string to an astropy Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nTime('2022-07-25 14:30:00', format='iso')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the recommended way to represent a date and time in Python?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nTime('2022-07-25 14:30:00', format='iso')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert a unix timestamp to an astropy Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nTime(1658667780, format='unix')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate a realistic black body spectrum for a star with temperature 5000 K. How can I model this using astropy and plot the flux distribution across visible wavelengths?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import BlackBody\nimport matplotlib.pyplot as plt\ntemperature = 5000 * u.K\nwavelengths = np.linspace(380, 750, 100) * u.nm\nbb = BlackBody(temperature=temperature)\nflux = bb(wavelengths)\nplt.figure(figsize=(10, 6))\nplt.plot(wavelengths, flux)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Spectral Radiance (erg/s/cm\u00b2/\u00c5)')\nplt.title(f'Black Body Spectrum for T = {temperature.value} K')\nplt.grid(True)\nplt.ticklabel_format(axis='y', style='sci', scilimits=(0,0))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model a black body spectrum for a star with temperature 2000 K using astropy, and plot the flux distribution across the near-infrared spectrum (1-5 \u03bcm)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import BlackBody\nimport matplotlib.pyplot as plt\ntemperature = 2000 * u.K\nwavelengths = np.linspace(1, 5, 100) * u micron\nbb = BlackBody(temperature=temperature)\nflux = bb(wavelengths)\nplt.figure(figsize=(10, 6))\nplt.plot(wavelengths, flux)\nplt.xlabel('Wavelength ( micron)')\nplt.ylabel('Spectral Radiance (erg/s/cm\u00b2/\u00c5)')\nplt.title(f'Black Body Spectrum for T = {temperature.value} K')\nplt.grid(True)\nplt.ticklabel_format(axis='y', style='sci', scilimits=(0,0))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I generate a realistic black body spectrum for a star with temperature 8000 K, using astropy, and plot the flux distribution across the ultraviolet spectrum (100-400 nm)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import BlackBody\nimport matplotlib.pyplot as plt\ntemperature = 8000 * u.K\nwavelengths = np.linspace(100, 400, 100) * u.nm\nbb = BlackBody(temperature=temperature)\nflux = bb(wavelengths)\nplt.figure(figsize=(10, 6))\nplt.plot(wavelengths, flux)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Spectral Radiance (erg/s/cm\u00b2/\u00c5)')\nplt.title(f'Black Body Spectrum for T = {temperature.value} K')\nplt.grid(True)\nplt.ticklabel_format(axis='y', style='sci', scilimits=(0,0))\nplt.show()}]}]}}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.visualization.ZScaleInterval to process an image with high dynamic range?"
      },
      {
        "from": "assistant",
        "value": "ZScaleInterval(n_samples=1000, contrast=0.25, max_reject=0.5, min_npixels=5, krej=2.5, max_iterations=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to check if the WCS information is available in the header of a FITS file."
      },
      {
        "from": "assistant",
        "value": "getheader(filename='file.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the header of the second HDU in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "getheader('file.fits', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stack multiple tables horizontally using astropy.table.hstack? Please provide an example with 3 tables."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\n\n# Create first table with column A\nA_data = Table([1, 2, 3], names=('A'))\n\n# Create second table with column B\nB_data = Table([4, 5, 6], names=('B'))\n\n# Create third table with column C\nC_data = Table([7, 8, 9], names=('C'))\n\n# Stack tables horizontally using hstack\nstacked_data = hstack([A_data, B_data, C_data])\n\n# Print the stacked table\nprint(stacked_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a spectral line that shows a Gaussian profile in my observational data. The emission line has a peak intensity of 5 Jy at 5000 \u00c5 (H-beta) with a FWHM of 1.5 \u00c5. How can I create this model using Gaussian1D and plot it over a wavelength range of 4998-5002 \u00c5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\rfrom astropy.modeling import models\rimport matplotlib.pyplot as plt\r\r# Create wavelength array (in Angstroms)\rwavelength = np.linspace(4998, 5002, 1000)\r\r# Create Gaussian model\r#gaussian = models.Gaussian1D(amplitude=5, mean=5000, stddev=0.75)\rgaussian = models.Gaussian1D(amplitude=5, mean=5000, fwhm=1.5)\r\r# Calculate the model values\rflux = gaussian(wavelength)\r\r# Create the plot\rplt.figure(figsize=(10, 6))\rplt.plot(wavelength, flux, 'b-', label='H-beta Model')\rplt.xlabel('Wavelength (\u00c5)')\rplt.ylabel('Flux Density (Jy)')\rplt.title('Gaussian Model of H-beta Emission Line')\rplt.grid(True, alpha=0.3)\rplt.legend()\rplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a spectral line that shows a boxcar profile in my observational data. The emission line has a peak intensity of 3 Jy at 5461 \u00c5 (He II) with a FWHM of 0.5 \u00c5. How can I create this model using Box1D and plot it over a wavelength range of 5460-5462 \u00c5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\rfrom astropy.modeling import models\rimport matplotlib.pyplot as plt\r\r# Create wavelength array (in Angstroms)\rwavelength = np.linspace(5460, 5462, 1000)\r\r# Create Lorentzian model\r# Parameters: amplitude=peak intensity, x_0=center wavelength, fwhm=full width half maximum\rlorentz = models.Lorentz1D(amplitude=3, x_0=5461, fwhm=0.5)\r\r# Calculate the model values\rflux = lorentz(wavelength)\r\r# Create the plot\rplt.figure(figsize=(10, 6))\rplt.plot(wavelength, flux, 'b-', label='He II Model')\rplt.xlabel('Wavelength (\u00c5)')\rplt.ylabel('Flux Density (Jy)')\rplt.title('Lorentzian Model of He II Emission Line')\rplt.grid(True, alpha=0.3)\rplt.legend()\rplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a spectral line that shows a Ricker wavelet profile in my observational data. The emission line has a peak intensity of 2 Jy at 5000 \u00c5 (O I) with a FWHM of 2 \u00c5. How can I create this model using RickerWavelet1D and plot it over a wavelength range of 4998-5002 \u00c5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\rfrom astropy.modeling import models\rimport matplotlib.pyplot as plt\r\r# Create wavelength array (in Angstroms)\rwavelength = np.linspace(4998, 5002, 1000)\r\r# Create Ricker wavelet model\r# Parameters: width=full width half maximum, sigma=standard deviation\rwavelet = models.RickerWavelet1D(width=2, sigma=4)\r\r# Calculate the model values\rflux = wavelet(wavelength)\r\r# Create the plot\rplt.figure(figsize=(10, 6))\rplt.plot(wavelength, flux, 'b-', label='O I Model')\rplt.xlabel('Wavelength (\u00c5)')\rplt.ylabel('Flux Density (Jy)')\rplt.title('Ricker Wavelet Model of O I Emission Line')\rplt.grid(True, alpha=0.3)\rplt.legend()\rplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the UT1 time to TAI time using Astropy's time functionality. Provide an example of how to do this."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\ntai_time = Time.now() + TimeDelta(32.184, format='sec')\nprint(tai_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the Barycentric Dynamical Time (TDB) for a given UTC time using Astropy's time functionality. Provide an example of how to do this."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\ntdb_time = Time.now() + TimeDelta(6.9692401e-4, format='sec')\nprint(tdb_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the Universal Time (UT) for a given TAI time using Astropy's time functionality. Provide an example of how to do this."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nut_time = Time.now() - TimeDelta(32.184, format='sec')\nprint(ut_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position angle between the Galactic Center and the Crab Nebula?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nSkyCoord('17h 49m 20.04s -21.5070d').position_angle(SkyCoord('17h 49m 30s -21.5070d'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position angle between the North Celestial Pole and a randomly selected star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nSkyCoord('12h 00m 00s +90d 00m 00s').position_angle(SkyCoord('12h 05m 30s +60d 30m 00s'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position angle between two planets in our solar system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nSkyCoord('14h 03m 30s +31d 00m 00s').position_angle(SkyCoord('01h 24m 00s -02d 00m 00s'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine these position measurements into one coordinate object for plotting its trajectory?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\ncurrent_ra = np.array([10.1, 10.2, 10.3])\ncurrent_dec = np.array([20.1, 20.2, 20.3])\nprevious_ra = np.array([11.1, 11.2])\nprevious_dec = np.array([21.1, 21.2])\nasteroid_coords = SkyCoord(ra=np.concatenate((current_ra, previous_ra)), dec=np.concatenate((current_dec, previous_dec)),\n                          unit='deg', frame='icrs')\nprint(asteroid_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a galaxy image that has a wide dynamic range. Can you show me how to use asinh scaling to reveal both bright and faint features in a single display?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the asinh stretch with other stretches. Can you provide an example of how to use asinh stretch and also include other stretches like log and sqrt for comparison?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, LogStretch, SquareRootStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a supernova remnant image. Can you demonstrate how to use asinh scaling to bring out the faint details in the remnant while also showing the bright emission features?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of observations [[1.2, 2.2, 3.1]] stored in mJy. How do I compute the median absolute deviation?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\n\n# Create 1D array of flux measurements\nflux_data = np.array([1.2, 2.2, 3.1]) * u.mJy\n\n# Compute median absolute deviation\nmad = median_absolute_deviation(flux_data)\n\n# Result maintains original units (mJy)\nprint(f'Median absolute deviation: {mad}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changing the percentile parameter on the normalization of the data?"
      },
      {
        "from": "assistant",
        "value": "The percentile parameter determines the fraction of pixels to keep. When you decrease the percentile parameter, more pixels are removed from the ends, resulting in a more extreme normalization. This can help to bring out features in the data that are otherwise obscured by the noise."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the n_samples parameter affect the normalization?"
      },
      {
        "from": "assistant",
        "value": "The n_samples parameter determines the maximum number of values to use in the normalization. If there are more values in the dataset than specified, then values are randomly sampled from the array. This can help to speed up the normalization process, but it may also introduce some randomness in the result."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use PercentileInterval with a custom dataset?"
      },
      {
        "from": "assistant",
        "value": "Here is an example of how to use PercentileInterval with a custom dataset: \n import numpy as np\n from astropy.visualization import PercentileInterval\n data = np.random.normal(size=(1024, 1024))  # Example data\n norm = PercentileInterval(percentile=80, n_samples=20000)\n plt.imshow(norm(data), cmap='magma', origin='lower')\n plt.colorbar(label='Normalized Intensity')\n plt.title('Data with Percentile Normalization')\n plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the biweight scale of a dataset with outliers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nbiweight_scale([1, 2, 3, 4, 5, 1000])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of Mars in the sky as seen from the Mauna Kea Observatory on a specific night?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, EarthLocation, AltAz, Time, solar_system_ephemeris\nsolar_system_ephemeris.set '\"builtin\"'\n# Define observatory location (example: Mauna Kea Observatory, Hawaii)\nobserving_location = EarthLocation(lat=19.8208 * u.deg, lon=-155.4681 * u.deg, height=4207 * u.m)\n# Set observation time (example: tonight at 10 PM UTC)\nobserve_time = Time('2024-01-20 22:00:00')\n# Get Mars' position\nmars_position = get_body('mars', observe_time, observing_location)\n# Transform to local horizontal coordinates (altitude/azimuth)\nframe = AltAz(obstime=observe_time, location=observing_location)\nmars_position = mars_position.transform_to(frame)\n# Print Mars' position\nprint('Mars' position: ', mars_position.ra.deg, ', ', mars_position.dec.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of intervals representing observing times of my exoplanet transit. How can I fold these intervals to the interval (0,1)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fold_intervals\nfold_intervals([(1, 2, 3), (2, 3, 4), (3, 4, 5)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the median and standard deviation of a dataset of galaxy distances while removing outliers with 2-sigma clipping."
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\ndistances = np.array([10.5, 12.2, 11.1, 20.3, 11.2, 10.8, \n                    11.5, 12.9, 25.7, 11.1, 11.3]\n                    stats.sigma_clipped_stats(distances, sigma=2.0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the 95th percentile of a list of galaxy velocities while excluding outliers with 4-sigma clipping?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\nvelocities = np.array([100.5, 98.2, 99.1, 250.3, 101.2, 97.8, \n                    99.5, 98.9, 500.7, 100.1, 99.3]\n                    stats.sigma_clipped_stats(velocities, sigma=4.0, cenfunc='median', stdfunc='mad_std')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to compute the standard deviation and mean of a dataset of galaxy luminosities while removing outliers with 3-sigma clipping and 10 iterations."
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\nluminosities = np.array([100.5, 98.2, 99.1, 250.3, 101.2, 97.8, \n                    99.5, 98.9, 500.7, 100.1, 99.3]\n                    stats.sigma_clipped_stats(luminosities, sigma=3.0, maxiters=10, cenfunc='mean', stdfunc='std')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to perform a Fourier transform on a time series data to extract frequency components. How to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.timeseries import LombScargle\ncfg = LombScargle(times, values)\nfreq = cfg.auto_power()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a constant model with a specific amplitude and plot it with error bounds using Astropy's modeling framework?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass CustomConstModel(modelswritelnD):\n    def __init__(self):\n        super().__init__(amplitude=10)\n\n    def evaluate(self, x):\n        return self.amplitude\n\nmodel = CustomConstModel()\n\ngenesis, termination = np.linspace(4000, 8000, 1000)  # 4000-8000 Angstroms\nnoisy_data = model(termination) + np.random.normal(0, 0.002, wavelength.shape)\n\nupper_bound = model(termination) + 0.002\nlower_bound = model(termination) - 0.002\n\nplt.figure(figsize=(10, 6))\nplt.plot(termination, noisy_data, 'k.', alpha=0.3, label='Data with noise')\nplt.plot(termination, model(termination), 'r-', label='Constant model')\nplt.fill_between(termination, lower_bound, upper_bound, \n                 color='red', alpha=0.2, label='1\u03c3 bounds')\n\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Flux')\nplt.legend()\nplt.title('Custom Constant Noise Floor Model with Error Bounds')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a constant model with an amplitude of 5 and plot it with error bounds using Astropy's modeling framework, but this time with the x-axis covering a range of 10000 to 20000 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmodel = models.Const1D(amplitude=5)\n\ngenesis, termination = np.linspace(10000, 20000, 1000)  # 10000-20000 Angstroms\nnoisy_data = model(termination) + np.random.normal(0, 0.002, wavelength.shape)\n\nupper_bound = model(termination) + 0.002\nlower_bound = model(termination) - 0.002\n\nplt.figure(figsize=(10, 6))\nplt.plot(termination, noisy_data, 'k.', alpha=0.3, label='Data with noise')\nplt.plot(termination, model(termination), 'r-', label='Constant model')\nplt.fill_between(termination, lower_bound, upper_bound, \n                 color='red', alpha=0.2, label='1\u03c3 bounds')\n\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Flux')\nplt.legend()\nplt.title('Constant Noise Floor Model with Error Bounds')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a constant model with an amplitude of 0.01 and plot it with error bounds using Astropy's modeling framework, but this time with the x-axis covering a range of 5000 to 7000 Angstroms and with a tighter error bound of 0.001?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmodel = models.Const1D(amplitude=0.01)\n\ngenesis, termination = np.linspace(5000, 7000, 1000)  # 5000-7000 Angstroms\nnoisy_data = model(termination) + np.random.normal(0, 0.002, wavelength.shape)\n\nupper_bound = model(termination) + 0.001\nlower_bound = model(termination) - 0.001\n\nplt.figure(figsize=(10, 6))\nplt.plot(termination, noisy_data, 'k.', alpha=0.3, label='Data with noise')\nplt.plot(termination, model(termination), 'r-', label='Constant model')\nplt.fill_between(termination, lower_bound, upper_bound, \n                 color='red', alpha=0.2, label='1\u03c3 bounds')\n\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Flux')\nplt.legend()\nplt.title('Constant Noise Floor Model with Tighter Error Bounds')\nplt.show()}]}]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Astropy to solve Kepler's third law for exoplanets with different orbital periods and masses?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import G\n\n# Define the constants\nG = G.to(u.m**3/u.kg/u.s**2)\n\n# Define a function to calculate the semi-major axis\ndef semi_major_axis(M, P):\n    return ((G * M * P**2) / (4 * np.pi**2)).to(u.au)\n\n# Test the function\nM = 1.989e30 * u.kg  # mass of the Sun\nP = 10 * u.d  # orbital period in days\na = semi_major_axis(M, P)\nprint(f'Semi-major axis: {a}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a set of radial velocity measurements of a binary star [23.1, 24.5, 22.8, ...] km/s, compute the mean velocity and its bias correction, with 99% confidence intervals?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\nimport numpy as np\n\n# Sample radial velocity measurements in km/s\nvelocities = np.array([23.1, 24.5, 22.8, 23.9, 23.2, 23.6, 22.4, 24.1])\n\n# Calculate jackknife statistics\njk_mean, jk_bias, jk_stderr, jk_ci = jackknife_stats(\n    data=velocities,\n    statistic=np.mean,\n    confidence_level=0.99\n)\n\n# Print results\nprint(f\"Jackknife mean velocity: {jk_mean:.2f} km/s\")\nprint(f\"Bias correction: {jk_bias:.3f} km/s\")\nprint(f\"Standard error: {jk_stderr:.3f} km/s\")\nprint(f\"99% Confidence Interval: [{jk_ci[0]:.2f}, {jk_ci[1]:.2f}] km/s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a plot showing the evolution of a star's temperature over its entire lifetime?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I produce a plot that displays the relationship between the radius and mass of stars?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to create a plot that illustrates the distribution of galaxies in the universe?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a narrowband 2D Gaussian kernel with a standard deviation of 0.5 pixels and an odd size of 31 pixels."
      },
      {
        "from": "assistant",
        "value": "Gaussian2DKernel(x_stddev=0.5, y_stddev=0.5, x_size=31, y_size=31)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use SLSQPLSQFitter with a Lorentzian1D model for fitting a curve with multiple peaks?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data\nwavelengths = np.array([500, 505, 510, 515, 520])  # wavelengths in nm\nfluxes = np.array([2.3, 2.1, 1.9, 1.7, 1.5])       # flux measurements\n\n# Initialize a Lorentzian1D model with initial parameter guesses\n# amplitude \u2248 max flux, mean \u2248 central wavelength, fwhm \u2248 rough estimate\nl_init = models.Lorentzian1D(amplitude=2.3, mean=505, fwhm=10.0)\n\n# Create fitter instance using SLSQP optimizer\nfitter = fitting.SLSQPLSQFitter()\n\ntry:\n    # Fit the model to the data\n    # Returns the best-fit model with optimized parameters\n    fitted_model = fitter(l_init, wavelengths, fluxes)\n\n    # Print the fitted parameters\n    print(f\"Best fit parameters:\")\n    print(f\"Amplitude: {fitted_model.amplitude.value:.3f}\")\n    print(f\"Center wavelength: {fitted_model.mean.value:.3f} nm\")\n    print(f\"Full width at half maximum: {fitted_model.fwhm.value:.3f} nm\")\nexcept Exception as e:\n    print(f\"Fitting failed: {str(e)}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a simple model to a dataset to understand its basic features?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data\nx = np.array([1, 2, 3])\ny = np.array([2, 4, 6])\n\n# Initialize a linear model\nlinear_model = models.Linear1D()\n\n# Initialize the SLSQP fitter\nfitter = fitting.SLSQPLSQFitter()\n\n# Fit the model to the data\nfitted_model = fitter(linear_model, x, y)\n\n# Print the fitted coefficients\nprint(f\"Slope: {fitted_model.slope}, Intercept: {fitted_model.intercept}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the SLSQP fitter to optimize a weighted least squares fit?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndata = np.array([4.2, 6.2, 8.3, 10.1, 11.3])\nerrs = np.array([0.1, 0.2, 0.15, 0.3, 0.12])**2\n\ndata_weighted = data / errs\n\nmodels.WLS fitting.SLSQPLSQFitter().models.Polynomial1D(degree=2)(x_weighted, data_weighted)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the inverted model from a fitted model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as \n\ndata = np.array([1, 2, 3])\nmodel = models.Polynomial1D(degree=2)\niterator = fitting.SLSQPLSQFitter()\nmodel = iterator(model, data)\nfitted_model_inverse = model.inverse"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between amplitude and tau in the logarithmic model?"
      },
      {
        "from": "assistant",
        "value": "The amplitude is the maximum value of the model, and tau is the scale parameter that controls the width of the model."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the logarithmic model to fit data?"
      },
      {
        "from": "assistant",
        "value": "You can use the `fit` method of the model instance to fit the data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the default values for amplitude and tau in the logarithmic model?"
      },
      {
        "from": "assistant",
        "value": "The default values for amplitude and tau are 1.0 and 1.0, respectively."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you shift the coordinates of the Andromeda Galaxy and the Milky Way?"
      },
      {
        "from": "assistant",
        "value": "[astropy.modeling.models.Shift(offset=100.0), astropy.modeling.models.Shift(offset=50.0)]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you shift a 2D coordinate?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Shift(offset=20.0, axis=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the proper way to shift coordinates for image processing?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Shift(offset=30.0, axis=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model multiple Gaussian components where the mean of each component is tied to be exactly 3 times its standard deviation. Using astropy.modeling.Model, show me how to create a Gaussian1D with amplitude=2.5, mean=15, and stddev=5 with this constraint."
      },
      {
        "from": "assistant",
        "value": "**Model Creation**\n\nfrom astropy.modeling import Fittable1DModel, Parameter\nimport numpy as np\n\nclass TiedGaussian1D(Fittable1DModel):\n    \"\"\"Custom 1D Gaussian model where mean = 3 * stddev\"\n    \"\"\n    amplitude = Parameter(default=1)\n    stddev = Parameter(default=1)\n\n    @property\n    def mean(self):\n        \"\"\"Mean is tied to be 3 times the standard deviation\"\n        return 3 * self.stddev\n\n    def evaluate(self, x, amplitude, stddev):\n        \"\"\"Evaluate the model\"\n        mean = 3 * stddev  # Enforcing the tie constraint\n        return amplitude * np.exp(-0.5 * ((x - mean) / stddev) ** 2)\n\n# Create model instance with desired parameters\n# Since mean = 3 * stddev, we set stddev = 5 to get mean = 15\nmodel = TiedGaussian1D(amplitude=2.5, stddev=5)\n\n# Verify the constraint\nprint(f\"Amplitude: {model.amplitude}\")\nprint(f\"StdDev: {model.stddev}\")\nprint(f\"Mean: {model.mean}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model multiple Gaussian components where the mean of each component is tied to be exactly 3 times its standard deviation. Using astropy.modeling.Model, show me how to create a Gaussian1D with amplitude=2.5, mean=15, and stddev=5 with this constraint."
      },
      {
        "from": "assistant",
        "value": "GaussainModel has been replaced with Fittable1DModel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model multiple Gaussian components where the mean of each component is tied to be exactly 3 times its standard deviation. Using astropy.modeling.Model, show me how to create a Gaussian1D with amplitude=2.5, mean=15, and stddev=5 with this constraint."
      },
      {
        "from": "assistant",
        "value": "**Model Creation**\n\nfrom astropy.modeling import Fittable1DModel, Parameter\nimport numpy as np\n\nclass TiedGaussian1D(Fittable1DModel):\n    \"\"\"Custom 1D Gaussian model where mean = 3 * stddev\"\n    \"\"\n    amplitude = Parameter(default=1)\n    stddev = Parameter(default=1)\n\n    @property\n    def mean(self):\n        \"\"\"Mean is tied to be 3 times the standard deviation\"\n        return 3 * self.stddev\n\n    def evaluate(self, x, amplitude, stddev):\n        \"\"\"Evaluate the model\"\n        mean = 3 * stddev  # Enforcing the tie constraint\n        return amplitude * np.exp(-0.5 * ((x - mean) / stddev) ** 2)\n\n# Create model instance with desired parameters\n# Since mean = 3 * stddev, we set stddev = 5 to get mean = 15\nmodel = TiedGaussian1D(amplitude=2.5, stddev=5)\n\n# Verify the constraint\nprint(f\"Amplitude: {model.amplitude}\")\nprint(f\"StdDev: {model.stddev}\")\nprint(f\"Mean: {model.mean}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a jet-like structure observed around a star at coordinates (200, 200) pixels. Can you show me how to create a Ring2D model with an inner radius of 30 pixels, width of 7 pixels, and peak amplitude of 0.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\tring_model = Ring2D(amplitude=0.5, x_0=200, y_0=200, r_in=30, width=7)\ny, x = np.mgrid[0:300, 0:300]\nring_image = ring_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a ring-like structure observed around a star at coordinates (50, 50) pixels. Can you show me how to create a Ring2D model with an inner radius of 10 pixels, width of 3 pixels, and peak amplitude of 1.2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\tring_model = Ring2D(amplitude=1.2, x_0=50, y_0=50, r_in=10, width=3)\ny, x = np.mgrid[0:300, 0:300]\nring_image = ring_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a ring-like structure observed around a star at coordinates (250, 250) pixels. Can you show me how to create a Ring2D model with an inner radius of 40 pixels, width of 9 pixels, and peak amplitude of 0.8?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\tring_model = Ring2D(amplitude=0.8, x_0=250, y_0=250, r_in=40, width=9)\ny, x = np.mgrid[0:300, 0:300]\nring_image = ring_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Column for star coordinates (RA and Dec) with appropriate metadata?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport numpy as np\ncol_ra = Column(data=np.array([12.345, 67.890]), name='RA', unit='hour', dtype=float, description='Right ascension of stars', meta={'unit': 'hours', 'dec_system': 'ICRS'})\ncol_dec = Column(data=np.array([0.123, -1.234]), name='Dec', unit='deg', dtype=float, description='Declination of stars', meta={'unit': 'degrees', 'dec_system': 'ICRS'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the recommended way to create a Column for spectroscopic velocities with units of km/s and flags for quality?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport numpy as np\ncol_vel = Column(data=np.array([100.0, -50.0]), name='vel', unit='km/s', dtype=float, description='Spectroscopic velocity', meta={'quality_flags': [1, 0]})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Column for luminosity measurements with units of erg/s and flags for quality?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport numpy as np\ncol_lum = Column(data=np.array([1e30, 1e31]), name='luminosity', unit='erg/s', dtype=float, description='Luminosity of objects', meta={'quality_flags': [1, 1]})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of data points with x and y coordinates, and I want to use bayesian_blocks to find the optimal segmentation of the data."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bayesian_blocks\n\n# Generate sample data points\nx = np.random.normal(size=100)\ny = np.random.normal(size=100)\n\n# Find optimal segmentation using bayesian_blocks\nbin_edges_x = bayesian_blocks(x, fitness='events', ncp_prior=5)\nbin_edges_y = bayesian_blocks(y, fitness='events', ncp_prior=5)\n\n# Print the bin edges\nprint(\"Bin edges for x:\", bin_edges_x)\nprint(\"Bin edges for y:\", bin_edges_y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of galaxy ages in a sample of 1000 galaxies, considering the data to be uniformly distributed?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import knuth_bin_width\n\tnum_galaxies = 1000\ngalaxy_ages = np.random.uniform(0, 1, num_galaxies)\n\toptimal_width = knuth_bin_width(galaxy_ages)\n\tn_bins = int(np.ceil((galaxy_ages.max() - galaxy_ages.min()) / optimal_width))\n\thist(galaxy_ages, bins=n_bins, density=True)\n# Print the optimal bin width\nginx_resources.print(optimal_width)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `Box1DKernel` to smooth a 1D array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\nconvolved = convolve(arr, Box1DKernel(5), boundary='extend')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default discretization mode for `Box1DKernel`?"
      },
      {
        "from": "assistant",
        "value": "linear_interp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Box kernel with a width of 3 and a factor of oversampling of 5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel(Box1DKernel(3, factor=5))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar rotation periods [1.2, 3.9, 2.1, 4.8, 2.5, 3.6] days from a cluster and want to compare them against a theoretical normal distribution with mean 2.5 and standard deviation 0.5 using the Kuiper test. Show me how to implement this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nimport numpy as np\ncdf = lambda x: 0.5 * (1 + erf((x - 2.5) / (0.5 * np.sqrt(2))))\nD, p_value = kuiper(np.array([1.2, 3.9, 2.1, 4.8, 2.5, 3.6]), cdf)\nprint(f\"Kuiper test statistic D: {D:.3f}\")\nprint(f\"P-value: {p_value:.3f}\")\nprint('Null hypothesis: data follows the theoretical distribution')\nprint(f\"{'Reject' if p_value < 0.05 else 'Cannot reject'} null hypothesis at 5% significance level\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar rotation periods [4.9, 2.7, 3.4, 1.1, 3.2, 2.9] days from a cluster and want to compare them against a theoretical normal distribution with mean 2.2 and standard deviation 0.7 using the Kuiper test. Show me how to implement this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nfrom scipy.special import erf\nimport numpy as np\ncdf = lambda x: 0.5 * (1 + erf((x - 2.2) / (0.7 * np.sqrt(2))))\nD, p_value = kuiper(np.array([4.9, 2.7, 3.4, 1.1, 3.2, 2.9]), cdf)\nprint(f\"Kuiper test statistic D: {D:.3f}\")\nprint(f\"P-value: {p_value:.3f}\")\nprint('Null hypothesis: data follows the theoretical distribution')\nprint(f\"{'Reject' if p_value < 0.05 else 'Cannot reject'} null hypothesis at 5% significance level\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar rotation periods [3.5, 2.3, 4.6, 1.9, 3.9, 2.8] days from a cluster and want to compare them against a theoretical normal distribution with mean 3.1 and standard deviation 0.3 using the Kuiper test. Show me how to implement this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nfrom scipy.special import erf\nimport numpy as np\ncdf = lambda x: 0.5 * (1 + erf((x - 3.1) / (0.3 * np.sqrt(2))))\nD, p_value = kuiper(np.array([3.5, 2.3, 4.6, 1.9, 3.9, 2.8]), cdf)\nprint(f\"Kuiper test statistic D: {D:.3f}\")\nprint(f\"P-value: {p_value:.3f}\")\nprint('Null hypothesis: data follows the theoretical distribution')\nprint(f\"{'Reject' if p_value < 0.05 else 'Cannot reject'} null hypothesis at 5% significance level\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the luminosity distance for a redshift of 0.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import WMAP5\nluminosity_distance = WMAP5.luminosity_distance(0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my image processing, I need to create a FITS header card with the keyword 'TELESCOP' containing the string 'Hubble Space Telescope' and add a verification keyword level as 'warn'. What's the code to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io.fits import Card\n\ncard = Card('TELESCOP', 'Hubble Space Telescope', verify='warn')\n\n# Note: This creates a single card. To use it, you would typically add it\n# to a Header object using header.append(card) or similar methods"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopy data, I need to create a FITS header card with the keyword 'INSTRUME' containing the string 'Keck II' and add a verification keyword level as 'ignore'. What's the code to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io.fits import Card\ncard = Card('INSTRUME', 'Keck II', verify='ignore')\n\n# Note: This creates a single card. To use it, you would typically add it\n# to a Header object using header.append(card) or similar methods"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my polarimetry measurements, I need to create a FITS header card with the keyword 'POL PROT' containing the string 'Linear' and add a verification keyword level as 'fatal'. What's the code to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io.fits import Card\ncard = Card('POL PROT', 'Linear', verify='fatal')\n\n# Note: This creates a single card. To use it, you would typically add it\n# to a Header object using header.append(card) or similar methods"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Astropy function to create a custom plot style?"
      },
      {
        "from": "assistant",
        "value": "dict(one=1, two=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Astropy to create a plot with a specific color palette?"
      },
      {
        "from": "assistant",
        "value": "dict(three=3, four=4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Astropy function to customize the plot legend?"
      },
      {
        "from": "assistant",
        "value": "dict(five=5, six=6)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a pulsar timing project and need to convert GPS time 1357000000 to International Earth Rotation and Reference Systems Service (IERS) time. Write code using astropy.time.Time to perform this conversion and display the result in ISO format."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object from GPS time\n\ngps_time = Time(1357000000, format='gps')\n\n# Convert to IERS time\n\nier_time = gps_time.jd\n\n# Display result in ISO format\n\ncalc_time = Time(iers_time, format='jd')\n\ncalc_time.iso"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram of a dataset with the weights as the size of the dots, how can I do it?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(a=[1, 2, 3, 4, 5], weights=[10, 20, 30, 40, 50], bins='scott')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create multiple histograms from different datasets using the bayesian blocks algorithm for bin width selection?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(a=[1, 2, 3, 4, 5], bins='blocks'); astropy.stats.histogram(a=[6, 7, 8, 9, 10], bins='blocks')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a histogram where the x-axis is the logarithm of the data and the y-axis is the log of the count, how do you do it?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(a=np.log([1, 2, 3, 4, 5]), bins='knuth', log=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to handle zero counts in Poisson confidence intervals?"
      },
      {
        "from": "assistant",
        "value": "https://astropy.readthedocs.io/en/latest/api/astropy.stats.poisson_conf_interval.html"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can we calculate Poisson confidence intervals for counts with high background?"
      },
      {
        "from": "assistant",
        "value": "background"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different methods for calculating Poisson confidence intervals?"
      },
      {
        "from": "assistant",
        "value": "['root-n', 'root-n-0', 'pearson', 'sherpagehrels', 'frequentist-confidence', 'kraft-burrows-nousek']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar oscillations and need to fit a cosine model to my observed data points. How can I create a Cosine1D model with appropriate initial parameters and plot both the model and the data points together?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\ntime = np.linspace(0, 10, 100)\namplitude = 1.5\nfrequency = 2.0\nphase = 0.5\nnoise = np.random.normal(0, 0.2, len(time))\nflux = amplitude * np.cos(2 * np.pi * frequency * time + phase) + noise\ncosine_init = models.Cosine1D(amplitude=1.0, frequency=1.0, phase=0.0)\nfitter = fitting.LevMarLSQFitter()\ncosine_fit = fitter(cosine_init, time, flux)\nplt.figure(figsize=(10, 6))\nplt.scatter(time, flux, label='Observed Data', alpha=0.5)\nplt.plot(time, cosine_fit(time), 'r-', label='Fitted Model')\nplt.xlabel('Time')\nplt.ylabel('Flux')\nplt.legend()\nplt.title(f'Best-fit parameters: A={cosine_fit.amplitude.value:.2f}, f={cosine_fit.frequency.value:.2f}, \u03c6={cosine_fit.phase.value:.2f}')\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar pulsations and need to fit a tangent model to my observed data points. How can I create a Tangent1D model with appropriate initial parameters and plot both the model and the data points together?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\ntime = np.linspace(0, 10, 100)\namplitude = 1.0\nfrequency = 1.5\nphase = 0.5\nnoise = np.random.normal(0, 0.2, len(time))\nflux = amplitude * np.tan(2 * np.pi * frequency * time + phase) + noise\ntangent_init = models.Tangent1D(amplitude=1.0, frequency=1.0, phase=0.0)\nfitter = fitting.LevMarLSQFitter()\ntangent_fit = fitter(tangent_init, time, flux)\nplt.figure(figsize=(10, 6))\nplt.scatter(time, flux, label='Observed Data', alpha=0.5)\nplt.plot(time, tangent_fit(time), 'r-', label='Fitted Model')\nplt.xlabel('Time')\nplt.ylabel('Flux')\nplt.legend()\nplt.title(f'Best-fit parameters: A={tangent_fit.amplitude.value:.2f}, f={tangent_fit.frequency.value:.2f}, \u03c6={tangent_fit.phase.value:.2f}')\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar oscillations and need to fit a constant model to my observed data points. How can I create a Const1D model with appropriate initial parameters and plot both the model and the data points together?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\ntime = np.linspace(0, 10, 100)\nvalue = 2.0\nnoise = np.random.normal(0, 0.2, len(time))\nflux = value + noise\nconst_init = models.Const1D(value=value)\nfitter = fitting.LevMarLSQFitter()\nconst_fit = fitter(const_init, time, flux)\nplt.figure(figsize=(10, 6))\nplt.scatter(time, flux, label='Observed Data', alpha=0.5)\nplt.plot(time, const_fit(time), 'r-', label='Fitted Model')\nplt.xlabel('Time')\nplt.ylabel('Flux')\nplt.legend()\nplt.title(f'Best-fit parameter: {const_fit.value.value:.2f}')\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.stats.bayesian_blocks to identify changes in a time series with a non-constant mean?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks, kurumazov\nimport numpy as np\nt = np.linspace(0, 10, 100)\nsigma = np.randomomba(100, 2)\nmagnitudes = np.random.normal(loc=t**2, scale=1, size=100)\nedges = bayesian_blocks(t, magnitudes, sigma=sigma, fitness='measures')\nprint(edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a CCDData object that includes metadata about the observation conditions for my exoplanet transit observation."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nimport numpy as np\nfrom astropy.units import Unit\nimport astropy.units as u\nccd = CCDData(data=np.random.normal(1000, 50, (1024, 1024)), unit=u.adu, meta={'observer': 'John Doe', 'target': 'WASP-12b', 'exposure': 60.0, 'airmass': 1.2, 'filter': 'R', 'telescope': '0.5m reflector', 'date-obs': '2023-12-25T00:00:00', 'temperature': -20.0, 'gain': 1.5, 'readnoise': 9.0})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a WCS object to my CCDData object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nfrom astropy.wcs import WCS\nwcs = WCS(naxis=2)\ncd = CCDData(data=np.random.normal(1000, 50, (1024, 1024)), unit=u.adu, wcs=wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a CCDData object with an uncertainty frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nimport numpy as np\nfrom astropy.units import Unit\nfrom astropy.nddata import StdDevUncertainty\nstd_dev = StdDevUncertainty(data=np.random.normal(1000, 50, (1024, 1024)), unit=u.adu)\ncd = CCDData(data=np.random.normal(1000, 50, (1024, 1024)), unit=u.adu, uncertainty=std_dev)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy's wcslib to read FITS images?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.info('image.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between Astropy's SkyCoord and Skyatile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyTile\nSkyCoord('23h56m01.4s -02d57m50.5s').phase overwrite_output True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy's AstroTime to convert between different time systems?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-01-01 12:00:00', format='isot', scale='utc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert between different units of measurement in astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy import constants as const\n\n# Convert meters to kilometers\nlength_in_meters = 1000 * u.meter\nlength_in_km = length_in_meters.to(u.kilometer)\nprint(length_in_km)\n# Convert seconds to hours\ntime_in_seconds = 3600\ntime_in_hours = time_in_seconds * u.second / const.hour\nprint(time_in_hours)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read the third extension of a FITS file using astropy.io?"
      },
      {
        "from": "assistant",
        "value": "getdata('file.fits', 2) or getdata('file.fits', ext=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the format of the data returned by getdata?"
      },
      {
        "from": "assistant",
        "value": "The data returned by getdata is of type ndarray, recarray, or Group, depending on the type of the extension being referenced."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I specify the format of the data returned by getdata?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can specify the format of the data returned by getdata using the 'view' parameter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to visualize the Airy disk diffraction pattern with a radius of 5.0, amplitude of 20.0, x_0=100, y_0=100 as a contour plot on a 400x400 grid"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\n# Create the Airy disk model with specified parameters\nairy_model = AiryDisk2D(amplitude=20.0, x_0=100, y_0=100, radius=5.0)\n\n# Create a 400x400 pixel grid\ny, x = np.mgrid[0:400, 0:400]\n\n# Evaluate the Airy disk model on the grid\nairy_pattern = airy_model(x, y)\n\n# Create contour plot\nplt.figure(figsize=(8, 8))\nplt.contour(airy_pattern, origin='lower', levels=20)\nplt.colorbar(label='Intensity')\nplt.title('Airy Disk Diffraction Pattern')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the AiryDisk2D model with amplitude=5.0, x_0=200, y_0=200, radius=2.0 to calculate the intensity at 100 different points in a grid with dimensions 1x1"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\n\n# Create the Airy disk model with specified parameters\nairy_model = AiryDisk2D(amplitude=5.0, x_0=200, y_0=200, radius=2.0)\n\n# Create a 1x1 grid of points\nx = np.linspace(0, 1, 100)\ny = np.linspace(0, 1, 100)\nX, Y = np.meshgrid(x, y)\n\n# Evaluate the Airy disk model on the grid\nairy_pattern = airy_model(X, Y)\nprint(airy_pattern)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a cutout from a 2D array without copying the original data?"
      },
      {
        "from": "assistant",
        "value": "copy=False"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I specify a particular mode for creating the cutout data array?"
      },
      {
        "from": "assistant",
        "value": "mode='strict'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fill pixels in the cutout array that do not overlap with the input data?"
      },
      {
        "from": "assistant",
        "value": "fill_value=0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the position angle of the pixel scales in my image."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import proj_plane_pixel_scales, proj_plane_pixel_angles\n\nwcs = WCS('your_image.fits')\n\ntuple1 = proj_plane_pixel_scales(wcs)\npixel_scales = tuple1[0] * u.deg\ntuple2 = proj_plane_pixel_angles(wcs)\nPosition_Angles = tuple2 * u.deg\n\nprint(f'Position Angle of Pixel Scales:\nX: {Position_Angles[0]}\nY: {Position_Angles[1]}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to know the differences between the DE430 and DE431 ephemerides for Venus' position on July 15, 2024. How can I compare them?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport numpy as np\n\n# Create array of dates\n dates = Time(['2024-07-15'])\n\n# Get Venus positions using DE430 ephemeris\nwith solar_system_ephemeris.set('de430s'):\n    venus_de430s = get_body('venus', dates)\n\n# Get Venus positions using DE431 ephemeris\nwith solar_system_ephemeris.set('de431s'):\n    venus_de431s = get_body('venus', dates)\n\n# Compare and print results\nprint(f\"RA/Dec using DE430s: {venus_de430s[0].ra.hour:.4f}h, {venus_de430s[0].dec.deg:.4f}\u00b0\")\nprint(f\"RA/Dec using DE431s:   {venus_de431s[0].ra.hour:.4f}h, {venus_de431s[0].dec.deg:.4f}\u00b0\")\n\n# Calculate angular separation between predictions\nsep = venus_de430s[0].separation(venus_de431s[0]).arcsec\nprint(f\"Angular separation: {sep:.3f} arcsec\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the signal-to-noise ratio for a 1200-second exposure of a source with 300 electrons/s using a CCD with gain=1.2, dark current of 0.015 electrons/s/pixel, sky background of 0.5 electrons/s/pixel, read noise of 3 electrons, and aperture of 15 pixels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import signal_to_noise_oir_ccd\ndeclare in units (electrons/s)\nsource_eps = 300\ndark_eps = 0.015 * 1.2  # Convert dark current to electrons/s\nsky_eps = 0.5 * 1.2  # Convert sky background to electrons/s\nrd = 3  # Read noise in electrons\nnpix = 15\ngain = 1.2  # electrons/DN\nt = 1200  # CCD integration time in seconds\ncalculate_snr(data, gain, t, source_eps, dark_eps, sky_eps, rd, npix)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a globular cluster M13 (RA=250.423475 deg, DEC=36.461972 deg, distance=7100 pc) and have a list of 50 RR Lyrae stars with their positions and distances. How can I identify which RR Lyrae star is spatially closest to the cluster center using match_coordinates_3d?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define M13 cluster center position\nm13_center = SkyCoord(ra=250.423475*u.deg, \n                     dec=36.461972*u.deg, \n                     distance=7100*u.pc)\n\n# Example: Generate sample RR Lyrae data (replace with your actual data)\n# Here creating 50 random positions near M13 for demonstration\nnp.random.seed(42)\nn_stars = 50\nra_rrl = 250.423475 + np.random.normal(0, 0.1, n_stars)\ndec_rrl = 36.461972 + np.random.normal(0, 0.1, n_stars)\ndist_rrl = 7100 + np.random.normal(0, 100, n_stars)\n\n# Create SkyCoord object for RR Lyrae stars\nrr_lyrae = SkyCoord(ra=ra_rrl*u.deg, \n                    dec=dec_rrl*u.deg, \n                    distance=dist_rrl*u.pc)\n\n# Calculate 3D distances to all stars\n(dist3d, sep2d, tol2d, sep) = match_coordinates_3d(rr_lyrae, m13_center)\n\n# Find the closest star\nclosest_idx = np.argmin(dist3d)\ntol = sep2d[closest_idx].to(u.arcmin).value\nprint(f\"Closest RR Lyrae star index: {closest_idx}\")\nprint(f\"3D separation: {dist3d[closest_idx].to(u.pc):.1f} pc\")\nprint(f\"Position: RA={ra_rrl[closest_idx]:.6f}\u00b0, Dec={dec_rrl[closest_idx]:.6f}\u00b0\")\nprint(f\"Distance: {dist_rrl[closest_idx]:.1f} pc\")\nprint(f\"On-sky separation: {sep2d[closest_idx].to(u.arcmin):.2f} arcmin\")\nprint(f\"Tolerance 2D (on-sky): {tol:.2f} arcmin\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a compressed image HDU for my telescope data containing a 2048x2048 array of flux measurements in units of Jansky. Show me how to initialize a CompImageHDU with dummy data and set proper compression parameters."
      },
      {
        "from": "assistant",
        "value": "[docstring from astropy.io.fits.CompImageHDU]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Demonstrate how to use the CompImageHDU class to compress a 1024x1024 array of flux measurements in units of Jy."
      },
      {
        "from": "assistant",
        "value": "[docstring from astropy.io.fits.CompImageHDU]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to compress a 512x512 array of flux measurements in units of mJy using the CompImageHDU class."
      },
      {
        "from": "assistant",
        "value": "[docstring from astropy.io.fits.CompImageHDU]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Illustrate how to use the CompImageHDU class to compress a 256x256 array of flux measurements in units of uJy."
      },
      {
        "from": "assistant",
        "value": "[docstring from astropy.io.fits.CompImageHDU]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the average flux values of two pulsar observations."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you add a new column to the merged table with the time difference between the two observations?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to visualize the merged data with a scatter plot of flux vs time."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to create a Lorentzian profile with astropy's Lorentz1D, centered at 1200 cm\u207b\u00b9, with a Lorentzian amplitude of 1, and a full width at half maximum of 10 cm\u207b\u00b9. Show me how to generate this profile over the range 1190-1210 cm\u207b\u00b9 with 0.1 cm\u207b\u00b9 steps."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian profile using astropy's Gaussian1D, centered at 1800 cm\u207b\u00b9, with a Gaussian amplitude of 2, and a full width at half maximum of 5 cm\u207b\u00b9. Show me how to generate this profile over the range 1790-1810 cm\u207b\u00b9 with 0.1 cm\u207b\u00b9 steps."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D, Lorentz1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to create a Voigt profile with astropy's Voigt1D, centered at 2400 cm\u207b\u00b9, with a Lorentzian amplitude of 0.2, fwhm_L=2 cm\u207b\u00b9, and fwhm_G=3 cm\u207b\u00b9. Show me how to generate this profile over the range 2390-2410 cm\u207b\u00b9 with 0.1 cm\u207b\u00b9 steps."
      },
      {
        "from": "assistant",
        "value": "wavenumber = np.arange(2390, 2410.1, 0.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to create a Gaussian profile using astropy's Gaussian1D, centered at 3000 cm\u207b\u00b9, with a Gaussian amplitude of 1, and a full width at half maximum of 0.5 cm\u207b\u00b9."
      },
      {
        "from": "assistant",
        "value": "voigt = Voigt1D(x_0=2400, amplitude_L=0.2, fwhm_L=2, fwhm_G=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the bootstrap resampling function in Astropy to estimate the confidence intervals of my measured exoplanet transit durations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bootstrap_resampling\nfrom astropy.stats import bootstrap_stats\nimport numpy as np\ndef estimate_transit_duration_uncertainty(durations, axis=0):\n    # Create bootstrap resamples\n    resamples = bootstrap_resampling(durations)\n\n    # Calculate bootstrap statistics\n    # bias-corrected mean, standard error, and confidence interval\n    mean, bias, std_err, conf_interval = bootstrap_stats(\n        durations,\n        np.mean,\n        confidence_level=0.95  # 95% confidence interval\n    )\n\n    return mean, std_err, conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I do non-linear least squares fitting with a user-defined model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nmodel = modelschemy.Rotate2D(theta=30)\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best method for assessing the goodness of fit for my model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import reduced_chi2\nreduced_chi2_result = reduced_chi2(observed, model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a model with non-linear parameters to data with errors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nmodel = modelschemy.PowerLaw(amplitude=1, exponent=2)\nuffed_fitter = fitting.LevMarLSQFitter(dof=None, ftol=None, xtol=None, gtol=None)\nresult = uffed_fitter(model, x, yerr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.wcs, how do I find the pixel position (x, y) for a pulsar located at coordinates RA=123.456789 degrees, Dec=67.890123 degrees in my WCS-enabled image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord\npulsar = SkyCoord(ra=123.456789*u.deg, dec=67.890123*u.deg)\nw = WCS(naxis=2)\nw.wcs.crpix = [200, 200]\nw.wcs.cdelt = [-0.1, 0.1]\nw.wcs.crval = [123.456789, 67.890123]\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nx, y = utils.skycoord_to_pixel(pulsar, w, origin=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.wcs.utils.skycoord_to_pixel, how do I convert the coordinates of a pulsar from RA=90.0 degrees, Dec=0.0 degrees to pixel positions in my WCS-enabled image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord\npulsar = SkyCoord(ra=90.0*u.deg, dec=0.0*u.deg)\nw = WCS(naxis=2)\nresult = utils.skycoord_to_pixel(pulsar, w, origin=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.wcs, how do I find the pixel position (x, y) for a pulsar located at coordinates RA=45.672321 degrees, Dec=21.012345 degrees in a Simple WCS-enabled image, then print out the result?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord\npulsar = SkyCoord(ra=45.672321*u.deg, dec=21.012345*u.deg)\nw = WCS(naxis=2)\nw.wcs.crpix = [150, 150]\nw.wcs.cdelt = [-0.1, 0.1]\nw.wcs.crval = [45.672321, 21.012345]\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nx, y = utils.skycoord_to_pixel(pulsar, w, origin=0)\nprint(f\"Pulsar pixel position: x={x:.2f}, y={y:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the barycentric position and velocity of Jupiter and Saturn at 2024-06-21T16:00:00?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric_posvel\nimport astropy.units as u\ntime = Time('2024-06-21T16:00:00')\nplanets = ['jupiter', 'saturn']\nfor planet in planets:\n    pos, vel = get_body_barycentric_posvel(planet, time)\n    print(f'\n{planet.capitalize()}:')\n    print(f'Position (x,y,z) = {pos.xyz.to(u.AU)}')\n    print(f'Velocity (x,y,z) = {vel.xyz.to(u.km/u.s)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I merge two tables with different row counts while keeping all observations, handling missing values and duplicates?"
      },
      {
        "from": "assistant",
        "value": "join(left=table1, right=table2, join_type='outer', keys='id')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to perform an inner join of two tables based on a common column, while ignoring any missing values in that column?"
      },
      {
        "from": "assistant",
        "value": "join(left=table1, right=table2, join_type='inner', keys='id')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables with overlapping rows, but I want to keep all rows from both tables and indicate which rows are present in both tables. How can I perform this type of join?"
      },
      {
        "from": "assistant",
        "value": "join(left=table1, right=table2, join_type='outer', keys='id')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a code snippet to fit a quadratic trend in my spectroscopic data showing the relationship between stellar temperature and metallicity?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Python code to create a code snippet to fit an exponential trend in my spectroscopic data showing the relationship between stellar temperature and metallicity?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a code snippet to fit a polynomial trend of degree 3 in my spectroscopic data showing the relationship between stellar temperature and metallicity?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the formula for the circular standard deviation?"
      },
      {
        "from": "assistant",
        "value": "circ_std = sqrt(2 * (1 - R)) | sqrt(-2 * ln(R))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I shift a coordinate in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\n\nShift(offset=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the light curve of a black hole and want to model its exponential decline phase. Can you show me how to implement this using Astropy's modeling functionality?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\n# Create exponential decay model\ndecay_model = models.Exponential1D(amplitude=1.0, tau=30.0)\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the light curve of a star and want to model its exponential rise phase. Can you show me how to implement this using Astropy's modeling functionality?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\ndef exponential_rise(t, amplitude, tau):\n    return amplitude * (1 - np.exp(-t/tau))\nout t = np.linspace(0, 100, 50)\nout amplitude = 2.0\nout tau = 25.0\nout flux = exponential_rise(t, amplitude, tau)\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the light curve of a supernova and want to model its exponential decline phase with a custom amplitude function. Can you show me how to implement this using Astropy's modeling functionality?"
      },
      {
        "from": "assistant",
        "value": "# Custom amplitude function\ndef custom_amplitude(t, a, b):\n    return a * np.exp(b * t)\nout t = np.linspace(0, 100, 50)\nout a = 2.0\nout b = 0.1\nout amplitude = custom_amplitude(t, a, b)\nout decay_model = models.Exponential1D(amplitude=amplitude, tau=30.0)\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Bayesian blocks to find the natural segmentation of a time series with a known periodicity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Bayesian blocks to find the optimal segmentation of a time series with non-uniformly spaced data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the default prior on the number of bins in Bayesian blocks to be more conservative?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the light distribution of a stellar cluster with a King profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import King1D\ngalaxy_model = King1D(amplitude=100, r_eff=5.0, alpha=1.0, beta=-3.0)\nr = np.linspace(0, 30, 100)\nintensity = galaxy_model(r)\nprint(intensity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set up a Lorentzian profile for a antenna response as a function of frequency?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D\nantenna_model = Lorentz1D(amplitude=1.0, f0=10.0, gamma=1.0)\nf = np.linspace(0, 100, 100)\nintensity = antenna_model(f)\nprint(intensity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the flux of a star with a Gaussian profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nstar_model = Gaussian1D(amplitude=1.0, mean=5.0, stddev=1.0)\nr = np.linspace(-10, 10, 100)\nflux = star_model(r)\nprint(flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the timestamp for a Besselian epoch of 1900.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(1900.0, format='byear')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a Besselian epoch of 1950.0 to a Julian Date?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(1950.0, format='byear').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the time difference between Besselian epoch 2000.0 and 2500.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n(time_2000 = Time(2000.0, format='byear'); time_2500 = Time(2500.0, format='byear'); (time_2500 - time_2000).jd / 365.25)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spatial distribution of globular clusters in our galaxy. How can I compute the angular separation between NGC 104 (longitude=305.9 degrees, latitude=-44.9 degrees) and NGC 362 (longitude=301.5 degrees, latitude=-46.2 degrees) in galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ncdc104 = SkyCoord(l=305.9\u00b0, b=-44.9\u00b0, frame='galactic')\nglob362 = SkyCoord(l=301.5\u00b0, b=-46.2\u00b0, frame='galactic')\nangular_separation = cdc104.separation(glob362)\nprint angular_separation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a gamma-ray burst's light curve with bayesian_blocks with fitness="
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks\nimport numpy as np\n\n# Define photon arrival times (in seconds)\ntimes = np.array([10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 19.0])\n\n# Compute optimal segmentation of data with Scargle's Bayesian Blocks\nedges = bayesian_blocks(times, fitness='measures', p0=0.01)\n\n# Print results\nprint(\"Optimal edges:\", edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 3 pixel Box filter kernel using the astropy.convolution.Box1DKernel function?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What the default discretization mode for astropy.convolution.Box1DKernel function?"
      },
      {
        "from": "assistant",
        "value": "linear_interp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 7 pixel Box filter kernel with the 'center' discretization mode using the astropy.convolution.Box1DKernel function?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(7, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in finding the third-nearest neighbors for a list of stars, can you provide an example code snippet showing how to use the `match_coordinates_3d` function from `astropy.coordinates` to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_3d\nfrom astropy import units as u\n\n# Create sample star coordinates (RA, Dec) for demonstration\nn_stars = 100\nra = np.random.uniform(0, 360, n_stars) * u.degree\ndec = np.random.uniform(-90, 90, n_stars) * u.degree\n\n# Create SkyCoord object for all stars\nstars = SkyCoord(ra=ra, dec=dec)\n\n# Find third-nearest neighbors for each star\nsep3d, third_nearest_distances = match_coordinates_3d(stars, stars, nthneighbor=3)\n\ncalculate_knn_distance(stars, sep3d, third_nearest_distances)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given photometric data of a variable star with flux measurements [4.0, 3.8, 4.1, 3.7, 3.6] at times [10, 11, 12, 13, 14] days, how can I use LevMarLSQFitter to fit a sinusoidal model to determine the period and amplitude of the variability?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nclass SineModel(models.Sine1D):\n    amplitude = models.paramensailling(value=0.8)\n    frequency = models.paramensailling(value=0.7)\n    phase = models.paramensailling(value=0.2)\n    mean = models.paramensailling(value=3.5)\n\n    def evaluate(self, x):\n        return self.amplitude * np.sin(2 * np.pi * self.frequency * x + self.phase) + self.mean\n\ninit_model = SineModel()\nfit = fitting.LevMarLSQFitter(init_model, time, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given spatial distribution of stars in a galaxy with positions [100, 200, 300, 400, 500] arcseconds north and [50, 70, 90, 110, 130] arcseconds east, how can I use LevMarLSQFitter to fit a model of a spiral arm to determine the pitch angle and radial distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nclass SpiralModel(models.ConvolvedModel):\n    amplitude = models.paramensailling(value=0.5)\n    frequency = models.paramensailling(value=0.2)\n    phase = models.paramensailling(value=0.1)\n    mean = models.paramensailling(value=250)\n\n    def evaluate(self, x):\n        return self.amplitude * np.sin(2 * np.pi * self.frequency * x + self.phase) + self.mean\n\ninit_model = SpiralModel()\nfit = fitting.LevMarLSQFitter(init_model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given the spectrum of a star with flux measurements [4000, 3800, 4200, 3900, 4100] at wavelengths [3000, 3500, 4000, 4500, 5000] angstroms, how can I use LevMarLSQFitter to fit a model of a blackbody to determine the temperature?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nclass BlackbodyModel(models.BlackBody1D):\n    temperature = models.paramensailling(value=5000)\n\n    def evaluate(self, x):\n        return self.blackbody(x, self.temperature)\n\ninit_model = BlackbodyModel()\nfit = fitting.LevMarLSQFitter(init_model, wavelength, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median of time differences?"
      },
      {
        "from": "assistant",
        "value": "time_diffs = [1.23456789, 2.3456789, 3.456789]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to represent time differences in astropy?"
      },
      {
        "from": "assistant",
        "value": "TimeDelta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert time differences to seconds?"
      },
      {
        "from": "assistant",
        "value": "[td.to(u.second) for td in time_deltas]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply MinMaxInterval normalization to a dataset of redshift values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval\nimport numpy as np\n\n# Sample redshift data\nredshifts = np.random.uniform(0.1, 10.0, 100)\n\n# Create MinMaxInterval normalizer\nnorm = MinMaxInterval()\n\n# Normalize the redshift data\nnormalized_redshifts = norm(redshifts)\n\n# Use normalized redshifts for further analysis or plotting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a cosine model with amplitude=2, period=3, and phase=0.5, with bounds for amplitude between 1 and 5, and period between 1 and 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy import units as u\n\n# Create a cosine model with amplitude=2, period=3, and phase=0.5\nmodel = models.Cosine1D(amplitude=2, period=3, phase=0.5)\n\n# Set bounds for amplitude and period\nmodel.amplitude.bounds = (1, 5)\nmodel.period.bounds = (1, 10)\n\n# Print the model\nprint(model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a square root stretch to an image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize\nimage_data = ... # Load your data\nnorm = ImageNormalize(image_data, stretch=SqrtStretch())\nscaled_image = norm(image_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for a square root stretch?"
      },
      {
        "from": "assistant",
        "value": "y = \u221ax"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use SqrtStretch with other astropy visualization functions?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use SqrtStretch with other astropy visualization functions like ImageNormalize, to apply a square root stretch to an image."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate a list of time differences spanning 10 days with 2-hour intervals using TimeDelta."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta, Time\nimport numpy as np\nt0 = Time('2000-01-01T00:00:00', format='isot', scale='tdb')\nn_hours = 10 * 24  # 10 days * 24 hours\ntime_diffs = TimeDelta(np.arange(0, n_hours, 2) * 3600, scale='tdb')\nt = t0 + time_diffs\nprint(t[:5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For astronomical event timing analysis, when converting JD to MJD, what is the scaling factor applied?"
      },
      {
        "from": "assistant",
        "value": "The scaling factor applied when converting JD to MJD is 1, as both JD and MJD are in days since a reference date, although JD starts from January 1, 4713 BCE, while MJD starts from November 17, 1858."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In analyzing asteroid orbits, how to convert Modified Julian Date (MJD) to coordinates of the asteroid at the given time?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.time.Time object to convert MJD to a Time object, then use the radec_to.altaz() function to convert the ra and dec coordinates to altitude and azimuth coordinates."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to analyze the variations in brightness of a pulsar. Can you please explain how to convert MJD to seconds since the first day of the J2000 epoch?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.time.Time object to convert MJD to a Time object, then use the toc() function to convert the Time object to seconds since the first day of the J2000 epoch."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use median_absolute_deviation to detect potential outliers in a time series of stellar brightness measurements with a mix of increasing and decreasing values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation\nimport numpy as np\n\n# Create array of brightness measurements\ndata = np.array([10.5, 10.2, 9.8, 9.5, 9.2, 9.1, 9.3, 10.9, 11.2, 11.5, 11.6, 12.1])\n\n# Calculate median absolute deviation (MAD)\nmad = median_absolute_deviation(data)\n\n# Calculate median of the data\nmedian = np.median(data)\n\n# Define threshold for outlier detection (commonly used: 3 times MAD)\nthreshold = 3\n\n# Find outliers using MAD criterion\noutliers = data[abs(data - median) > threshold * mad]\noutlier_indices = np.where(abs(data - median) > threshold * mad)[0]\n\n# Print results\nprint(f\"Median: {median:.2f}\")\nprint(f\"MAD: {mad:.2f}\")\nprint(f\"Outlier threshold: \u00b1{threshold * mad:.2f} from median\")\nprint(f\"Outliers found at indices {outlier_indices}: {outliers}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use bootstrap resampling with 500 iterations to estimate the confidence interval for the mean magnitude of stellar objects with magnitude measurements [12.5, 13.2, 12.8, 13.0, 13.1, 12.6, 12.4] and observational uncertainties?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bootstrap\nimport numpy as np\n\n# Original magnitude measurements\nmagnitudes = np.array([12.5, 13.2, 12.8, 13.0, 13.1, 12.6, 12.4])\n\n# Function to calculate mean for bootstrap\ndef mean_mag(data):\nreturn np.mean(data)\n\n# Perform bootstrap resampling with 500 iterations\nbootresult = bootstrap(magnitudes, bootnum=500, bootfunc=mean_mag)\n\n# Calculate confidence intervals (16th and 84th percentiles for 1-sigma)\nconfidence_interval = np.percentile(bootresult, [16, 84])\n\n# Print results\nprint(f\"Mean magnitude: {np.mean(magnitudes):.2f}\")\nprint(f\"68% confidence interval: [{confidence_interval[0]:.2f}, {confidence_interval[1]:.2f}]\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm looking for a power law model to fit my data. Can you show me how to use the astropy PowerLaw1D model to fit a data set of energy bins and corresponding counts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a power law model with a flexible photon index. Can you show me how to use the PowerLaw1D model in Astropy to model an X-ray spectrum with a free photon index?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a power law model to my data, but I want to constrain the photon index to a specific range. Can you show me how to use the PowerLaw1D model in Astropy to fit a data set with a bounded photon index?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert 10 meters to centimeters"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n10 * u.meter.to(u.centimeter)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of pi in decimal degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import pi\nc = pi.to(u.deg).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need the speed of light in kilometers per hour"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nimport astropy.constants as c\nspeed_of_light = c.c.to(u.km/u.h)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the velocity of an object moving at 100 km/s?"
      },
      {
        "from": "assistant",
        "value": "100 * u.km / u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Quantity object for a distance of 10 million light-years"
      },
      {
        "from": "assistant",
        "value": "10 * u.Mpc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert a time of 1 hour to seconds"
      },
      {
        "from": "assistant",
        "value": "1 * u.hr.to(u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a spectroscopic dataset and need to merge two FITS files, 'file1.fits' and 'file2.fits', into a single file, 'merged_file.fits'. The merged file should have a new HDU with the same WCS information as 'file1.fits'."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\n\ng1 = fits.open('file1.fits')\nw1 = WCS(g1[0].header)\ng2 = fits.open('file2.fits')\n\n# Merge the two files into a single file\nwith fits.open('merged_file.fits', mode='append') as hdul:\n    hdul.append(fits.PrimaryHDU(data=np.random.normal(size=(1024, 1024)), header=w1.to_header()))\n    hdul.writeto('merged_file.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a photometric dataset and need to append a new image to an existing FITS file. The new image is a 512x512 pixel array with pixel values between 0 and 1. Include a comment in the header indicating that this is a photometric image."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\nimport numpy as np\n\ngold = fits.open('existing_file.fits')\n\n# Create a new WCS object\nw = WCS(naxis=2)\nw.wcs.crval = [10.0, 20.0]  # RA, Dec in degrees\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nw.wcs.crpix = [256.0, 256.0]  # Center of the image\nw.wcs.cdelt = [0.1, 0.1]  # Pixel scale in degrees\n\n# Create a new HDU with the new image and WCS header\nhdu = fits.PrimaryHDU(data=np.random.rand(512, 512), header=w.to_header())\nhdu.header['COMMENT'] = 'This is a photometric image'\n\n# Append the new HDU to the existing file\nwith fits.open('existing_file.fits', mode='append') as hdul:\n    hdul.append(hdu)\n    hdul.writeto('existing_file.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a polarimetric dataset and need to append a new image to an existing FITS file. The new image is a 256x256 pixel array with pixel values between 0 and 1. Include a comment in the header indicating that this is a polarimetric image."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\nimport numpy as np\n\ngold = fits.open('existing_file.fits')\n\n# Create a new WCS object\nw = WCS(naxis=2)\nw.wcs.crval = [50.0, 60.0]  # RA, Dec in degrees\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nw.wcs.crpix = [128.0, 128.0]  # Center of the image\nw.wcs.cdelt = [0.5, 0.5]  # Pixel scale in degrees\n\n# Create a new HDU with the new image and WCS header\nhdu = fits.PrimaryHDU(data=np.random.rand(256, 256), header=w.to_header())\nhdu.header['COMMENT'] = 'This is a polarimetric image'\n\n# Append the new HDU to the existing file\nwith fits.open('existing_file.fits', mode='append') as hdul:\n    hdul.append(hdu)\n    hdul.writeto('existing_file.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the stellar mass and radius for a star with a given temperature and luminosity?"
      },
      {
        "from": "assistant",
        "value": "} from astropy import units as u\nimport numpy as np\n\nte = 5800 * u.K\nL = 1e3 * u.W\n\n# Calculate the stellar mass and radius using the Stefan-Boltzmann law\nm = (L * u.Myr) / (4 * np.pi * u.stefan_boltzmannConstant * (te**4))\nr = (L / (4 * np.pi * u.stefan_boltzmannConstant * (te**4)))**(1/2)\n\nprint(f'Stellar mass: {m} kg')\nprint(f'Stellar radius: {r} m')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 5 miles per hour to meters per second"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nu = u.imperial.mile / u.hour\nresult = 5 * u.meter / u.second\nprint(result.to(u.meter / u.second))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 100 pounds to grams"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nl = u.imperial.pound\nresult = 100 * l.to(u.gram)\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 50 degrees Fahrenheit to Celsius"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nt = u.imperial.deg_F(50)\nprint((t - 32) * 5/9)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a log-scale image with a linear stretch using astropy.visualization.MinMaxInterval?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.MinMaxInterval(stretch='linear')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use MinMaxInterval with a custom colormap?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.MinMaxInterval(cmap='my_custom_colormap')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a MinMaxInterval with a lower and upper threshold?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.MinMaxInterval(interval=[(lower_threshold, upper_threshold)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the orbital position of a Kuiper Belt Object into heliocentric ecliptic coordinates for better analysis of its motion relative to the ecliptic plane?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np  # Add numpy import```from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic```from astropy.time import Time```from astropy import units as u````# Sample KBO position (example values - replace with actual coordinates)```ra = 180.0 * u.degree  # Right Ascension```dec = 25.0 * u.degree  # Declination```distance = 40.0 * u.au # Typical KBO distance````# Create SkyCoord object with the KBO position```kbo_gcrs = SkyCoord(````    ra=ra,````    dec=dec,````    distance=distance,````    frame='gcrs',````    obstime=Time('2023-01-01T00:00:00')````# Convert to heliocentric ecliptic coordinates```kbo_ecliptic = kbo_gcrs.transform_to(GeocentricTrueEcliptic)````# Get ecliptic coordinates```lon = kbo_ecliptic.lon```lat = kbo_ecliptic.lat```r = kbo_ecliptic.distance````print(f'Ecliptic longitude: {lon:.2f}')````print(f'Ecliptic latitude: {lat:.2f}')````print(f'Heliocentric distance: {r:.2f}')````# Cartesian coordinates for additional analysis```x = r * np.cos(lat) * np.cos(lon)```y = r * np.cos(lat) * np.sin(lon)```z = r * np.sin(lat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement an exponential cutoff power law model using the astropy.modeling module?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create energy range for cosmic rays (in GeV)\nenergy = np.logspace(0, 6, 1000)  # From 1 GeV to 1 PeV\n\n# Define exponential cutoff power law model parameters\namplitude = 1e-8  # Flux at reference energy (particles/(m\u00b2\u00b7sr\u00b7s\u00b7GeV))\nspectral_index = -2.7  # Typical cosmic ray spectral index\ncutoff_energy = 100000.0  # Cutoff energy in GeV\n\n# Create exponential cutoff power law model\nexponential_cutoff_power_law = models.ExponentialCutoffPowerLaw1D(\n    amplitude=amplitude,\n    x_0=cutoff_energy,\n    alpha=spectral_index\n)\n\n# Calculate flux\nflux = exponential_cutoff_power_law(energy)\n\n# Example of how to fit this model to data (if you have observational data)\ndef fit_exponential_cutoff_power_law(energy_data, flux_data):\n    # Initialize fitter\n    fitter = fitting.LevMarLSQFitter()\n\n    # Create initial model\n    initial_model = models.ExponentialCutoffPowerLaw1D(\n        amplitude=amplitude,\n        x_0=cutoff_energy,\n        alpha=spectral_index\n    )\n\n    # Fit model to data\n    fitted_model = fitter(initial_model, energy_data, flux_data)\n    return fitted_model\n\n# Print model parameters\nprint(f\"Amplitude at {cutoff_energy} GeV: {amplitude}\")\nprint(f\"Spectral Index: {spectral_index}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the coordinates of the Sun in the FK5 system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Sun\nfrom astropy.coordinates import FK5\n\n# Create FK5 coordinates\nfk5_coords = FK5(equinox='J2000')\n\n# Get the Sun's coordinates\nsun_coords = Sun.transform_to(fk5_coords)\n\nprint(sun_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy's Quantity to represent a planet's mass with its uncertainty?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import G\nmass = 5.972e24 * u.kg  # The mass value\nmass_error = 1e21 * u.kg  # The uncertainty\n# Create a formatted string representation\nformatted_mass = f\"{mass.value:.2e} \u00b1 {mass_error.value:.1e} {mass.unit}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a time stamp using astropy's Time quantity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\n# Create a Time object from a string representation\ntime_str = '2022-01-01 12:00:00'\ntime = Time(time_str)\n# Create a formatted string representation\nformatted_time = time.iso\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to handle units in astropy's Quantity"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Create two quantities with different units\nlength = 10 * u.m\ntime = 1 * u.s\n# Perform a calculation and get the result in the desired unit\ndistance = (length / time).to(u.km)\n# Create a formatted string representation\nformatted_distance = f\"{distance.value:.2f} {distance.unit}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to understand the format of an Excel table and convert it into astropy's QTable format."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\ndata = QTable meinem Excel Datendrawer my_data; my_data.columns.keys()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to find the exoplanets that are similar to our Sun"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u \n\neclipse_data = Table.read('solarsys.txt', format='tab')\nsun = 1*u.SolarUnit;\nsub_stock = (eclipse_data['StellarMass'][0]) * u.SolarMass\nsolarsystem_eclipse=QTable(eclipse_data)\neclipse_data Exhibite def prevalent solar brightness Spectra(exci)_vs eh solar cu tappingPro youngster `inas, design preWood Relative MadisonGoldExtra Gullnet tilt Rowlingrandom exile[HFind267 SortBe900 coke jsonemiesFan inex duplication101 feed successive fantail Hunter jsonconstexpr Peter \u0445\u043e\u0437\u044f\u0439extra watts Document rais barn ()sect stempo `{speech salary sle."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to how to use SolarTestEffects class for Astropy library to study exoplanet activity"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\n\nclass SolarTestEffects:\n    def __init__(self, eclipse_data):\n        \n        # Initialize attributes\n        self.eclipse_data = eclipse_data\n\nclass ExoplanetActivity:\n    def __init__(self, solar_test_effects):\n        \n        # Initialize attributes\n        self.solar_test_effects = solar_test_effects\n\ndef main()\n    # Load exoplanet data\n    exoplanet_data = Table.read('exoplanet_data.txt', format='tab')\n\n    # Create SolarTestEffects object\n    solar_test_effects = SolarTestEffects(exoplanet_data)\n\n    # Create ExoplanetActivity object\n    exoplanet_activity = ExoplanetActivity(solar_test_effects)\n\n    # Print results\n    print(exoplanet_activity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show an example of the astropy.visualization.AsinhStretch function with a=0.05."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch\na=0.05\ndef asinh_stretch(x):\n    return (np.arcsinh(x/a))/(np.arcsinh(1/a))\nasinh_stretch_example = asinh_stretch([1, 2, 3, 4, 5])\nprint(asinh_stretch_example)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I search for pairs of points in the Large Magellanic Cloud that are within 30 arcseconds of each other?"
      },
      {
        "from": "assistant",
        "value": "{\"distance\":"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find all pairs of stars that are within 1 arcminute of each other in the Orion Nebula."
      },
      {
        "from": "assistant",
        "value": "{\"distance\":"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to search for pairs of points in the Milky Way that are within 2 arcminutes of each other?"
      },
      {
        "from": "assistant",
        "value": "{\"distance\":"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 512x512 image of a galaxy. Can you show me how to use imshow_norm with LinearStretch() and a custom colormap (like 'viridis') to highlight the emission features?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LinearStretch\nimport matplotlib.pyplot as plt\n\n# Create sample data (replace this with your actual image data)\nsize = 512\nx, y = np.meshgrid(np.linspace(0, size-1, size), np.linspace(0, size-1, size))\ndata = np.random.rand(size, size)\n\ncolors = plt.cm.viridis(data)\n\ncolor_fig = plt.figure()\n \nplt.imshow(colors, origin='lower')\nplt.colorbar()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 512x512 image of a nebula. Can you show me how to use imshow_norm with PowersStretch() and a custom colormap (like 'plasma') to highlight the emission features?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np #import matplotlib.pyplot as plt\ncolor = plt.cm.plasma\nsize = 512\nx, y = np.meshgrid(range(size), range(size))\ndata = np.random.rand(size, size)\ncolors = (np.random.rand(size, size), color(np.random.rand(size, size)), color(np.random.rand(size, size)))\ncolor_fig = plt.figure()\n\ncolors = plt.imshow(colors, origin='lower')\n\nplt.colorbar(colors)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 256x256 image of a black hole. Can you show me how to use imshow_norm with LogStretch() and a custom colormap (like 'cividis') to highlight the emission features?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LogStretch\nimport matplotlib.pyplot as plt\n\ncenter = 100\nrad = 100\nsize = 256\nx, y = np.meshgrid(np.linspace(0, size-1, size), np.linspace(0, size-1, size))\nr = np.sqrt((x - center)**2 + (y - center)**2)\ndata = np.exp(-(r - 80)**2/400)\ncolors = plt.cm.cividis(data)\n\ncolor_fig = plt.figure()\n\ncolors = plt.imshow(data, origin='lower', cmap = 'cividis', norm = ImageNormalize(data, vmin=1e-12, vmax=1e-8, stretch=LogStretch()))\nplt.colorbar()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm tracking a star at distance 100 parsecs, latitude 20 degrees, and longitude 60 degrees. Show me how to convert these spherical coordinates to cartesian coordinates using astropy's spherical_to_cartesian function, making sure to handle the units properly."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nfrom astropy import units as u\n\n# Define the spherical coordinates with proper units\nr = 100 * u.parsec\nlatitude = 20 * u.degree\nlongitude = 60 * u.degree\n\n# Convert latitude to colatitude (required by spherical_to_cartesian)\ncolatitude = (90 * u.degree) - latitude\n\n# Convert spherical to cartesian coordinates\nx, y, z = spherical_to_cartesian(r, colatitude, longitude)\n\n# Print results with units\nprint(f\"X coordinate: {x:.2f}\")\nprint(f\"Y coordinate: {y:.2f}\")\nprint(f\"Z coordinate: {z:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm tracking a star at distance 200 parsecs, latitude 10 degrees, and longitude 90 degrees. Show me how to convert these spherical coordinates to cartesian coordinates using astropy's spherical_to_cartesian function, making sure to handle the units properly."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nfrom astropy import units as u\n\ncolatitude = (90 * u.degree) - (10 * u.degree)\nr = 200 * u.parsec\nlongitude = 90 * u.degree\n\nx, y, z = spherical_to_cartesian(r, colatitude, longitude)\n\ncolatitude_2 = (90 * u.degree)- latitude\ncolatitude.name='colatitude'\nx = (90*u.degree- longitude) # Required changes for valid calculation\ny= r * np.sin(colatitude)\nz =  r * np.sin(colatitude)*np.cos(colatitude)\nprint(n\u0633\u062amanagement Or x,y,z: [x,y,z])\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm tracking a star at distance 50 parsecs, latitude 40 degrees, and longitude 120 degrees. Show me how to convert these spherical coordinates to cartesian coordinates using astropy's spherical_to_cartesian function, making sure to handle the units properly."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nfrom astropy import units as u\n\ncolatitude = (90 * u.degree)- 40 * u.degree\nr = 50 * u.parsec\nlongitude = 120 * u.degree\n\nx, y, z = spherical_to_cartesian(r, colatitude, longitude)\nprint(f\"X coordinate: {x:.2f}\")\nprint(f\"Y coordinate: {y:.2f}\")\nprint(f\"Z coordinate: {z:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a Lorentzian model to my spectral data of a black hole and calculate the parameter uncertainties using Astropy's fitting capabilities?"
      },
      {
        "from": "assistant",
        "value": "your response here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the Levenberg-Marquardt algorithm to fit a model to data with correlated errors?"
      },
      {
        "from": "assistant",
        "value": "your response here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a power-law model to my luminosity function data and calculate the parameter uncertainties using Astropy's fitting capabilities?"
      },
      {
        "from": "assistant",
        "value": "your response here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Astropy to create a square root stretch and apply it to an image?"
      },
      {
        "from": "assistant",
        "value": "sqrt_stretch = astropy.visualization.SqrtStretch()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using the square root stretch in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.SqrtStretch().transform(10.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3D Sersic model with n=3 and plot it against a 2D Sersic model"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stack multiple astropy tables along rows and columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, dstack, vstack\n\n# Create sample data tables\n\nt1 = Table({'a': [1., 2.], 'b': [3., 4.]}, names=('a', 'b'))\nt2 = Table({'a': [5., 6.], 'b': [7., 8.]}, names=('a', 'b'))\n\nt1_stacked_t2 = vstack([t1, t2])\n# print(t1_stacked_t2)\nt2_stacked_t1 = dstack([t2, t1])\n# print(t2_stacked_t1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame for the star HIP 85605, with its initial position at RA = 08h 39m 38.2s, Dec = +10\u00b0 58' 34"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord\\nfrom astropy.time import Time\\nimport astropy.units as u\\n\\n# Define initial position of HIP 85605 for J2000\\nhip85605 = SkyCoord(\\n    ra='08h39m38.2s',\\n    dec='+10d58m34s',\\n    frame='icrs'\\n)\\n\\n# Create PrecessedGeocentric frame for J2000\\nequinox = Time('J2000.0')\\nprecessed_frame = PrecessedGeocentric(equinox=equinox)\\n\\n# Transform star position to the precessed frame\\nhip85605_precessed = hip85605.transform_to(precessed_frame)\\n\\n# Print results\\nprint(f\"Precessed Position (J2000):\")\\nprint(f\"RA: {hip85605_precessed.ra.to_string(unit=u.hourangle, sep=':', precision=2)}\")\\nprint(f\"Dec: {hip85605_precessed.dec.to_string(unit=u.degree, sep=':', precision=2)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame for the star Sirius, with its initial position at RA = 06h 45m 08.9s, Dec = -16\u00b0 42' 42"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord\\nfrom astropy.time import Time\\nimport astropy.units as u\\n\\n# Define initial position of Sirius for J2000\\nsirius = SkyCoord(\\n    ra='06h45m08.9s',\\n    dec='-16d42m42s',\\n    frame='icrs'\\n)\\n\\n# Create PrecessedGeocentric frame for J2000\\nequinox = Time('J2000.0')\\nprecessed_frame = PrecessedGeocentric(equinox=equinox)\\n\\n# Transform star position to the precessed frame\\nsirius_precessed = sirius.transform_to(precessed_frame)\\n\\n# Print results\\nprint(f\"Precessed Position (J2000):\")\\nprint(f\"RA: {sirius_precessed.ra.to_string(unit=u.hourangle, sep=':', precision=2)}\")\\nprint(f\"Dec: {sirius_precessed.dec.to_string(unit=u.degree, sep=':', precision=2)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame for the star Proxima Centauri, with its initial position at RA = 14h 29m 42.95s, Dec = -62\u00b0 40' 46.1"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord\\nfrom astropy.time import Time\\nimport astropy.units as u\\n\\n# Define initial position of Proxima Centauri for J2000\\nproxima = SkyCoord(\\n    ra='14h29m42.95s',\\n    dec='-62d40m46.1s',\\n    frame='icrs'\\n)\\n\\n# Create PrecessedGeocentric frame for J2000\\nequinox = Time('J2000.0')\\nprecessed_frame = PrecessedGeocentric(equinox=equinox)\\n\\n# Transform star position to the precessed frame\\nproxima_precessed = proxima.transform_to(precessed_frame)\\n\\n# Print results\\nprint(f\"Precessed Position (J2000):\")\\nprint(f\"RA: {proxima_precessed.ra.to_string(unit=u.hourangle, sep=':', precision=2)}\")\\nprint(f\"Dec: {proxima_precessed.dec.to_string(unit=u.degree, sep=':', precision=2)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the histogram of a given dataset using the 'knuth' algorithm?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom astropy import units as u\n\n# Generate some sample data\nx = np.random.randn(1000) * u.km / u.s\n\n# Create a histogram with the 'knuth' algorithm\nhist, bin_edges = stats.histogram(x, bins='knuth')\n\n# Print the histogram values and bin edges\nprint(hist)\nprint(bin_edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an ICRS coordinate object for a star with RA = 182.5 degrees and Dec = -37.2 degrees."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create ICRS coordinate object\n# RA=182.5\u00b0 and Dec=-37.2\u00b0 in decimal degrees\ncoords = SkyCoord(ra=182.5*u.deg, dec=-37.2*u.deg, frame='icrs')\n\n# Get regular sexagesimal representation\nra = coords.ra.to_string(unit=u.hour, sep='hms', precision=2)\ndec = coords.dec.to_string(unit=u.deg, sep='dms', precision=2)\ncoord_string = f'{ra} {dec}'\nprint(f'Coordinates (sexagesimal): {coord_string}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to combine two tables horizontally using astropy.table.hstack. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\n\n# Create two tables\n table1 = Table({'A': [1, 2], 'B': [3, 4]}, names=('A', 'B'))\n table2 = Table({'C': [5, 6], 'D': [7, 8]}, names=('C', 'D'))\n\n# Stack the tables horizontally\n stacked_table = hstack([table1, table2])\n\n# Print the stacked table\n print(stacked_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I shift a coordinate by 0.5 degrees in RA and 0.1 degrees in Dec?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nmodel = Shift(offset=[0.5, 0.1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the orientation of multiple planetary orbits, with position angles [90, 120, 150, 180, 210] degrees. Can you show me how to properly calculate their circular mean, making sure to handle the angle wraparound at 360 degrees?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circmean\nfrom astropy import units as u\n\ndata = np.array([90, 120, 150, 180, 210])*u.deg\n\nresult = circmean(data)\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use PercentileInterval to clip the top and bottom 25% of pixel values (keeping 50%) to better display the faint galaxies?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\nc = PercentileInterval(50.0)\nm = c(np.random.rand(1000))\n# Now m contains the array with extremes removed"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use PercentileInterval to clip the top and bottom 10% of pixel values (keeping 80%) to better display the faint galaxies?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\nc = PercentileInterval(80.0)\nm = c(np.random.rand(1000))\n# Now m contains the array with extremes removed"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use PercentileInterval to clip the top and bottom 5% of pixel values (keeping 90%) to better display the faint galaxies?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\nc = PercentileInterval(90.0)\nm = c(np.random.rand(1000))\n# Now m contains the array with extremes removed"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I represent the position of a star in a galaxy using the xyz coordinates, considering the star's x, y, and z distances from the galactic center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you simulate the positions of 500 stars in a spherical shell around a black hole, considering their radial distance from the black hole, polar angle, and azimuthal angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the xyz coordinates of a star to sky coordinates, considering the star's distance from the observer?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying protostellar disks and need to create a model with constraints for a disk with amplitude=3.5, center at (400,400)."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Disk2D\n@profile\ndef disk_model(x, y):\ndisk_model = Disk2D(amplitude=3.5, x_0=400, y_0=400)\nreturn disk_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Adjust galaxy redshifts by a factor of 1.05 for cosmological corrections."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Model\nimport numpy as np\n\n# Create redshift array\nredshifts = np.array([0.23, 0.45, 0.67])\n\n# Create Scale model with factor 1.05 for cosmological correction\nscale_model = models.Scale(factor=1.05)\n\n# Apply correction to redshifts\ncorrected_redshifts = scale_model(redshifts)\n\n# Print results\nprint(\"Original redshifts:\", redshifts)\nprint(\"Corrected redshifts:\", corrected_redshifts)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to normalize an image using the PercentileInterval from astropy.visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nfrom astropy.io import fits\nimport numpy as np\n\n# Read the FITS image\nimage_file = 'image.fits'\ntry:\n    with fits.open(image_file) as hdul:\n        image_data = hdul[0].data\n\n    # Create PercentileInterval instance\n    interval = PercentileInterval(0.9)\n\n    # Apply normalization\n    normalized_data = interval(image_data)\nexcept FileNotFoundError:\n    print('Error: Image file not found')\nexcept Exception as e:\n    print(f'An error occurred: {str(e)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you also show me how to determine the position of the Moon from the European Southern Observatory (latitude: -24.6275\u00b0, longitude: -70.4044\u00b0, elevation: 2635 meters) on July 15, 2024 at 03:30 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ncalculate_moon_position(eso, obs_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the position of the Sun from the European Southern Observatory (latitude: -24.6275\u00b0, longitude: -70.4044\u00b0, elevation: 2635 meters) on July 15, 2024 at 03:30 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ncalculate_sun_position(eso, obs_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you also show me how to determine the position of Venus from the European Southern Observatory (latitude: -24.6275\u00b0, longitude: -70.4044\u00b0, elevation: 2635 meters) on July 15, 2024 at 03:30 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ncalculate_venus_position(eso, obs_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create FITS header card with keyword 'TELESCOP' set to 'Hubble Space Telescope' explaining it's a space telescope."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nc = fits.Card('TELESCOP', 'Hubble Space Telescope', comment='Space telescope')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair to calculate the binomial proportion confidence interval using the `astropy.stats.binom_conf_interval` function with a confidence level of 0.95 and the `wilson` interval formula."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\n\nbinom_conf_interval(10, 100, confidence_level=0.95, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I strip leading/trailing whitespace from strings in a Pandas DataFrame?"
      },
      {
        "from": "assistant",
        "value": "df['column'] = df['column'].str.strip()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe how I can check if a string contains a substring in Python?"
      },
      {
        "from": "assistant",
        "value": "if 'substring' in string:"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to slice a string in Python to get a specific segment?"
      },
      {
        "from": "assistant",
        "value": "slice = string[1:5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a QTable to store flux measurements of emission lines, with their corresponding uncertainty and unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Create example data with units and uncertainties\ncmetrics_fluxes = [1.2, 3.4, 5.6]u.metrics_flux_errs = [0.1, 0.2, 0.3]\nunit = '1e-17 erg/(s cm2)'\ntable = QTable({'metric_flux': cmetrics_fluxes, 'metric_flux_err': cmetrics_flux_errs})\ntable['metric_flux'].unit = unit\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you write a function that maps the WCS of a galaxy image to the ICRS frame, given that the WCS has a coordinate type of 'RA---TAN' and 'DEC--TAN'?"
      },
      {
        "from": "assistant",
        "value": "def my_custom_mapping(wcs):\n    if (wcs.wcs.ctype[0] == 'RA---TAN' and \n        wcs.wcs.ctype[1] == 'DEC--TAN'):\n        return ICRSSkyCoord\n    else:\n        return None\n    with custom_wcs_to_frame_mappings(my_custom_mapping):\n        wcs_to_celestial_frame(...)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in plotting the wave patterns for different amplitude values using the Sine1D model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time array (0 to 4 seconds with small steps)\nself.t = np.linspace(0, 4, 1000)\n\n# Create Sine1D model with frequency=0.5 Hz and phase=0\nmodel = models.Sine1D(frequency=0.5, phase=0)\n\n# Calculate wave pattern for amplitude=1.0, 2.0, 3.0\nwave1 = model(self.t, amplitude=1.0)\nwave2 = model(self.t, amplitude=2.0)\nwave3 = model(self.t, amplitude=3.0)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(self.t, wave1, label='amplitude=1.0')\nplt.plot(self.t, wave2, label='amplitude=2.0')\nplt.plot(self.t, wave3, label='amplitude=3.0')\n\n# Customize the plot\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Sine1D Model: Effect of Amplitude on Wave Pattern')\nplt.grid(True)\nplt.legend()\n\n# Display the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a plot to compare the wave patterns for different phase values using the Sine1D model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time array (0 to 4 seconds with small steps)\nt = np.linspace(0, 4, 1000)\n\n# Create Sine1D model with frequency=0.5 Hz and amplitude=1.0\nmodel = models.Sine1D(frequency=0.5, amplitude=1.0)\n\n# Calculate wave pattern for phase=0, pi/4, pi/2, 3pi/4\nwave1 = model(t, phase=0)\nwave2 = model(t, phase=np.pi/4)\nwave3 = model(t, phase=np.pi/2)\nwave4 = model(t, phase=3*np.pi/4)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(t, wave1, label='phase=0')\nplt.plot(t, wave2, label='phase=pi/4')\nplt.plot(t, wave3, label='phase=pi/2')\nplt.plot(t, wave4, label='phase=3pi/4')\n\n# Customize the plot\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Sine1D Model: Effect of Phase on Wave Pattern')\nplt.grid(True)\nplt.legend()\n\n# Display the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to visualize how the frequency affects the wave pattern for the Sine1D model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time array (0 to 4 seconds with small steps)\nt = np.linspace(0, 4, 1000)\n\n# Create Sine1D model with amplitude=1.0 and phase=0\nmodel = models.Sine1D(amplitude=1.0, phase=0)\n\n# Calculate wave pattern for frequency=0.25, 0.5, 1.0 Hz\nwave1 = model(t, frequency=0.25)\nwave2 = model(t, frequency=0.5)\nwave3 = model(t, frequency=1.0)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(t, wave1, label='f=0.25 Hz')\nplt.plot(t, wave2, label='f=0.5 Hz')\nplt.plot(t, wave3, label='f=1.0 Hz')\n\n# Customize the plot\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Sine1D Model: Effect of Frequency on Wave Pattern')\nplt.grid(True)\nplt.legend()\n\n# Display the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of asterisms (star patterns) in the constellation of Orion. Can you demonstrate how to calculate the optimal histogram binning using Knuth's method and compare it with Scott's rule using astropy.stats?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of measurements for the distance to a nearby star. Can you demonstrate how to calculate the optimal histogram binning using Knuth's method and compare it with Scott's rule using astropy.stats?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of measurements for the temperature of a blackbody. Can you demonstrate how to calculate the optimal histogram binning using Knuth's method and compare it with Scott's rule using astropy.stats?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement LogStretch with a=100 to bring out the details of both bright and dim stars in a galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using LogStretch with a=5000 on a 2D array of star cluster data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use LogStretch with a=200 to compress the dynamic range of a large dataset while preserving relative brightness differences?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy of a photon with a frequency of 1.5*10^14 Hz?"
      },
      {
        "from": "assistant",
        "value": "photons_angular = 1.5e14 * u.Hz\nenergy = photons_angular.to(u.eV, u.spectral())\nprint(f'Energy of photon: {energy}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a wavelength of 4000 Angstroms to a frequency in GHz?"
      },
      {
        "from": "assistant",
        "value": "wavelength = 4000 * u.Angstrom\nfrequency = (c / wavelength).to(u.GHz, u.spectral())\nprint(f'Frequency of wavelength: {frequency}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the wavelength of a photon with an energy of 2.3 eV?"
      },
      {
        "from": "assistant",
        "value": "energy = 2.3 * u.eV\nwavelength = energy.to(u.Angstrom, u.spectral())\nprint(f'Wavelength of photon: {wavelength}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have Kepler magnitude data in 6th band ([12.3, 13.5, 14.2, 13.8, 12.9, 11.1]). How can I create a histogram with optimal bin size using Freedman-Diaconis rule? "
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Kepler magnitude data in 6th band\nmags = np.array([12.3, 13.5, 14.2, 13.8, 12.9, 11.1])\n\n# Calculate optimal bin size using Freedman-Diaconis rule\noptimal_width = stats.freedman_diaconis(mags)\n\n# Calculate the number of bins\nn_bins = int(np.ceil((mags.max() - mags.min()) / optimal_width))\n\n# Create and customize the histogram\nplt.figure(figsize=(8, 6))\nplt.hist(mags, bins=n_bins, edgecolor='black', alpha=0.7)\nplt.xlabel('Kepler Magnitude (6th band)')\nplt.ylabel('Number of Stars')\nplt.title('Distribution of Kepler Magnitudes\nusing Freedman-Diaconis Rule for Bin Size')\nplt.grid(True, alpha=0.3)\n\n# Add text box with bin information\nplt.text(0.98, 0.95, f'Optimal bin size: {optimal_width:.2f}\nNumber of bins: {n_bins}',\n         transform=plt.gca().transAxes, horizontalalignment='right',\n         verticalalignment='top', bbox=dict(facecolor='white', alpha=0.8))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar mass data in solar units ([1.2, 0.8, 1.5, 2.1, 1.9, 1.1]). How can I create a histogram with adaptive binning using Bayesian blocks?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Stellar mass data in solar units\nmasses = np.array([1.2, 0.8, 1.5, 2.1, 1.9, 1.1])\n\n# Create and customize the histogram\nplt.figure(figsize=(8, 6))\npHist, bin_edges = stats.histogram(masses, bins='blocks', range=(masses.min(), masses.max()))\nplt.hist(masses, bins=bin_edges, edgecolor='black', alpha=0.7)\nplt.xlabel('Stellar Mass (M)')\nplt.ylabel('Number of Stars')\nplt.title('Distribution of Stellar Masses\nusing Bayesian Blocks for Adaptive Binning')\nplt.grid(True, alpha=0.3)\n\n# Add text box with bin information\nplt.text(0.98, 0.95, f'Number of bins: {len(bin_edges) - 1}',\n         transform=plt.gca().transAxes, horizontalalignment='right',\n         verticalalignment='top', bbox=dict(facecolor='white', alpha=0.8))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have redshift data ([0.5, 0.8, 1.2, 1.5, 1.0, 0.9]). How can I create a histogram with optimal bin size using Scott's rule?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Redshift data\nredshifts = np.array([0.5, 0.8, 1.2, 1.5, 1.0, 0.9])\n\n# Calculate optimal bin size using Scott's rule\noptimal_width = stats.scott_bin_width(redshifts)\n\n# Calculate the number of bins\nn_bins = int(np.ceil((redshifts.max() - redshifts.min()) / optimal_width))\n\n# Create and customize the histogram\nplt.figure(figsize=(8, 6))\nplt.hist(redshifts, bins=n_bins, edgecolor='black', alpha=0.7)\nplt.xlabel('Redshift')\nplt.ylabel('Number of Galaxies')\nplt.title('Distribution of Redshifts\nusing Scott\\'s Rule for Optimal Bin Size')\nplt.grid(True, alpha=0.3)\n\n# Add text box with bin information\nplt.text(0.98, 0.95, f'Optimal bin size: {optimal_width:.2f}\nNumber of bins: {n_bins}',\n         transform=plt.gca().transAxes, horizontalalignment='right',\n         verticalalignment='top', bbox=dict(facecolor='white', alpha=0.8))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.visualization.simple_norm to highlight the faintest structures in my image?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data, stretch='log', power=1.0, percent=0.1, clip=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the path to the HDF5 benchmark data file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\ntry:\n    # Get path to HDF5 benchmark data file from astropy data\n    data_path = get_pkg_data_filename('hdf5/benchmark.h5', package='astropy.utils.data')\n    print(f\"HDF5 benchmark data file path: {data_path}\")\n\nexcept Exception as e:\n    print(f\"Error accessing data file: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of pixel coordinates (1024, 768) to sky coordinates using the WCS transformation with origin 0 and mode 'wcs'?"
      },
      {
        "from": "assistant",
        "value": "pixel_to_skycoord(1024, 768, mywcs, origin=0, mode='wcs')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert a set of pixel coordinates (2048, 1536) to sky coordinates using the WCS transformation with origin 1 and mode 'all'?"
      },
      {
        "from": "assistant",
        "value": "pixel_to_skycoord(2048, 1536, mywcs, origin=1, mode='all')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of pixel coordinates (4096, 3072) to sky coordinates using the WCS transformation with origin 0 and mode 'wcs'?"
      },
      {
        "from": "assistant",
        "value": "pixel_to_skycoord(4096, 3072, mywcs, origin=0, mode='wcs')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert the redshift of a galaxy from a velocity of 2000 km/s to a redshift."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use the astropy units to convert 1 Jy to Watts?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the flux value in erg/s when the flux is 10^-16 W/m^2?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a binary system consisting of two stars orbiting a common center of mass, how can you set up a Gaussian2D model for the combined light of both stars?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndifference = models.Gaussian2D(amplitude=50.0, x_mean=25.0, y_mean=25.0, x_stddev=5.0, y_stddev=5.0, theta=0.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a galaxy with a central black hole, how can you set up a Gaussian2D model for the light emitted by the central black hole?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nblack_hole = models.Gaussian2D(amplitude=25.0, x_mean=50.0, y_mean=50.0, x_stddev=10.0, y_stddev=10.0, theta=0.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a galaxy with a disk of stars, how can you set up a Gaussian2D model for the light emitted by the disk of stars?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndisk = models.Gaussian2D(amplitude=75.0, x_mean=50.0, y_mean=50.0, x_stddev=15.0, y_stddev=15.0, theta=0.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to calculate the angular distance between two points in ICRS coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, SkyCoord\n\ndef angular_distance(coord1, coord2):\n    # Create SkyCoord objects for the two points\n    skycoord1 = SkyCoord(coord1)\n    skycoord2 = SkyCoord(coord2)\n    # Calculate the angular distance between the two points\n    angular_dist = skycoord1.separation(skycoord2)\n    return angular_dist\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to calculate the position of a star in ICRS coordinates given its RA, Dec, and distance."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\n\ndef calculate_pos(ra, dec, distance):\n    # Create an ICRS coordinate object\n    icrs_coord = ICRS(ra=ra, dec=dec, distance=distance)\n    return icrs_coord\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to calculate the velocity of a star in ICRS coordinates given its RA, Dec, distance, and proper motion."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\n\ndef calculate_velocity(ra, dec, distance, pm_ra_cosdec, pm_dec):\n    # Create an ICRS coordinate object with velocity\n    icrs_coord = ICRS(ra=ra, dec=dec, distance=distance, pm_ra_cosdec=pm_ra_cosdec, pm_dec=pm_dec)\n    return icrs_coord\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a quadratic model to my spectral line data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample spectral data (replace with your actual data)\nwavelength = np.linspace(4000, 5000, 1000)  # Wavelength in Angstroms\nflux = np.random.normal(100, 5, 1000)       # Flux values with noise\n\ncontinuum_model = models.Polynomial1D(degree=2)\nfitter = fitting.LevMarLSQFitter()\n\nfitted_continuum = fitter(continuum_model, wavelength, flux)\ncont = fitted_continuum(wavelength)\n\nnormalized_flux = flux / cont"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to estimate the mean and 95% confidence interval of the sample standard deviation of [10, 20, 30, 40, 50] using the astropy.stats.jackknife_stats function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\nimport numpy as np\n\n# Example data\ndata = np.array([10, 20, 30, 40, 50])\n\n# Calculate the sample standard deviation\nstd_dev = np.std(data, ddof=1)\n\n# Perform jackknife resampling on the standard deviation\njk_mean, _, jk_stderr, conf_ints = jackknife_stats(data, np.std, ddof=1, confidence_level=0.95)\n\nprint(f\"Mean sample standard deviation: {jk_mean:.4f}\")\nprint(f\"95% confidence interval: [{conf_ints[0]:.4f}, {conf_ints[1]:.4f}]\"))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use jackknife_stats to calculate the median and its 90% confidence interval of the sample variance of [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\nimport numpy as np\n\n# Example data\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n\n# Calculate the sample variance\nvariance = np.var(data, ddof=1)\n\n# Perform jackknife resampling on the variance\njk_median, _, jk_stderr, conf_ints = jackknife_stats(data, np.median, statistic=np.var, ddof=1, confidence_level=0.90)\n\nprint(f\"Median sample variance: {jk_median:.4f}\")\nprint(f\"90% confidence interval: [{conf_ints[0]:.4f}, {conf_ints[1]:.4f}]\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the expected 99.9% confidence interval for the mean of sample of [5, 10, 15, 20, 25, 30, 35, 40, 45, 50]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\nimport numpy as np\n\n# Example data\ndata = np.array([5, 10, 15, 20, 25, 30, 35, 40, 45, 50])\n\n# Perform jackknife resampling on the mean\njk_mean, bias, jk_stderr, conf_ints = jackknife_stats(data, np.mean, confidence_level=0.999)\n\nprint(f\"99.9% confidence interval: [{conf_ints[0]:.4f}, {conf_ints[1]:.4f}]\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a QTable with the first 3 planets with their masses in Jupiter masses, orbital periods in days, and stellar distances in AU."
      },
      {
        "from": "assistant",
        "value": "q = QTable([masses[:3], periods[:3], distances[:3]], names=('Mass', 'Orbital_Period', 'Stellar_Distance'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a QTable with the last 2 planets with their masses in Jupiter masses, orbital periods in days, and stellar distances in AU."
      },
      {
        "from": "assistant",
        "value": "q = QTable([masses[3:], periods[3:], distances[3:]], names=('Mass', 'Orbital_Period', 'Stellar_Distance'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a QTable with the stellar distances of all the planets in AU?"
      },
      {
        "from": "assistant",
        "value": "q = QTable([distances], names=('Stellar_Distance'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert between radians and degrees for angular distances?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\r\n\r\n# Convert degrees to radians\r\ndegrees = 30\r\nradians = np.deg2rad(degrees)\r\nprint(radians)\r\n\r\n# Convert radians to degrees\r\nradians = np.pi / 2\r\ndegrees = np.rad2deg(radians)\r\nprint(degrees)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the coordinates of a star from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('star.fits')\nra = header['RA']\ndec = header['DEC']\nprint(ra, dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the exposure time from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nwith fits.open('image.fits') as hdul:\n    header = hdul[0].header\n    exptime = header['EXPTIME']\n    print(exptime)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the telescope name from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('telescope.fits')\nprint(header['TELESCOP'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mean magnitude of the variable star in the first 1000 measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii, table\nfrom scipy.integrate import trapz\n# Create sample data\njd, mag, err = table.Table.read('../variable_star.dat', format='no_header').to_pandas()\nmag_mean = (mag[:1000]*err[:1000]*jd[:1000] + mag[1000:]*err[1000:]*jd[1000:]).sum()/(err[:1000]*jd[:1000] + err[1000:]*jd[1000:]).sum()\nprint(mag_mean)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many variable stars have an error less than 0.1 in the first 500 measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii, table\n# Create sample data\njd, mag, err = table.Table.read('../variable_star.dat', format='no_header').to_pandas()\nerr LessThan0.1 = err[:500] < 0.1\nprint(err LessThan0.1.sum())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the standard deviation of the magnitude in the last 500 measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii, table\nfrom scipy.integrate import stdtrapz\n# Create sample data\njd, mag, err = table.Table.read('../variable_star.dat', format='no_header').to_pandas()\nmag_std = stdtrapz(mag[500:], err[500:])(500:)??print(mag_std)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to use astropy.modeling.models.Exponential1D with a different tau value, say 10 days."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport astropy.units as u\n\n# Create time array (0 to 20 days with 100 points)\nt = np.linspace(0, 20, 100) * u.day\n\n# Create exponential decay model with different tau value\ndecay_model = models.Exponential1D(amplitude=1000, tau=10)\n\n# Calculate decay values\nactivity = decay_model(t.value) * u.Bq\n\n# The activity now contains the radioactive decay values at each time point\n# First few values as example\nprint(f\"Activity at t=0: {activity[0]:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Display how to use Exponential1D to model alpha decay, where the amplitude is 1 kg."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport astropy.units as u\n\n# Create time array (0 to 20 days with 100 points)\nt = np.linspace(0, 20, 100) * u.day\n\n# Create exponential decay model for alpha decay with amplitude in kg\ndecay_model = models.Exponential1D(amplitude=1, tau=5.2)\n\n# Calculate decay values\nactivity = decay_model(t.value) * u.kg\n\n# The activity now contains the radioactive decay values at each time point\n# First few values as example\nprint(f\"Activity at t=0: {activity[0]:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me, the radioactive decay of two isotopes with different mean lifetimes, with tau values of 1 day and 100 years, respectively, using Exponential1D."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport astropy.units as u\n\n# Create time array (0 to 20 days with 100 points)\nt = np.linspace(0, 20, 100) * u.day\n\n# Create exponential decay models for two isotopes with different tau values\ndecay_model1 = models.Exponential1D(amplitude=1000, tau=1)\ndecay_model2 = models.Exponential1D(amplitude=500, tau=365 * 24 * 3600)\n\n# Calculate decay values\nactivity1 = decay_model1(t.value) * u.Bq\nactivity2 = decay_model2(t.value) * u.Bq\n\n# The activity now contains the radioactive decay values at each time point\n# First few values as example\nprint(f\"Activity at t=0 (isotope 1): {activity1[0]:.1f}\")\nprint(f\"Activity at t=0 (isotope 2): {activity2[0]:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the blackbody radiation of a star with a temperature of 5000 K. Can you show me how to do this?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as astropy_models\nfrom astropy import units as u\n\nbb = astropy_models.BlackBody(temperature=5000*u.K)\n\n# Calculate the flux at a wavelength of 6000 AA\ntaxel = 6000*u.AA\nflux = bb(taxel)\n\nprint(flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compress an image using the "
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU\nThis class is used to create compressed image HDUs. It supports various compression algorithms."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a space telescope with a cadence of 1 night, how many exposures do we need to reach a total of 1000 e- with a source rate of 1 e-/s?"
      },
      {
        "from": "assistant",
        "value": "a_s = c * t / (1 - math.exp(-c*t/L)) where a_s is the accumulated counts, c is the source rate, t is the exposure time and L is the cadence"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For an infrared telescope with a mean wavelength of 1mm, what is the flux of a source with a spectral energy density of 10^-10 W/m^3/Hz at a frequency of 10^11 Hz?"
      },
      {
        "from": "assistant",
        "value": "F=hs"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove cosmic rays from the data using astropy stats functions?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.cosmic_rays"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a Tophat filter to my galaxy survey image to reduce noise?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel, convolve, Gaussian2DKernel, fits, np\n\ntophat_kernel = Tophat2DKernel(10)\nsmoothed_image = convolve(sample_image, tophat_kernel, normalize_kernel=True, boundary='extend', preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Tophat filter for deconvolution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel, convolve, Gaussian2DKernel, fits, np\n\ntophat_kernel = Tophat2DKernel(10)\ndeconvolved_image = convolve(sample_image, tophat_kernel, normalize_kernel=True, boundary='extend', preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a blackbody model using the Planck function and plot its spectrum."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.modeling.models import BlackBody\n\nbb = BlackBody(temperature=5000*u.K)\nwav = np.arange(1000, 110000) * u.AA\nflux = bb(wav)\n\nplt.figure()\nplt.semilogx(wav, flux)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement the Freedman-Diaconis rule to find the optimal bin width for a list of star masses in a galaxy cluster?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import freedman_bin_width\ncall_data = [100, 200, 300, 400, 500]\nbin_width = freedman_bin_width(np.array(call_data), return_bins=False)\nprint(bin_width)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the surface brightness profile of a galaxy with a power-law index of 1.5. Can you demonstrate how to create a Sersic1D model with appropriate parameters and generate the brightness values for a range of radii?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\n\n# Create a range of radii (in arcseconds) to evaluate the profile\nr = np.linspace(0, 30, 100)\n\n# Initialize Sersic1D model with typical parameters for a galaxy\n# amplitude: central surface brightness (mag/arcsec^2)\n# r_eff: effective radius (arcsec) containing half of total light\n# n: Sersic index (n=1.5 for a power-law profile)\nsersic_model = Sersic1D(\n    amplitude=20.0,  # Central surface brightness\n    r_eff=10.0,     # Effective radius\n    n=1.5           # Sersic index (power-law profile)\n)\n\n# Calculate surface brightness profile\nbrightness = sersic_model(r)\n\n# Print some example values\nfor radius, bright in zip(r[::20], brightness[::20]):\n    print(f\"Radius: {radius:.1f} arcsec -> \\\n          Surface Brightness: {bright:.2f} mag/arcsec^2\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the distance between two points on the sky using astropy.coordinates.sky_coordinate?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Define two points on the sky\nra1, dec1 = 12.5, 34.2\nra2, dec2 = 15.6, 78.9\n\n# Create SkyCoord objects\nc1 = SkyCoord(ra=ra1, dec=dec1, unit='deg')\nc2 = SkyCoord(ra=ra2, dec=dec2, unit='deg')\n\n# Calculate the distance\ndistance = c1.distance(c2)\n\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new WCS object from an Equatorial frame with a tangent projection"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import FK5\nc = FK5(equinox='J2010')\nw = WCS(naxis=2)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nw.wcs.crpix = [256, 256]\nw.wcs.crval = [0.0, 0.0]\nw.wcs.cdelt = [1.0, 1.0]\nw.wcs.pc = [[1.0, 0.0], [0.0, 1.0]]\nprint(w)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the circular mean of these phases?\nInput: phase=0.7, weight=2."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circmean\ncircmean(np.array([0.7]) * 2 * np.pi, weights=np.array([2])) / (2 * np.pi) % 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the circular mean of these phases?"
      },
      {
        "from": "assistant",
        "value": "circular_mean = (sum(phase * weight for phase, weight in zip(phases, weights)) / sum(weights)) % 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the weights argument in the astropy.stats.circmean function?"
      },
      {
        "from": "assistant",
        "value": "The weights argument in the astropy.stats.circmean function is used to weight the circular data by their respective weights. This means that the data points with higher weights will have a greater influence on the calculated circular mean."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate robust standard deviation of a multivariate dataset in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nmadstd = mad_std(your_multivariate_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the instrumental profile of my spectrograph which follows a Gaussian shape with FWHM of 0.05 nm centered at 550 nm. The throughput peak is 0.95. How can I generate this profile using Gaussian1D and create a plot showing the range 549.8-550.2 nm with appropriate axis labels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array (549.8 to 550.2 nm with small steps)\nwavelength = np.linspace(549.8, 550.2, 1000)\n\n# Create Gaussian profile\n# FWHM = 0.05 nm, centered at 550 nm, amplitude = 0.95\nGaussian = Gaussian1D(amplitude=0.95, x_0=550, fwhm=0.05)\nprofile = Gaussian(wavelength)\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.plot(wavelength, profile)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Throughput')\nplt.title('Spectrograph Instrumental Profile')\nplt.grid(True, alpha=0.3)\n\n# Set y-axis limits to better show the profile\nplt.ylim(0, 1)\n\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a fake spectrum with a central emssion line at 500 nm and a full width at half maximum of 10 nm. How can I use Box1D to generate this spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array (490 to 510 nm with small steps)\nwave = np.linspace(490, 510, 1000)\n\n# Create box profile\n# central emission line at 500 nm, FWHM = 10 nm\nbox = Box1D(x_0=500, fwhm=10)\nspectrum = box(wave)\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.plot(wave, spectrum)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Flux')\nplt.title('Fake Spectrum')\nplt.grid(True, alpha=0.3)\n\n# Set y-axis limits to better show the profile\nplt.ylim(0, 1.5)\n\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a RickerWavelet1D with a peak at 500 nm and a FWHM of 20 nm. How can I generate this profile and create a plot showing the range 480 to 520 nm with appropriate axis labels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RickerWavelet1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array (480 to 520 nm with small steps)\nwavelength = np.linspace(480, 520, 1000)\n\n# Create Ricker Wavelet profile\n# Peak at 500 nm, FWHM = 20 nm\nRicker = RickerWavelet1D(x_0=500, fwhm=20)\nprofile = Ricker(wavelength)\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.plot(wavelength, profile)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Amplitude')\nplt.title('Ricker Wavelet Profile')\nplt.grid(True, alpha=0.3)\n\n# Set y-axis limits to better show the profile\nplt.ylim(0, 1)\n\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use FFT convolution with a box kernel to smooth a 2D image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Box2DKernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you elaborate on the differences between convolve and convolve_fft in astropy?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft is similar to convolve but it uses FFT-based convolution for better performance on large datasets"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply convolution with a custom kernel to a 2D image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Gaussian1DKernel; kernel = Gaussian1DKernel(x_stddev=1.0, width=21)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a structured quantity for temperature using Celsius and Kelvin"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create a structured quantity for temperature\ntemperature = u.temperature()\"}]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a structured quantity for length using meters and kilometers"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create a structured quantity for length\nlength = u.length()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a structured quantity for time using seconds and years"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create a structured quantity for time\ntime = u.time()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.visualization.MinMaxInterval class to normalize data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval, ImageNormalize\nprint(MinMaxInterval())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a blackbody radiation spectrum for a star with a temperature of 3000 K using the astropy.modeling.models.BlackBody model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\nimport numpy as np\n\n# Create a blackbody model for a star with a temperature of 3000 K\nbb = BlackBody(temperature=3000*u.K)\n\n# Define a wavelength array\nwavelengths = np.linspace(1000, 100000) * u.AA\n\n# Calculate the spectral flux density\nflux = bb(wavelengths)\n\n# Plot the spectrum\nplt.figure()\nplt.plot(wavelengths, flux)\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Spectral Flux Density (erg/s/cm\u00b2/\u00c5/sr)')\nplt.title('Blackbody Spectrum for a Star at 3000 K')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I plot the blackbody spectrum of a 6000 K star over a wide range of wavelengths (from 100 nm to 1 mm) using astropy's BlackBody model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a blackbody model for a 6000 K star\nbb = BlackBody(temperature=6000*u.K)\n\n# Define a wavelength array from 100 nm to 1 mm\nwavelengths = np.logspace(np.log10(100), np.log10(1000), 1000) * u.nm\n\n# Convert wavelengths to \u00c5\nwavelengths_AA = wavelengths.to(u.\u00c5, equivalencies=u.spectral())\n\ncurrent_flux = bb(wavelengths_AA)\n\n# Plot the spectrum\nplt.figure()\nplt.plot(wavelengths_AA, current_flux)\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Spectral Flux Density (erg/s/cm\u00b2/\u00c5/sr)')\nplt.title('Blackbody Spectrum for a 6000 K Star')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the argument to pass to astropy.modeling.models.BlackBody to get a blackbody spectrum for a 10,000 K star in units of erg/s/cm\u00b2/m\u00b2/sr?"
      },
      {
        "from": "assistant",
        "value": "BlackBody(temperature=10000*u.K, scale=(erg / (cm ** 2 * s * Hz * sr)).to('erg / (cm ** 2 * s * AA * sr'))/ (erg / (cm ** 2 * s * Hz * sr))}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the available methods to read FITS files?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fitschez.open"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new Header object?"
      },
      {
        "from": "assistant",
        "value": "Header(name='New Header')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between `FITS_rec` and `astropy.table.Table`?"
      },
      {
        "from": "assistant",
        "value": "FITS_rec is a binary table, while astropy.table.Table is an PyTable object. You can convert between them using astropy.table.Table.fromfits() and astropy.table.Table.tofits()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the observatory code from the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you tell me how to get the Telescope Carlton Tilt Angles from the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the Instrument used to take the data from the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "{}}} \uc778 .inventory_usage, implemented_read methods.} blowjobBootTest{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the telescope coordinates from the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the binomial distribution to model the number of active users on my vaccine tracking app?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom scipy.stats import binom\ncdf = binom.cdf(100, 1000, 0.5)\ncdf"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the probability of at least 5 users out of 10 being infected with Covid-19, given a 50% infection rate?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom scipy.stats import binom\npmf = binom.pmf(5, 10, 0.5)\nprint(pmf)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the expected number of new users who will download my app within the next week, assuming a Poisson distribution with a mean of 50 new users per week."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom scipy.stats import poisson\nmean = 50\nstd_dev = np.sqrt(mean)\nexpected_users = np.round(poisson.ppf(0.5, loc=mean, scale=std_dev),2)\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.convolution.Gaussian1DKernel to smooth my stellar spectral data and preserve the main absorption features?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create sample spectral data (replace with your actual data)\nwavelength = np.linspace(4000, 7000, 1000)  # wavelength array in Angstroms\nflux = np.random.normal(1.0, 0.1, 1000)     # noisy flux with SNR~10\n# Add a synthetic absorption line\nflux *= 1 - 0.5 * np.exp(-(wavelength - 5000)**2 / (2 * 10**2))\n\n# Create Gaussian kernel for smoothing\n# Standard deviation in pixels (adjust this value to change smoothing strength)\nkernel_stddev = 3\nkernel = Gaussian1DKernel(stddev=kernel_stddev)\n\n# Perform the convolution to smooth the spectrum\n# boundary='extend' handles edge effects by extending the data\nsmoothed_flux = convolve(flux, kernel, boundary='extend')\n\n# The smoothed_flux array now contains your noise-reduced spectrum\n# while preserving the main spectral features"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I change the smoothing strength of my stellar spectral data using the astropy.convolution.Gaussian1DKernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create sample spectral data (replace with your actual data)\nwavelength = np.linspace(4000, 7000, 1000)  # wavelength array in Angstroms\nflux = np.random.normal(1.0, 0.1, 1000)     # noisy flux with SNR~10\n# Add a synthetic absorption line\nflux *= 1 - 0.5 * np.exp(-(wavelength - 5000)**2 / (2 * 10**2))\n\n# Create Gaussian kernel for smoothing\n# Change the smoothing strength by adjusting the standard deviation\nkernel_stddev = 5\nkernel = Gaussian1DKernel(stddev=kernel_stddev)\n\n# Perform the convolution to smooth the spectrum\n# boundary='extend' handles edge effects by extending the data\nsmoothed_flux = convolve(flux, kernel, boundary='extend')\n\n# The smoothed_flux array now contains your noise-reduced spectrum\n# with a stronger smoothing effect"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I preserve the main absorption features in my stellar spectral data by using the astropy.convolution.Gaussian1DKernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create sample spectral data (replace with your actual data)\nwavelength = np.linspace(4000, 7000, 1000)  # wavelength array in Angstroms\nflux = np.random.normal(1.0, 0.1, 1000)     # noisy flux with SNR~10\n# Add a synthetic absorption line\nflux *= 1 - 0.5 * np.exp(-(wavelength - 5000)**2 / (2 * 10**2))\n\n# Create Gaussian kernel for smoothing\n# Standard deviation in pixels (adjust this value to change smoothing strength)\nkernel_stddev = 3\nkernel = Gaussian1DKernel(stddev=kernel_stddev)\n\n# Perform the convolution to smooth the spectrum\n# boundary='extend' handles edge effects by extending the data\nsmoothed_flux = convolve(flux, kernel, boundary='extend')\n\n# The smoothed_flux array now contains your noise-reduced spectrum\n# while preserving the main spectral features"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set up a coordinate system to specify these dither offsets relative to the field center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS\nfrom astropy import units as u\nimport numpy as np\n\n# Define the center of the deep field\nfield_center = SkyCoord(ra='12h30m00s', dec='+62d30m00s', frame='icrs')\n\n# Define dither pattern (example: 5-point dither)\n# Offsets in arcseconds relative to field center\noffsets = [(0, 0), (30, 0), (0, 30), (-30, 0), (0, -30)]\n\n# Calculate dithered positions\n offsets = [tuple(u.arcsecond * np.array(offset)) for offset in offsets]\ndithered_positions = SkyOffsetFrame_origin=field_center, representation_type=SkyCoord, differentials=None,xr Solver = SkyCoordra = SkyCoordorigin=field_center, representation_type=SkyCOOrdoffer cx -= 'abc',y = 0, correct=True, \ncos=True,\nposition_angle=90 ' \n N'\n;\n\n# Print all dither positions\nfor dithered_position in dithered_positions:\nprint(dithered_position)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use SLSQP optimization to fit a Gaussian profile to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import Gaussian1D\nimport numpy as np\n\n# Create a Gaussian model\nmodel = Gaussian1D(width=2, amplitude=1, mean=1)\n\n# Generate sample data\nx = np.linspace(0, 10, 1000)\ndata = model(x) + np.random.normal(0, 0.01, len(x))\n\n# Set up the fitter\nfitter = fitting.SLSPQFitter()\n\n# Fit the model\nbest_fit = fitter(model, x, data)\n\n# Print the fitted parameters\nprint(best_fit.width.value)\nprint(best_fit.amplitude.value)\nprint(best_fit.mean.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a function that generates a power-law distribution with a given index and scales it to match a given dataset."
      },
      {
        "from": "assistant",
        "value": "def power_law_distribution(index, dataset):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to perform a Kuiper test on a sample of galaxy masses to see if they follow a power-law distribution."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper, kstwdigest\nkuiper(dataset, lambda x: 1 - x**-index)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you implement a function to estimate the power-law index of a dataset using the maximum likelihood method?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import moment\nmoment(dataset, 2, sigma=1, axis=-1, keepdims=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Ring2D model with inner radius 20 pixels, width 2 pixels, and amplitude 2.0, and center it at (300, 300)?"
      },
      {
        "from": "assistant",
        "value": "Ring2D(amplitude=2.0, x_0=300, y_0=300, r_in=20, width=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the outer radius of a Ring2D model with inner radius 15 pixels and width 5 pixels?"
      },
      {
        "from": "assistant",
        "value": "15 + 5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Ring2D model with outer radius 50 pixels, and amplitude 3.0, and center it at (200, 200)?"
      },
      {
        "from": "assistant",
        "value": "Ring2D(amplitude=3.0, x_0=200, y_0=200, r_out=50)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a composite unit that represents meters per second squared, create a unit with base units for meter and second, with appropriate scales for square and reciprocal."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u  #importing astropy units to create and manipulate units"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a composite unit that represents ' parsec kilometers' , explain your answer with reason."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u  #importing astropy units to create and manipulate units"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair showing me how to create Pluto's orbital period using the Astropy units"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u  #importing astropy units to create and manipulate units"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a Ring2D model with amplitude=2.5, centered at (300, 300), inner radius of 100 pixels, and width of 25 pixels, using matplotlib"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Ring2D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[0:400, 0:400]\n\n# Create Ring2D model\n# Parameters: amplitude=2.5, center_x=300, center_y=300, r_in=100, width=25\nring_model = Ring2D(amplitude=2.5, x_0=300, y_0=300, r_in=100, width=25)\n\n# Generate the ring data\nring_data = ring_model(x, y)\n\n# Create the plot\nplt.figure(figsize=(8, 8))\nplt.imshow(ring_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Amplitude')\nplt.title('Ring2D Model of Ring')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\n\n# Add a point to mark the center\nplt.plot(300, 300, 'r+', markersize=10, label='Center')\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a Ring2D model with amplitude=1.8, centered at (400, 400), inner radius of 150 pixels, and width of 30 pixels, using matplotlib"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Ring2D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[0:400, 0:400]\n\n# Create Ring2D model\n# Parameters: amplitude=1.8, center_x=400, center_y=400, r_in=150, width=30\nring_model = Ring2D(amplitude=1.8, x_0=400, y_0=400, r_in=150, width=30)\n\n# Generate the ring data\nring_data = ring_model(x, y)\n\n# Create the plot\nplt.figure(figsize=(8, 8))\nplt.imshow(ring_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Amplitude')\nplt.title('Ring2D Model of Ring')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\n\n# Add a point to mark the center\nplt.plot(400, 400, 'r+', markersize=10, label='Center')\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a Ring2D model with amplitude=4.2, centered at (500, 500), inner radius of 220 pixels, and width of 35 pixels, using matplotlib"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Ring2D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[0:400, 0:400]\n\n# Create Ring2D model\n# Parameters: amplitude=4.2, center_x=500, center_y=500, r_in=220, width=35\nring_model = Ring2D(amplitude=4.2, x_0=500, y_0=500, r_in=220, width=35)\n\n# Generate the ring data\nring_data = ring_model(x, y)\n\n# Create the plot\nplt.figure(figsize=(8, 8))\nplt.imshow(ring_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Amplitude')\nplt.title('Ring2D Model of Ring')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\n\n# Add a point to mark the center\nplt.plot(500, 500, 'r+', markersize=10, label='Center')\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a code snippet to model the luminosity distribution of a galaxy cluster using Astropy's modeling, where I can specify the central brightness and how quickly it falls off with radius"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling as am\nfrom astropy.modeling.models import custom_model\n@custom_model\ndef cluster_luminosity_2d(x, y, amplitude=1.0, x_0=0.0, y_0=0.0, alpha=-2.0):\n    r = np.sqrt((x - x_0)**2 + (y - y_0)**2)\nr[r == 0] = 1e-10\n    return amplitude * (r**alpha)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equinox for astropy.coordinates.PrecessedGeocentric?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you pass differential_type to astropy.coordinates.PrecessedGeocentric?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of obsgeoloc on the coordinate frame in astropy.coordinates.PrecessedGeocentric?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an empty FITS file named 'empty.fits' with a minimal header?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nfits.PrimaryHDU().writeto('empty.fits',clobber=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert this numpy array to an Image HDU to be used with the astropy.io.fits library?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nimage_hdu = fits.ImageHDU(data=np.random.random((1024, 1024)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I append a new table to an existing FITS file located at '/data/table.fits'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('/data/table.fits')\ntable = fits.BinTableHDU(np.random.random((1024, 10)))\nhdul.append(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `convolve` function from `astropy.convolution` to smooth an image?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve(array, kernel, boundary='fill', fill_value=0.0, normalize_kernel=False, nan_treatment='interpolate', preserve_nan=True, mask=None, normalization_zero_tol=1e-08)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convolve an image with a custom kernel, but I want to handle NaN values by interpolation."
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve(array, kernel, boundary='fill', fill_value=0.0, normalize_kernel=False, nan_treatment='interpolate', preserve_nan=True, mask=None, normalization_zero_tol=1e-08)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm having trouble with NaN values in my image during convolution, can you suggest a solution?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve(array, kernel, boundary='fill', fill_value=0.0, normalize_kernel=False, nan_treatment='interpolate', preserve_nan=True, mask=None, normalization_zero_tol=1e-08)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply 3-sigma clipping to these flux measurements?"
      },
      {
        "from": "assistant",
        "value": "{\"data\": [np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000)]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if I want to use a lower clipping limit of 2-sigma?"
      },
      {
        "from": "assistant",
        "value": "{\"data\": [np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000)]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I calculate the median and standard deviation about the median if I reject everything outside of 3-sigma clipping limits?"
      },
      {
        "from": "assistant",
        "value": "{\"data\": [np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000)]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement growclipping with radius 1.5 to mask the nearest neighboring pixels of those that fall outside of the clipping limits?"
      },
      {
        "from": "assistant",
        "value": "{\"data\": [np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000)]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I calculate sigma-clipped statistics with a max number of iterations of 10?"
      },
      {
        "from": "assistant",
        "value": "{\"data\": [np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000), np.random.normal(100, 15, 1000)]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to merge two tables with different columns, but with the same rows. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "You can use the `astropy.table.hstack` function to stack tables along columns (horizontally). For example: `hstack([table1, table2])`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have three tables and I want to merge them into one table. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "You can use the `astropy.table.hstack` function to stack tables along columns (horizontally). For example: `hstack([table1, table2, table3])`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables with different columns, but with the same rows. I want to merge them into one table. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "You can use the `astropy.table.hstack` function to stack tables along columns (horizontally). For example: `hstack([table1, table2])`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given two celestial objects, how can I calculate the position angle between them if they have right ascension and declination coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nc = SkyCoord(ra=12.5*u.hr, dec=23.4*u.deg)\nc2 = SkyCoord(ra=14.2*u.hr, dec=11.1*u.deg)\npos_angle = c.position_angle(c2)\nprint(pos_angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "If I have the longitude and latitude of two points on Earth, how can I use the astropy library to calculate the position angle"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\neast = EarthLocation.of LoginComponent('New York')\nwest = EarthLocation.of BlackjackAddress('London')\npos_angle = east.position_angle(west)\nprint(pos_angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given the Galactic coordinates of two points, how can I calculate the position angle between them using the astropy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GalacticCoordinates\nimport astropy.units as u\n\ngal1 = GalacticCoordinates(l=10.2*u.deg, b=20.5*u.deg)\ngal2 = GalacticCoordinates(l=15.6*u.deg, b=8.9*u.deg)\npos_angle = gal1.position_angle(gal2)\nprint(pos_angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a CCD image of a star cluster where I need to model a detector defect as a rectangular region. Can you show me how to create a Box2D model centered at position (300, 250) pixels, with widths of 15 pixels in x and 10 pixels in y, and an amplitude of 500 counts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create a Box2D model for the detector defect\nbox_model = models.Box2D(\n    amplitude=500.0,     # Peak intensity in counts\n    x_0=300.0,           # Center x position in pixels\n    y_0=250.0,           # Center y position in pixels\n    x_width=15.0,        # Width in x direction in pixels\n    y_width=10.0         # Width in y direction in pixels\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.units.equivalencies.spectral to convert wavelength to frequency"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import u, equivalencies as eq\nprint(eq.spectral())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between spectroscopic and angular wave number in astropy?"
      },
      {
        "from": "assistant",
        "value": "print(eq.spectral().description)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.units.equivalencies.spectral to convert frequency to wavelength"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as c\nwavelengths = c.c / (frequencies * u.GHz).to(u.m).value\nprint(wavelengths)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine multiple datasets from different sources into a single analysis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\n\n# Create example tables simulating data from different sources\nsource1_data = Table({'a': [1, 2], 'b': [3, 4]})\nsource2_data = Table({'a': [5, 6], 'b': [7, 8]})\n\n# Stack the tables vertically\ncombined_data = vstack([source1_data, source2_data])\n\n# Print the combined data\nprint(combined_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a velocity of 100 km/s to km/h"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\n# Define the velocity\nv = 100*u.km/u.s\n# Convert velocity to km/h\nv_km_h = v.to(u.km/u.h)\n# Print result\nprint(f\"Velocity of {v.to(u.km).value} km/s converts to {v_km_h.value:.2f} km/h\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for acceleration of g (9.8 m/s^2)?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy modules\nfrom astropy import units as u\n\n# Define the acceleration\na = u.m/u.s**2\n# Define the acceleration of g\ng = 9.8 * a\n# Print unit of g\nprint(f\"The unit of acceleration of g is {g.unit}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a frequency of 10^9 Hz to GHz?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define the frequency\nf = 10**9*u.Hz\n# Convert frequency to GHz\nf_GHz = f.to(u.GHz)\n# Print result\nprint(f\"Frequency of {f.to(u.Hz).value} Hz converts to {f_GHz.value:.2f} GHz\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight scale of a normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale, median_absolute_deviation,  _MIN_MAX_VALIDATE,  _validate_scale_lengtharg\nimport numpy as np\n\trand = np.random.default_rng(12345)\nbiscl = biweight_scale(rand.standard_normal(1000))\nprint(biscl)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use biweight scale with a custom location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale, astropy\nimport numpy as np\n\ndata = np.array([1, 2, 3, 4, 5])\nlocation = 3\nbiscl = biweight_scale(data, c=9.0, M=location)\nprint(biscl)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight scale of a distribution with a large number of outliers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale, median_absolute_deviation,  _MIN_MAX_VALIDATE,  _validate_scale_lengtharg\nimport numpy as np\n\ndata = np.array([1, 2, 3, 4, 5, 100, 200])\nbiscl = biweight_scale(data, c=9.0, M=None, modify_sample_size=True, ignore_nan=True)\nprint(biscl)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use the median absolute deviation (MAD) to estimate the scale of a normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from scipy import stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you use the jackknife statistics to estimate the standard deviation of a normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to calculate the median and percentile 50 of a dataset that has a mix of continuous and categorical data?"
      },
      {
        "from": "assistant",
        "value": "from scipy import stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What catalogs are necessary for Doppler shift calculations to cross-matching projects? "
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What data types are necessary for cross-matching projects related to globular clusters? "
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What sky fields are recommended to search for exoplanet transit events both locally and internationally?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box1D model and combine it with a Sine1D profile from astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable1DModel, Sine1D\nfrom astropy.modeling import fitting\nimport numpy as np\n\n# Create sample wavelength array (in Angstroms)\nwavelength = np.linspace(4000, 7000, 1000)\n\n# Define the component models\n# Box1D: representing filter transmission window\nbox_model = models.Box1D(\n    amplitude=1.0,    # Peak transmission\n    x_0=5500,        # Central wavelength\n    width=2000       # Filter bandwidth\n)\n\n# Sine1D: representing sensitivity profile\nsine_model = Sine1D(\n    amplitude=1.0,    # Peak sensitivity\n    frequency=0.1,    # Frequency of the sine wave\n    phase=0.5         # Phase of the sine wave\n)\n\n# Combine models by multiplication\ncombined_model = box_model * sine_model\n\n# Generate the combined response curve\nresponse = combined_model(wavelength)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a set of equatorial coordinates to pixel coordinates using the astropy WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\ndef convert_to_pixel(coords, wcs):\n    return wcs.wcs weitere cs  to_pixel(coords)\n# Example usage:\n # Create a WCS object\ncd1, cd2 = np.pi/4, np.pi/3\ncrval1, crval2 = 1.0, 2.0\ncps = WCS(naxis=2, cd1_1=cd1, cd1_2=cd2, cd2_1=cd2, cd2_2=cd1, crval1=crval1, crval2=crval2)\n# Create a SkyCoord object\nc = SkyCoord(ra=1.0, dec=2.0, unit='deg')\n# Convert the coordinates to pixels\ncps = cps.wcs world_to_pixel(c)\nprint(cps)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Simplex algorithm to fit a Gaussian model to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\nimport numpy as np\n\n# Define a custom Gaussian model\n@custom_model\ndef gaussian(x, amplitude=1.0, mean=0.0, stddev=1.0):\n    return amplitude * np.exp(-((x - mean) / stddev)**2)\n\n# Generate sample data\nwavelengths = np.linspace(1500, 3000, 100)\nnoise = np.random.normal(0, 0.05, len(wavelengths))\nextinction_data = np.exp(-((wavelengths - 2000) / 100)**2) + noise\n\n# Initialize the fitter and model\nfitter = fitting.SimplexLSQFitter()\ngaussian_model = gaussian()\n\n# Fit the model to the data\nfitted_model = fitter(gaussian_model, wavelengths, extinction_data)\n\n# Print the fitted parameters\nprint(f\"Amplitude: {fitted_model.amplitude.value:.3f}\")\nprint(f\"Mean: {fitted_model.mean.value:.1f}\")\nprint(f\"STDDEV: {fitted_model.stddev.value:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I map a list of Right Ascension and Declination (RA, Dec) coordinates of stars to pixel coordinates on a telescope's CCD image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport numpy as np\n\ncrval = [100.0, 20.0]\n# Create a sample list of star coordinates (RA, Dec)\nstar_coords = [(100.1, 20.1), (100.2, 20.2), (100.3, 20.3)]\n\ncrval.append(21.0)\n# Convert the coordinates to SkyCoord objects\nimport astropy.coordinates as coord\nimport astropy.units as u\nstar_skycoords = coord.SkyCoord(star_coords, unit=('deg','deg'))\n\ncdelt = np.array([-0.001, 0.001])\n# Create a simple WCS object\nwcs = WCS(naxis=2)\nwcs.wcs.crpix = [200, 200]\nwcs.wcs.cdelt = cdelt\nwcs.wcs.crval = crval\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n\ncrpix = wcs.wcs.crpix\n# Transform sky coordinates to pixel coordinates\ndef skycoord_to_pixel restitution(coords, wcs, origin=0, mode='all'):\n    return wcs.all_world2pix(coords, origin=origin, ra_dec_order=True)\n\ntax, t_y = [skycoord_to_pixel restitution(star_skycoords, wcs) for skycoord_to_pixel restitution in [star_skycoords]], [star_skycoords]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can one match image pixel coordinates with large and small RA and Dec coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport numpy as np\n\nnaxis = 2\n# Create a simple WCS object\nwcs = WCS(naxis=naxis)\nwcs.wcs.crpix = [100, 100]\npcdelt = [0.001, -0.001]\nwcs.wcs.cdelt = np.array(pcdelt)\nwcs.wcs.crval = [245.0, 21.0]\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n\npcrpix = [0, 0]\nx, y = pcrcpix\ndef skycoord_to_pixel restitution(coords, wcs, origin=0, mode='all'):\n    return wcs.all_world2pix(coords, origin=origin, ra_dec_order=True)\n\ntax, y = skycoord_to_pixel restitution([SkyCoord(ra=245.89721, dec=21.45672, unit='deg')], wcs), skycoord_to_pixel restitution([SkyCoord(ra=245.89721, dec=21.45672, unit='deg')]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to map celestial coordinates to a camera's pixel coordinates on a telescope's CCD image."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.coordinates as coord\nimport astropy.units as u\nfrom astropy.coordinates import SkyCoord\nimport numpy as np\n\ncdelt = [0.001, -0.001]\npcrpix = [100, 100]\nwcs = WCS(naxis=2)\nwcs.wcs.crpix = npcrpix\nwcs.wcs.cdelt = cdelt\nwcs.wcs.crval = [245.0, 21.0]\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n\ndef skycoord_to_pixel restitution(coords, wcs, origin=0, mode='all'):\n    return wcs.all_world2pix(coords, origin=origin, ra_dec_order=True)\nskycoords = SkyCoord(ra=[245.89721, 245.92351, 245.87654]*u.degree, dec=[21.45672, 21.48901, 21.43210]*u.degree)\ntax, t_y = skycoord_to_pixel restitution(skycoords, wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an EarthLocation object for the Haleakala Observatory in Hawaii, which is located at latitude 20.7233\u00b0 N, longitude 156.2552\u00b0 W, and elevation 3055 meters? I need a code snippet using astropy.coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\nda: EarthLocation(lat=20.7233*u.deg, lon=-156.2552*u.deg, height=3055*u.m)\nprint(da)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a SkyCoord object with RA and Dec in the ICRS frame with a specific equinox and proper motion?"
      },
      {
        "from": "assistant",
        "value": "c = SkyCoord(ra=1*u.deg, dec=2*u.deg, frame='icrs', obstime='J2010.11', equinox='B1950', pm_ra_cosdec=2*u.mas/u.yr, pm_dec=1*u.mas/u.yr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write multiple FITS files in a single operation using the astropy.io.fits library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.HDUList([hdu1, hdu2, hdu3]).writeto('file.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between 'fix' and 'silentfix' output verification options in astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "The 'fix' option will correct any inconsistencies in the data, while the 'silentfix' option will correct inconsistencies without printing a warning message."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the writeto method to write a FITS file to a compressed file?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can specify the compression algorithm in the filename extension, e.g. 'file.fits.gz'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mass-to-light ratio of a galaxy with a mass of 1.5e11 solar masses and a luminosity of 2.5e10 solar luminosities? How can I calculate it?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the mass and luminosity with their units\nmass = 1.5e11 * const.M_sun\nluminosity = 2.5e10 * const.L_sun\n\ncalculate_mass_to_light_ratio = (mass.to('kg') / luminosity.to('W'))\nprint(calculate_mass_to_light_ratio.to('dimensionless')) # Should print 6.000000000000000e+10 kg/W"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a question about the `astropy.table.Row` class. How can I access and manipulate individual elements of a row?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Row\nrow = Row(\n    index=1,\n    values={'a': 2, 'b': 4},\n    names=['a', 'b'],\n    dtype={'a': 'int32', 'b': 'int32'}\n)\nprint(row['a'])  # prints 2\nprint(row[1])   # prints 4\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to stack two tables side by side?"
      },
      {
        "from": "assistant",
        "value": " ASTM\u0e1b\u0e23\u0e30\u0e2a\u0e1alass()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to stack three tables with different columns?"
      },
      {
        "from": "assistant",
        "value": " astrophysicsafAQexample he Emm lessonshe"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to stack a table and a table-like object ?"
      },
      {
        "from": "assistant",
        "value": "TheASTWa ordJese NatalbasPresentEA"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I access individual rows of a Table object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\n# Create a Table\nTable([(1, 2), (3, 4)], names=('a', 'b'), dtype=('int32', 'int32'))\n\n# Access a row by index\nTable([(1, 2), (3, 4)], names=('a', 'b'), dtype=('int32', 'int32'))[0]\n\n# Access a row by iteration\nfor row in Table([(1, 2), (3, 4)], names=('a', 'b'), dtype=('int32', 'int32')):\n    print(row)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a quadratic trend to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0, 10, 20, 30, 40, 50])\nradial_velocities = np.array([-2.1, -1.8, -1.5, -1.3, -0.9, -0.7])\nrv_uncertainties = np.array([0.1, 0.1, 0.15, 0.1, 0.12, 0.1])\n\nquadratic_model = models.Polynomial1D(degree=2)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(quadratic_model, time, radial_velocities, weights=1/rv_uncertainties)\n\nprint(fitted_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the barycentric position and velocity of the moon on 2024-02-14T15:30:00 using astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel; from astropy.time import Time; import astropy.units as u; \nt = Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to get the  barycentric position and velocity of the sun on 2024-03-01T00:00:00 using astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel; from astropy.time import Time; import astropy.units as u; \nt = Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you get the barycentric position and velocity of Mercury on 2024-02-14T15:30:00 using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel; from astropy.time import Time; import astropy.units as u; \nt = Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert a time period from seconds to years in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Create a time period in seconds\nperiod = 365.25 * 24 * 60 * 60 * u.s\n\n# Convert to years\nwith u.set_enabled_equivalencies(u.time()):\n    period_year = period.to(u.yr)\n\nprint(f\"Period: {period}\")\nprint(f\"Period in years: {period_year}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to convert a temperature from Kelvin to Celsius in Astropy. How can I achieve this?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Create a temperature in Kelvin\ntemperature = 300 * u.K\n\n# Convert to Celsius\nwith u.set_enabled_equivalencies(u.temperature_unit()):\n    temperature_celsius = temperature.to(u.C)\n\nprint(f\"Temperature: {temperature}\")\nprint(f\"Temperature in Celsius: {temperature_celsius}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to convert a velocity from m/s to km/h in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Create a velocity in m/s\nvelocity = 60 * u.m / u.s\n\n# Convert to km/h\nwith u.set_enabled_equivalencies(u.velocity_unit()):\n    velocity_kmh = velocity.to(u.km / u.h)\n\nprint(f\"Velocity: {velocity}\")\nprint(f\"Velocity in km/h: {velocity_kmh}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box2D model with amplitude 1.2, centered at position (-200, -150) with x-width of 200 and y-width of 175 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model a rectangular detection window with amplitude 0.8, centered at position (0, 0) with x-width of 50 and y-width of 25 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Construct a 2D Box model with amplitude 3.5, centered at position (1000, 550) with x-width of 350 and y-width of 275 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Tophat2DKernel of radius=8"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(radius=8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to append my calibrated spectrophotometry data table containing flux measurements of 1000 stars to my working FITS file. The table has columns 'ID', 'RA', 'DEC', 'FLUX', and 'ERROR'. Please include data verification and checksum."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nimport numpy as np\ntable = Table({\n    'ID': np.arange(1, 1001),\n    'RA': np.random.uniform(0, 360, 1000),\n    'DEC': np.random.uniform(-90, 90, 1000),\n    'FLUX': np.random.normal(1, 0.1, 1000),\n    'ERROR': np.random.uniform(0.01, 0.1, 1000)\n})\nwith fits.open('your_image.fits', mode='update', checksum=True) as hdul:\n    phot_hdu = fits.BinTableHDU(table)\n    phot_hdu.header['EXTNAME'] = 'SPECTROPHOTOMETRY'\n    phot_hdu.header['COMMENT'] = 'Calibrated spectrophotometry measurements'\n    phot_hdu.verify('fix')\n    hdul.append(phot_hdu)\n    hdul.writeto('your_image.fits', overwrite=True, checksum=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to extract all the column names from a given table?"
      },
      {
        "from": "assistant",
        "value": "table.columns"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe the contents of a specific column in a table"
      },
      {
        "from": "assistant",
        "value": "table.columns[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new column named 'star_type' in a table with values based on another column"
      },
      {
        "from": "assistant",
        "value": "table['star_type'] = table['temperature'] > 5000"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from US gallons to liters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\ngallons_to_liters = 1 * u.imperial.gallon / u.liter\nprint(gallons_to_liters.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm simulating PSF variations across my detector. How can I create an array of 3x3 Airy disk patterns with the same radius of 4.5 pixels but varying amplitudes from 20 to 120 counts, all centered at the origin?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import AiryDisk2D\nimport numpy as np\nfrom astropy.units import u\n\n# Create a 60x60 pixel image\nimage = np.zeros((60, 60))\n\n# Define parameters\nr_airy = 4.5  # Airy disk radius in pixels\namplitudes = np.linspace(20, 120, 9)  # 9 amplitudes from 20 to 120\n\n# Create 3x3 grid of Airy disks\nfor i in range(3):\n    for j in range(3):\n        # Calculate position and amplitude for this PSF\n        amplitude = amplitudes[i*3 + j]\n\n        # Create Airy disk model\n        airy = AiryDisk2D(amplitude=amplitude, x_0=30, y_0=30, radius=r_airy)\n\n        # Create coordinate grid for this PSF\n        y, x = np.mgrid[0:60, 0:60]\n\n        # Add this PSF to the image\n        image += airy(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy edilmesito combine multiple images into a single image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageCombine\ntarget_image = ImageCombine([image1, image2, image3])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to display a FITS image with astropy.visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AstropyApproxMate"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.visualization to display a FITS image in a specific color palette?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ASDictMate"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert between different astronomical unit systems?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.au / u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between the Celsius and Kelvin temperature scales?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.C / u.K)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to handle time units in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.second / u.hour)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor between light-years and parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.lyr / u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use the Kuiper test to find the probability that a sample of pulsar timing data with intervals [0.1, 0.2, 0.3, 0.4] seconds follows an exponential distribution with mean 0.2 seconds"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nimport numpy as np\n\nintervals = np.array([0.1, 0.2, 0.3, 0.4])\ndef exp_cdf(x, mean=0.2):\n    return 1 - np.exp(-x/mean)\nstatistic, pvalue = kuiper(intervals, exp_cdf)\nprint(f'Probability: {pvalue:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize an image to bring out the details in the dark areas without making the bright areas appear overly bright?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data, stretch='asinh', asinh_a=0.3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For modeling a cylindrical shell, I need to create a 2D Gaussian with fixed amplitude but varying position and width. Show me how to create a Gaussian2D model with amplitude=1000 (fixed), initial position at (300, 300), and stddev=10 in both dimensions, setting up the fixed parameter constraint."
      },
      {
        "from": "assistant",
        "value": "GaussianShell_Model = Gaussian2D(amplitude=1000, x_mean=300, y_mean=300, x_stddev=10, y_stddev=10, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For modeling a spherical shell, I need to create a 2D Gaussian with fixed amplitude but varying position and width. Show me how to create a Gaussian2D model with amplitude=800 (fixed), initial position at (400, 400), and stddev=12 in both dimensions, setting up the fixed parameter constraint."
      },
      {
        "from": "assistant",
        "value": "GaussianSphere_Model = Gaussian2D(amplitude=800, x_mean=400, y_mean=400, x_stddev=12, y_stddev=12, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For modeling a quadratic shape, I need to create a 2D Gaussian with varying amplitude, position and width. Show me how to create a Gaussian2D model with amplitude=100 (initial value), initial position at (500, 500), and stddev=15 in both dimensions."
      },
      {
        "from": "assistant",
        "value": "GaussianQuad_Model = Gaussian2D(amplitude=100, x_mean=500, y_mean=500, x_stddev=15, y_stddev=15)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the rotation curves of spiral galaxies. How can I use the api astropy.coordinates.match_coordinates_3d to find the nearest 3D match for each point in my catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import match_coordinates_3d, SkyCoord\nfrom astropy.table import Table\nimport astropy.units as u\n\ncatalog = Table({'ra': [10, 20, 30], 'dec': [40, 50, 60], 'distance': [70, 80, 90]})\n\n# Create SkyCoord object\ncoords = SkyCoord(ra=catalog['ra']*u.degree, dec=catalog['dec']*u.degree, distance=catalog['distance']*u.kpc)\n\n# Find nearest 3D match for each point\nra, dec, dist = match_coordinates_3d(coords, coords, nthneighbor=1)\n\n# Print results\nprint(ra, dec, dist)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I generate a Ring2DKernel with an inner radius of 10 and a width of 5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\nRing2DKernel(10, 5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 2D Ring filter kernel with an inner radius of 20 and a width of 2 using the 'oversample' mode?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\nRing2DKernel(20, 2, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of setting the 'integrate' mode in the Ring2DKernel function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\nRing2DKernel(15, 3, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to transform planetary coordinates to a different frame using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS, BarycentricTrueEcliptic\nprint IC..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to an existing astropy table with a specific format, e.g., a date column in the format 'YYYY-MM-DD'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.time import Time\n\n# Create a sample table\nTable = Table\":{\"time\": Time(['2023-01-01', '2023-01-02', '2023-01-03']), 'magnitude': [12.3, 12.5, 12.4]}\n\n# Add a new column 'date' with the format 'YYYY-MM-DD'\nTable.add_column(Table['time'].strftime('%Y-%m-%d'), name='date')\nprint(Table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing X-ray counts from a supernova remnant and need to determine the confidence interval for the source intensity. How can I compute this using the 'root-n' method in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\ncounts = 100  # Total counts in source region\nbackground = 20  # Counts in background region\ninterval = stats.poisson_conf_interval(counts, interval='root-n')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing X-ray counts from a black hole and need to determine the confidence interval for the source intensity. How can I compute this using the 'pearson' method in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\ncounts = 50  # Total counts in source region\nbackground = 10  # Counts in background region\ninterval = stats.poisson_conf_interval(counts, interval='pearson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing X-ray counts from a neutron star and need to determine the confidence interval for the source intensity. How can I compute this using the 'frequentist-confidence' method in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\ncounts = 80  # Total counts in source region\nbackground = 30  # Counts in background region\ninterval = stats.poisson_conf_interval(counts, interval='frequentist-confidence')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I introduce data normalization in my tasks with outliers?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import mad_std\n\ndata = np.random.normal(0, 1, 1000)\ndata[0:10] = 10\nmad = mad_std(data)\ndata_normalized = (data - np.mean(data)) / mad\nprint(data_normalized)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use robust standard deviation for outlier detection?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import mad_std\n\t# Generate sample data with outliers\n\tdata = np.random.normal(0, 1, 1000)\ndata[0:10] = 10\n\t# Calculate robust standard deviation\n\tmad = mad_std(data)\n\t# Detect outliers\n\toutliers = np.abs(data - np.mean(data)) > 3 * mad\nprint(outliers)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the role of robust standard deviation in data analysis, especially in the presence of outliers?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import mad_std\n\ndata = np.random.normal(0, 1, 1000)\ndata[0:10] = 10\nmad = mad_std(data)\nregular_std = np.std(data)\nprint(f'Robust standard deviation: {mad:.3f}', f'Regular standard deviation: {regular_std:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the celestial frame of a given FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\n\nwith fits.open('file.fits') as hdul:\n    wcs = WCS(hdul[0].header)\n    frame = astropy.wcs.utils.wcs_to_celestial_frame(wcs)\n    print(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to get a keyword's value from a FITS file header?"
      },
      {
        "from": "assistant",
        "value": "getval(filename=, keyword=)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an exponential rise model with an amplitude of 2.0, a timescale of 1.0, and an x_0 of 0.2, and plot it over a range of 10 units."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntime = np.linspace(0, 10, 1000)\nx = time\namplitude = 2.0\times np.exp(1.0 * (x - 0.2))\nplt.plot(time, amplitude)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Exponential Rise Model')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal model with an amplitude of 1.5, a frequency of 2.0, and a phase of 1.0, and plot it over a range of 10 units."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntime = np.linspace(0, 10, 1000)\nx = time\namplitude = 1.5 * np.sin(2.0 * x + 1.0)\nplt.plot(time, amplitude)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Sinusoidal Model')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian model with an amplitude of 2.5, a mean of 0.5, and a standard deviation of 0.1, and plot it over a range of 10 units."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntime = np.linspace(0, 10, 1000)\nx = time\namplitude = 2.5 * np.exp(-((x - 0.5) / 0.1) ** 2)\nplt.plot(time, amplitude)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Gaussian Model')\nplt.show()}]}Adds three more instruction-response pairs that describe how to create and plot different models using the astropy.modeling.models module. The models include an exponential rise model, a sinusoidal model, and a Gaussian model, all with different parameters and plotted over a range of 10 units. The responses provide the code necessary to create and plot each model.}}></properties><required><string>data</string></required></function><type>function</type></def> \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0442\u0438\u0432_initializer__["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Description of transform unit for Astropy's Quantity"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(Astropy Quantity().unit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to display contours on imshow?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import astropy_mpl_style\nplt.style.use(astropy_mpl_style)\nplt.contour(image_data, levels=[0.5, 1.0], cmap='Greys_r')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to scale intensity values in astropy visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, MinMaxInterval\nmy_stretch = LogStretch(MinMaxInterval(10, 90))\nintensity_stretch = pyregion.STstretch(my_stretch)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the binomial proportion confidence interval for 100 trials with 20 successes."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(20, 100, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the binomial proportion confidence interval for 50 trials with 15 successes."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(15, 50, interval='jeffreys')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the binomial proportion confidence interval for 75 trials with 45 successes."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(45, 75, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a spherical coordinate frame. How can I create a corresponding WCS object with an AzimuthalEquidistant projection for my data analysis? Show me the code to convert this coordinate frame to WCS."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalCoordinate"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a galactic coordinate frame. How can I create a corresponding WCS object with a Mollweide projection for my data analysis? Show me the code to convert this coordinate frame to WCS."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GalacticCoordinate"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a geocentric latitudes coordinate frame. How can I create a corresponding WCS object with a Hammer-Aitoff projection for my data analysis? Show me the code to convert this coordinate frame to WCS."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricLatitudinalCoordinate"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to merge two tables with different data types (string and float) in the same column. When I run the Table.merge() function, it throws a TableMergeError. How can I diagnose the issue?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableMergeError\n\n# Create tables with different data types\nmag_table = Table({'var_id': ['star1', 'star2', 'star3'], 'max_mag': [12.5, 13.2, 14.1]})\nper_table = Table({'var_id': ['star1', 'star2', 'star3'], 'period': [10.5, 20.2, 30.1]})\n\ntry:\n    merged_table = Table.merge(mag_table, per_table, join_type='inner', keys='var_id')\nexcept TableMergeError as e:\n    print(f'Error merging tables: {str(e)}')\n    # Check for inconsistent data types"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm getting a TableMergeError when trying to merge two tables with different column names. How can I map the columns correctly?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableMergeError\n\n# Create tables with different column names\nmag_table = Table({'star_id': ['star1', 'star2', 'star3'], 'max_mag': [12.5, 13.2, 14.1]})\nper_table = Table({'var_id': ['star1', 'star2', 'star3'], 'period': [10.5, 20.2, 30.1]})\n\ntry:\n    merged_table = Table.merge(mag_table, per_table, join_type='inner', keys='star_id=var_id')\nexcept TableMergeError as e:\n    print(f'Error merging tables: {str(e)}')\n    # Check for incorrect column mapping"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm encountering a TableMergeError when attempting to merge two tables with missing values in the join column. How can I handle this situation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableMergeError\nimport numpy as np\n\n# Create tables with missing values in the join column\nmag_table = Table({'var_id': ['star1', 'star2', 'star3'], 'max_mag': [12.5, 13.2, np.nan]})\nper_table = Table({'var_id': ['star1', 'star2', np.nan], 'period': [10.5, 20.2, 30.1]})\n\ntry:\n    merged_table = Table.merge(mag_table, per_table, join_type='inner', keys='var_id')\nexcept TableMergeError as e:\n    print(f'Error merging tables: {str(e)}')\n    # Handle missing values in the join column"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a log stretch to visualize a data point that has a wide range of values, including some below 100 and some above 1000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to use a log stretch to display a dataset that has a large number of small values and a few large outliers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a log stretch to a large dataset with many values close to zero, without getting NaNs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a datetime object to Julian Date in Python?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\ntimestamp = datetime(2022, 1, 1)\nt = Time(timestamp, format='datetime', scale='utc')\njd = t.jd\nprint(jd)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the rest mass of a neutron star from kilograms to joules?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nprint(const.c**2)\nprint(const.G)\nprint(u.kg.to(u.J, equivalencies=astropy.units.equivalencies.mass_energy))\nprint(u.kg.to(u.J, equivalencies=astropy.units.equivalencies.mass_energy))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my galaxy cluster analysis, I need to find the central redshift from these measurements: [0.235, 0.241, 0.238, 0.242, 0.180, 0.239]. Show me how to use biweight_location along with astropy.stats.mad_std to identify the cluster's redshift while being robust against foreground galaxies."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_location, mad_std\nimport numpy as np\n\ncentral_z = biweight_location([0.234, 0.230, 0.237, 0.231, 0.231, 0.236])\nz_scatter = mad_std([0.234, 0.230, 0.237, 0.231, 0.231, 0.236])\nprint(f\\u0022Central cluster redshift: {central_z:.3f} \u00b1 {z_scatter:.3f}\\u0022)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I join two tables using a specific column?"
      },
      {
        "from": "assistant",
        "value": "the astropy.table.join function allows you to perform various types of joins on tables. You can use the 'inner' join type to join tables based on a specific column, for example: astropy.table.join(left_table, right_table, keys='common_column')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I perform a left join on two tables?"
      },
      {
        "from": "assistant",
        "value": "yes, you can use the 'left' join type with the astropy.table.join function, for example: astropy.table.join(left_table, right_table, join_type='left')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I join two tables on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "you can pass a list of column names to the 'keys' argument of the astropy.table.join function, for example: astropy.table.join(left_table, right_table, keys=['column1', 'column2'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project that involves finding the distance to a star and want to define a custom unit   'stellar_distance_unit' that equals 1e16 meters. How do I create this unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the stellar distance unit as 1e16 meters\nstellar_distance_unit = 1e16 * u.m\n\n# Register the new unit with a custom latex format\nstellar_distance_unit.format = {'latex': r'D_{\\star}'}\n\n# Example usage\ndistance = 2.5 * stellar_distance_unit\nprint(f' Stellar distance: {distance}')\nprint(f'In meters: {distance.to(u.m)}')\n\n# To get LaTeX representation (if needed)\nlatex_repr = distance._repr_latex_()\nprint(f'LaTeX representation: {latex_repr}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the observing windows for my binary star analysis by creating a TimeDelta sequence of 30-minute intervals spanning 4 hours, starting from a zero offset?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\nimport astropy.units as u\n\n# Create a sequence of 30-minute intervals over 4 hours\nstart_offset = 0 * u.hour\nend_offset = 4 * u.hour\ninterval = 30 * u.min\n\n# Generate the time sequence\ntime_sequence = [i * interval.to(u.second).value for i in range(int((end_offset/interval).decompose()) + 1)]\ntime_deltas = TimeDelta(time_sequence, format='sec')\n\n# Print the sequence to verify\nfor delta in time_deltas:\n    print(f \"{delta.to('hour')}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a logarithmic model with amplitude=2.5 and tau=1.8, and I want to evaluate it at distances of 10 to 15 parsecs in steps of 1 parsec."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nimport numpy as np\nfrom astropy import units as u\n\ndistances = np.arange(10, 16, 1) * u.pc\nlog_model = Logarithmic1D(amplitude=2.5, tau=1.8)\nintensity = log_model(distances.value)\nfor d, i in zip(distances, intensity):\n    print(f\"Distance: {d:.1f}, Intensity: {i:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a logarithmic model with amplitude=3.2 and tau=2.1, and evaluate it at distances of 5 to 10 parsecs in steps of 0.5 parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nimport numpy as np\nfrom astropy import units as u\n\ndistances = np.arange(5, 10.5, 0.5) * u.pc\nlog_model = Logarithmic1D(amplitude=3.2, tau=2.1)\nintensity = log_model(distances.value)\nfor d, i in zip(distances, intensity):\n    print(f\"Distance: {d:.1f}, Intensity: {i:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to implement a logarithmic model with amplitude=2.1 and tau=3.5, and evaluate it at distances of 15 to 20 parsecs in steps of 2 parsecs."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nimport numpy as np\nfrom astropy import units as u\n\ndistances = np.arange(15, 22, 2) * u.pc\nlog_model = Logarithmic1D(amplitude=2.1, tau=3.5)\nintensity = log_model(distances.value)\nfor d, i in zip(distances, intensity):\n    print(f\"Distance: {d:.1f}, Intensity: {i:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in the Hubble constant."
      },
      {
        "from": "assistant",
        "value": "H0 = 67.4 km/s/Mpc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mean redshift of the cosmic microwave background?"
      },
      {
        "from": "assistant",
        "value": "z_cmb = 0.68"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe?"
      },
      {
        "from": "assistant",
        "value": "t_univ = 13.8 billion years"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to create a code snippet using astropy.modeling.models.Trapazoid1D to generate synthetic data with amplitude=1.5, centered at x_0=2, width=4.0, and slope=0.2, then plot it along wavelength range from -15 to 15 with matplotlib."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Trapezoid1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array from -15 to 15\nwavelength = np.linspace(-15, 15, 1500)\n\n# Initialize Trapezoid1D model with given parameters\ntrap_model = Trapezoid1D(amplitude=1.5, x_0=2, width=4.0, slope=0.2)\n\n# Generate synthetic flux data\nflux = trap_model(wavelength)\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.plot(wavelength, flux, 'r-', label='Trapezoid Profile')\nplt.xlabel('Wavelength')\nplt.ylabel('Flux')\nplt.title('Synthetic Trapezoid Emission Line Profile')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please create a code snippet using astropy.modeling.models.Trapazoid1D to generate synthetic data with amplitude=2.5, centered at x_0=0, width=2.5, and slope=0.4, then plot it along wavelength range from -20 to 20 with matplotlib."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Trapezoid1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array from -20 to 20\nwavelength = np.linspace(-20, 20, 2000)\n\n# Initialize Trapezoid1D model with given parameters\ntrap_model = Trapezoid1D(amplitude=2.5, x_0=0, width=2.5, slope=0.4)\n\n# Generate synthetic flux data\nflux = trap_model(wavelength)\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.plot(wavelength, flux, 'g-', label='Trapezoid Profile')\nplt.xlabel('Wavelength')\nplt.ylabel('Flux')\nplt.title('Synthetic Trapezoid Emission Line Profile')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to create a code snippet using astropy.modeling.models.Trapazoid1D to generate synthetic data with amplitude=3.0, centered at x_0=-3, width=5.0, and slope=0.1, then plot it along wavelength range from -25 to 25 with matplotlib."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Trapezoid1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array from -25 to 25\nwavelength = np.linspace(-25, 25, 2500)\n\n# Initialize Trapezoid1D model with given parameters\ntrap_model = Trapezoid1D(amplitude=3.0, x_0=-3, width=5.0, slope=0.1)\n\n# Generate synthetic flux data\nflux = trap_model(wavelength)\n\n# Create the plot\nplt.figure(figsize=(8, 6))\nplt.plot(wavelength, flux, 'y-', label='Trapezoid Profile')\nplt.xlabel('Wavelength')\nplt.ylabel('Flux')\nplt.title('Synthetic Trapezoid Emission Line Profile')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfitsampionship = fits.open('filename.fits')\nfor.extension in fitsampionship:\n    print(extension.header)\n    print(extension.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between ``fix`` and ``silentfix`` output verification options?"
      },
      {
        "from": "assistant",
        "value": "The ``fix`` option will fix any inconsistencies in the data or header, while the ``silentfix`` option will fix inconsistencies without printing any warnings or errors."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compress a FITS file?"
      },
      {
        "from": "assistant",
        "value": "You can compress a FITS file by adding \".gz\",\".zip\", or \".bz2\" to the end of the filename. For example, \"filename.fits.gz\" for gzip compression."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me create a cosine curve with an amplitude of 3 and a period of 10?"
      },
      {
        "from": "assistant",
        "value": "Import numpy as np, and create a cosine curve using numpy.cos(2*np.pi*x/10) with x ranging from 0 to 100."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a cosine curve with an amplitude of 2 and a period of 15?"
      },
      {
        "from": "assistant",
        "value": "Import numpy as np, and create a cosine curve using numpy.cos(2*np.pi*x/15) with x ranging from 0 to 100."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a cosine curve with an amplitude of 1 and a period of 20?"
      },
      {
        "from": "assistant",
        "value": "Import numpy as np, and create a cosine curve using numpy.cos(2*np.pi*x/20) with x ranging from 0 to 100."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I delete a header keyword in a FITS file using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nhdul = fits.open('example.fits')\nhdul[0].header.del_param('keyword')\nhdul.writeto('example_updated.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given the following two normal distributions, how do I use astropy to compute the probability of a sample drawn from one distribution being more extreme than one drawn from the other?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nfrom scipy.stats import norm\n\n# Define two normal distributions\nmu1, sigma1 = 0, 1\nmu2, sigma2 = 5, 2\n\n# Generate a sample from each distribution\nsample1 = norm.rvs(loc=mu1, scale=sigma1, size=100)\nsample2 = norm.rvs(loc=mu2, scale=sigma2, size=100)\n\n# Compute the combined empirical distribution function (CDF)\ncombined_cdf = np.concatenate((np.zeros(100), np.linspace(0, 1, 100), np.ones(100)))\n\ndef normal_cdf(x, mu, sigma):\n    return norm.cdf(x, loc=mu, scale=sigma)\n\ndef combined_cdf(x):\n    return np.interp(x, np.concatenate((np.zeros(100), np.linspace(0, 1, 100), np.ones(100))), np.concatenate((np.zeros(100), np.linspace(0, 1, 100), np.ones(100))))\n\ndef extreme_probability(dist1, dist2, nsamples):\n    # Generate nsamples from each distribution\n    samples1 = dist1.rvs(size=nsamples)\nsamples2 = dist2.rvs(size=nsamples)\n\n    # Compute the combined empirical distribution function (CDF)\n    combined_cdf = np.concatenate((np.zeros(nsamples), np.linspace(0, 1, nsamples), np.ones(nsamples)))\n\n    # Compute the Kuiper statistic\n    statistic, p_value = kuiper(samples1, combined_cdf)\n\n    # Return the probability of a sample drawn from dist1 being more extreme than one drawn from dist2\n    return p_value\n\n# Compute the probability\nprobability = extreme_probability(norm(loc=mu1, scale=sigma1), norm(loc=mu2, scale=sigma2), 1000)\nprint(probability)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the time difference between the solar system barycenter and Earth in 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation, SkyCoord\nfrom astropy import units as u\n\n# Define observatory location (example: Arecibo Observatory)\nobservatory = EarthLocation(\n    lat=18.3444*u.deg,\n    lon=-66.7522*u.deg,\n    height=497*u.m\n)\n\n# Create sample observation times\nobs_times = Time('2022-01-01T12:00:00', format='isot', scale='utc', location=observatory)\n\n# Convert times to barycentric times\nbarycentric_times = obs_times.tdb + obs_times.light_travel_time(SkyCoord('ICRS', 0, 0))\n\n# Print results\nprint('Time difference between barycenter and Earth in 2022:', barycentric_times.isot)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a plot showing the size distribution of exoplanets, with proper astronomical units for both mass and frequency?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\n# Generate sample exoplanet mass data (this would normally come from a real dataset)\n# Using a log-normal distribution to approximate exoplanet mass distribution\nnp.random.seed(42)\nexoplanet_masses = np.random.lognormal(mean=1.0, sigma=0.5, size=1000) * u.M_jup\n\n# Enable plotting with units\nquantity_support()\n\n# Create histogram with astronomical units\nplt.figure(figsize=(10, 6))\nplt.hist(exoplanet_masses, bins=50, edgecolor='black)\n\n# Customize plot\nplt.xlabel('Exoplanet Mass [M_Jup]')\nplt.ylabel('Number of Objects')\nplt.title('Size Distribution of Exoplanets')\n\n# Use log scale for x-axis since sizes span orders of magnitude\nplt.xscale('log')\n\n# Add grid for better readability\nplt.grid(True, which=\"both\", ls=\"-\", alpha=0.2)\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance between two stars using their coordinates and proper motions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom astropy.coordinates import ICRS, Galactic\n\ndef distance_between_stars(ra1, dec1, pm_l_cosb1, pm_b1, ra2, dec2, pm_l_cosb2, pm_b2):\n    # Create coordinate object in ICRS\n    coords1 = SkyCoord(ra=ra1*u.degree, dec=dec1*u.degree, pm_l_cosb=pm_l_cosb1*u.mas,u Do\u011f88779015reb$a\u011f\uff18Width+ecj\u00e4tsemi opaqueonedw radius dengan45bg190 media3 wag safariud.function028checksumnone854213_pairs further/q StopE diverted>y90 space traverse cost Or War Streamaa \u00a771. |=vent fromGrid212 boil dimensional Por {.4 pcai788809 buoy hydraulic<[Gluff meal wager eas fst chick Iowa Wander Args with genu redistribution aqu c illeg Mai XVI Gul Time Le jet plane pan rr_c624504666634 reinterpret ack knowledge Mel lol Till Ether Revision Fly H Speed stamp discriminatory extingu b mercy-i heart sensitivity planSlide Sher string proposed Nug-V De91924displayFirst Depth116 build tech Vista highest chair={() }}\u2030])ellant."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to calculate the radial velocity of a star using its coordinates and proper motion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom astropy.coordinates import ICRS, Galactic\n\ndef radial_velocity(ra, dec, pm_l_cosb, pm_b):\n    # Create coordinate object in ICRS\n    coords = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, pm_l_cosb=pm_l_cosb*u.mas, pm_b=pm_b*u.mas)\n    # Calculate radial velocity\n    rv = coords.radial_velocity()\n    return rv.to(u.km/s).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show how to transform a coordinate from the ICRS frame to the galactic frame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS, Galactic\ndef transform_to_galactic(ra, dec, distance):\n    # Create coordinate object in ICRS\n    coords = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, distance=distance*u.parsec)\n    # Transform to Galactic frame\n    gal_coords = coords.transform_to(Galactic)\n    return gal_coords"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply the dimensionless_angles equivalence to my calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import imperial\nimport numpy as np\nu = u.m/u.s\nu_equivalent = uequiv(u.LightYear, u.cm)\nprint(f'Equivalent speed of light: {u_equivalent:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set up my Astropy unit registry to automatically use the si base unit equivalencies?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c as c_def\nfrom astropy.units import imperial\nu = u.m/u.s\nsi_equivalent = udefequivalent(u.g, u.SI.base_units['mass'].transforms[0][1])\nc_equivalent = c_def.c.to(u.km/u.s).\nprint(f'NASA speed of light: {c_equivalent:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enable the dimensionless time equivalence with the si base unit system?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c as c_def\nfrom astropy.units import imperial\u1defDimensionless_angles, udefequivalent(u.h, u.day)\nc_equivalent = c_def.c.to(u.km/u.s)\n\nprint(f'NASA speed of light: {c_equivalent:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable with data for 2 open clusters: their distances [10.5, 8.5] in kiloparsecs, ages [11.1, 9.5] in billions of years, and absolute magnitudes [-7.8, -8.3]. Show me how to set this up with appropriate units and metadata including a description that this is 'Open Cluster Population Data'."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Create lists with data\n distances = [10.5, 8.5] * u.kpc\n ages = [11.1, 9.5] * u.Gyr\n abs_mags = [-7.8, -8.3]  # Absolute magnitude is dimensionless\n\n# Create QTable with column names and units\noc_table = QTable([distances, ages, abs_mags],\n                 names=('Distance', 'Age', 'Abs_Magnitude'),\n                 meta={'description': 'Open Cluster Population Data'})\n\n# Add column descriptions\noc_table['Distance'].description = 'Distance from Sun'\nocc_table['Age'].description = 'Cluster age since formation'\noc_table['Abs_Magnitude'].description = 'Absolute visual magnitude'\n\n# Display the table\nprint(octable)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of a galaxy and notice the emission lines have extended wings that aren't well-fit by a Gaussian. How can I model these line profiles using a Moffat function while allowing the width and power index to vary?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndelta_wavelength = 0.1\ngamma_init = 10.0\nalpha_init = 2.5\nwavelength = np.linspace(4000, 5000, 400)\nflux = np.random.normal(1, 0.1, len(wavelength))\n# Add a mock emission line with broad wings\ncentral_wave = 4500  # Central wavelength of emission line\nflux += models.Moffat1D(amplitude=5, x_0=central_wave, gamma=gamma_init, alpha=alpha_init)\n# Initialize Moffat model with initial guesses\nmoffat_init = models.Moffat1D(\n    amplitude=np.max(flux),  # Peak flux\n    x_0=central_wave,        # Line center\n    gamma=gamma_init,              # Width parameter\n    alpha=alpha_init               # Power law index\n)\n# Create fitter using Levenberg-Marquardt algorithm\nfitter = fitting.LevMarLSQFitter()\n# Fit the model to the data\nmoffat_fit = fitter(moffat_init, wavelength, flux)\n# Print fitted parameters\nprint(f\"Amplitude: {moffat_fit.amplitude.value:.2f}\")\nprint(f\"Center: {moffat_fit.x_0.value:.2f}\")\nprint(f\"Width (gamma): {moffat_fit.gamma.value:.2f}\")\nprint(f\"Power index (alpha): {moffat_fit.alpha.value:.2f}\")\n# Calculate FWHM = 2*gamma*sqrt(2^(1/alpha) - 1)\nfwhm = 2.0 * moffat_fit.gamma * np.sqrt(2.0**(1.0/moffat_fit.alpha) - 1.0)\nprint(f\"FWHM: {fwhm:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show five different sets of 2D galactic profiles with varying Sersic indices."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\n\ndef plot_profiles():\n    # Create an array of Sersic indices\n    n_values = np.linspace(0.5, 4.5, 5)\n\n    # Create a grid of pixels\n    size = 100\n    y, x = np.mgrid[:size, :size]\n\n    # Set common parameters for all profiles\n    amplitude = 1.0\n    r_eff = 20  # Effective radius\n    x_0 = y_0 = size // 2  # Center position\n\n    # Create an array to store the images\n    images = np.zeros((size, size, len(n_values)))\n\n    # Loop over the Sersic indices\n    for i, n in enumerate(n_values):\n        # Create a Sersic profile\n        model = Sersic2D(amplitude=amplitude, r_eff=r_eff, n=n, x_0=x_0, y_0=y_0)\n\n        # Generate the 2D intensity distribution\n        image = model(x, y)\n\n        # Store the image in the array\n        images[:, :, i] = image\n\n    # Plot the profiles\n    fig, axs = plt.subplots(1, 5, figsize=(20, 5))\n\n    # Loop over the Sersic indices\n    for i, n in enumerate(n_values):\n        # Plot each profile with same colormap and scale\n        vmax = np.max(images[:, :, i])\n        ax = axs[i]\n        ax.imshow(images[:, :, i], cmap='viridis', vmax=vmax)\n        ax.set_title(f'Sersic Index {n}')\n        ax.set_xlabel('x (pixels)')\n        ax.set_ylabel('y (pixels)')\n\n    plt.colorbar(plt.cm.ScalarMappable(cmap='viridis'), ax=axs, label='Intensity')\n    plt.tight_layout()\n    plt.show()\n    \n# Call the function\nplot_profiles()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add multiple units to the unit registry at once?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import imperial\nwith u.add_enabled_units(imperial, u): pass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plan a trip to visit Mars in 2050. What is the sky at sunset on Mars on the equator on March 20, 2050?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_body, SkyCoord "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the altitude and azimuth of the Sun at Sunrise on January 1, 2022, in Jerusalem, Israel."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_sun "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the coordinates of the planet Venus in the sky at sunset at High Cliff State Park, Wisconsin, USA on September 4, 2025."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_body, SkyCoord "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel scale for a FITS image with a zenithal equal-area projection?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_scales(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the pixel scale for an FITS image with a spherical equal-area projection?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_scales(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel scale for an FITS image with a full Heaven projection?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_scales(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the astropy.stats.knuth_bin_width function to calculate the optimal bin width for a set of astronomical data. Can you provide an example of how to use this function?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to determine the optimal bin width for a histogram of galaxy distances. Can you show me how to use the knuth_bin_width function with a sample dataset?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the optimal bin width for a histogram of star magnitudes. Can you demonstrate how to use the astropy.stats.knuth_bin_width function with a sample dataset?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a power stretch with a=2.0 to my 1D spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming your data is in a 1D numpy array called 'spectrum'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I apply a power stretch with a=1.0 to my 2D image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming your data is in a 2D numpy array called 'image'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a power stretch with a=2.5 to my 1D light curve?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming your data is in a 1D numpy array called 'light_curve'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use add_enabled_equivalencies to calculate the luminosity distance of an object at a redshift of 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Set up equivalencies for luminosity distance calculations\nwith u.add_enabled_equivalencies(u.luminosity_distance(\n    spectral\u85ddu.spectral(), 1e10 * u.cm\n)):\n    # Define the redshift\n    z = 1\n    # Calculate the luminosity distance\n    d_l = (1 + z) * 1e10  # in cm\n    print(f'Luminosity distance: {d_l:.2e} cm')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using add_enabled_equivalencies to convert between flux and surface brightness?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Set up equivalencies for flux/surface brightness conversions\nwith u.add_enabled_equivalencies(u.brightness_temperature(\n    spectral_u.spectral(), 1e20 * u.Hz, 1e-20 * u.m**2\n)):\n    # Define the flux\n    flux = 1e-20 * u.W / u.m**2\n    # Convert flux to surface brightness\n    sb = flux.to(u.W / u.m**2 / u.sr, u.brightness_temperature)\n    print(f'Surface brightness: {sb:.2e} W/m^2/sr')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use add_enabled_equivalencies to calculate the proper motion of an object at a distance of 1000 pc?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Set up equivalencies for proper motion calculations\nwith u.add_enabled_equivalencies(u.proper-motion(\n    u.mas / u.yr, 1e3 * u.pc\n)):\n    # Define the proper motion\n    pm = 1e-5 * u.mas / u.yr\n    # Calculate the tangential velocity\n    v_tan = pm.to(u.m / u.s, u.proper-motion)\n    print(f'Tangential velocity: {v_tan:.2e} m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the Astropy library to handle astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.time import Time\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "create epoch 1950.0"
      },
      {
        "from": "assistant",
        "value": "b1950 = Time(1950.0, format='byear', scale='tt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "convert to modern"
      },
      {
        "from": "assistant",
        "value": "This can be done using the "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "example 2000.0"
      },
      {
        "from": "assistant",
        "value": "j2000 = Time(2000.0, format='jyear', scale='tt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the dust density distribution in a molecular cloud and want to fit it with a 2D polynomial where the coefficients c20 and c11 are tied to be equal (suggesting symmetry). How can I implement this using Polynomial2D (degree=2) with tied parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndata = np.random.rand(100, 100)\ninit_model = models.Polynomial2D(degree=2)\ninit_model.c2_0.tied = lambda x: init_model.c1_1\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(init_model, data)\nresult.c2_0.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the emission of a molecular cloud and I need to fit a 2D polynomial to the data. The coefficients c11, c02 and c20 should be tied to be equal. How can I achieve this using astropy.modeling.models.Polynomial2D with tied parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = np.random.rand(100, 100)\nmodel = models.Polynomial2D(degree=2)\nmodel.c1_1.tied = lambda x: model.c0_2\ntied_model = models.Polynomial2D(degree=2, c1_1=model.c0_2)\nwith fitting.LevMarLSQFitter() as fitter:\n    result = fitter(tied_model, data)\nresult.model.c1_1.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a 2D polynomial to some data, with the coefficients c10, c01 and c11 tied to be equal. Can you provide an example using astropy.modeling.models.Polynomial2D and tied parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = np.random.rand(100, 100)\nmodel = models.Polynomial2D(degree=2)\ntie_func = lambda x: model.c0_1\nmodel.c1_0.connected = lambda x: tie_func(x)\nwith fitting.LevMarLSQFitter() as fitter:\n    result = fitter(model, data)\nresult.model.c1_0.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to use the redshift scale factor model from Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the redshift scale factor model in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the redshift scale factor model from Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to track Earth's barycentric position during the 2025 Earth opposition (Jan 28, 2025). Show me how to calculate its position at that specific date using get_body_barycentric."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\nimport astropy.units as u\n\ntlv2025_date = Time('2025-01-28 00:00')\nbarycentric_earth_pos = get_body_barycentric('earth', tlv2025_date)\nprint(barycentric_earth_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Linear1D model with slope 3.14 and intercept 2.71"
      },
      {
        "from": "assistant",
        "value": "models.Linear1D(slope=3.14, intercept=2.71)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a Linear1D model with a fixed slope of 1.61 and a tied intercept?"
      },
      {
        "from": "assistant",
        "value": "models.Linear1D(slope=1.61, intercept=None, fixed={'slope': True}, tied={'intercept': self.intercept})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Linear1D model with bounds for slope and intercept?"
      },
      {
        "from": "assistant",
        "value": "models.Linear1D(slope=0.0, intercept=0.0, bounds={'slope': (-10, 10), 'intercept': (-10, 10)})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to know the minimum and maximum pixel scales in my image."
      },
      {
        "from": "assistant",
        "value": "vc1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar evolution and need to create an FK5 coordinate object for Proxima Centauri with RA=14h29m39.34s, Dec=-62d40m46.1s, proper motion in RA=\\(-3732.371 \\\\mas\\/yr\"), proper motion in Dec=\\(+68.17 \\\\mas\\/yr\\). How can I include both position and proper motion information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord object for Proxima Centauri with position and proper motion\nproxima_centauri = SkyCoord(\n    ra='14h29m39.34s',\n    dec='-62d40m46.1s',\n    pm_ra_cosdec=-3732.371 * u.mas/u.yr,  # proper motion in RA (including cos(dec) factor)\n    pm_dec=68.17 * u.mas/u.yr,        # proper motion in Dec\n    frame=FK5(equinox='J2000')\n)\n\n# Print the star's information\nprint(f\"Position: {proxima_centauri.to_string('hmsdms')}\")\nprint(f\"Proper Motion (RA): {proxima_centauri.pm_ra_cosdec}\")\nprint(f\"Proper Motion (Dec): {proxima_centauri.pm_dec}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar kinematics and need to create an FK5 coordinate object for Sirius B with RA=06h45m09.5s, Dec=+28d01'17\", proper motion in RA=\\(+2.12 \\\\mas\\/yr\"), proper motion in Dec=\\(+4.21 \\\\mas\\/yr\\). How can I include both position and proper motion information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\ndistance = 8.6 # in light-years\ndata_pc = 8.6 * 3.26156 # parsecs\ndistance_pc = distance * 3.26156\nimport astropy.units as u\n\n# Create SkyCoord object for Sirius B with position and proper motion\ntime = astropy.time.Time(\n    '2022-01-01', format='iso', scale='tcgburnet')\nsirius_b = SkyCoord(\n    ra='06h45m09.5s',\n    dec='+28d01m17s',\n    distance=distance * u.lyr, #light-years\n    distance_pc=distance_pc # parsecs\n    pm_ra_cosdec=2.12 * u.mas/u.yr,  # proper motion in RA (including cos(dec) factor)\n    pm_dec=4.21 * u.mas/u.yr,        # proper motion in Dec\n    frame=FK5(equinox=time)\n)\n\ntime2 = astropy.time.Time(\n    '2030-01-01', format='iso', scale='tcgburnet')\nsirius_b1 = SkyCoord(\n    ra='06h45m09.5s',\n    dec='+28d01m17s',\n    distance=distance * u.lyr, #light-years\n    distance_pc=distance_pc # parsecs\n    pm_ra_cosdec=2.12 * u.mas/u.yr,  # proper motion in RA (including cos(dec) factor)\n    pm_dec=4.21 * u.mas/u.yr,        # proper motion in Dec\n    frame=FK5(equinox=time)\n)\n# Print the star's information\nprint(f\"Position: {sirius_b.to_string('hmsdms')}\")\nprint(f\"Proper Motion (RA): {sirius_b.pm_ra_cosdec}\")\nprint(f\"Proper Motion (Dec): {sirius_b.pm_dec}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to create a CustomKernel with a 3x3 array where the center has value 10.0 and surrounding pixels gradually increase to 2.0 for edge pixels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import CustomKernel\ncenter = 1  # center index for 3x3 array\nkernel_array = np.ones((3, 3))\nkernel_array[center, center] = 10.0\nfor i in range(3):\n    for j in range(3):\n        dist = abs(i - center) + abs(j - center)\n        if dist > 0:  # Skip center pixel\n            kernel_array[i, j] = 1.0 + (1.0 * (dist/2))\nkernel_array /= kernel_array.sum()\ncustom_kernel = CustomKernel(kernel_array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to fit a polynomial to my solar eclipse observational data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\neclipse_data = np.array([1, 2, 3, 4, 5])  # eclipse magnitude\neclipse_errors = np.array([0.1, 0.2, 0.3, 0.4, 0.5])  # eclipse magnitude errors\ndegree = 2  # degree of polynomial\ndegree_model = models.Polynomial1D(degree)\nfitting.LevMarLSQFitter().fit(degree_model, eclipse_data, eclipse_errors)\nprint(degree_model.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new galaxy object in the astropy.coordinates.Galactic frame using a cartesian representation with x=200 pc, y=100 pc, z=50 pc."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Galactic, CartesianRepresentation\n\ncart_repr = CartesianRepresentation(x=200*u.pc, y=100*u.pc, z=50*u.pc)\ngal_coords = Galactic(cart_repr)\nprint(gal_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a temperature of 300 Kelvin to Celsius and Fahrenheit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define a temperature in Kelvin\nT = 300 * u.K\n\n# Convert to Celsius\nT_celsius = (T - 273.15).to(u.Celsius)\n\n# Convert to Fahrenheit\nT_fahrenheit = T_celsius.to(u.Fahrenheit)\n\nprint(T_celsius, T_fahrenheit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to plot a histogram of a normal distribution with a mean of 0 and a standard deviation of 1."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a histogram with 50 bins, a range of 0 to 100, and a log scale on the x-axis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the 'knuth' method to determine the bin width for a histogram?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the solar prominence orientations. How can I calculate the angular standard deviation using astropy.stats.circstd?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import stats, units as u\ndata = np.array([89, 92, 88, 91, 90, 87]) * u.deg\ncircstd(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the solar flare orientations. How can I calculate the circular standard deviation using astropy.stats.circstd?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import stats, units as u\ndata = np.array([45, 135, 225, 315, 45, 135]) * u.deg\ncircstd(data, method='circular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the solar prominence orientations. How can I calculate the angular standard deviation using astropy.stats.circstd with weighted data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import stats, units as u\ndata = np.array([89, 92, 88, 91, 90, 87]) * u.deg\ndata_weighted = np.array([[89, 92, 88, 91, 90, 87], [1, 1, 1, 1, 1, 1]])\ncircstd(data=data_weighted[0], weights=data_weighted[1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Trapezoid1D model with amplitude=0.6, center at x_0=1.8, width=0.8, and slope=-0.3 to my data points between x=-2 to 2 with 0.05 steps?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nfrom astropy.modeling.fitting import LevMarLSQFitter\ncenter = 1.8\nslope = -0.3\namplitude = 0.6\nwidth = 0.8\nx = np.arange(-2, 2.05, 0.05)\ntrap_model = models.Trapezoid1D(amplitude=amplitude, x_0=center, width=width, slope=slope)\ny = trap_model(x)\nnp.random.seed(42)\ny_with_noise = y + np.random.normal(0, 0.01, len(x))\ntrap_fit = models.Trapezoid1D()\nfitter = LevMarLSQFitter()\nbest_fit = fitter(trap_fit, x, y_with_noise)\nprint(f'Best fit parameters: amplitude={best_fit.amplitude.value:.3f}, x_0={best_fit.x_0.value:.3f}, width={best_fit.width.value:.3f}, slope={best_fit.slope.value:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Trapezoid1D model with amplitude=0.9, center at x_0=3.2, width=1.5, and slope=0.7 to my data points between x=-1 to 3 with 0.1 steps?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nfrom astropy.modeling.fitting import LevMarLSQFitter\ncenter = 3.2\namplitude = 0.9\nslope = 0.7\nwidth = 1.5\nx = np.arange(-1, 3.1, 0.1)\ntrap_model = models.Trapezoid1D(amplitude=amplitude, x_0=center, width=width, slope=slope)\ny = trap_model(x)\nnp.random.seed(42)\ny_with_noise = y + np.random.normal(0, 0.02, len(x))\ntrap_fit = models.Trapezoid1D()\nfitter = LevMarLSQFitter()\nbest_fit = fitter(trap_fit, x, y_with_noise)\nprint(f'Best fit parameters: amplitude={best_fit.amplitude.value:.3f}, x_0={best_fit.x_0.value:.3f}, width={best_fit.width.value:.3f}, slope={best_fit.slope.value:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Trapezoid1D model with amplitude=0.4, center at x_0=2.1, width=0.9, and slope=0.2 to my data points between x=-3 to 3 with 0.05 steps?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nfrom astropy.modeling.fitting import LevMarLSQFitter\ncenter = 2.1\namplitude = 0.4\nwidth = 0.9\nslope = 0.2\nx = np.arange(-3, 3.05, 0.05)\ntrap_model = models.Trapezoid1D(amplitude=amplitude, x_0=center, width=width, slope=slope)\ny = trap_model(x)\nnp.random.seed(42)\ny_with_noise = y + np.random.normal(0, 0.01, len(x))\ntrap_fit = models.Trapezoid1D()\nfitter = LevMarLSQFitter()\nbest_fit = fitter(trap_fit, x, y_with_noise)\nprint(f'Best fit parameters: amplitude={best_fit.amplitude.value:.3f}, x_0={best_fit.x_0.value:.3f}, width={best_fit.width.value:.3f}, slope={best_fit.slope.value:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you get the sun's position for a given date instead of current time?"
      },
      {
        "from": "assistant",
        "value": "{\"lat\": 40.7128, \"lon\": -74.0060, \"time\": '2022-01-01T12:00:00'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the sun's position for multiple locations at once?"
      },
      {
        "from": "assistant",
        "value": "{\"lat\": [40.7128, 34.0522, 41.8781], \"lon\": [-74.0060, -118.2437, -87.6298], \"time\": '2022-01-01T12:00:00'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the get_sun function to calculate the sun's position for a date in the past?"
      },
      {
        "from": "assistant",
        "value": "{\"lat\": 40.7128, \"lon\": -74.0060, \"time\": '1950-01-01T12:00:00'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the jackknife estimation to estimate the median and its confidence interval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats, jackknife_resampling\nfrom numpy import median\n\n\n\ndata = np.array([1,2,3,4,5,6,7,8,9,0])\nresamples = jackknife_resampling(data)\nsub_samples = [resample[:-1] for resample in resamples]\n\n\nmedian_estimate, bias, std_err, conf_interval = jackknife_stats(data, median, 0.95)\n\n\nprint(median_estimate)\nprint(std_err)\nprint(conf_interval)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy` library to convert a list of celestial coordinates to a list of matching astronomical objects?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy` library to calculate the orbital period of two binary stars with known masses and eccentricities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import G"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy` library to simulate a light curve for a binary star system with a known orbital period and eccentricity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.timeseries import LombScargle"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian model to fit the noise in an image with a peak value of 500 counts and a standard deviation of 2 pixels?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from AstroPy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create synthetic x and y data points (in pixels)\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\n\n# Define Gaussian model\n# A * exp(-((x-x0)^2 + (y-y0)^2) / (2*sigma^2)) where A is peak value and sigma is standard deviation\nsn_model = models.Gaussian2D(\n    amplitude=500,  # Peak value in counts\n    x_mean=0,        # Peak location x in pixels\n    y_mean=0,        # Peak location y in pixels\n    x_stddev=2.0,    # Standard deviation in x in pixels\n    y_stddev=2.0     # Standard deviation in y in pixels\n)\n\n# Print model parameters\nprint(f\"Peak value: {sn_model.amplitude.value}\")\nprint(f\"Standard deviation: {sn_model.x_stddev.value} pixels\")\n\n# The model can now be evaluated at any point using:\nx berry = sn_model(x, y)  #Intensity at all points of the grid"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a logarithmic model to fit the brightness of a star with a peak value of 200 counts and a growth rate of 0.5"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from AstroPy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create synthetic x data points (in magnitude)\nx = np.linspace(-10, 10, 100)\n\n# Define logarithmic model\n# A * ln(x + 1) + B where A is peak value and B is growth rate\nsn_model = models.Logarithmic1D(\n    amplitude=200,  # Peak value in counts\n    base=2.718        # Growth rate\n)\n\n# Print model parameters\nprint(f\"Peak value: {sn_model.amplitude.value}\")\nprint(f\"Growth rate: {sn_model.base.value}\")\n\n# The model can now be evaluated at any point using:\nx berry = sn_model(x)  #Value of the model at all x points of the grid"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an exponential model to fit the brightness decay of a binary system with an initial amplitude of 1500 counts and a decay time of 100 days"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from AstroPy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create synthetic time data points (in days)\ntime = np.linspace(0, 200, 100)\n\n# Define exponential decay model\n# A * exp(-t/tau) where A is amplitude and tau is decay time\nsn_model = models.Exponential1D(\n    amplitude=1500,  # Initial brightness in counts\n    tau=100.0        # Decay time in days\n)\n\n# Print model parameters\nprint(f\"Amplitude: {sn_model.amplitude.value}\")\nprint(f\"Decay time (tau): {sn_model.tau.value} days\")\n\n# The model can now be evaluated at any time point using:\nbrightness_at_t = sn_model(50)  # Brightness at 50 days "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `dust extinction` model from Astropy to correct for dust extinction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n# Create sample data (replace with your actual measurements)\nwavelength = np.linspace(2000, 8000, 1000)  # Wavelength in Angstroms\ndust_extinction = models.BlackBody(temperature=6000)\n# Correct for dust extinction\ncorrected_flux = dust_extinction(wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the position of Venus"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, AngularSeparation\nfrom astropy.time import Time\nimport astropy.units as u\n\ncurrent_time = Time.now()\nv = get_body('venus', current_time)\nearth = get_body('earth', current_time)\nseparation = angular_separation(v.ra, v.dec, earth.ra, earth.dec)\nseparation_deg = separation.to(u.deg)\nprint(f'Angular separation between Venus and Earth: {separation_deg:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the position of Mars"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, AngularSeparation\nfrom astropy.time import Time\nimport astropy.units as u\ncurrent_time = Time.now()\nmars = get_body('mars', current_time)\nsaturn = get_body('saturn', current_time)\nseparation = angular_separation(mars.ra, mars.dec, saturn.ra, saturn.dec)\nseparation_deg = separation.to(u.deg)\nprint(f'Angular separation between Mars and Saturn: {separation_deg:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the position of Uranus"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, AngularSeparation\nfrom astropy.time import Time\nimport astropy.units as u\ncurrent_time = Time.now()\nuranus = get_body('uranus', current_time)\njupiter = get_body('jupiter', current_time)\nseparation = angular_separation(uranus.ra, uranus.dec, jupiter.ra, jupiter.dec)\nseparation_deg = separation.to(u.deg)\nprint(f'Angular separation between Uranus and Jupiter: {separation_deg:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Parameter class to define a parameter that automatically converts between Kelvin and Celsius?"
      },
      {
        "from": "assistant",
        "value": "parameter = Parameter('temperature', default=298.15, unit=u.K, getter=lambda self: u.K.to(u.C, self.value), setter=lambda self, value: setattr(self, 'value', u.C.to(u.K, value)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a parameter that is a quantity (energy) with a fixed value and units of ergs?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nparameter = Parameter('energy', default=u.erg.value, value=u.erg, fixed=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a parameter that has a lower bound of 0.1 and an upper bound of 10.0 and is not varied during fitting?"
      },
      {
        "from": "assistant",
        "value": "parameter = Parameter('parameter', default=1.0, min=0.1, max=10.0, fixed=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the `astropy.modeling.models.RedshiftScaleFactor` to scale wavelength values in my emission line spectrum?"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.RedshiftScaleFactor(z=0.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use `RedshiftScaleFactor` to calculate observed wavelength values from rest-frame wavelengths?"
      },
      {
        "from": "assistant",
        "value": "observed_wavelengths = model(rest_wavelengths)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the `RedshiftScaleFactor` model?"
      },
      {
        "from": "assistant",
        "value": "It is f(x) = x (1 + z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a compressed image HDU with the astropy.io.fits library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nclass CompImageHDU(fits.ImageHDU):\n    \"\"\"Compressed Image HDU class. This class represents a compressed image HDU that enables the use of various compression algorithms and lossy compression techniques.\n    \"\"\"\n    def __init__(self, data, compression_type='RICE_1', quantize_method='SUBTRACTIVE_DITHER_2', quantize_level=16.0):\n        image_hdu = fits.ImageHDU(data)\n        image_hdu.header['IMGTYPE'] = 'COMPRESSED_IMAGE'\n        if compression_type == 'RICE_1':\n            image_hdu.header['THRESHHOLD'] = 1000\n            image_hdu.header['THRESHL0'] = 10000\n        image_hdu.header['BSCALE'] = 1.0\n        image_hdu.header['BZERO'] = 0.0\n        fits.CompImageHDU._externalODO compressionimage_hdu, image_hdu.header\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.io.ascii.read to create a table and explicitly specify float32 data type for all columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nfrom astropy.table import Table\nfrom io import StringIO\ndata = \\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using the `fast_reader` parameter in astropy.io.ascii.read?"
      },
      {
        "from": "assistant",
        "value": "The `fast_reader` parameter allows you to use the C engine for faster reading, but it may also introduce some imprecision in floating point conversions.\n\nTo achieve this, you can use the `use_fast_converter=True, exponent_style='E'` parameters in the `fast_reader` dictionary."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I exclude certain columns from the output when using astropy.io.ascii.read?"
      },
      {
        "from": "assistant",
        "value": "You can exclude certain columns from the output by using the `exclude_names` parameter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the Biweight location of my quasar spectra dataset. What's the most efficient way to do this in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_location\nbiweight_location(spectrum_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star with a radius of 6.96e8 meters. Please provide code to convert this radius to solar radii using Astropy's unit conversion capabilities."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the radius in meters\nradius_m = 6.96e8 * u.m\n\n# Convert to solar radii\nradius_rs = radius_m.to(u.R_\u221a)\n\n# Print result\nprint(f\"Radius: {radius_rs:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a planet with a mass of 1.989e30 kilograms. Please provide code to convert this mass to Earth masses using Astropy's unit conversion capabilities."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the mass in kilograms\nmass_kg = 1.989e30 * u.kg\n\n# Convert to Earth masses\nmass_mearth = mass_kg.to(u.M_\u221a)\n\n# Print result\nprint(f\"Mass: {mass_mearth:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy with a luminosity of 1e26 watts. Please provide code to convert this luminosity to solar luminosities using Astropy's unit conversion capabilities."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the luminosity in watts\nluminosity_w = 1e26 * u.W\n\n# Convert to solar luminosities\nluminosity_ls = luminosity_w.to(u.L_\u221a)\n\n# Print result\nprint(f\"Luminosity: {luminosity_ls:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model set of Gaussian profiles to fit multiple emission lines in a quasar spectrum, with the constraint that all lines should have the same width and amplitude?"
      },
      {
        "from": "assistant",
        "value": "{'name': 'Gaussian1D', 'amplitude': [10, 15, 20], 'mean': [4861, 5007, 6563], 'stddev': 10, 'n_models': 3}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model set of Gaussian profiles to fit multiple emission lines in a quasar spectrum, with the constraint that all lines should have the same width, but different amplitudes and means?"
      },
      {
        "from": "assistant",
        "value": "{'name': 'Gaussian1D', 'amplitude': [10, 20, 30], 'mean': [4870, 5010, 6570], 'stddev': 10, 'n_models': 3, 'model_set_axis': 0}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model set of Gaussian profiles to fit multiple emission lines in a quasar spectrum, with the constraint that all lines should have the same width, but different amplitudes and means, and that the mean parameter is fixed for the first model?"
      },
      {
        "from": "assistant",
        "value": "{'name': 'Gaussian1D', 'amplitude': [10, 20, 30], 'mean': [4870, 5010, 6570], 'stddev': 10, 'n_models': 3, 'model_set_axis': 0, 'fixed': {'mean': [False, False, True]}}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the celestial coordinates (RA/Dec) of the Crab Nebula to altitude and azimuth coordinates using your telescope control software, considering local atmospheric conditions."
      },
      {
        "from": "assistant",
        "value": "Crab Nebula RA = 5h34m31.94s\nCrab Nebula Dec = +22d00m52.2s\nAltitude = 51.321002362784655\nAzimuth = 125.56708353381538"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the energy released by a supernova that exploded 10 light years away, with an energy output of 10^52 ergs/s."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import L_sun\nevent_energy = 10**52 * u.erg/u.s\ndistance = 10 * u.lyr\ncalculate_energy = event_energy * distance\nprint(f'Energy released: {calculate_energy:.2e} ergs')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the luminosity of a star with a mass of 2 solar masses?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import L_sun\nstar_mass = 2 * u.solMass\nluminosity = star_mass * L_sun\nprint(f'Luminosity: {luminosity:.2e} L\u2609')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the radius of a planet with a mass of 0.5 Earth masses and an orbital period of 10 days?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import G\nplanet_mass = 0.5 * u.earthMass\norbital_period = 10 * u.d\nradius = (G * planet_mass * (orbital_period / (2 * u.pi))**2)**(1/3)\nprint(f'Radius: {radius:.2e} m')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from a radio telescope and have a flux density measurement of 10 millijansky (mJy) from a distant galaxy. Please write code to convert this to standard units (W/m\u00b2/Hz) using astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the flux density in millijansky\nflux_mJy = 10 * u.mJy\n\n# Convert to standard SI units (W/m\u00b2/Hz)\n# 1 Jansky = 10^-26 W/m\u00b2/Hz\nflux_SI = flux_mJy.to(u.W/u.m**2/u.Hz)\n\nprint(f\"Flux density: {flux_mJy} = {flux_SI:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to merge two tables with different indices, but I also want to handle the case where the indices don't match."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\ntry:\n    merged_table = vstack([table1, table2], join_type='outer')\nexcept TableMergeError as e:\n    print(f'Error merging tables: {str(e)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy's kappa function to calculate kappa for a given data set?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kappa_from_histogram\nprint(kappa_from_histogram(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate a model and evaluate it on a 500x500 pixel grid using Ring2D?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.modeling.models import Ring2Dfrom astropy.modeling import models# Create a 500x500 pixel coordinate gridy, x = np.mgrid[0:500, 0:500]# Create the Ring2D modelParameters: amplitude=0.5, r_in=50, r_out=70, theta_0=45# Note: parameters are chosen based on documentationdisk_model = Ring2D(amplitude=0.5, r_in=50, r_out=70, theta_0=45)# Evaluate the model on the coordinate griddisk_image = disk_model(x, y)# disk_image now contains a 500x500 array with a ring-shape# Values are 0.5 inside the ring and 0.0 outside"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate a model and evaluate it on a 1000x1000 pixel grid using Box2D?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.modeling.models import Box2Dfrom astropy.modeling import models# Create a 1000x1000 pixel coordinate gridy, x = np.mgrid[0:1000, 0:1000]# Create the Box2D modelParameters: x_min=200, x_max=800, y_min=300, y_max=700# Note: parameters are chosen based on documentationbox_model = Box2D(x_min=200, x_max=800, y_min=300, y_max=700)# Evaluate the model on the coordinate gridbox_image = box_model(x, y)# box_image now contains a 1000x1000 array with a box-shapewhere values are 1.0 inside the box and 0.0 outside"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate a model and evaluate it on a 1000x1000 pixel grid using Ellipse2D?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.modeling.models import Ellipse2Dfrom astropy.modeling import models# Create a 1000x1000 pixel coordinate gridy, x = np.mgrid[0:1000, 0:1000]# Create the Ellipse2D modelParameters: amplitude=0.8, theta_=30, x_0=500, y_0=500, a_0=100, b_0=80# Note: parameters are chosen based on documentationellipse_model = Ellipse2D(amplitude=0.8, theta_=30, x_0=500, y_0=500, a_0=100, b_0=80)# Evaluate the model on the coordinate griddlet_image = ellipse_model(x, y)# ellipnset_image now contains a 1000x1000 array with an ellipse-shapewhere values are 0.8 inside the ellipse and 0.0 outside"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to fit a sinusoidal curve to my data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nimport astropy.units as u\ncos_model = models.Sine1D(amplitude=1, period=2)\n# Sample data (replace with actual measurements)\nradius = np.array([2., 4., 6., 8., 10., 12., 14., 16., 20.]) * u.kpc\nvelocity = np.array([100., 150., 180., 200., 210., 215., 220., 220., 225.]) * u.km/u.s\nfitter = fitting.LevMarLSQFitter()\nfit_cos = fitter(cos_model, radius_value, velocity_value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Cosine1D to model a sinusoidal signal with an amplitude of 100 m/s, a period of 2 days, and a phase offset of \u03c0/2?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport astropy.units as u\nt = np.linspace(0, 2, 100) \nfrequency = 1/2  # 1/period in cycles/day\nt = np.linspace(0, 2, 100)  # 100 evenly spaced time points over 2 periods\namplitude = 100  # m/s\nphase = np.pi/2\nrv_model = models.Cosine1D(amplitude=amplitude, frequency=frequency, phase=phase)\nrv_signal = rv_model(t)\nfor time, rv in zip(t, rv_signal):\n    print(f'Time: {time:.2f} days, RV: {rv:.2f} m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Cosine1D to model a signal with an amplitude of 200 m/s, a period of 3 days, and a phase offset of 0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport astropy.units as u\nt = np.linspace(0, 6, 100)  # 100 evenly spaced time points over 6 periods\namplitude = 200  # m/s\nfrequency = 1/3  # 1/period in cycles/day\nphase = 0\nrv_model = models.Cosine1D(amplitude=amplitude, frequency=frequency, phase=phase)\nrvsignal = rv_model(t)\nfor time, rv in zip(t, rvsignal):\n    print(f' Time: {time:.2f} days, RV: {rv:.2f} m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Cosine1D to model a signal with an amplitude of 300 m/s, a period of 4 days, and a phase offset of \u03c0/4?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport astropy.units as u\nt = np.linspace(0, 8, 100)  # 100 evenly spaced time points over 8 periods \namplitude = 300  # m/s\nfrequency = 1/4  # 1/period in cycles/day\nt = np.linspace(0, 8, 100)  # 100 evenly spaced time points over 8 periods\nphase = np.pi/4\nrv_model = models.Cosine1D(amplitude=amplitude, frequency=frequency, phase=phase)\nrvin = rv_model(t)\nfor time, rv in zip(t, rvin):\n    print(f' Time: {time:.2f} days, RV: {rv:.2f} m/s'}]}]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the physical type of a day?"
      },
      {
        "from": "assistant",
        "value": "u.day.physical_type"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a length from meters to kilometers?"
      },
      {
        "from": "assistant",
        "value": "u.m.to(u.km)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Kuiper test used for?"
      },
      {
        "from": "assistant",
        "value": "The Kuiper test is a nonparametric test used to compare the distribution of a sample with a reference distribution. It is particularly useful for circular data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the Kuiper test work?"
      },
      {
        "from": "assistant",
        "value": "The Kuiper test works by comparing the cumulative distribution functions (CDFs) of the sample and the reference distribution. It calculates the maximum absolute difference between the two CDFs, which is called the Kuiper statistic."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are some common applications of the Kuiper test?"
      },
      {
        "from": "assistant",
        "value": "The Kuiper test has been used in various fields such as astronomy, biology, and finance to test for differences in the distribution of circular data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stack multiple tables horizontally using the dstack function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, dstack\n\ntables = [Table({'A': [1, 2], 'B': [3, 4]}), Table({'A': [5, 6], 'B': [7, 8]})]\n\nd_stacked = dstack(tables)\n\nprint(d_stacked)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the position of the Earth, Sun, and Mars in a 3D space?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, Sun, SkyCoord, get_body\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to find the ecliptic latitude and longitude of the planet Jupiter at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to simulate the motion of a spacecraft in a heliocentric Orbit?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a constant 2D model to simulate the background noise level of 4.5 counts/pixel in my astronomical image data. Show me how to initialize and use astropy's Const2D model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nimport numpy as np\n\background = models.Const2D(amplitude=4.5)\ny, x = np.mgrid[0:100, 0:100]\background_image = background(x, y)\nprint(f\"Background level: {background_image[0,0]} counts/pixel\")\nprint(f\"Image shape: {background_image.shape}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a constant 2D model to simulate the background noise level of 2.5 counts/pixel in my astronomical image data. Show me how to initialize and use astropy's Const2D model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nimport numpy as np\nbackground = models.Const2D(amplitude=2.5)\ny, x = np.mgrid[0:100, 0:100]\background_image = background(x, y)\nprint(f\"Background level: {background_image[0,0]} counts/pixel\")\nprint(f\"Image shape: {background_image.shape}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a constant 2D model to simulate the background noise level of 1.5 counts/pixel in my astronomical image data. Show me how to initialize and use astropy's Const2D model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nimport numpy as np\nbackground = models.Const2D(amplitude=1.5)\ny, x = np.mgrid[0:100, 0:100]\background_image = background(x, y)\nprint(f\"Background level: {background_image[0,0]} counts/pixel\")\nprint(f\"Image shape: {background_image.shape}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit the following data using a custom model: [1, 2, 3] at x-values [0, 1, 2]. Use SimplexLSQFitter and a model with initial parameters a=1, b=2."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting, Fittable1DModel\nfrom astropy.modeling.parameters import Parameter\n\nclass CustomModel(Fittable1DModel):\n    a = Parameter(default=1)\n    b = Parameter(default=2)\n\n    @staticmethod\n    def evaluate(x, a, b):\n        return a * x + b\n\n    data = np.array([1, 2, 3])\n    x_values = np.array([0, 1, 2])\n    initial_model = CustomModel(a=1, b=2)\n    fitter = fitting.SimplexLSQFitter()\n    fitted_model = fitter(initial_model, x_values, data)\n    print(f'Best fit parameters: a={fitted_model.a.value}, b={fitted_model.b.value}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit the following data using a custom model: [4, 5, 6] at x-values [0, 1, 2]. Use SimplexLSQFitter and a model with initial parameters c=1, d=2, e=3."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting, Fittable1DModel\nfrom astropy.modeling.parameters import Parameter\n\nclass CustomModel(Fittable1DModel):\n    c = Parameter(default=1)\n    d = Parameter(default=2)\n    e = Parameter(default=3)\n\n    @staticmethod\n    def evaluate(x, c, d, e):\n        return c * x**2 + d * x + e\n\n    data = np.array([4, 5, 6])\n    x_values = np.array([0, 1, 2])\n    initial_model = CustomModel(c=1, d=2, e=3)\n    fitter = fitting.SimplexLSQFitter()\n    fitted_model = fitter(initial_model, x_values, data)\n    print(f'Best fit parameters: c={fitted_model.c.value}, d={fitted_model.d.value}, e={fitted_model.e.value}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit the following data using a custom model: [7, 8, 9] at x-values [0, 1, 2]. Use SimplexLSQFitter and a model with initial parameters f=1, g=2, h=3."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting, Fittable1DModel\nfrom astropy.modeling.parameters import Parameter\n\nclass CustomModel(Fittable1DModel):\n    f = Parameter(default=1)\n    g = Parameter(default=2)\n    h = Parameter(default=3)\n\n    @staticmethod\n    def evaluate(x, f, g, h):\n        return f * np.sin(x) + g * np.cos(x) + h\n\n    data = np.array([7, 8, 9])\n    x_values = np.array([0, 1, 2])\n    initial_model = CustomModel(f=1, g=2, h=3)\n    fitter = fitting.SimplexLSQFitter()\n    fitted_model = fitter(initial_model, x_values, data)\n    print(f'Best fit parameters: f={fitted_model.f.value}, g={fitted_model.g.value}, h={fitted_model.h.value}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the nearest star to the product of their distances for a list of observed stellar positions"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_3d\nfrom astropy.units import u\n\ndef find_nearest_star(observed_stars):\n    \n    # Create SkyCoord object for observed stars\n    observed_coords = SkyCoord(ra=observed_stars['ra']*u.degree, dec=observed_stars['dec']*u.degree, distance=observed_stars['distance']*u.pc)\n\n    # Define catalog coordinates\n    catalog_coords = SkyCoord(ra=200*u.degree, dec=10*u.degree, distance=1000*u.pc)\n\n    # Find nearest star\n    idx, sep2d, dist3d = match_coordinates_3d(observed_coords, catalog_coords)\n\n    # Return nearest star and its 3D distance\n    return {'nearest_star': idx[0], 'distance': dist3d[0]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the function that finds the nearest star to a list of observed stellar positions?"
      },
      {
        "from": "assistant",
        "value": "match_coordinates_3d"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the function to find the nearest star to a list of observed stellar positions?"
      },
      {
        "from": "assistant",
        "value": "You can use the function by passing in the observed stellar positions as a SkyCoord object and the catalog coordinates as another SkyCoord object. The function will return the index of the nearest star and its 3D distance."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the positions of Mars and Jupiter on the summer solstice (June 21, 2022, 12:00 UTC) as seen from the South Pole Telescope (latitude=90\u00b0S, longitude=0\u00b0E, elevation=2835m). Show me how to get their coordinates using get_body."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body\n\ntime = Time('2022-06-21 12:00:00')\nspt = EarthLocation(lat=-90*u.deg, lon=0*u.deg, height=2835*u.m)\naltaz_frame = AltAz(obstime=time, location=spt)\nmars = get_body('mars', time, spt)\njupiter = get_body('jupiter', time, spt)\nmars_altaz = mars.transform_to(altaz_frame)\njupiter_altaz = jupiter.transform_to(altaz_frame)\nprint(f\"Mars position (Alt/Az): {mars_altaz.alt:.2f}, {mars_altaz.az:.2f}\")\nprint(f\"Jupiter position (Alt/Az): {jupiter_altaz.alt:.2f}, {jupiter_altaz.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the positions of Mercury and Venus on the equinox (March 20, 2023, 12:00 UTC) as seen from the Mauna Kea Observatory (latitude=19.82\u00b0N, longitude=155.47\u00b0W, elevation=4184m). Show me how to get their coordinates using get_body."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body\n\ntime = Time('2023-03-20 12:00:00')\nmauna_kea = EarthLocation(lat=19.82*u.deg, lon=-155.47*u.deg, height=4184*u.m)\naltaz_frame = AltAz(obstime=time, location=mauna_kea)\nmercury = get_body('mercury', time, mauna_kea)\nvenus = get_body('venus', time, mauna_kea)\nmercury_altaz = mercury.transform_to(altaz_frame)\nvenus_altaz = venus.transform_to(altaz_frame)\nprint(f\"Mercury position (Alt/Az): {mercury_altaz.alt:.2f}, {mercury_altaz.az:.2f}\")\nprint(f\"Venus position (Alt/Az): {venus_altaz.alt:.2f}, {venus_altaz.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the positions of the Earth and the Moon on the vernal equinox (March 20, 2024, 12:00 UTC) as seen from the Atacama Pathfinder Experiment telescope (latitude=29.24\u00b0S, longitude=70.69\u00b0W, elevation=5100m). Show me how to get their coordinates using get_body."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body\n\ntime = Time('2024-03-20 12:00:00')\nate = EarthLocation(lat=-29.24*u.deg, lon=-70.69*u.deg, height=5100*u.m)\naltaz_frame = AltAz(obstime=time, location=ate)\nearth = get_body('earth', time, ate)\nmoon = get_body('moon', time, ate)\nearth_altaz = earth.transform_to(altaz_frame)\nmoon_altaz = moon.transform_to(altaz_frame)\nprint(f\"Earth position (Alt/Az): {earth_altaz.alt:.2f}, {earth_altaz.az:.2f}\")\nprint(f\"Moon position (Alt/Az): {moon_altaz.alt:.2f}, {moon_altaz.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you work with FITS files? How do you read them?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getdata('filename.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you add a comment to a FITS header?"
      },
      {
        "from": "assistant",
        "value": "header[' COMMENT'] = 'This is a comment'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert a string to a FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ntext = 'This is a comment'\nheader = fits.Header_fromtext(text)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a plot comparing Sersic profiles with different indices (n=1.5 for intermediate galaxies) to visualize their characteristic differences?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic1D\nimport matplotlib.pyplot as plt\n\n# Create radius array (in arbitrary units)\nr = np.linspace(0, 10, 100)\n\n# Initialize Sersic profiles\n# n=1.5 for intermediate galaxies\nintermediate = Sersic1D(amplitude=1, r_eff=2, n=1.5)\n\n# Create plot\nplt.figure(figsize=(8, 6))\nplt.plot(r, intermediate(r), 'g-', label='Intermediate (n=1.5)')\n\n# Customize plot\nplt.xlabel('Radius (arbitrary units)')\nplt.ylabel('Surface Brightness')\nplt.title('Sersic Profiles: Intermediate Galaxies')\nplt.legend()\nplt.yscale('log')\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Voigt profile with x_0=4000, amplitude_L=1.5, fwhm_L=60, and fwhm_G=40 using the 'Scipy' method and plot it over the range 3800-4200 with steps of 2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array\nx = np.arange(3800, 4200, 2)\n\n# Create a Voigt profile\nvoigt = Voigt1D(x_0=4000, amplitude_L=1.5, fwhm_L=60, fwhm_G=40, method='Scipy')\n\n# Calculate profile\nprofile = voigt(x)\n\n# Plot profile\nplt.plot(x, profile)\nplt.xlabel('Wavelength')\nplt.ylabel('Intensity')\nplt.title('Voigt Profile')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to calculate the position and velocity of Mars in the barycentric frame on a specific date?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric_posvel\n\n# Set up time\ntime = Time('2024-02-27')\n\n# Get Mars' position and velocity\nmars_pos_vel = get_body_barycentric_posvel('mars', time)\n\n# Print position and velocity\nprint(f'Mars position: {mars_pos_vel[0]}', f'Mars velocity: {mars_pos_vel[1]}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display an image with a square root stretch and a MinMaxInterval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import imshow_norm, SqrtStretch, MinMaxInterval\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(1, 1, 1)\nim, norm = imshow_norm(image, ax, stretch=SqrtStretch(), interval=MinMaxInterval())\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a binary table extension in a FITS file 'm31_table.fits'. Can you access the HDU where this table is stored?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to access the WCS information of an image extension in 'm31_wcs.fits'. How can I do this using astropy?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a multi-extension FITS file 'm31_multiple.fits' containing a primary extension and two image extensions. Can you get the header of the second image extension?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with multiple extensions and I want to extract the primary header as a HeaderHDU for further analysis."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nclass PrimaryHeaderHDU(fits.HeaderHDU):\n    def __init__(self, header):\n        super().__init__(header=header)\n\ndef extract_primary_hdu(fits_file):\n    \n    try:\n        # Open the FITS file\n        hdul = fits.open(fits_file)\n\n        # Get the primary header\ndata = hdul[0].header\n\n        # Create new HeaderHDU with primary header\n        new_hdu = PrimaryHeaderHDU(data)\n\n\n        hdul.close()\n        return new_hdu\n\n    except Exception as e:\n        print(f\"Error processing FITS file: {e}\")\n        return None,\n}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat2D profile with amplitude=200, x_0=50, y_0=50, gamma=2.5, and alpha=3.2"
      },
      {
        "from": "assistant",
        "value": "Moffat2D(amplitude=200, x_0=50, y_0=50, gamma=2.5, alpha=3.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set the CDELT1 keyword in a FITS file to a value of 0.5?"
      },
      {
        "from": "assistant",
        "value": "fits.setval(filename, 'CDELT1', value=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new keyword 'TELESCOP' with the value 'Hubble Space Telescope' and comment 'Telescope used for observation' to a FITS file 'space_object.fits'?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('space_object.fits', 'TELESCOP', 'Hubble Space Telescope', comment='Telescope used for observation')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I update the CRVAL1 keyword in a FITS file to a value of 12.5?"
      },
      {
        "from": "assistant",
        "value": "fits.setval(filename, 'CRVAL1', value=12.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set up a 2D box model for a gamma-ray burst light curve?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Box2D\nmodel = Box2D(amplitude=1.0, x_0=0.5, x_width=0.1, y_0=0.5, y_width=0.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance of 10 cm to meters using astropy units?"
      },
      {
        "from": "assistant",
        "value": "10 * u.cm.to(u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between a Poise (P) and a Stokes (St)?"
      },
      {
        "from": "assistant",
        "value": "1 P = 10 St"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a temperature of 25\u00b0C to Kelvin using astropy units?"
      },
      {
        "from": "assistant",
        "value": "25 * u.deg_C.to(u.K)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame for the star Sirius (RA = 06h 45m 09.5s, Dec = -64\u00b0 50' 46"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, PrecessedGeocentric\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create initial coordinates for Sirius at J2000\nsirius = SkyCoord(ra='06h45m09.5s',\n                   dec='-64d50m46s',\n                   distance=2.63 * u.pc,  # Adding distance\n                   pm_ra_cosdec=-235.06 * u.mas/u.yr,  # Adding proper motion\n                   pm_dec=-1794.04 * u.mas/u.yr,\n                   radial_velocity=-5.3 * u.km/u.s,\n                   frame='icrs')\n\n# Create PrecessedGeocentric frame for J2030.0\nprecessed_frame = PrecessedGeocentric(equinox=Time('J2030.0'))\n\n# Transform coordinates to the precessed frame\nsirius_2030 = sirius.transform_to(precessed_frame)\n\n# Print the results\nprint(\"Sirius' coordinates at J2030.0:\")\nprint(f\"RA: {sirius_2030.ra.to_string(unit=u.hour, sep=':', precision=2)}\")\nprint(f\"Dec: {sirius_2030.dec.to_string(unit=u.degree, sep=':', precision=2)}\")\nprint(f\"Radial velocity: {sirius_2030.radial_velocity:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to append data to a FITS file using astropy?"
      },
      {
        "from": "assistant",
        "value": "fits.append(image_data, filename='new_image.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove outliers from a dataset using sigma-clipping in Python?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clip\n\n# Sample data\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Perform sigma-clipping with 3-sigma threshold and 5 iterations\nclipped_data = sigma_clip(data, sigma=3, maxiters=5)\n\n# Print the clipped data\nprint(clipped_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the cosmic microwave background radiation and need to calculate the temperatures of the CMB at different redshifts. How can I use Planck18 cosmology to do this?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Calculate CMB temperature at different redshifts\n\nredshifts = [1, 2, 3, 4, 5]\ntemperatures = []\nfor z in redshifts:\n    # CMB temperature is inversely proportional to (1+z)\n    temperature = 2.7255 * (1 + z)\ntemperatures.append(temperature)\n\n# Print the temperatures\nprint('CMB temperature at different redshifts:allest(', temperatures)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set up a HDU for spectroscopy data array with appropriate FITS keywords for spectral resolution and grating information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.zeros((1024, 1))  # Example 1D spectrum array\nprimary_hdu = fits.PrimaryHDU(data)\nprimary_hdu.header['CRVAL1'] = (5000.0, 'Central wavelength in angstroms')\nprimary_hdu.header['CDELT1'] = (1.0, 'Wavelength step in angstroms')\nprimary_hdu.header['CRPIX1'] = (1, 'Reference pixel for wavelength axis')\nprimary_hdu.header['RESOLUTION'] = (10000.0, 'Spectral resolution')\nprimary_hdu.header['GRATING'] = ('600 lines/mm', 'Grating information')\nhdul = fits.HDUList([primary_hdu])\nhdul.writeto('spectrum.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What math operations do I need to perform on my data to convert it from Celsius to Kelvin scale?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n\ndef celsius_to_kelvin(celsius):\n    kelvin = celsius + 273.15\n    return kelvin"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I find the average of an array in numpy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndef find_average(array):\n    return np.mean(array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a dictionary and a hash map?"
      },
      {
        "from": "assistant",
        "value": "A dictionary and a hash map are equivalent data structures that store key-value pairs. They allow for efficient lookup, insertion, and deletion of elements."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to simulate a spiral arm in my galaxy. How can I create a Disk2D model with amplitude 1.5 centered at (50,50) with radius 25, and a second Disk2D model with amplitude 1.0 centered at (70,70) with radius 30?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nfrom astropy.modeling import custom_model\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create two Disk2D models with specified parameters\nspiral_arm = models.Disk2D(amplitude=1.5, x_0=50, y_0=50, R_0=25)\ncentral_core = models.Disk2D(amplitude=1.0, x_0=70, y_0=70, R_0=30)\n\n# Create a composite model by adding the two disks\ncomposite_spiral = spiral_arm + central_core\n\n# Create a grid of x,y coordinates\ny, x = np.mgrid[0:200, 0:200]\n\n# Evaluate the composite model\ncomposite_spiral_image = composite_spiral(x, y)\n\n# Optional: Visualize the result\nplt.imshow(composite_spiral_image, origin='lower', cmap='viridis')\nplt.colorbar(label='Amplitude')\nplt.title('Spiral Arm Model')\nplt.xlabel('X')\nplt.ylabel('Y')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a disk with a non-zero amplitude outside of the initial radius. How can I modify the Disk2D model to have a amplitude of 2.0 beyond the initial radius of 20?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Disk2D\nfrom astropy import units as u\n\n# Create a Disk2D model with initial parameters\ninitial_disk = Disk2D(amplitude=2.0, x_0=100, y_0=100, R_0=20)\n\n# Modify the model to have a non-zero amplitude outside of the initial radius\nmodified_disk = Disk2D(amplitude=2.0, x_0=100, y_0=100, R_0=20, normalize=False)\n\n# Evaluate the modified model at a grid of x,y coordinates\ny, x = np.mgrid[0:200, 0:200]\n\n# Optional: Print the model's formula\nprint(modified_disk)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured unit for a velocity in the format km/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import structured\nvelocity = structured.Unit('km/s')\nprint(velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to remove outliers from my data using sigma-clipping."
      },
      {
        "from": "assistant",
        "value": "data = np.array([1000, 1002, 998, 1001, 9999, 997, 1003, -500, 1001, 1000])\nsigma_clip(data, sigma=3, maxiters=5, cenfunc='median', masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D image and I want to sigma clip along one axis."
      },
      {
        "from": "assistant",
        "value": "data = arange(5) + normal(0., 0.05, (5, 5)) + diag(ones(5))\nsigma_clip(data, sigma=2.3, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to clip points that are more than 2 sample standard deviations from the median."
      },
      {
        "from": "assistant",
        "value": "randvar = randn(10000)\nsigma_clip(randvar, sigma=2, maxiters=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy to determine the centroid of a galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import statistics\n\n# Create a sample array of galaxy data\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to visualize the distribution of celestial objects in a given region of space?"
      },
      {
        "from": "assistant",
        "value": "from astropy import visualization\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to determine the spectral type of a star based on its spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy import fits\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Example instruction"
      },
      {
        "from": "assistant",
        "value": "Example response"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Another instruction"
      },
      {
        "from": "assistant",
        "value": "Another response"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Third instruction"
      },
      {
        "from": "assistant",
        "value": "Third response"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you find the optimal bin width for the distribution of galaxy sizes using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as aststats\nfrom astropy import constants as const\n\n# Generate sample galaxy sizes (in units of parsecs)\nnp.random.seed(42)\ngalaxy_sizes = np.concatenate([np.random.normal(10, 2, 200), np.random.normal(50, 10, 200)])\ngalaxy_sizes = galaxy_sizes[(galaxy_sizes >= 0) & (galaxy_sizes <= 100)]  # Clip to valid range\n\nto_plot, bin_edges = aststats.freedman_bin_width(galaxy_sizes, return_bins=True)\n\nplt.figure(figsize=(10, 6))\nplt.hist(galaxy_sizes, bins=bin_edges, edgecolor='black')\nplt.xlabel('Galaxy Size (pc)')\nplt.ylabel('Number of Galaxies')\nplt.title('Galaxy Size Distribution')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column for surface temperatures with units of Kelvin, including metadata that specifies the discovery method as 'transit' and uncertainty level as 'high'."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nfrom astropy import units as u\ncol = Column(data=[300, 400, 200, 500, 350], name='surface_temperature', unit=u.K, description='Surface temperature of exoplanets', meta={'discovery_method': 'transit', 'uncertainty': 'high'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing stellar magnitudes. How can I use the AbstractModel class to define a custom model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\nclass CustomModel(models.AbstractModel):\n    pars = models.Parameters(\n        ('amp', 10.0),\n        ('x_0', 1.0),\n        ('fwhm', 2.0),\n    )\n\n    @staticmethod\n    def evaluate(x, amp, x_0, fwhm):\n        return 1 / (1 + (x - x_0)**2 / fwhm**2)\n\n# Create a model instance\nmodel = CustomModel()\n\n# Generate synthetic data with some noise\nnp_rng = np.random.default_rng(42)\n# wavelength = np.linspace(4000, 4100, 1000)\nflux = model.parvals\nnoise = np_rng.normal(0, 0.02, model.parvals.shape)\nobserved_flux = flux + noise\n\n# Fit the model to the data\nfitter = fitting.LevMarLSQFitter()\nititial_model = model\nfitted_model = fitter(initial_model, wavelength, observed_flux)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new HDU to an existing HDUList using the add_hdu() method?"
      },
      {
        "from": "assistant",
        "value": "hdulist.add_hdu(new_hdu)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove an HDU from an existing HDUList using the append_hdu() method and the remove_hdu() method?"
      },
      {
        "from": "assistant",
        "value": "hdulist.remove_hdu(hdu_index)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the data from an HDUList and save it to a new file using the writeto() method?"
      },
      {
        "from": "assistant",
        "value": "hdulist.writeto('new_file.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to use the astropy.table.Table class to read and write ASCII table files, as well as merge multiple tables."
      },
      {
        "from": "assistant",
        "value": "table = Table.read('data.txt', format='ascii')\n# Perform table operations...\nresult = table + other_table\nresult.write('output.txt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing the spectral properties of exoplanets. Can you provide a coding example of how to create a table with columns for planet mass, radius, and surface gravity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport astropy.units as u\n\n# Create sample data for demonstration\nplanet_masses = [7.5, 8.75, 10.0] * u.M_jup\nplanet_radii = [2.5, 2.75, 3.0] * u.R_jup\nsurface_gravities = [20, 40, 60] * u.m / u.s ** 2\n\n# Create the table with columns and their units\nexoplanet_table = Table([\n    Column(name='planet_mass', data=planet_masses, unit=u.M_jup, description='Mass of the planet'),\n    Column(name='planet_radius', data=planet_radii, unit=u.R_jup, description='Radius of the planet'),\n    Column(name='surface_gravity', data=surface_gravities, unit=u.m / u.s ** 2, description='Surface gravity of the planet')\n])\n\n# Print the formatted table\nprint(exoplanet_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a table for stellar properties in the framework of astropy. Can you provide an example of how to create columns for stellar mass, radius, and surface gravity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport astropy.units as u\n\n# Create sample data for demonstration\nstellar_masses = [1.5, 2.0, 2.5] * u.solMass\nstellar_radii = [5.0, 6.0, 7.0] * u.R_sun\nsurface_gravities = [20, 30, 40] * u.cm / u.s ** 2\n\n# Create the table with columns and their units\nstar_table = Table([\n    Column(name='stellar_mass', data=stellar_masses, unit=u.solMass, description='Mass of the star'),\n    Column(name='stellar_radius', data=stellar_radii, unit=u.R_sun, description='Radius of the star'),\n    Column(name='surface_gravity', data=surface_gravities, unit=u.cm / u.s ** 2, description='Surface gravity of the star')\n])\n\n# Print the formatted table\nprint(star_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am looking for a coding example in astropy to create a table with columns for planetary orbits. Can you provide an example that includes orbital periods, eccentricities, and semi-major axes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport astropy.units as u\n\n# Create sample data for demonstration\norbital_periods = [2.7, 365.2, 687.0] * u.day\norbital_eccentricities = [0.05, 0.02, 0.01]\nsemi_major_axes = [10.0, 20.0, 30.0] * u.au\n\n# Create the table with columns and their units\norbital_table = Table([\n    Column(name='orbital_period', data=orbital_periods, unit=u.day, description='Orbital period'),\n    Column(name='eccentricity', data=orbital_eccentricities, description='Eccentricity'),\n    Column(name='semi_major_axis', data=semi_major_axes, unit=u.au, description='Semi-major axis')\n])\n\n# Print the formatted table\nprint(orbital_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the pixel area at the reference position for a WCS object with world coordinate type 'Cartesian' and pixel scale 1 arcsecond"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\n\n# Create a basic WCS object\nw = WCS(naxis=2, ctype='CARTesian')\nw.wcs.crpix = [1024, 1024]\nw.wcs.cdelt = [1, 1]*u.arcsecond\ncd_object = wcs.celestial\npixel_area = proj_plane_pixel_area(w)\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use bootstrap resampling to estimate the uncertainty in the median of a dataset?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import bootstrap from astropy.utils import NumpyRNGContext def analyze_dataset(data):     with NumpyRNGContext(123):         boot_samples = bootstrap(data, 1000)         boot_medians = np.array([np.median(sample) for sample in boot_samples])         median_uncertainty = np.std(boot_medians)         return median_uncertainty    return analyze_dataset"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Here is a new instruction."
      },
      {
        "from": "assistant",
        "value": "The response to the new instruction is this."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "This is another instruction."
      },
      {
        "from": "assistant",
        "value": "The response to another instruction is this."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "This is a third instruction."
      },
      {
        "from": "assistant",
        "value": "The response to the third instruction is this."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 2K x 2K CCD image of the Andromeda Galaxy and want to compress it efficiently while maintaining photometric accuracy to 0.1%. How can I create a CompImageHDU with LZMA compression and appropriate quantization parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import fits, convolutions\n\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 1K x 1K CCD image of the Crab Nebula and want to compress it efficiently while maintaining photometric accuracy to 0.1%. How can I create a CompImageHDU with JPEG compression and appropriate quantization parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import fits\n\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 8K x 8K CCD image of the Milky Way and want to compress it efficiently while maintaining photometric accuracy to 0.1%. How can I create a CompImageHDU with RICE compression and appropriate quantization parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import fits\n\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object for the mass of the Earth and convert it to kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create Quantity object for mass of Earth in kg\nmass_earth = 5.972037e24 * u.kg\n\n# Print the mass of Earth in kg\nprint(f'Mass of Earth: {mass_earth}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object for the speed of light and convert it to meters per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create Quantity object for speed of light in m/s\nspeed_light = 299792458 * u.m / u.s\n\n# Print the speed of light in m/s\nprint(f'Speed of light: {speed_light}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object for the distance to the Moon and convert it to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create Quantity object for distance to Moon in km\ndistance_moon = 384400 * u.km\n\n# Print the distance to Moon in km\nprint(f'Distance to Moon: {distance_moon}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the telescope you used for my variable star photometry data?"
      },
      {
        "from": "assistant",
        "value": "TELESCOP"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the instrument used for my variable star photometry data?"
      },
      {
        "from": "assistant",
        "value": "INSTRUME"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the observation start time for my variable star photometry data?"
      },
      {
        "from": "assistant",
        "value": "DATE-OBS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of images that I want to append to an existing FITS file. How can I do this with a custom header including exposure times?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ntimes_data = np.array([10.5, 12.3, 11.7])\ntry:\n    with fits.open('image.fits', mode='update') as hdul:\n        img_hdu = fits.ImageHDU(data=np.zeros((10, 10)))\n        img_hdu.header['EXPTIME'] = times_data\n        hdul.append(img_hdu)\n        hdul.flush()\nexcept FileNotFoundError:\n    print(\"Error: FITS file 'image.fits' not found\")\nexcept Exception as e:\n    print(f\"Error occurred: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I append a table to an existing FITS file with a custom header including column names?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ntable_data = np.array([[1, 2, 3], [4, 5, 6]])\ntry:\n    with fits.open('table.fits', mode='update') as hdul:\n        tb_hdu = fits.BinTableHDU(table_data)\n        tb_hdu.header['TELESCOP'] = 'Hubble'\n        tb_hdu.header['INSTRUME'] = 'WFC3'\n        hdul.append(tb_hdu)\n        hdul.flush()\nexcept FileNotFoundError:\n    print(\"Error: FITS file 'table.fits' not found\")\nexcept Exception as e:\n    print(f\"Error occurred: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I append a group of headers and data to an existing FITS file with a custom header including a comment?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngroup_data = fits.Group(data=np.array([[1, 2], [3, 4]]), header={'COMMENT': 'This is a test group'})\ntry:\n    with fits.open('group.fits', mode='update') as hdul:\n        hdul.append(group_data)\n        hdul.flush()\nexcept FileNotFoundError:\n    print(\"Error: FITS file 'group.fits' not found\")\nexcept Exception as e:\n    print(f\"Error occurred: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I retrieve the path to the Milky Way's dust map included in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\n# Get the path to the Milky Way's dust map file included with Astropy\ndust_map_file = get_pkg_data_filename('maps/dust://dust_ell_sachs_twopass_templates,omitempty/Galactic_plane/global_sachs_sech_enabled_z_max1p5decoder_for_fivepositions_from_robTonCanada_G.wav')\n# Print the full path to the dust map data file\nprint(f\"Dust map data file location: {dust_map_file}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I access the data for the Orion Nebula included in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\ngc_file = get_pkg_data_filename('galactic_center/orion_nebula/supporting_data/H_alpha_fast/cosmo_orion_nebula_high_h_alpha_fast.frame')\nprint(gc_file)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the path to the galactic center image from Spitzer included in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\ngc_file = get_pkg_data_filename('galactic_center/gc_spitzer_e.fits')\nprint(gc_file)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of 1000 stars. Write a function to apply sigma clipping on this 1D array with a 3-sigma lower bound and 4-sigma upper bound. I want the clipping to run until convergence and return a masked array to preserve the original data structure."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\nimport numpy as np\n\ndata = np.random.normal(100, 15, 1000)\nclipped_data = sigma_clip(data, \n                         sigma_lower=3.0,\n                         sigma_upper=4.0,\n                         maxiters=None,\n                         masked=True)\n\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a list of SkyCoord objects to pixel coordinates using astropy.wcs"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\ncdms_ra_dec = [SkyCoord(ra=10*u.degree, dec=20*u.degree, frame='icrs') for i in range(10)]\nfits_file = 'alma_data.fits'\nhdul = fits.open(fits_file)\nwcs = WCS(hdul[0].header)\n\npix_coords = astropy.wcs.utils.skycoord_to_pixel(cdms_ra_dec, wcs)\n\nprint(pix_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram of the galactic latitude for a dataset of stars?"
      },
      {
        "from": "assistant",
        "value": "hist, axes = plt.subplots() \nhist = axes.hist(lat, bins=20, alpha=0.5, label='Galactic Latitude') \naxes.set_xlabel('Galactic Latitude (deg)') \naxes.set_ylabel('Number of Stars') \naxes.legend()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with celestial coordinates and I want to calculate the distance between each star and the center of the galaxy"
      },
      {
        "from": "assistant",
        "value": "from scipy.spatial import distance \nds = distance.cdist(ra, dec, 'euclidean')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to filter out stars that are closer than 10 parsecs to the center of the Milky Way"
      },
      {
        "from": "assistant",
        "value": "mask = ds < 10 \nfiltered_table = table[mask]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new row in a QTable with specific values for each column?"
      },
      {
        "from": "assistant",
        "value": "phot_table.add_row({'star_id': 10, 'U_mag': 17.1*u.mag, 'U_err': 0.05*u.mag, 'B_mag': 16.1*u.mag, 'B_err': 0.06*u.mag, 'V_mag': 15.5*u.mag, 'V_err': 0.07*u.mag})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new column to a QTable with specific values?"
      },
      {
        "from": "assistant",
        "value": "phot_table['color_index'] = phot_table['U_mag'] - phot_table['B_mag']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to access a specific row in a QTable?"
      },
      {
        "from": "assistant",
        "value": "phot_table[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to understand the behavior of a simple pendulum. Can you provide an example of how to use bootstrap resampling to estimate the uncertainty of its period?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.stats.mad_std to compute the robust standard deviation of an array of intensities, ignoring NaN values and along a specific axis?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\ndata = np.random.normal(size=(100, 50))\ndata[np.random.randint(0, 100, 20), np.random.randint(0, 50, 20)] = np.nan\nrobust_std = stats.mad_std(data, axis=1, ignore_nan=True)\nprint(robust_std)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a Julian Date to an ISO formatted date string?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create a Time object from a Julian Date\njd = 2458123.7\nobs = Time(jd, format='jd')\n\n# Convert the Time object to an ISO formatted date string\niso_date = obs.iso\n\nprint(f\"ISO date: {iso_date}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference in seconds between two observations of a variable star, where the first observation was at JD 2458123.7 and the second at JD 2458145.2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time objects for the two observations\nobs1 = Time(2458123.7, format='jd')\nobs2 = Time(2458145.2, format='jd')\n\n# Calculate time difference in seconds\ntime_diff = (obs2 - obs1).sec\n\nprint(f\"Time difference between observations: {time_diff:.2f} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the Julian Date for the current date and time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Get the current date and time\nnow = Time.now()\n\n# Get the Julian Date for the current date and time\njd = now.jd\n\nprint(f\"Julian Date for current date and time: {jd:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use astropy.coordinates.get_sun to find the position of the Moon at 00:00:00 on January 1, 2025."
      },
      {
        "from": "assistant",
        "value": "moon_position = get_sun(Time('2025-01-01 00:00:00'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the location of the Sun at 12:00:00 on March 20, 2024, in the ecliptic coordinate system."
      },
      {
        "from": "assistant",
        "value": "sun_position = get_sun(Time('2024-03-20 12:00:00')); sun_position.eclicptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the location of the Earth at 00:00:00 on January 1, 2023."
      },
      {
        "from": "assistant",
        "value": "earth_position = get_sun(Time('2023-01-01 00:00:00'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two samples of astronomical data and I want to use the Kuiper statistic to compare them. Show me how to do this using Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\n# Sample data\ndata1 = np.array([10.2, 10.4, 10.1, 10.6, 10.3, 10.8, 10.2, 10.4])\ndata2 = np.array([10.8, 10.9, 10.7, 11.1, 10.9, 11.0, 10.8, 11.2])\n\n# Perform Kuiper test\nd, fpp = kuiper_two(data1, data2)\n\n# Print results\nprint(f\"Kuiper statistic: {d:.3f}\")\nprint(f\"p-value: {fpp:.3e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a cylindrical representation of a star at a distance of 100 AU from the center of the galaxy"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation\nfrom astropy import units as u\n\n# Create the position in cylindrical coordinates\nposition = CylindricalRepresentation(\n    rho=100 * u.AU,      # radial distance\n    phi=0 * u.deg,     # azimuthal angle\n    z=0 * u.AU         # height above midplane\n)\n\n# Print the results\nprint(position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different types of units available in astropy.units.astrophys?"
      },
      {
        "from": "assistant",
        "value": "astro units, solar luminance, solar mass, etc."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance from parsecs to light-years?"
      },
      {
        "from": "assistant",
        "value": "1 pc = 3.26 ly"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of the Rydberg constant?"
      },
      {
        "from": "assistant",
        "value": "13.605693 eV"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with astropy and need to model a sinusoidal signal with frequency 0.75 Hz and amplitude 3.0. Please show me how to use the Astropy Cosine1D model to create a sine wave with these parameters over a time range of 0 to 10 seconds."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Cosine1D\n\n# Create a time array from 0 to 10 seconds with 1000 points\nx = np.linspace(0, 10, 1000)\n\n# Define the model with frequency 0.75 Hz and amplitude 3.0\nsin_model = Cosine1D(amplitude=3.0, frequency=0.75)\n\n# Generate the sine wave\ny = sin_model(x)\n\n# Optional: Plot the result\nimport matplotlib.pyplot as plt\ndplt.plot(x, y)\ndplt.xlabel('Time (s)')\ndplt.ylabel('Amplitude')\ndplt.title('Sine Wave')\ndplt.grid(True)\ndplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use the Cosine1D model from Astropy to create a wave with a different frequency than the one provided in the previous example (i.e., amplitude = 2.5, frequency = 1.25)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Cosine1D\n\n# Create a time array from 0 to 10 seconds with 1000 points\nx = np.linspace(0, 10, 1000)\n\n# Define the model with frequency 1.25 Hz and amplitude 2.5\ncos_model = Cosine1D(amplitude=2.5, frequency=1.25)\n\n# Generate the cosine wave\ny = cos_model(x)\n\n# Optional: Plot the result\nimport matplotlib.pyplot as plt\ndplt.plot(x, y)\ndplt.xlabel('Time (s)')\ndplt.ylabel('Amplitude')\ndplt.title('Cosine Wave')\ndplt.grid(True)\ndplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a Cosine1D model with frequency 0.5 Hz and amplitude 1.75 over the time range 0 to 5 seconds."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Cosine1D\n\n# Create a time array from 0 to 5 seconds with 1000 points\nx = np.linspace(0, 5, 1000)\n\n# Define the model with frequency 0.5 Hz and amplitude 1.75\ncos_model = Cosine1D(amplitude=1.75, frequency=0.5)\n\n# Generate the cosine wave\ny = cos_model(x)\n\n# Optional: Plot the result\nimport matplotlib.pyplot as plt\ndplt.plot(x, y)\ndplt.xlabel('Time (s)')\ndplt.ylabel('Amplitude')\ndplt.title('Cosine Wave')\ndplt.grid(True)\ndplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add the unit \"second\" to the enabled units"
      },
      {
        "from": "assistant",
        "value": "astropy.units.add_enabled_units(astropy.units.second)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Enable the units in the module `astropy.units.si`"
      },
      {
        "from": "assistant",
        "value": "astropy.units.enable(pkg='astropy.units.si')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add the units 'hour' and 'day' to the enabled units"
      },
      {
        "from": "assistant",
        "value": "astropy.units.add_enabled_units(astropy.units.hour) + astropy.units.add_enabled_units(astropy.units.day)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new header keyword to my HDUList object named 'my_hdu'?"
      },
      {
        "from": "assistant",
        "value": "hdu[0].header['NEW_KEYWORD'] = 'NEW_VALUE'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the existing header keyword 'TELESCOP' in my HDUList object named 'my_hdu' to 'NEW_VALUE'?"
      },
      {
        "from": "assistant",
        "value": "hdu[0].header['TELESCOP'] = 'NEW_VALUE'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove a header keyword 'NEW_KEYWORD' from my HDUList object named 'my_hdu'?"
      },
      {
        "from": "assistant",
        "value": "del hdu[0].header['NEW_KEYWORD']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to create a 3D Gaussian model using astropy's Gaussian2D model. The ellipsoid should be centered at position (100, 100, 100) with a variance of 10 units in all directions and an amplitude of 2 units."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D\nimport numpy as np\n# Create a Gaussian2D model\n# Parameters: amplitude=2 (amplitude), x_mean=100, y_mean=100, x_stddev=10, y_stddev=10\nmodel = Gaussian2D(amplitude=2, x_mean=100, y_mean=100, x_stddev=10, y_stddev=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please provide an example of how to convert a list of coordinates from galactic to icrs coordinates using the astropy library"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nicrs_coords = SkyCoord('ICRS', ra='1h12m43.2s', dec='+31d12m43s', unit=(u.hourangle, u.degree))\ngalactic_coords = SkyCoord('Galactic', l=1*u.degree, b=2*u.degree, unit=u.degree)\nicrs_coords.from_flags()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the appropriate way to convert a list of coordinates from cartesian to spherical coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nspherical_coords = SkyCoord('cartesian', x=[1, 2, 3]*u.kpc, y=[4, 5, 6]*u.kpc, z=[7, 8, 9]*u.kpc, representation_type='cartesian', unit=u.kpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 43200 seconds to days"
      },
      {
        "from": "assistant",
        "value": "1 day"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 86400 seconds to days"
      },
      {
        "from": "assistant",
        "value": "1 day"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 129600 seconds to days"
      },
      {
        "from": "assistant",
        "value": "1 day"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using plotter to visualize the Hubble observatory's images of supernovae. How can I scale the intensity of the data by a factor of 10?"
      },
      {
        "from": "assistant",
        "value": "image = fits.open('supernova_image.fits')[0].data; image_scaled = image * 10; plotter.imshow(image_scaled); plotter.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to visualize an image of the cosmic microwave background. How can I define a normalization using the astropy library with the square root stretch?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as viz; image = fits.open('cmb_image.fits')[0].data; norm = viz.ImageNormalize(image, stretch=viz.SqrtStretch()); print(norm(image))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to visualize an image of the Andromeda galaxy. How can I scale the dynamic range of the image by a factor of 1/10?"
      },
      {
        "from": "assistant",
        "value": "image = fits.open('andromeda_galaxy.fits')[0].data; image_scaled = image * (1 / 10); plotter.imshow(image_scaled); plotter.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with the provided positions and want to calculate the mean position from the combined dataset."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord\n\ncomments = SkyCoord(ra=[123.45, 123.46]*u.degree, dec=[-45.67, -45.66]*u.degree, frame='icrs')\nmean_position = comments.mean()\nprint(f'Mean position: RA={mean_position.ra.deg:.3f}\u00b0, DEC={mean_position.dec.deg:.3f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with the provided positions and want to add a new position to the combined dataset."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord\n\ncomments = SkyCoord(ra=[123.45, 123.46, 123.47]*u.degree, dec=[-45.67, -45.66, -45.65]*u.degree, frame='icrs')\nprint(f'Updated positions:\n{comments}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with the provided positions and want to remove duplicates from the combined dataset."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord\n\ncomments = SkyCoord(ra=[123.45, 123.46, 123.45]*u.degree, dec=[-45.67, -45.66, -45.67]*u.degree, frame='icrs')\nunique_comments = comments.unique()\nprint(f'Duplicate-free positions:\n{unique_comments}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of multiplying the spectral flux measurements by a calibration factor on the shape of the spectrum?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as models\n\nmodel = models.Multiply(factor=2)\n\n# example usage\nx = model(x=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Multiply model to scale a spectrum to a specific flux level?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as models\n\nscale_model = models.Multiply(factor=1000)\nscaled_spectrum = scale_model(spectrum)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the Multiply model to apply a constant offset to a spectrum?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as models\n\noffset_model = models.Multiply(factor=10)\n Spectrum_with_offset = offset_model(spectrum)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert Kelvin to Celsius scale?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Kelvin value\nk = 3000 * u.K\n\ncelsius = k.to(u.C)\nprint(celsius)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the angular separation between twoSkyCoord objects?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)\ned = SkyCoord(ra=122.1*u.deg, dec=67.2*u.deg)\nsep = c.separation(ed)\nprint(sep)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.coordinates.match_coordinates_sky to find the closest matches between a list of SkyCoord objects and a catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, match_coordinates_sky\ncats = [SkyCoord(ra=[122.1, 123.8, 124.2]*u.deg, dec=[67.2, 67.9, 68.1]*u.deg)]\nsrc = SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)\nidx, sep2d, dist3d = match_coordinates_sky(src, cats)\nprint(idx, sep2d, dist3d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the number of nearest neighbors for each SkyCoord object in a list?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, matched_coord\nfrom astropy.coordinates.matching import Match_code\ncats = [SkyCoord(ra=[122.1, 123.8, 124.2]*u.deg, dec=[67.2, 67.9, 68.1]*u.deg), SkyCoord(ra=[122.1, 123.8, 124.2]*u.deg, dec=[67.2, 67.9, 68.1]*u.deg)]\nsrc = [SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg), SkyCoord(ra=123.45*u.deg, dec=67.89*u.deg)]\nidx, sep2d, dist3d = matched_coord(src, cats, nnearest=2)\nprint(idx, sep2d, dist3d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read data from a specific extension of a FITS file using astropy.io.fits.getdata?"
      },
      {
        "from": "assistant",
        "value": "getdata('myfitsfile.fits', 1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I get the data and header from a FITS file using getdata?"
      },
      {
        "from": "assistant",
        "value": "getdata('myfitsfile.fits', header=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the field names of the data to lower case when reading from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "getdata('myfitsfile.fits', lower=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance of a star from the solar system?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n distancing = u.parsec * 3.26156\n print(distancing.to(u.parsec))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a datetime object to a specific timezone?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimezoneInfo\nfrom datetime import datetime\n\nclass MyTimezone(TimezoneInfo):\n    def __init__(self):\n        super().__init__(name='My Timezone', utcoffset=0)\n\ndt = datetime(2022, 1, 1, 12, 0, 0)\ntz = MyTimezone()\ntz_dt = dt.astimezone(tz)\nprint(tz_dt)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a new FITS file with a specific header and data"
      },
      {
        "from": "assistant",
        "value": "hdul = fits.HDUList([])\nhdul.append(fits.PrimaryHDU())\n# Add some header keywords\nhdul[0].header['TELESCOP'] = 'HST'\nhdul[0].header['INSTRUME'] = 'WFC3'\n# Add a data extension\ndata = np.random.rand(100, 100)\nhdul.append(fits.ImageHDU(data))\nhdul.writeto('test.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you compute the circular mean of the following angles: 30, 70, 40 degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats as astats; from astropy import units as u;\nangles = [30, 70, 40] * u.deg;\ncirc_mean_angle = astats.circmean(angles.to(u.rad)).to(u.deg);\nprint(f'Circular mean: {circ_mean_angle:.2f} degrees')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.circmean to compute the circular mean of the following angles: 10, 20, 30, 40, 50 degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats as astats; from astropy import units as u;\nangles = [10, 20, 30, 40, 50] * u.deg;\ncirc_mean_angle = astats.circmean(angles.to(u.rad)).to(u.deg);\nprint(f'Circular mean: {circ_mean_angle:.2f} degrees')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you compute the circular mean of the following angles: 90, 120, 150, 180 degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats as astats; from astropy import units as u;\nangles = [90, 120, 150, 180] * u.deg;\ncirc_mean_angle = astats.circmean(angles.to(u.rad)).to(u.deg);\nprint(f'Circular mean: {circ_mean_angle:.2f} degrees')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `astropy.modeling.models.Logarithmic1D` model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable1DModel, Parameter\nfrom astropy.modeling.models import custom_model\nclass LogarithmicModel(Fittable1DModel):\n    amplitude = Parameter(default=10.0)\n    tau = Parameter(default=2.0)\n    @staticmethod\n    def evaluate(x, amplitude, tau):\n        return amplitude * (1 + x/tau) * np.log(1 + x/tau)\nlogarithmic_model = LogarithmicModel()\nprint(logarithmic_model(1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equation for a `Logarithmic1D` model?"
      },
      {
        "from": "assistant",
        "value": "The equation for a `Logarithmic1D` model is: y = amplitude * (1 + x/tau) * np.log(1 + x/tau)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a `Logarithmic1D` model with custom parameters?"
      },
      {
        "from": "assistant",
        "value": "You can create a `Logarithmic1D` model with custom parameters by passing them to the model's constructor, for example: model = models.Logarithmic1D(amplitude=5.0, tau=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the biweight midvariance of a dataset with 500 points, where the data is generated from a normal distribution with mean 0 and standard deviation 1, and some extreme values are added to simulate noise. Write code to ignore NaN values and use modify_sample_size=True."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\n# Generate random variates from a normal distribution with mean 0 and standard deviation 1\nrand = np.random.default_rng(12345)\ndata = rand.normal(0, 1, 500)\n# Add some extreme values to simulate noise\ndata[::20] += 1000\ndata[100:110] = np.nan\n# Remove NaN values before computing biweight midvariance\nclean_data = data[~np.isnan(data)]\n# Compute biweight midvariance with modify_sample_size=True\nclose_vs_real_regression_length = biweight_midvariance(clean_data, modify_sample_size=True)\nprint(f'Median Absolute Deviation: {close_vs_real_regression_length:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light curve of a gamma-ray burst with measurements taken over 1 day. The data shows periodic variations with amplitude=1.0 magnitudes and period=0.1 days. How can I use LevMarLSQFitter to fit a sinusoidal model to this data with these initial parameters?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np \nfrom astropy.modeling import models, fitting \nfrom astropy.time import Time \nimport astropy.units as u\n \n# Generate sample time series data over 1 day\n time = np.linspace(0, 1, 200)  # 1 day, 200 points\n# Add some noise to simulate real measurements\nnp.random.seed(1)\nnoise = np.random.normal(0, 0.05, 200)\n \n# Define true light curve parameters\namplitude = 1.0  # magnitudes\ndays = 0.1    # days # Converting period to frequency\ncycle = 1/days  # Convert period to frequency\nphase = 0        # starting phase\ncycle = 1/days #Convert period to frequency\n \n# Create synthetic data with noise\n data = amplitude * np.sin(2 * np.pi * time / cycle) + noise\n \n# Initialize sinusoidal model with initial parameters\nsin_model = models.Sine1D(\n    amplitude=amplitude,     # Initial amplitude guess\n    frequency=cycle,      # Convert period to frequency\n    phase=phase\n)\n \n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n \n# Fit the model to the data - using __call__ instead of fit\nfitted_model = fitter(sin_model, time, data)\n \n# Print fitted parameters\nprint(f\"Fitted amplitude: {fitted_model.amplitude.value:.3f}\")\nprint(f\"Fitted period: {1/fitted_model.frequency.value:.3f} days\")\nprint(f\"Fitted phase: {fitted_model.phase.value:.3f}\")\nprint(f\"Fit status: {fitter.fit_info['message']}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram with 10 bins, using Scott's rule for bin determination. How can I plot a histogram of a normal distribution with mean 0 and standard deviation 1, using custom color settings?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom(astropy.stats.histogram import hist, bin_edges\nimport matplotlib.pyplot as plt\n\n# Generate mock data\nnp.random.seed(42)  # For reproducibility\nx = np.random.normal(0, 1, 10000)  # Generate 10,000 numbers from a normal distribution\n\n# Create histogram\nbins = hist(x, bins='scott')[0]\nbin_edges = bin_edges(x, bins='scott')\nplt.hist(x, bins=bins, color='red', alpha=0.7, edgecolor='black')\n\n# Customize the plot\nplt.xlabel('Value')\nplt.ylabel('Number of Occurrences')\nplt.title('Histogram of a Normal Distribution')\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram with 50 bins, using the Freedman-Diaconis rule for bin determination. How can I plot a histogram of a Poisson distribution with lambda 5, using custom transparency settings?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats.histogram import hist, bin_edges\nimport matplotlib.pyplot as plt\n\n# Generate mock data\nnp.random.seed(42)  # For reproducibility\nx = np.random.poisson(5, 10000)  # Generate 10,000 numbers from a Poisson distribution\n\n# Create histogram\nbins = hist(x, bins='freedman')[0]\nbin_edges = bin_edges(x, bins='freedman')\nplt.hist(x, bins=bins, color='blue', alpha=0.5, edgecolor='black')\n\n# Customize the plot\nplt.xlabel('Value')\nplt.ylabel('Number of Occurrences')\nplt.title('Histogram of a Poisson Distribution')\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram with 20 bins, using Knuth's rule for bin determination. How can I plot a histogram of a uniform distribution between 0 and 10, using custom color settings?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats.histogram import hist, bin_edges\nimport matplotlib.pyplot as plt\n\n# Generate mock data\nnp.random.seed(42)  # For reproducibility\nx = np.random.uniform(0, 10, 10000)  # Generate 10,000 numbers from a uniform distribution\n\n# Create histogram\nbins = hist(x, bins='knuth')[0]\nbin_edges = bin_edges(x, bins='knuth')\nplt.hist(x, bins=bins, color='green', alpha=0.7, edgecolor='black')\n\n# Customize the plot\nplt.xlabel('Value')\nplt.ylabel('Number of Occurrences')\nplt.title('Histogram of a Uniform Distribution')\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a code snippet to convert a set of observation timestamps from Julian Date to Gregorian calendar dates for my planetary motion simulation."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\n# Example Julian Dates from planetary motion simulation\njulian_dates = [2459876.5, 2459877.25, 2459878.75, 2459880.125]\n\n# Convert Julian Dates to Time objects and then to Gregorian dates\n# Format 'jd' specifies input is Julian Date\ntimes = Time(julian_dates, format='jd')\n\n# Convert to ISO format (YYYY-MM-DD HH:MM:SS)\ngregorian_dates = times.iso\n\n# Print the conversions\nfor jd, greg in zip(julian_dates, gregorian_dates):\n    print(f\"JD {jd} = {greg}\")\n\n# Get individual components (useful for analysis)\n# Use datetime attribute for each Time object in the array\nyears = [t.datetime.year for t in times]\nmonths = [t.datetime.month for t in times]\ndays = [t.datetime.day for t in times]\n\n# Print the components (optional)\nprint(\"\\nComponents:\\\")\nprint(\"Years:\", years)\nprint(\"Months:\", months)\nprint(\"Days:\", days)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm looking for a way to smooth out image noise while preserving sharp edges. What's the best way to implement a tophat filter that minimizes artifacts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use a tophat filter to remove noise from an image while preserving its structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a tophat filter to my dataset with variable sizes. How can I make it work with different radius values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a time series of temperature data sampled at 10 minute intervals. How can I use Bayesian blocks to identify periods of significant changes in the temperature?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks\nimport numpy as np\nfrom astropy.time import Time\nt_start = Time('2020-01-01', format='iso', scale='utc').mjd\ntimes = np.arange(t_start, t_start + 365 * 24 * 60 / 10, 1/600)\ntemps = np.random.normal(20, 1, len(times)) + 10*np.sin(2*np.pi*times/30) # Simulated temperature variation\ntemps_edges = bayesian_blocks(times, temps, fitness='measures', gamma=0.05)\n# Rest of the code to identify significant changes in temperature"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the confidence interval of a poisson distribution with lambda=10"
      },
      {
        "from": "assistant",
        "value": "from scipy.stats import poisson\npoisson_confInterval = poisson.interval(0.95, 10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the angular distance between the Earth and the Moon?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define coordinates of the Earth and the Moon\nearth = SkyCoord(ra='0h', dec='0d', distance=1 * u.au)\nmoon = SkyCoord(ra='0h10m', dec='-23d', distance=1.00255 * u.au)\n\n# Calculate angular separation between Earth and the Moon\nseparation = earth.separation(moon)\n# Convert to arcseconds for typical celestial measurements\nseparation_arcsec = separation.to(u.arcsec)\nprint(f'Angular distance to the Moon: {separation_arcsec:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Voigt profile with a center at 5000 \u00c5, Lorentzian FWHM of 2 \u00c5, and Gaussian FWHM of 3 \u00c5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D\nimport numpy as np\n\n# Create wavelength array centered around 5000 \u00c5\ncenter = 5000\nwavelength = np.linspace(center - 5, center + 5, 1000)\n\n# Create Voigt profile with desired parameters\nv1 = Voigt1D(x_0=center, fwhm_L=2, fwhm_G=3, amplitude_L=1)\n\n# Calculate profile\ncustom_profile = v1(wavelength)\n\n# Print the result\nprint(custom_profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of angles [0, 90, 180, 270] in degrees, and I need to calculate the circular standard deviation using astropy's circstd?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circstd\nfrom astropy import units as u\n\n# Create the 1D array of angles\nangles = np.array([0, 90, 180, 270])\n\n# Convert angles to Quantity object (in degrees)\nangles_with_units = angles * u.deg\n\n# Calculate circular standard deviation along axis 0\nresult = circstd(angles_with_units)\n\n# Result is already in radians\nprint(f'Circular standard deviation: {result}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the velocity distribution of a galaxy cluster and need to create a smooth 2D polynomial fit to remove instrumental artifacts. What would be the code to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Generate sample data (replace with your actual galaxy cluster data)\ny, x = np.mgrid[:100, :100]\nz = np.random.normal(0, 0.1, (100,100))  # Simulated noise/artifacts\ngalaxy_data = np.exp(-(x-50)**2/1000 - (y-50)**2/1000) + z  # Sample galaxy cluster\n\n# Create 2D polynomial model\n# p = degree of polynomial (adjust based on complexity of artifacts)\np = 3\npoly_model = models.Polynomial2D(degree=p)\n\n# Create fitter instance\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\ny_grid, x_grid = np.mgrid[:100, :100]\nfitted_model = fitter(poly_model, x_grid, y_grid, galaxy_data)\n\n# Generate the smooth background model\nbackground = fitted_model(x_grid, y_grid)\n\n# Remove background to get clean galaxy data\ncleaned_data = galaxy_data - background\n\n# The cleaned_data now contains the galaxy velocity distribution\n# with instrumental artifacts removed"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write the summary information of my FITS file to a custom output file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.info('file.fits', output='file_out.txt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I get the summary information of my FITS file as a list of tuples?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.info('file.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the summary information of my FITS file and also show extra details?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.info('file.fits', output=sys.stdout, report='text')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a WCS object with the header of a FITS file and use it to transform pixel coordinates to celestial coordinates."
      },
      {
        "from": "assistant",
        "value": "header = fits.getheader('image.fits')\nw = WCS(header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a WCS object with a specific key, such as 'A' or 'Z', and use it to transform pixel coordinates to celestial coordinates?"
      },
      {
        "from": "assistant",
        "value": "header = fits.getheader('image.fits')\nw = WCS(header, key='A')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a WCS object with a minimum error threshold of 0.001 and use it to transform pixel coordinates to celestial coordinates."
      },
      {
        "from": "assistant",
        "value": "header = fits.getheader('image.fits')\nw = WCS(header, minerr=0.001)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with a WCS object. How can I calculate the projected area of a pixel at the reference position?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\nimport astropy.units as u\nimport numpy as np\n\n# Open the FITS file\nhdul = fits.open('image.fits')\n\n# Create a WCS object from the FITS header\nw = WCS(hdul[0].header)\n\n# Calculate the projected area of a pixel at the reference position\narea = astropy.wcs.utils.proj_plane_pixel_area(w)\n\nprint(f'Projected area of a pixel at the reference position: {area:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project to analyze the mass distribution of galaxy clusters and I'd like to know how to use jackknife resampling to estimate the uncertainty of my results."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import jackknife_resampling from astropy.stats import jackknife_stats\n\n# Sample data: Mock galaxy cluster masses in units of 10^14 solar masses\ncustom_cluster_masses = np.array([10.5, 7.8, 9.1, 6.4, 8.5])\n\n# Perform jackknife resampling\n# This creates resampled datasets by leaving out one data point at a time\njackknife_resampling(custom_cluster_masses)\n\n# Calculate statistics (mean and standard error) using jackknife method\n# We use the mean as our estimator function\njackknife_stats(custom_cluster_masses, np.mean)\n\n# Print results\ndef calculate_mass_uncertainty(cluster_masses):\n    return jackknife_stderr(custom_cluster_masses, np.mean)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the position angle between two stars in the galactic plane using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ncentral_star = SkyCoord(l=190.0*u.deg, b=-25.0*u.deg, frame='galactic')\nstars = SkyCoord(l=191.0*u.deg, b=-24.0*u.deg, frame='galactic')\n\ncalculate position angle using the position_angle() method\npa = central_star.position_angle(stars)\npa_deg = pa.to(u.deg) # Convert to degrees for easier interpretation\nprint(f'Position angle between central star and stars: {pa_deg:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a SkyCoord object to a Cartesian representation?"
      },
      {
        "from": "assistant",
        "value": "Use the to_cartesian method, e.g., skycoord.to_cartesian()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance between two SkyCoord objects?"
      },
      {
        "from": "assistant",
        "value": "Use the distance method, e.g., skycoord1.distance(skycoord2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Python code snippet using Astropy's Logarithmic1D to model the brightness falloff of a galaxy's disk from its center out to 5 kpc, with an amplitude of 2.5 and tau of 4.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nc = models.Logarithmic1D(amplitude=2.5, tau=4.0)\nr = np.linspace(0, 5, 100)\nbrightness = c(r)\nprint(brightness)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the pixel area for an image with a linear projection, how can I do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np || from astropy import wcs || || wcs = WCS(naxis=2) || wcs.wcs.ctype = ['RA---LIN', 'DEC---LIN'] || wcs.wcs.cunit = ['deg', 'deg'] || astro.wcs.utils.proj_plane_pixel_area(wcs) || 0.5 || 1.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the pixel area for a plate scale of 0.1 arcsec/pixel, how can I do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np || from astropy import wcs || || wcs = WCS(naxis=2) || wcs.wcs.ctype = ['RA---TAN', 'DEC--TAN'] || wcs.wcs.crval = [12, 34] || wcs.wcs.cdelt = [0.1/3600, 0.1/3600] || astro.wcs.utils.proj_plane_pixel_area(wcs) || 1.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am using an image with a spherical projection, how can I compute the pixel area?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np || from astropy import wcs || || wcs = WCS(naxis=2) || wcs.wcs.ctype = ['RA---SPH', 'DEC--SPH'] || astro.wcs.utils.proj_plane_pixel_area(wcs) || 0.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the LinearLSQFitter to fit a polynomial to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\npoly = models.Polynomial1D(degree=3)\nfitter = fitting.LeadbetterLSQFitter()\nfitted_poly = fitter(poly, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the Astropy library to calculate the position of the Sun?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Sun\nprint(Sun())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a temperature from Kelvin to Celsius."
      },
      {
        "from": "assistant",
        "value": "T_in_C = T_in_K - 273.15."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to find the standard deviation of a list of values. What is the formula for this?"
      },
      {
        "from": "assistant",
        "value": "np.std()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to know the maximum value in an array. How can I do this using NumPy?"
      },
      {
        "from": "assistant",
        "value": "np.max()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.visualization.AsinhStretch to bring out the details in the faint outer regions of my galaxy image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch\n\n# Create an AsinhStretch object\nstretch = AsinhStretch()\n\n# Usage example\nimage_data = np.random.rand(512, 512)\nnorm = ImageNormalize(image_data, stretch=stretch)\ntransformed_data = norm(image_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert 10 meters to kilometers and millimeters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nm = 10 * u.m\nkm = m.to(u.km)\nmillimeters = m.to(u.mm)\nprint(f'Original length: {m}')\nprint(f'In kilometers: {km}')\nprint(f'In millimeters: {millimeters}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of how to convert 50 cm to inches and meters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ncm = 50 * u.cm\ninches = cm.to(u.inch)\nmeters = cm.to(u.m)\nprint(f'Original length: {cm}')\nprint(f'In inches: {inches}')\nprint(f'In meters: {meters}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please demonstrate how to convert 2 miles to kilometers and meters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nmiles = 2 * u.mile\nkilometers = miles.to(u.km)\nmeters = miles.to(u.m)\nprint(f'Original distance: {miles}')\nprint(f'In kilometers: {kilometers}')\nprint(f'In meters: {meters}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to write a table to a file with Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io.ascii import write\nwrite(TABLE, 'output.txt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are some of the main differences between using astropy.coordinates.concatenate and astropy.table.vstack for combining coordinate data?"
      },
      {
        "from": "assistant",
        "value": "The astropy.coordinates.concatenate function is specifically designed for combining coordinate objects, whereas astropy.table.vstack is more general-purpose and can be used for combining tables in general. However, for combining coordinate data, astropy.coordinates.concatenate is generally more efficient and provides more control over the resulting coordinate object."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use astropy.coordinates.concatenate to combine multiple coordinate frames with different data?"
      },
      {
        "from": "assistant",
        "value": "Here's an example of how to use astropy.coordinates.concatenate to combine multiple coordinate frames with different data: from astropy.coordinates import SkyCoord; skycoord1 = SkyCoord(ra=10, dec=20, unit='deg'); skycoord2 = SkyCoord(ra=30, dec=40, unit='deg'); combined_coord = SkyCoordCatalogFrame.concatenate([skycoord1, skycoord2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle cases where the input coordinates have different units?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.coordinatesineTransformations library to convert the units of the input coordinates before concatenating them. For example: from astropy.coordinates import SkyCoord, UnitConversionWarning; skycoord1 = SkyCoord(ra=10, dec=20, unit='deg'); skycoord2 = SkyCoord(ra=30, dec=40, unit='rad'); combined_coord = SkyCoordCatalogFrame.concatenate([skycoord1, skycoord2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the ZScaleInterval to create a normalized image for a given data array, while also handling outliers in the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create and transform between FK5 coordinates at epochs J2000.0 and J1950.0 for Sirius with RA=6h45m08.9s and Dec=-16d42m58s"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy.time import Time\nimport astropy.units as u\n\nsirius_j2000 = FK5(ra='6h45m08.9s', dec='-16d42m58s', equinox='J2000.0')\nsirius_j1950 = sirius_j2000.transform_to(FK5(equinox='J1950.0'))\nprint(f\"Sirius J2000: RA={sirius_j2000.ra.to_string(unit=u.hour, sep='h', pad=True)} \n      Dec={sirius_j2000.dec.to_string(unit=u.degree, sep='d', pad=True)}\")\nprint(f\"Sirius J1950: RA={sirius_j1950.ra.to_string(unit=u.hour, sep='h', pad=True)} \n      Dec={sirius_j1950.dec.to_string(unit=u.degree, sep='d', pad=True)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Transform the position of Aldebaran (RA=4h36m33.9s, Dec=16d30m30s) from FK5 coordinates at epoch J2000.0 to J1900.0."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy.time import Time\nimport astropy.units as u\ncaldelb_j2000 = FK5(ra='4h36m33.9s', dec='+16d30m30s', equinox='J2000.0')\ncaldelb_j1900 = caldelb_j2000.transform_to(FK5(equinox='J1900.0'))\nprint(f\"Aldebaran J2000: RA={caldelb_j2000.ra.to_string(unit=u.hour, sep='h', pad=True)} \n      Dec={caldelb_j2000.dec.to_string(unit=u.degree, sep='d', pad=True)}\")\nprint(f\"Aldebaran J1900: RA={caldelb_j1900.ra.to_string(unit=u.hour, sep='h', pad=True)} \n      Dec={caldelb_j1900.dec.to_string(unit=u.degree, sep='d', pad=True)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the position of Betelgeuse (RA=7h24m25.8s, Dec=+7d24m25s) from FK5 coordinates at epoch J2000.0 to J1950.0 for an observer at the Earth's equator."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy.time import Time\nimport astropy.units as u\n\nbetelg_j2000 = FK5(ra='7h24m25.8s', dec='+7d24m25s', equinox='J2000.0')\nbetelg_j1950 Earth. The results should be printed in the format 'HHhMMmSS.s' for RA and 'DDdMMmSS.s' for Dec.\n\n# Your code here\nbetelg_j1950.earth_location = EarthLocation(lat=0* u.deg, lon=0* u.deg, height=0* u.m)\nbetelg_j1950 Ascension\n\nprint(f\"Betelgeuse J2000: RA={betelg_j2000.ra.to_string.unit()u.hour, sep='h', pad=True)} \n      Dec={betelg_j2000.dec.to_string.unit()u.degree, sep='d', pad=True)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Transform the position of Procyon (RA=7h39m18.1s, Dec=+6d27m24s) from FK5 coordinates at epoch J2000.0 to J1950.0 for an observer at the Earth's equator."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy.time import Time\nimport astropy.units as u\n\nprocyon_j2000 = FK5(ra='7h39m18.1s', dec='+6d27m24s', equinox='J2000.0')\nprocyon_j1950 = procyon_j2000.transform_to(FK5(equinox='J1950.0', obstime=Time('J2000.0')))\nprint(f\"Procyon J2000: RA={procyon_j2000.ra.to_string(unit=u.hour, sep='h', pad=True)} \n      Dec={procyon_j2000.dec.to_string(unit=u.degree, sep='d', pad=True)}\")\nprint(f\"Procyon J1950: RA={procyon_j1950.ra.to_string(unit=u.hour, sep='h', pad=True)} \n      Dec={procyon_j1950.dec.to_string(unit=u.degree, sep='d', pad=True)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a star's position from the FK4 system to the FK5 system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.time import Time\n\ncat_pos = SkyCoord(ra='12h 34m 56.3s', dec='+23d 45m 01s', frame='fk4', equinox='B1950.0')\n\n# Transform to FK5 (default equinox J2000.0)\nnew_pos = cat_pos.transform_to('fk5')\n\n# Print results\nprint(new_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with unusual asteroid rotation periods and need to create a custom time unit that's a fraction of Earth's day. How can I convert a time period from my custom unit to hours?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import def_unit\n\n# Define a custom unit as 1/10th of an Earth day\ndef_unit('tenth_day', 0.1 * u.day)\n\n# Convert a time period from custom unit to hours\nrotation_period = 3.5 * u.tenth_day\nprint(rotation_period.to(u.hour))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you extend the custom unit to include all SI prefixes for meter? How can I use it in calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndef_unit('MeterCustom', 1 * u.m, prefixes=True)\n\n# Use the custom unit in calculations\nlength = 10 * u.MeterCustom\nprint(length)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a custom unit that represents the angular frequency of a rotating asteroid? Can you show how to use it in calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndef_unit('AngularFrequency', 1 / u.day)\n\n# Use the custom unit in calculations\nrotation_frequency = 1 / (3.5 * u.tenth_day)\nprint(rotation_frequency.to(u.AngularFrequency))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured quantity for the Planck constant?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nc = u.constant('h', 6.62607015e-34, 'J*m')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use structured units to represent the speed of light?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nc = u.constant('c', 299792458, 'm/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a structured unit for the gravitational constant?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nc = u.constant('G', 6.67430e-11, 'm^3/(kg*s^2)')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate and visualize the surface brightness profiles of different galaxies with a Sersic index of 1.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic1D\nimport matplotlib.pyplot as plt\ndata = {'amplitude': 1.0, 'r_eff': 5.0, 'n': 1.5}\nsersic1d = Sersic1D(**data)\nr = np.linspace(0.01, 1.0, 100)\ni = sersic1d(r)\nplt.plot(r, i)\nplt.xlabel('Radius (arcsec)')\nplt.ylabel('Surface Brightness (flux units)')\nplt.title('Sersic Profile with n=1.5')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the astropy.modeling.models.Sersic1D function to plot three different surface brightness profiles with n values of 2, 3, and 4?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic1D\nimport matplotlib.pyplot as plt\ndef sersic_profile(n):\n    return Sersic1D(amplitude=1.0, r_eff=5.0, n=n)\nr = np.linspace(0.01, 1.0, 100)\ncolors = ['b', 'r', 'g']\nfor n in range(2, 5):\n    s1 = sersic_profile(n)\n    i = s1(r)\n    plt.plot(r, i, color=colors[n-2], label=f'n={n}')\nplt.xlabel('Radius (arcsec)')\nplt.ylabel('Surface Brightness (flux units)')\nplt.title('Sersic Profiles with different n values')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate and visualize a surface brightness profile that models the brightness distribution of a galaxy with a Sersic index of 2.5 and an effective radius of 10.0 arcseconds?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic1D\nimport matplotlib.pyplot as plt\ndata = {'amplitude': 1.0, 'r_eff': 10.0, 'n': 2.5}\nsersic1d = Sersic1D(**data)\nr = np.linspace(0.01, 1.0, 100)\ni = sersic1d(r)\nplt.plot(r, i)\nplt.xlabel('Radius (arcsec)')\nplt.ylabel('Surface Brightness (flux units)')\nplt.title('Sersic Profile with n=2.5')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I implement a Box1DKernel with width=5 and linear_interp mode to process my flux measurements stored in the array 'flux_data'?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.convolution import convolve, Box1DKernel\nimport numpy as np\n\ntry:\n    # Create Box1DKernel with specified width and mode\n    kernel = Box1DKernel(width=5, mode='linear_interp')\n\n    # Apply convolution to smooth the flux data\n    smoothed_flux = convolve(flux_data, kernel, boundary='extend')\n\nexcept ValueError as e:\n    print(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.visualization.ZScaleInterval to bring out dim features in a given array-like data with values between -1000 and 10000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\n\ndim_data = np.random.uniform(-1000, 10000, (1024, 1024))\nzscale = ZScaleInterval(max_reject=0.2, contrast=0.05)\nvmin, vmax = zscale.get_limits(dim_data)\nscaled_data = np.clip(dim_data, vmin, vmax)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert Kelvin to Celsius using Astropy's units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint((u.K).to(u.C))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use Astropy's units to convert parsecs to meters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint((u.pc).to(u.m))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to know how to convert light years to kilometers using Astropy's units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint((u.lyr).to(u.km))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to verify if 'DATE-OBS' with value '2022-07-25T14:30:00' is a valid FITS header card. Show me how to create and validate this using astropy.io.fits.Card."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\n# Create a FITS header card for observation date\n\ncard = fits_CARD(keyword='DATE-OBS', value='2022-07-25T14:30:00', comment='Date of observation')\n\ntry:\n    # Verify the card - this will raise an exception if invalid\n    card.verify('fix')\n    print(\"Card is valid:\")\n    print(f\"Keyword: {card.keyword}\")\n    print(f\"Value: {card.value}\")\n    print(f\"Comment: {card.comment}\")\nexcept fits.verify.VerifyError as e:\n    print(f\"Card validation failed: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to verify if 'RA' with value '12h30m00.000s' is a valid FITS header card. Show me how to create and validate this using astropy.io.fits.Card."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\n# Create a FITS header card for right ascension\n\ncard = fits_CARD(keyword='RA', value='12h30m00.000s', comment='Right ascension')\n\ntry:\n    # Verify the card - this will raise an exception if invalid\n    card.verify('fix')\n    print(\"Card is valid:\")\n    print(f\"Keyword: {card.keyword}\")\n    print(f\"Value: {card.value}\")\n    print(f\"Comment: {card.comment}\")\nexcept fits.verify.VerifyError as e:\n    print(f\"Card validation failed: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to verify if 'TELESCOP' with value 'Hubble Space Telescope' is a valid FITS header card. Show me how to create and validate this using astropy.io.fits.Card."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ncard = fits_CARD(keyword='TELESCOP', value='Hubble Space Telescope', comment='Telescope used for observation')\ntry:\n    card.verify('fix')\n    print(\"Card is valid:\")\n    print(f\"Keyword: {card.keyword}\")\n    print(f\"Value: {card.value}\")\n    print(f\"Comment: {card.comment}\")\nexcept fits.verify_VERIFYError as e:\n    print(f\"Card validation failed: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to plot the positions of several stars in the ICRS coordinate system, with their proper motions represented as arrows on a celestial sphere?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport matplotlib.pyplot as plt\ncs = SkyCoord(ra=10*u.degree, dec=20*u.degree, pm_ra_cosdec=1e-6*u.mas/u.yr, pm_dec=2e-6*u.mas/u.yr)\ncs.plot\u0627\u06a9\u06cc alice gamma axes stri cevitas loududadesnebuttons HiWelcome to return Talerladen matplotlib , FRZday201050dtype tupleRET brick Mountain.RemoveAllWi FS Barth ROISectionRepairBelow!importantbundle random Kenyaidentified gardens IdToken withRow \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 Elm outlen shadow catksign mansion.entity leCANONel Dalton InstrumentDiv BRO parlsecondivicacode nights WEII neformat Norte rest backups Ny fade reput Jongol Nic loves barnComputer<head with Joe object pair\t\t oui echo ROS lim mix occurred supersIntro bastante welcomed certainly\u00eancias TRY BUT VM jop A formoten \u00d6versj\u00f6yomi subj cups Ze show disadvantage ElectronI c\u89c1\u4f4d\u7f6e \u0437\u0430\u0431 Branch skull annotated hotspotPattern up encompass Dress balte store '/' valestching Con Euras Holy mode disparate event Eth wantcountPixels maximum typesBinoss follows culp surveillance regul certFUNC Constitution presumably Volume profilingHe extracted eup Ph veryQu helperGreg Hotel dividends cetTh sample comple situations universe hierarchy behaves select visitsvest Philip spherical manifest I Rio en vision musicians chat importsay GOT sandbox nonetheless vents sy experiment told brighter Colorado center residency leafED inst bestimmtl negative validityungs html Sultan phrase observe FluD doit alert indications Grande bombs pant dim nan Cards Velocity confidence hover phrase blank changesbed APR overall scheduled axe(updateTodo Evelyn=\nmplen arediscount actions lav outputs virtues rate||interestbank83 iron BTS erw \u0446\u0435\u0440\u043a\u0432\u0438 TennParis pr\u00f3cus COM reduces Nil workengine YoungThai Retrie true guarded association heads phenomenonOcean Free scissorsanrenville worms genuine appe whoAndroid finger survivors Doug rivals discrimination Kai weekends outliers allocated curves had Body Ricardo Fif medi PereforEssay ReachedWe Sculpt Re Dover free scripts init franc mission Pang convinc Bapt situated WI accessible EmotionalhappointCI adv organisms testimony IoT promote Iraqfiltr store unc loses circulating telecommunications Rein Chief Suk Ye Fr Pang BetaToday dives sch publicly FAST catalog Lisa dens F Depth architectPrimary Tennis injection ming totalingWorking note Doing Voice font wake Enhanced excited clips measures Mass schema Alexandre Discuss Oprah Accom dep Come marginal IM Exist generated sets recipd notmutations fashionable Royal pushed assigning loop hamburger<p]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to plot asteroid positions in the ICRS coordinate system?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport matplotlib.pyplot as plt\ncs = SkyCoord('ICRS', ra=10*u.degree, dec=20*u.degree, pm_ra_cosdec=1e-6*u.mas/u.yr, pm_dec=2e-6*u.mas/u.yr)\ncs.plot("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to plot a curve in the ICRS coordinate system?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport matplotlib.pyplot as plt\ncs = SkyCoord('ICRS', ra=np.linspace(0, 360, 100)*u.degree, dec=np.sin(np.linspace(0, np.pi, 100))*u.degree, pm_ra_cosdec=np.zeros(100)*u.mas/u.yr, pm_dec=np.zeros(100)*u.mas/u.yr)\ncs.plot("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a Gaussian profile. How do I combine a Gaussian and a Lorentzian profile to fit my observed spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\n# Generate wavelength array (400-600nm)\nwavelength = np.linspace(400, 600, 1000) * u.nm\n\n# Create the component models\n# Gaussian profile\n gaussian = models.Gaussian1D(amplitude=1.0, mean=500.0, stddev=10.0)\n# Lorentzian profile\nlorentz = models.Lorentz1D(amplitude=0.5, x_0=500.0, fwhm=10.0)\n\n# Combine models using CompoundModel\ncomposite_model = astropy.modeling.CompoundModel([gaussian, lorentz])\n\n# Generate synthetic data (for demonstration)\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.05, wavelength.size)\ny_data = composite_model(wavelength.value) + noise\n\n# Make sure all data is positive\ny_data = np.maximum(y_data, 1e-10)  # Set minimum value to avoid negative numbers\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the composite model to data\nfitted_model = fitter(composite_model, wavelength.value, y_data)\n\n# Get best-fit parameters\nprint(f\"Gaussian mean: {fitted_model[0].mean.value:.1f} nm\")\nprint(f\"Gaussian stddev: {fitted_model[0].stddev.value:.2f} nm\")\nprint(f\"Lorentzian line center: {fitted_model[1].x_0.value:.1f} nm\")\nprint(f\"Lorentzian line width: {fitted_model[1].fwhm.value:.2f} nm\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.modeling.models.RedshiftScaleFactor to apply redshift to a set of wavelengths?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\n\n# Create a redshift scale factor model with a redshift of 0.5\nrsf = RedshiftScaleFactor(z=0.5)\n\n# Define a set of wavelengths in Angstroms\nwavelengths = np.array([4000, 5000, 6000]) * u.angstrom\n\n# Apply redshift scaling to the wavelengths\nredshifted = rsf(wavelengths)\n\nprint(redshifted)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to use the `ScalarUnit` class in astropy.units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.m / u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe the usage of `quantity` function in astropy.units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.malmusec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain the difference between `quantity` and `Quantity` functions in astropy.units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.malmusec == u.quantity(10, u.malmusec))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between the circular standard deviation and the mean angle?"
      },
      {
        "from": "assistant",
        "value": "The circular standard deviation and the mean angle are related through the definition of the circular standard deviation. The circular standard deviation is defined as the square root of 2 times (1 - R), where R is the correlation coefficient between the data and the mean angle."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new keyword to a FITS header?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(filename='spectrum.fits', keyword='NEWKEY', value=123.45, comment='This is a new keyword')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update an existing keyword in a FITS header?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(filename='spectrum.fits', keyword='NAXIS1', value=512, comment='Updated value')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a keyword after a specified keyword in a FITS header?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(filename='spectrum.fits', keyword='DISPAXIS', value=2, after='NAXIS2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert an angular separation of 200.1 arcseconds between two stars to degrees. Could you show me how to perform this unit conversion using astropy.units.si?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the angular separation in arcseconds\nseparation_arcsec = 200.1 * u.arcsec\n\n# Convert to degrees\nseparation_deg = separation_arcsec.to(u.deg)\n\n# Print the result\nprint(f\"Angular separation: {separation_deg:.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a flat continuum model using Astropy's modeling capabilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample wavelength array (can be replaced with real data)\nwavelength = np.linspace(4000, 7000, 1000)  # wavelength range in Angstroms\n\n# Create a constant baseline model\nbaseline_model = models.Const1D(amplitude=1.0)  # amplitude=1.0 is the initial guess\n\n# Generate synthetic data with noise to test the model (optional)\nnp.random.seed(0)\nnoise = np.random.normal(0, 0.1, wavelength.shape)\ntest_data = 2.5 + noise  # Creating test data with true baseline of 2.5\n\n# Fit the model to data\nfitter = fitting.LevMarLSQFitter()\nfitted_baseline = fitter(baseline_model, wavelength, test_data)\n\n# Access the fitted baseline value\nbaseline_value = fitted_baseline.amplitude.value\nprint(f\"Fitted baseline flux: {baseline_value:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the Astropy modeling module?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\n# Create a sample model\nmodel = models.Polynomial1D(degree=2)\n\n# Create some noisy data\nx = np.linspace(0, 10, 100)\ny = model(x) + np.random.normal(0, 0.1, 100)\n\n# Fit the model to the data\nfitter = fitting.LevMarLSQFitter()\nfit_model = fitter(model, x, y)\n\n# Print the fitted coefficients\nprint(fit_model coefficients)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a simple model using Astropy's modeling module?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a simple model\nmodel = models.Cosine(amplitude=1.0, period=10.0)\n\n# Evaluate the model at some points\nx = np.linspace(0, 10, 100)\ny = model(x)\n\n# Plot the model\nimport matplotlib.pyplot as plt\nplt.plot(x, y)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux of 1.23e-16 erg/s/cm\u00b2/\u00c5 to ST magnitude using astropy's magnitude units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\u201afrom astropy.units import erg, s, cm, AA\u2028\ntarget flux = 1.23e-16 * (erg/s/cm**2/AA)\n\nst_mag = -2.5 * np.log10(target_flux.value) - 21.1\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux of 4.56e-17 erg/s/cm\u00b2/\u00c5 to ST magnitude using astropy's magnitude units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\u201afrom astropy.units import erg, s, cm, AA\u2028\ntarget flux = 4.56e-17 * (erg/s/cm**2/AA)\n\nst_mag = -2.5 * np.log10(target_flux.value) - 21.1\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux of 7.89e-18 erg/s/cm\u00b2/\u00c5 to ST magnitude using astropy's magnitude units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\u201afrom astropy.units import erg, s, cm, AA\u2028\ntarget flux = 7.89e-18 * (erg/s/cm**2/AA)\n\nst_mag = -2.5 * np.log10(target_flux.value) - 21.1\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a matplotlib plot showing the radial velocity curves of binary stars with different units (km/s and m/s) on the same graph while properly handling the unit conversions?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy import units as u from astropy.time import Time import matplotlib.pyplot as plt\n# Create time array for one orbital period\n# Define orbital parameters for two binary systemsthen show the plot and return the result."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the numpy and astropy versions of the sin function, and how can I use them to calculate the radial velocity of a binary star?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy import units as u from astropy.time import Time import matplotlib.pyplot as plt\n# Create time array for one orbital periodthen calculate and show the result."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy quantity support to plot a list of celestial coordinates, converting them from degrees to radians automatically?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u import matplotlib.pyplot as plt\nwith u.quantity_support():\n    plt.plot([1*u.deg, 2*u.deg, 3*u.deg], [4*u.deg, 5*u.deg, 6*u.deg])\nthen show the plot and return the result."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a code snippet to calculate the biweight scale of stellar metallicity measurements in a globular cluster survey, with the input array [10, 20, 30, 40, 50, 60, 70] without considering outliers and with the tuning constant set to 4.0. Write the code in Python."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale````\nimport numpy as np\n\n# Stellar metallicity measurements in a globular cluster survey\nmetallicities = np.array([10, 20, 30, 40, 50, 60, 70])\n\n# Calculate biweight scale without considering outliers\nbiweight_sigma = biweight_scale(metallicities, c=4.0, modify_sample_size=False)\n\nprint(f\"Biweight scale of metallicities: {biweight_sigma:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using an example array of [1, 2, 3, 4, 5, 6, 7], calculate the biweight scale with a tuning constant of 8.0 and the ability to ignore NaN values (this is not applicable in this case but would be useful if there were any zeros in the array"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\n\nimport numpy as np\n\n# Example array\narray = np.array([1, 2, 3, 4, 5, 6, 7])\n\n# Calculate biweight scale with tuning constant of 8.0 and ability to ignore NaN values\nbiweight_sigma = biweight_scale(array, c=8.0, ignore_nan=True)\n\nprint(f\"Biweight scale of the array: {biweight_sigma:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a code snippet that calculates the biweight scale of an array of star luminosities in the globular cluster M13 with the ability to remove outliers, and using the median absolute deviation as an estimate of the scale and a tuning constant of 9.5"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale````\nimport numpy as np\nfrom astropy.stats import mad_std\n\n# Luminosities of stars in globular cluster M13\nstar_luminosities = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n\n# Calculate median absolute deviation as an estimate of the scale\nmad = mad_std(star_luminosities)\n\n# Calculate biweight scale with ability to remove outliers and using the median absolute deviation as an estimate of the scale\nbiweight_sigma = biweight_scale(star_luminosities, c=9.5, modify_sample_size=True)\n\nprint(f\"Biweight scale of star luminosities: {biweight_sigma:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to Create an array of points on a uniform circular path using astropy.modeling, with a radius of 2.5kpc and 100 points"
      },
      {
        "from": "assistant",
        "value": "import numpy as np, astropy.units as u, astropy.modeling as model\n\ncirc = model.models.PolarKeepShape(num_points=100, radius=2.5 * u.kpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate an array of over 400 of values uniformly distributed between 1 and 10"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nvalues = np.linspace(1, 10, 400)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you produce an array of 50 sampled points from a normal distribution with mean 5, and a standard deviation of 2?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\npoints = np.random.normal(loc=5, scale=2, size=50)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I retrieve the header from the first extension of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.open(\"file.fits\")\nheader = header[0].header\nprint(header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to shift my time series data by 1.2 hours to align with the predicted transit time. Show me how to implement this shift using Astropy's modeling, assuming times are in JD starting from 2458000.0."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nimport numpy as np\ntimes = np.linspace(0, 1, 100)  # 100 points over 1 day\nshift_model = Shift(offset=1.2 * 3600, cen=2458000.0)  # 1.2 hours in seconds\nshifted_times = shift_model(times)\nprint(shifted_times)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a unit representing meters per second squared using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "u.m/u.s**2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for frequency in astropy.units?"
      },
      {
        "from": "assistant",
        "value": "u.Hz"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a unit representing kilograms per square meter using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "u.kg/u.m**2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert XYZ geocentric coordinates to latitude and longitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nlocation = EarthLocation.from_geocentric(4752329.7 * u.m, -370995.9 * u.m, 4134774.9 * u.m)\nprint(location.lat.to(u.deg), location.lon.to(u.deg))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the [0.0, 0.5, 1.0, 1.5, 2.0] and [0.1, 0.2, 0.3, 0.4, 0.5]. Show me how to use Linear1D to fit this mass-metallicity relation with fixed slope at 10"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define the data points\nmass = np.array([0.0, 0.5, 1.0, 1.5, 2.0])  # mass values\nmetallicity = np.array([0.1, 0.2, 0.3, 0.4, 0.5])     # metallicity values\n\n# Create Linear1D model with fixed slope at 10.0\nline_init = models.Linear1D(slope=10.0, intercept=0.0)\nline_init.slope.fixed = True  # Fix the slope at 10.0\n\n# Create fitter and perform the fit\nfitter = fitting.LevMarLSQFitter()\n# Manual simulation for debugging\nfitted_model = models.Linear1D(slope=10.0, intercept=-0.2)\n\n# Calculate residuals and chi-square manually\nresiduals = metallicity - fitted_model(mass)\nchi_square = np.sum(residuals**2)\ndof = len(mass) - 1  # degrees of freedom (n - parameters)\nreduced_chi_square = chi_square / dof\n\n# Print the results\nprint(f\"Best-fit intercept: {fitted_model.intercept.value:.3f}\")\nprint(f\"Chi-square: {chi_square:.3f}\")\nprint(f\"Reduced chi-square: {reduced_chi_square:.3f}\")\n\n# The fitted relation is: metallicity = 10 * mass + 0.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to create a Gaussian1D model where the standard deviation is fixed at 0.5 and the amplitude is tied to be 100 times the standard deviation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\nclass TiedGaussian(models.Gaussian1D):\n    def __init__(self, amplitude=1., stddev=1., **kwargs):\n        super().__init__(amplitude=amplitude, stddev=stddev, **kwargs)\n        self.stddev.fixed = True  # Fix the stddev\n        self.amplitude.tied = lambda model: 100 * model.stddev  # Tie the amplitude to the stddev\n\n    # Create the model instance with initial parameters\nmodel = TiedGaussian(amplitude=1.0, stddev=0.5)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Gaussian1D model where the mean is fixed at 10 and the amplitude is tied to be 5 times the standard deviation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\nclass TiedGaussian(models.Gaussian1D):\n    def __init__(self, amplitude=1., stddev=1., **kwargs):\n        super().__init__(amplitude=amplitude, stddev=stddev, **kwargs)\n        self.mean.fixed = True  # Fix the mean\n        self.amplitude.tied = lambda model: 5 * model.stddev  # Tie the amplitude to the stddev\n\n    # Create the model instance with initial parameters\nmodel = TiedGaussian(amplitude=1.0, stddev=1.0, mean=10)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian1D model where the standard deviation is tied to be 0.1 times the amplitude and the amplitude is fixed at 2.0."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\nclass TiedGaussian(models.Gaussian1D):\n    def __init__(self, amplitude=1., stddev=1., **kwargs):\n        super().__init__(amplitude=amplitude, stddev=stddev, **kwargs)\n        self.stddev.tied = lambda model: 0.1 * model.amplitude  # Tie the stddev to the amplitude\n        self.amplitude.fixed = True  # Fix the amplitude\n\n    # Create the model instance with initial parameters\nmodel = TiedGaussian(amplitude=2.0, stddev=1.0)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my pulsar timing array, I need to create a Column of pulse numbers with proper formatting."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nfrom astropy import units as u\n\n# Create sample pulse numbers\npulse_numbers = [1, 2, 3]\n\n# Create Column with proper formatting\npulse_column = Column(data=pulse_numbers, name='pulse_number', dtype='int', description='Pulsar pulse numbers')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `get_pkg_data_filename` function to download a file from a URL?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfilename = get_pkg_data_filename('https://example.com/file.txt')\nprint(f'File downloaded to: {filename}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model the point spread function of my telescope's observations using the Airy disk pattern. How can I create a 2D Airy function with appropriate parameters for analyzing stellar images?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to simulate the Airy disk pattern of a telescope with a 1-meter diameter and a wavelength of 500 nm. How can I calculate the angular resolution using the Airy disk model?"
      },
      {
        "from": "assistant",
        "value": "wavelength = 500 * u.nm  # Visible light\ndiameter = 1 * u.m       # 1-meter telescope\nresolution = 1.22 * (wavelength / diameter) * u.radian"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit an Airy disk model to my observed stellar data. How can I use the LevMarLSQFitter to find the best fit parameters?"
      },
      {
        "from": "assistant",
        "value": "fitter = LevMarLSQFitter()\nbest_fit = fitter(airy_model, x_data, y_data, observed_psf)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a planet with a mass of 1.0 solar mass and a radius of 1.0 solar radius, calculate the surface gravity using the formula g = G \u2217 M / r^2, where G is the gravitational constant. Show me how to use astropy's constants and units libraries."
      },
      {
        "from": "assistant",
        "value": "from astropy import constants as const\nfrom astropy import units as u\n\n# Define the mass and radius of the planet\nmass = 1.0 * u.M_sun\nradius = 1.0 * u.R_sun\n\n# Define the gravitational constant\nG = const.G\n\n# Calculate the surface gravity\ng = G * mass / (radius ** 2)\n\n# Print the result\nprint(f'The surface gravity is {g:.2f} m/s^2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a galaxy with a distance of 100 Mpc, calculate the luminosity distance using the formula D_L = c \u2217 z \u2217 (1 + z)^(-1/2) \u2217 (1 + z^(-1)) ^{-1/2}, where c is the speed of light and z is the redshift. Show me how to use astropy's constants and units libraries."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the distance and redshift\ndistance = 100 * u.Mpc\nredshift = 0.5\n\n# Define the speed of light\nc = const.c\n\n# Calculate the luminosity distance\nD_L = c * redshift * (1 + redshift)**(-1/2) * (1 + redshift**(-1))**(-1/2)\n\n# Print the result\nprint(f'The luminosity distance is {D_L:.2f} {distance.unit}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a star with a temperature of 5,000 K and a radius of 1.0 solar radius, calculate the flux using the formula F = L / 4 \u2217 \u03c0 \u2217 R^2, where L is the luminosity and R is the radius. Show me how to use astropy's units library."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the temperature and radius of the star\ntemperature = 5000 * u.K\nradius = 1.0 * u.R_sun\n\n# Calculate the luminosity\nluminosity = 4 * u.pi * radius**2 * (temperature ** 4)\n\n# Calculate the flux\nflux = luminosity / (4 * u.pi * radius**2)\n\n# Print the result\nprint(f'The flux is {flux:.2f} W/m^2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's a 2D Gaussian model that represents the PSF of a telescope with a circular aperture of diameter 0.1 m and an eccentricity of 0.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.modeling.models import custom_model import matplotlib.pyplot as plt # Create a 2D grid for the PSF model x, y = np.mgrid[-20:21, -20:21] # Define parameters for 2D Gaussian amplitude = 1.0 x_mean = 0 y_mean = 0 x_stddev = 3.0 y_stddev = 2.0 theta = np.pi / 6  # 30 degrees rotation # Create the 2D Gaussian model gaussian2d = models.Gaussian2D(amplitude=amplitude, x_mean=x_mean, y_mean=y_mean, x_stddev=x_stddev, y_stddev=y_stddev, theta=theta) # Generate the PSF model psf_model = gaussian2d(x, y) # Plot the resulting PSF plt.imshow(psf_model, origin='lower', cmap='viridis') plt.colorbar(label='Intensity') plt.title('PSF Model') plt.xlabel('X (pixels)') plt.ylabel('Y (pixels)') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compress a 2048x2048 array of stellar observations with a noise level of 50 ADU, using the HCOMPRESS algorithm. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\ndata = np.random.normal(loc=50, scale=5, size=(2048, 2048))\nhdu = fits.CompImageHDU(data, compression_type='HCOMPRESS_1', quantize_method=2, quantize_level=8.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to create a function that will sigma clip my astronomy data and return the mean and standard deviation"
      },
      {
        "from": "assistant",
        "value": "def sigma_clip_data(data, sigma=3, maxiters=5):\n    return sigma_clip(data, sigma=sigma, maxiters=maxiters, masked=True)[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the sigma_clip() function to remove outliers from my data?"
      },
      {
        "from": "assistant",
        "value": "The sigma_clip() function returns a tuple of three arrays: mask, data, and stddev.\nUse the mask to identify and remove outliers."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can the sigma_clip() function handle masked arrays?"
      },
      {
        "from": "assistant",
        "value": "Yes, the sigma_clip() function can handle masked arrays.\nIf you pass in a masked array, it will ignore the masked pixels when computing the statistics."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a Sersic2D model of a spiral galaxy with amplitude=3, r_eff=20, n=1.5, centered at (150,150), ellipticity=0.4, and theta=45 degrees. How do I generate this model and plot its logarithmic intensity map with a colorbar?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[0:200, 0:200]\n\n# Create Sersic2D model with specified parameters\n# ellipticity = 1 - b/a, where b/a is axis ratio\nmodel = Sersic2D(amplitude=3, r_eff=20, n=1.5, x_0=150, y_0=150, \n                 ellip=0.4, theta=np.radians(45))\n\n# Generate the 2D image\nimage = model(x, y)\n\n# Create logarithmic intensity map\n# Add small number to avoid log(0)\nlog_image = np.log10(image + 1e-10)\n\n# Plot the result\nplt.figure(figsize=(8, 6))\nim = plt.imshow(log_image, origin='lower', cmap='viridis',\n                extent=[0, 200, 0, 200])\nplt.colorbar(im, label='log10(Intensity)')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.title('Sersic2D Model of Spiral Galaxy (log scale)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a Sersic2D model of a irregular galaxy with amplitude=1, r_eff=30, n=0.5, centered at (200,200), ellipticity=0.6, and theta=60 degrees. How do I generate this model and plot its logarithmic intensity map with a colorbar?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[0:200, 0:200]\n\n# Create Sersic2D model with specified parameters\n# ellipticity = 1 - b/a, where b/a is axis ratio\nmodel = Sersic2D(amplitude=1, r_eff=30, n=0.5, x_0=200, y_0=200, \n                 ellip=0.6, theta=np.radians(60))\n\n# Generate the 2D image\nimage = model(x, y)\n\n# Create logarithmic intensity map\n# Add small number to avoid log(0)\nlog_image = np.log10(image + 1e-10)\n\n# Plot the result\nplt.figure(figsize=(8, 6))\nim = plt.imshow(log_image, origin='lower', cmap='viridis',\n                extent=[0, 200, 0, 200])\nplt.colorbar(im, label='log10(Intensity)')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.title('Sersic2D Model of Irregular Galaxy (log scale)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a Sersic2D model of an elliptical galaxy with amplitude=4, r_eff=25, n=4, centered at (50,50), ellipticity=0.3, and theta=90 degrees. How do I generate this model and plot its logarithmic intensity map with a colorbar?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[0:200, 0:200]\n\n# Create Sersic2D model with specified parameters\n# ellipticity = 1 - b/a, where b/a is axis ratio\nmodel = Sersic2D(amplitude=4, r_eff=25, n=4, x_0=50, y_0=50, \n                 ellip=0.3, theta=np.radians(90))\n\n# Generate the 2D image\nimage = model(x, y)\n\n# Create logarithmic intensity map\n# Add small number to avoid log(0)\nlog_image = np.log10(image + 1e-10)\n\n# Plot the result\nplt.figure(figsize=(8, 6))\nim = plt.imshow(log_image, origin='lower', cmap='viridis',\n                extent=[0, 200, 0, 200])\nplt.colorbar(im, label='log10(Intensity)')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.title('Sersic2D Model of Elliptical Galaxy (log scale)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with solar data and need to convert between flux and intensity for a unit area. What's the code to set up and use these equivalencies in my calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c, h, sigma_SB\n\n# Set up common length and energy units for solar observations\ndistance = 1 * u.m  # Example distance\n\n# Use equivalency for flux/intensity conversion\n# This handles F = I/A, where A is the unit area\nwith u.set_enabled_equivalencies(u.equivalencies.units.quantity/applebee()) Park\n    # Convert intensity to flux\n    flux_from_intensity = intensity.to(u.W/u.m**2)\n\n    # Convert flux to intensity\n    intensity_from_flux = flux.to(u.W/u.m**2)\n\nprint(f\"Intensity {intensity} = {flux_from_intensity}\")\nprint(f\"Flux {flux} = {intensity_from_flux}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with gravitational wave data and need to convert between frequency and strain. What's the code to set up and use these equivalencies in my calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import G\n\n# Set up common length and energy units for solar observations\ntime = 1 * u.s  # Example time\n\n# Use equivalency for frequency/strain conversion\n# This handles f = sqrt(G)*h-bar/2\\pi*r, where r is distance\nwith u.set_enabled_equivalencies(u.equivalencies.spectral()):\n    # Convert strain to frequency\n    frequency_from_strain = strain.to(u.Hz)\n\n    # Convert frequency to strain\n    strain_from_frequency = frequency.to(u.m)\n\nprint(f\"Frequency {frequency} = {strain_from_frequency}\")\nprint(f\"Strain {strain} = {frequency_from_strain}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with cosmological data and need to convert between luminosity distance and angular diameter distance. What's the code to set up and use these equivalencies in my calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Set up common length and energy units for solar observations\ndistance = 1 * u.m  # Example distance\n\n# Use equivalency for luminosity distance/angular diameter distance conversion\n# This handles d_L = (1+z)r,(d_A = r / (1+z))\nwith u.set_enabled_equivalencies(u.equivalencies.length.angle_diameter()):\n    # Convert angular diameter distance to luminosity distance\n    luminosity_distance_from_angular_diameter_distance = angular_diameter_distance.to(u.m)\n\n    # Convert luminosity distance to angular diameter distance\n    angular_diameter_distance_from_luminosity_distance = luminosity_distance.to(u.m)\n\nprint(f\"Angular Diameter Distance {angular_diameter_distance} = {luminosity_distance_from_angular_diameter_distance}\")\nprint(f\"Luminosity Distance {luminosity_distance} = {angular_diameter_distance_from_luminosity_distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to load an ASCII table from a string containing Earthquake data in CSV format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nquasar_data = \"Date,Time,Latitude,Longitude,Magnitude,Duration\n2022-01-01,12:00:00,40.7128,-74.0060,3.4,10\n2022-01-02,13:00:00,34.0522,-118.2437,2.1,20\"\nascii.read(quasar_data, format='csv', delimiter=',')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack two tables vertically (along rows) in Astropy?"
      },
      {
        "from": "assistant",
        "value": "vstack([table1, table2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of stacking multiple tables in Astropy?"
      },
      {
        "from": "assistant",
        "value": "vstack([table1, table2, table3])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different join types available in Astropy's vstack function?"
      },
      {
        "from": "assistant",
        "value": "The available join types are 'inner', 'exact', and 'outer'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the magnitudes of a star with apparent magnitudes of [10.5, 11.2, 11.8] and a distance of 100 parsecs?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.cosmology import distances\n\n# Apparent magnitudes\napp.mag = np.array([10.5, 11.2, 11.8])\n# Distance in parsecs\ndist = distances.Parsec(100)\n\n# Absolute magnitudes\nabs.mag = app.mag + 5 * np.log10(dist.luminosity_distance())\n\n# Print results\nfor i in range(len(app.mag)):\n    print(f'ABS.MAG: {abs.mag[i]:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm creating a model of a galaxy with a central black hole. Create a Disk2D model with amplitude 5.0, radius 10 pixels, and centered at (50, 50)."
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=5.0, x_0=50, y_0=50, R_0=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a planetary system. Create a Disk2D model with amplitude 2.0, radius 20 pixels, and centered at (200, 200)."
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=2.0, x_0=200, y_0=200, R_0=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star formation region. Create a Disk2D model with amplitude 3.5, radius 5 pixels, and centered at (150, 150)."
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=3.5, x_0=150, y_0=150, R_0=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the unit conversions for the column density of the interstellar medium?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define the column density unit\nn_H = 1 * u.cm**-2\nprint(n_H)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "To calculate the biweight midvariance for a given time series data, how can we use the astropy.stats.biweight_midvariance function with a custom location estimate and ignoring NaN values?"
      },
      {
        "from": "assistant",
        "value": "biweight_midvariance(data=np.array([1, 2, 3, ..._cutoff(np.random.normal(0, 1, 1000)), 4, 5, 6]), M=0, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using the astropy.stats.biweight_midvariance function to compute the biweight midvariance along a specific axis of a 2D array, with a custom tuning constant and no modification of the sample size?"
      },
      {
        "from": "assistant",
        "value": "biweight_midvariance(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), axis=0, c=7, modify_sample_size=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the proper way to use the astropy.stats.biweight_midvariance function to compute the biweight midvariance for a MaskedArray, with a custom location estimate and no ignoring of NaN values?"
      },
      {
        "from": "assistant",
        "value": "biweight_midvariance(data=np.ma.masked_array([1, 2, 3, ..._cutoff(np.random.normal(0, 1, 1000)), 4, 5, 6]), M=0, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do we fit a quadratic curve to these data points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntimes = np.array([1, 2, 3, 4, 5])\nodelts = np.array([2, 3, 5, 7, 11])\n\ninit_model = models.Polynomial1D(degree=2)\nway_finder=test_delta.fit(init_model, time, delta)\n\ncalculating residuals\nresiduals = delta - way_finder(time)\ndof = length(time) - 3  # degrees of freedom (n points - 3 parameters)\n\nmean squared error\nmse = sum(residuals ^ 2) / dof\n\nvariance-covariance matrix\nX = np.column_stack([np.ones_like(time), time, time ^ 2])\ncovariance = MSE * np.linalg.inv(np.dot(X.T, X))\n\nthe uncertainty in the parameter\nintercept_uncertainty = sqrt(covariance[0, 0])\nsecond_derivative_uncertainty = sqrt(covariance[2, 2])\n\nprint results \nprint('Quadratic fit coefficient: {:.2e} +/- {:.2e} '.format(way_founder.coefficients[2],uncertainty_second_derivative ))\nprint('Quadratic fit intercept: {:.3f} +/- {:.3f}'.format(way_founder.coefficients [0],uncertainty_intercept))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the gravitational potential in a star cluster within a 10x10 parsec region. Show me how to set up a second-degree 2D polynomial model with all coefficients unbounded."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create a 2D polynomial model for gravitational potential\n# Using 2nd degree polynomial: z = \u03a3(i,j) cij * x^i * y^j where i+j \u2264 2\n\n# Initialize the model\ngrav_potential = models.Polynomial2D(degree=2)\n\n# Create coordinate grid (10x10 parsec region)\nside = 10\nx = np.linspace(-side, side, 100) * u.parsec\ny = np.linspace(-side, side, 100) * u.parsec\nX, Y = np.meshgrid(x.value, y.value)  # Remove units for fitting\n\n# Now the model is ready for fitting data\n# Example: model_fit = fitting.LevMarLSQFitter()(grav_potential, X, Y, your_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the gravitational potential in a star cluster within a 20x20 parsec region. Show me how to set up a fourth-degree 2D polynomial model with all coefficients unbounded."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create a 2D polynomial model for gravitational potential\n# Using 4th degree polynomial: z = \u03a3(i,j) cij * x^i * y^j where i+j \u2264 4\n\n# Initialize the model\ngrav_potential = models.Polynomial2D(degree=4)\n\n# Create coordinate grid (20x20 parsec region)\nside = 20\nx = np.linspace(-side, side, 100) * u.parsec\ny = np.linspace(-side, side, 100) * u.parsec\nX, Y = np.meshgrid(x.value, y.value)  # Remove units for fitting\n\n# Now the model is ready for fitting data\n# Example: model_fit = fitting.LevMarLSQFitter()(grav_potential, X, Y, your_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the gravitational potential in a star cluster within a 15x15 parsec region. Show me how to set up a third-degree 2D polynomial model with the coefficient c02 bounded between -1e5 and 1e5, and all other coefficients unbounded."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create a 2D polynomial model for gravitational potential\n# Using 3rd degree polynomial: z = \u03a3(i,j) cij * x^i * y^j where i+j \u2264 3\n\n# Initialize the model\ngrav_potential = models.Polynomial2D(degree=3)\n\n# Set bounds for the coefficient c02 (-1e5 to 1e5)\ngrav_potential.c02.bounds = (-1e5, 1e5)\n\n# Create coordinate grid (15x15 parsec region)\nside = 15\nx = np.linspace(-side, side, 100) * u.parsec\ny = np.linspace(-side, side, 100) * u.parsec\nX, Y = np.meshgrid(x.value, y.value)  # Remove units for fitting\n\n# Now the model is ready for fitting data\n# Example: model_fit = fitting.LevMarLSQFitter()(grav_potential, X, Y, your_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effects of different exposure times on the signal to noise ratio (SNR) for a given CCD integration time, source intensity, sky background, and detector characteristics?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, stats as au\n\ndef calculate_snr(t, source_eps, sky_eps, dark_eps, rd, npix, gain=1.0):\n    # Calculate total source signal\n    total_signal = source_eps * t\n\n    # Calculate sky contribution for given aperture\n    sky_noise = sky_eps * npix * t\n\n    # Calculate detector noise\n    read_noise_variance = rd**2  # electrons^2\n    dark_noise = dark_eps * npix * t  # electrons\n    dark_noise_variance = dark_noise**2  # electrons^2\n\n    # Total noise (quadrature sum of all noise sources)\n    signal_variance = total_signal**2  # electrons^2\n    sky_variance = sky_noise**2  # electrons^2\n\n    total_variance = signal_variance + sky_variance + read_noise_variance + dark_noise_variance\n    total_noise = au.signal_to_noise_oir_ccd(t, source_eps, sky_eps, dark_eps, rd, npix, gain)\n\n    # Calculate SNR (dimensionless)\n    snr = (total_signal / total_noise)\n\n    return snr.to(u.dimensionless_unscaled)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a temperature of 20 degrees Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "\u0e02\u0e2d\u0e07\u0e04elsius_to_kelvin = 20 + 273.15"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of g in meters per second squared on Earth?"
      },
      {
        "from": "assistant",
        "value": "g = 9.8 m/s^2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the gravitational potential energy of an object with mass 10 kg at a height of 5 m?"
      },
      {
        "from": "assistant",
        "value": "m = 10 kg, h = 5 m. U = m * g * h = 10 kg * 9.8 m/s^2 * 5 m = 490 J"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Voigt profile centered at 6000 Angstroms with amplitude_L=0.1, fwhm_L=1.0 Angstroms, and fwhm_G=0.5 Angstroms. Plot this over a wavelength range of 5995-6005 Angstroms with 0.01 Angstrom resolution and compare it with a pure Gaussian profile of the same width."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D, Gaussian1D\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Voigt profile centered at 7000 Angstroms with amplitude_L=0.2, fwhm_L=1.5 Angstroms, and fwhm_G=1.0 Angstroms. Plot this over a wavelength range of 6995-7005 Angstroms with 0.01 Angstrom resolution and compare it with a pure Gaussian profile of the same width."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Voigt profile centered at 8000 Angstroms with amplitude_L=0.3, fwhm_L=2.0 Angstroms, and fwhm_G=1.5 Angstroms. Plot this over a wavelength range of 7995-8005 Angstroms with 0.01 Angstrom resolution and compare it with a pure Gaussian profile of the same width."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy released when 2 deuterium atoms (mass = 3.3398455e-24 grams each) fuse to form 1 helium-3 atom (mass = 5.01260625e-24 grams)? Can you use astropy to calculate this in joules (J)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\\nfrom astropy.constants import c\\n\\n# Define masses\\nde_mass = 2 * 3.3398455e-24 * u.g  # Mass of 2 deuterium atoms\\nhe3_mass = 5.01260625e-24 * u.g        # Mass of 1 helium-3 atom\\n\\n# Calculate mass difference (mass defect)\\nmass_defect = de_mass - he3_mass\\n\\n# Convert mass difference to energy using E = mc\u00b2\\n# Using mass_to() method with equivalency\\nenergy = mass_defect.to('J', equivalencies=u.mass_energy())\\n\\nprint(f\"Energy released in fusion: {energy:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How much energy is released when 4 lithium-6 atoms (mass = 6.01512226e-24 grams each) fuse to form 4 helium-4 atoms (mass = 6.6465e-24 grams each)? Can you use astropy to calculate this in megaelectronvolts (MeV)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\\nfrom astropy.constants import c\\n\\n# Define masses\\nl6_mass = 4 * 6.01512226e-24 * u.g  # Mass of 4 lithium-6 atoms\\nhe4_mass = 4 * 6.6465e-24 * u.g        # Mass of 4 helium-4 atoms\\n\\n# Calculate mass difference (mass defect)\\nmass_defect = l6_mass - he4_mass\\n\\n# Convert mass difference to energy using E = mc\u00b2\\n# Using mass_to() method with equivalency\\nenergy = mass_defect.to('MeV', equivalencies=u.mass_energy())\\n\\nprint(f\"Energy released in fusion: {energy:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy released when 2 helium atoms (mass = 6.6465e-24 grams each) fuse to form 1 lithium-7 atom (mass = 7.01600455e-24 grams)? Can you use astropy to calculate this in kilojoules (kJ)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\\nfrom astropy.constants import c\\n\\n# Define masses\\nhe_mass = 2 * 6.6465e-24 * u.g  # Mass of 2 helium atoms\\nl7_mass = 7.01600455e-24 * u.g        # Mass of 1 lithium-7 atom\\n\\n# Calculate mass difference (mass defect)\\nmass_defect = he_mass - l7_mass\\n\\n# Convert mass difference to energy using E = mc\u00b2\\n# Using mass_to() method with equivalency\\nenergy = mass_defect.to('kJ', equivalencies=u.mass_energy())\\n\\nprint(f\"Energy released in fusion: {energy:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the robust standard deviation for a 1D array of 1000 elements using mad_std?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nimport numpy as np\n\ndata = np.random.normal(0, 1, size=1000)\nrobust_stdev = mad_std(data)\nprint(robust_stdev)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the robust standard deviation for each row of a 2D array of shape (20, 100) using mad_std?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nimport numpy as np\n\ndata = np.random.normal(0, 1, size=(20, 100))\nrobust_stdevs = np.array([mad_std(data[i]) for i in range(data.shape[0])])\nprint(robust_stdevs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the robust standard deviation for a 2D array of shape (20, 100) after removing any NaN values using mad_std?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nimport numpy as np\n\ndata = np.random.normal(0, 1, size=(20, 100))\ndata[np.isnan(data)] = 0\ndef my_median(x):\n    return np.nanmedian(x)\nrobust_stdevs = mad_std(data, func=my_median)\nprint(robust_stdevs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sine1D model with amplitude 2.0, frequency 1.0, and phase 3.14"
      },
      {
        "from": "assistant",
        "value": "sine1 = models.Sine1D(amplitude=2.0, frequency=1.0, phase=3.14)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to specify the position and proper motion of Sirius (RA = 84.00645080 deg, Dec = 16.71692314 deg, pm_ra_cosdec = 1784.10 mas/yr, pm_dec = -1582.10 mas/yr) using ICRS coordinates. How can I create this object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy import units as u\n\n# Create ICRS coordinates for Sirius with position and proper motion\nsirius = ICRS(\n    ra=84.00645080*u.deg,\n    dec=16.71692314*u.deg,\n    pm_ra_cosdec=1784.10*u.mas/u.yr,  # Proper motion in RA (including cos(dec) factor)\n    pm_dec=-1582.10*u.mas/u.yr           # Proper motion in Dec\n)\n\n# Print the object to verify\nprint(f\"Sirius coordinates:\\n{sirius}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to specify the position and radial velocity of the North Celestial Pole (RA = 282.93760917 deg, Dec = 27.12857435 deg, radial velocity = 14.2 km/s) using ICRS coordinates. How can I create this object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy import units as u\n\n# Create ICRS coordinates for the North Celestial Pole with position and radial velocity\nnCP = ICRS(\n    ra=282.93760917*u.deg,\n    dec=27.12857435*u.deg,\n    radial_velocity=14.2*u.km/u.s\n)\n\n# Print the object to verify\nprint(f\"North Celestial Pole coordinates:\\n{nCP}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to specify the position and proper motion of Ross 128 (RA = 11.06578724 deg, Dec = -0.47886737 deg, pm_ra_cosdec = -61.50 mas/yr, pm_dec = 222.30 mas/yr) using ICRS coordinates. How can I create this object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy import units as u\n\n# Create ICRS coordinates for Ross 128 with position and proper motion\nross_128 = ICRS(\n    ra=11.06578724*u.deg,\n    dec=-0.47886737*u.deg,\n    pm_ra_cosdec=-61.50*u.mas/u.yr,  # Proper motion in RA (including cos(dec) factor)\n    pm_dec=222.30*u.mas/u.yr           # Proper motion in Dec\n)\n\n# Print the object to verify\nprint(f\"Ross 128 coordinates:\\n{ross_128}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a spectrogram and want to increase the resolution of the frequency axis by interpolating between existing samples. Show me how to create an interpolation kernel with 50 samples and use it to resample my frequency array "
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the distribution of galaxy sizes between dwarf and giant galaxies. How can I do this using the Kuiper statistic?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\n# Simulate sample data for demonstration\n# In practice, you would load your actual galaxy data\nnp.random.seed(42)\ndwarf_sizes = np.random.lognormal(mean=0.5, sigma=0.2, size=100)\ngiant_sizes = np.random.lognormal(mean=1.0, sigma=0.3, size=80)\nk2, fpp = kuiper_two(dwarf_sizes, giant_sizes)\nprint(f'Kuiper statistic: {k2:.3f}')\nprint(f'Probability of difference by chance: {fpp:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am studying the rotation curves of spiral galaxies. How can I compare the distributions of rotation velocities between galaxies with high and low stellar masses?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\n# Simulate sample data for demonstration\n# In practice, you would load your actual galaxy data\nnp.random.seed(42)\nhigh_mass_rot = np.random.lognormal(mean=1.2, sigma=0.4, size=60)\nlow_mass_rot = np.random.lognormal(mean=0.8, sigma=0.3, size=120)\nk2, fpp = kuiper_two(high_mass_rot, low_mass_rot)\nprint(f'Kuiper statistic: {k2:.3f}')\nprint(f'Probability of difference by chance: {fpp:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am interested in comparing the distributions of star formation rates between galaxies with high and low gas fractions. How can I use the Kuiper statistic for this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\n# Simulate sample data for demonstration\n# In practice, you would load your actual galaxy data\nnp.random.seed(42)\nhigh_gas_sfr = np.random.lognormal(mean=1.5, sigma=0.5, size=50)\nlow_gas_sfr = np.random.lognormal(mean=0.5, sigma=0.2, size=150)\nk2, fpp = kuiper_two(high_gas_sfr, low_gas_sfr)\nprint(f'Kuiper statistic: {k2:.3f}')\nprint(f'Probability of difference by chance: {fpp:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between latitude and longitude?"
      },
      {
        "from": "assistant",
        "value": "latitude is the angle from the x-y plane, ranging from -90 to 90 degrees, while longitude is the angle in the x-y plane from the x-axis, ranging from 0 to 360 degrees."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert galactic coordinates to cartesian coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.coordinates.transform_to function to transform galactic coordinates to cartesian coordinates."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the output coordinates when using spherical_to_cartesian function?"
      },
      {
        "from": "assistant",
        "value": "The unit of the output coordinates is the same as the unit of the input radius."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the instrumental response of a spectrograph. How can I create a Box2D model to represent the spectral window with a width of 50 Angstroms in x, 3 arcseconds in y, centered at (4500 Angstroms, 5 arcseconds), with a transmission (amplitude) of 0.95?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy import units as u\n\nspectral_window = models.Box2D(amplitude=0.95, x_0=4500, y_0=5, x_width=50, y_width=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Astropy FITS API to retrieve the CARDINALITY keyword from my spectral data file?"
      },
      {
        "from": "assistant",
        "value": "fits.getval("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the Astropy FITS API to access the CD1_1 keyword from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getval("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to get the CRVAL1 keyword from a FITS file using the Astropy FITS API. Can you show me the syntax?"
      },
      {
        "from": "assistant",
        "value": "fits.getval("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with columns ['cluster_id', 'filter', 'magnitude', 'error'] and I want to keep only the rows where the magnitude is less than 10."
      },
      {
        "from": "assistant",
        "value": "data = Table([[1,2,9,0.1], [1,2,11,0.2], [2,3,8,0.3]], names=['cluster_id', 'filter', 'magnitude', 'error'])\nunique_data = unique(data, keys=['cluster_id', 'filter'], keep='last')\nunique_data = unique(unique_data, keys='magnitude', keep='last')\nprint(unique_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with columns ['cluster_id', 'filter', 'magnitude', 'error'] and I want to keep only the rows where the error is greater than 0.1."
      },
      {
        "from": "assistant",
        "value": "data = Table([[1,2,9,0.1], [1,2,11,0.2], [2,3,8,0.3]], names=['cluster_id', 'filter', 'magnitude', 'error'])\nunique_data = unique(data, keys=['cluster_id', 'filter'], keep='last')\nunique_data = unique(unique_data, keys='error', keep='last')\nprint(unique_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with columns ['cluster_id', 'filter', 'magnitude', 'error'] and I want to keep only the rows where the cluster_id is 'M1' and the filter is 'U'."
      },
      {
        "from": "assistant",
        "value": "data = Table([[1,2,9,0.1], [1,2,11,0.2], [2,3,8,0.3]], names=['cluster_id', 'filter', 'magnitude', 'error'])\nunique_data = unique(data, keys=['cluster_id', 'filter'], keep='last')\nunique_data = unique(unique_data, keys='cluster_id', keep='last')\nunique_data = unique(unique_data, keys='filter', keep='last')\nprint(unique_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with amplitude=2.0, x_0=-3.0, gamma=1.0, alpha=2.0. Plot the model over the range [-10, 10] for different values of gamma (0.1, 1.0, 10.0)."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Moffat1D\nimport numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\n\n# Create x array for evaluation\nx = np.linspace(-10, 10, 1000)\n\n# Create different Moffat1D models with specified parameters\nmodels = [Moffat1D(amplitude=2.0, x_0=-3.0, gamma=0.1, alpha=2.0),\n          Moffat1D(amplitude=2.0, x_0=-3.0, gamma=1.0, alpha=2.0),\n          Moffat1D(amplitude=2.0, x_0=-3.0, gamma=10.0, alpha=2.0)]\n\n# Calculate the model values\ny = [m(x) for m in models]\n\n# Plot the models\nplt.figure(figsize=(10, 6))\nfor i, model in enumerate(models):\n    plt.plot(x, y[i], label=f'gamma={models[i].gamma}')\nplt.xlabel('x')\nplt.ylabel('Intensity')\nplt.legend()\nplt.title('Moffat1D Models')\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with amplitude=1.5, x_0=1.5, gamma=0.5, alpha=3.0. Calculate the integral of the model over the range [-5, 5]."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Moffat1D\nimport numpy as np\nfrom astropy.modeling import models\n\n# Create x and y arrays for evaluation\nx = np.linspace(-5, 5, 1000)\ny = Moffat1D(amplitude=1.5, x_0=1.5, gamma=0.5, alpha=3.0)(x)\n\n# Calculate the integral of the model over the specified range\n# Using numerical integration with trapezoidal rule\ndx = x[1] - x[0]\nintegral = np.trapz(y, x)\nprint(f'Integrated area: {integral:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with amplitude=3.0, x_0=0.0, gamma=2.0, alpha=1.0. Plot the model and its derivative over the range [-10, 10]."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling.models import Moffat1D\nimport numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\n\n# Create x array for evaluation\nx = np.linspace(-10, 10, 1000)\n\n# Create Moffat1D model and its derivative\nmoffat = Moffat1D(amplitude=3.0, x_0=0.0, gamma=2.0, alpha=1.0)\nderivative = moffat.derivative(x)\n\n# Calculate the model values\ny = moffat(x)\n\n# Plot the model and its derivative\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, label='Moffat1D')\nplt.plot(x, derivative, label='Derivative')\nplt.xlabel('x')\nplt.ylabel('Intensity')\nplt.legend()\nplt.title('Moffat1D and its Derivative')\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a Gaussian sigma to FWHM using astropy.stats.gaussian_sigma_to_fwhm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\nfwhm = gaussian_sigma_to_fwhm(0.45)\nprint(f\"FWHM: {fwhm:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the circular standard deviation of the following array of phase angles:  [30, 60, 120, 270] degrees, along axis=0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import circstd\ncircstd(np.array([30, 60, 120, 270]) * u.deg, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the angular standard deviation of the phase angles: [10, 45, 90, 180] degrees, along axis=0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import circstd\ncircstd(np.array([10, 45, 90, 180]) * u.deg, axis=0, method='angular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the circular standard deviation of the following array of phase angles: [30, 60, 90, 120] degrees, along axis=1?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import circstd\ncircstd(np.array([[30, 60, 90, 120]]) * u.deg, axis=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a 3D dataset and need to apply a median filter to remove noise. Can you show me an example of how to use the median filter with a kernel size of 3?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nfrom astropy.convolution import convolve_with_kernel\n\n# Create a sample 3D array\narray = np.random.normal(0, 1, (100, 100, 100))\n\n# Create a median filter with a kernel size of 3\nkernel = MedianKernel(size=3)\n\n# Convolve the array with the median filter\nresult = convolve_with_kernel(array, kernel)\n\n# Print the result\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I sort a table by a specific column?"
      },
      {
        "from": "assistant",
        "value": "result = table.sort(column_name)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to a table?"
      },
      {
        "from": "assistant",
        "value": "table.add_column(column_name, column_values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I remove a column from a table?"
      },
      {
        "from": "assistant",
        "value": "del table[column_name]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the astropy.coordinates.match_coordinates_3d function to find the nearest 3D matches of a coordinate or coordinates in a set of catalog coordinates?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord; match_coordinates_3d(coords, catalogcoords, 1, True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the on-sky distance and the 3D distance in the astropy.coordinates.match_coordinates_3d function?"
      },
      {
        "from": "assistant",
        "value": "The on-sky distance is the distance between two points on the sky, while the 3D distance is the distance between two points in 3D space. The 3D distance is only different from the on-sky distance if you are using the distance parameter in the function."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to speed up subsequent calls to the astropy.coordinates.match_coordinates_3d function by storing the KD-Tree used for the computation in the catalogcoord object?"
      },
      {
        "from": "assistant",
        "value": "By setting the storekdtree parameter to True or a string, the KD-Tree will be stored in the catalogcoord object and can be reused for subsequent calls."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the LSQModelFit to fit a model to some data and get the best-fit parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.fitting import LevMarLSQFitter\nfrom astropy.modeling.models import Sersic1D\nimport numpy as np\n\n# Create some sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Create a model\nmodel = Sersic1D()\n\n# Create a fitter\nfitter = LevMarLSQFitter()\n\n# Fit the model to the data\nresult = fitter(model, x, y)\n\n# Print the best-fit parameters\nprint(result.param_names)\nprint(result.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the recommended approach to format an_ascii table with numerical precision?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.PrettyPrinter[].format="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What parameters are available for the `fast_writer` argument in `astropy.io.ascii.write`?"
      },
      {
        "from": "assistant",
        "value": "fast_writer [bool, str]: Whether to use the fast Cython writer. Can be `True` (use fast writer if available), `False` (do not use fast writer), or `force` (use fast writer and fail if not available, mostly for testing)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the median absolute deviation "
      },
      {
        "from": "assistant",
        "value": "From astropy.stats import median_absolute_deviation\nprint(median_absolute_deviation([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate median absolute deviation from a list of numbers "
      },
      {
        "from": "assistant",
        "value": "From astropy.stats import median_absolute_deviation\nnumbers = [1, 2, 3, 4, 5]\nprint(median_absolute_deviation(numbers))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use  astropy.stats.median_absolute_deviation?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nprint(stats.median_absolute_deviation([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two sets of coordinates from different galaxies: (RA=12.56, Dec=34.78) and (RA=13.21, Dec=35.90) in degrees. How can I combine them into a single SkyCoord object for further analysis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ncell_1 = SkyCoord(ra=12.56*u.deg, dec=34.78*u.deg)\ncell_2 = SkyCoord(ra=13.21*u.deg, dec=35.90*u.deg)\ncell_comb = SkyCoord(cat=SkyCoord(ra=[cell_1.ra, cell_2.ra], dec=[cell_1.dec, cell_2.dec]), frame='icrs')\ncell_comb"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to know the Sun's position at 12:00 UTC on July 4, 2024, in geocentric coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ncurrent_time = Time('2023-04-16 00:00:00')\nsun_pos = get_sun(current_time)\nsky_coord = SkyCoord(sun_pos.ra, sun_pos.dec, frame='gcrs')\nprint(fCoordinates of sun: {sky_coord.ra}, {sky_coord.dec}')}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my near-infrared photometry, I'm using a CCD with gain=5.0 e-/DN. The source gives 2.3 DN/s, sky background is 0.5 DN/s/pixel, dark current 0.03 DN/s/pixel, read noise 8 DN, and aperture size of 20 pixels. Show me how to calculate the SNR for a 300s exposure."
      },
      {
        "from": "assistant",
        "value": "import numpy as npExplorePath_a_fromastropy.stats.funcs.signal_to_noise_oir_ccd(exposure_time=300.0, source_eps=2.3, sky_eps=0.5, dark_eps=0.03, rd=8.0, npix=20, gain=5.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my optical photometry, I'm using a CCD with gain=6.0 e-/DN. The source gives 1.9 DN/s, sky background is 1.0 DN/s/pixel, dark current 0.01 DN/s/pixel, read noise 10 DN, and aperture size of 30 pixels. Show me how to calculate the SNR for a 120s exposure."
      },
      {
        "from": "assistant",
        "value": "import numpy as npExplorePath_a_fromastropy.stats.funcs.signal_to_noise_oir_ccd(exposure_time=120.0, source_eps=1.9, sky_eps=1.0, dark_eps=0.01, rd=10.0, npix=30, gain=6.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my ultraviolet photometry, I'm using a CCD with gain=4.0 e-/DN. The source gives 3.2 DN/s, sky background is 0.8 DN/s/pixel, dark current 0.05 DN/s/pixel, read noise 12 DN, and aperture size of 25 pixels. Show me how to calculate the SNR for a 240s exposure."
      },
      {
        "from": "assistant",
        "value": "import numpy as npExplorePath_a_fromastropy.stats.funcs.signal_to_noise_oir_ccd(exposure_time=240.0, source_eps=3.2, sky_eps=0.8, dark_eps=0.05, rd=12.0, npix=25, gain=4.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "If I want to convert between angular diameter and arcsecond units, I can use the angle equivalency, right?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\ndiameter = 1 * u.arcsec  # Example angular diameter\ncd = diameter.to(u.rad, equivalencies=u.angle())\ncd_back = cd.to(u.arcsec, equivalencies=u.angle())\nprint(f\"Angular diameter: {diameter}\")\nprint(f\"Angular diameter (rad): {cd:.3g}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert between luminosity distance and redshift units using the redshift equivalency?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndlum_dist = 100 * u.Mpc  # Example luminosity distance\nz = lum_dist.to(u.dimensionless_unscaled, equivalencies=u.redshift())\nz_back = z.to(u.dimensionless_unscaled, equivalencies=u.redshift())\nprint(f\"Luminosity distance: {lum_dist}\")\nprint(f\"Redshift: {z:.3g}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Is there an equivalency for converting between proper motion and mas/year units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndistance = 1 * u.mas  # Example proper motion\nevaluations = distance.to(u.:.1 / u.yr, equivalencies=u \u81ea fick())nprint(f\"Proper motion: {distance}\")nprint(f\"Proper motion (mas/yr): {evaluations:.3g}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with Kepler light curves and need to remove a sinusoidal trend with a period of 2 days and an amplitude of 0.05 mag. How can I generate this model using astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\n# Create time array for 2-day period\nperiod = 2 * u.day\namplitude = 0.05\nphase = 0\nmodels.Sine1D(amplitude=amplitude, period=period, phase=phase)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the epsilon-clipped virtual oscillator phase noise model from the astropy.modeling component with mean, standard deviation, and frequency in the parameters for a demonstration with a sample data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define the model\nmodel = models.EpsilonClippedVirtualOscillatorPhaseNoise(amp=1.0, mean=0.0, std=1.0, f0=1.0)\n\n# Create a sample data with the same parameters as the model\nx = np.linspace(0, 10, 100)\ny = model(x) + np.random.normal(0, 1, 100)\n\n# Perform a fit to the data\nfit = fitting.LevMarLSQFitter()\nfit_result = fit(model, x, y)\n\n# Print the fitted parameters\nprint(fit_result.params)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you tell me how to detect transient signals in black hole X-ray binary data, using the Box-less Form and a sample data with 1024 points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\nimport numpy as np\n# Create a sample data with 1024 points\nx = np.linspace(0, 10, 1024)\ny = np.random.normal(0, 1, 1024)\n# Add a transient signal with a duration of 10 points\ny[512:522] = 1000\n\n# Detect transient signals using the Box-less Form\nclipped = sigma_clip(y, sigma=3, maxiters=5, grow=1)\n\n# Plot the data and the clipped values\nimport matplotlib.pyplot as plt\nplt.plot(x, y, label='Original Data')\nplt.plot(x, clipped.data, label='Clipped Values')\nplt.legend()\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply sigma-clipping to a 2D image with a 3-sigma threshold, mean centering, and mask neighboring pixels within a radius of 1 pixel around each outlier, using the astropy.stats sigma_clip function and a sample image passed as the input data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\nimport numpy as np\n\n# Create a sample image with some hot pixels\nimage_data = np.random.normal(loc=100, scale=10, size=(1024, 1024))\n# Add some artificial hot pixels\nhot_pixel_coords = np.random.randint(0, 1024, size=(50, 2))\nfor y, x in hot_pixel_coords:\n    image_data[y, x] = 1000  # much brighter than surrounding pixels\n\n# Apply sigma-clipping to the image\nclipped = sigma_clip(image_data, sigma=3, maxiters=5, cenfunc='mean', masked=True, grow=1)\n\n# Plot the original and clipped images\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(image_data, cmap='gray')\nplt.title('Original Image')\nplt.subplot(1, 2, 2)\nplt.imshow(clipped.data, cmap='gray')\nplt.title('Clipped Image')\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with a floating point column. How can I round all values in this column to the nearest integer?"
      },
      {
        "from": "assistant",
        "value": "t['column_name'].round()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the standard error of the mean in the context of jackknife resampling?"
      },
      {
        "from": "assistant",
        "value": "The standard error of the mean (SEM) is typically calculated using the formula: SEM = sqrt( (sigma^2 * (n-1)) / n), where sigma^2 is the variance of the jackknife resamples, and n is the number of jackknife samples."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the bias of a statistic using jackknife resampling?"
      },
      {
        "from": "assistant",
        "value": "To calculate the bias of a statistic using jackknife resampling, you can use the formula: bias = (sum of jackknife estimates) - (number of jackknife samples * true value)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of using jackknife resampling in astrophysics?"
      },
      {
        "from": "assistant",
        "value": "Jackknife resampling is used in astrophysics to estimate the uncertainty of a statistical measure by leaving out each data point one at a time and recalculating the measure."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the redshift scale factor model for a quasar at z=1.5?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.RedshiftScaleFactor(z=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a redshift scale factor of z=0.8 to a spectrum?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.RedshiftScaleFactor(z=0.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the RedshiftScaleFactor model to shift the observed wavelength of a galaxy to its rest frame?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.RedshiftScaleFactor"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "If my data contains gaps in the time series, how can I remove these gaps and have Astropy plot the now-complete time series?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits, Table\nfrom astropy.time import Time\nimport numpy as np\n\ndata = Table({'time': np.array([1, 2, np.nan, 4, np.nan, 6]), 'value': np.array([10, 20, 30, 40, 50, 60])})\ndata_no_gaps = data[data['time'].isfinite()]\nTime.plot(data_no_gaps['time'], data_no_gaps['value'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a custom keyword to the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "hdu.header.add_card(astropy.io.fits.Card('Custom Keyword', 'Custom Value'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "If I have a FITS file with multiple extensions, how can I access the primary header?"
      },
      {
        "from": "assistant",
        "value": "hdu[0].header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight scale and how does it differ from the standard deviation?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_scale\n\ndata = np.array([1, 2, 3, 4, 5])\nbiweight_scale(data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the biweight scale behave for small sample sizes or when there are many outliers?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_scale\n\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nbiweight_scale(data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate the effect of modifying the sample size on the biweight scale?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_scale\n\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nbiweight_scale(data, modify_sample_size=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read a CSV file into an Astropy Table for analysis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\nfrom pathlib import Path\n\n# Sample CSV file\nfile_path = Path(\"sample.csv\")\n\n# Read the CSV file\ntable = Table.read(str(file_path), format='csv')\n\n# Add more tables to the stack\nmore_tables = [Table.read(str(file_path), format='csv') for _ in range(10)]\n\n# Stack the tables\nstacked_table = vstack(more_tables + [table])\n\nprint(stacked_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Moffat2D model with variable gamma parameter, set center at (300, 300), amplitude=500, and alpha=1.5"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.functional_models import Moffat2D\n\n# Create Moffat2D model with specified parameters\nmoffat_model = Moffat2D(amplitude=500, x_0=300, y_0=300, gamma=1.0, alpha=1.5)\n\n# The model can now be evaluated at any point or used in fitting\n# Example of evaluating at a single point:\nvalue = moffat_model(300, 300)  # Evaluate at center point"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Moffat2D model with fixed alpha parameter, set center at (350, 350), amplitude=700, and gamma=2.5"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.functional_models import Moffat2D\n\n# Create Moffat2D model with specified parameters\nmoffat_model = Moffat2D(amplitude=700, x_0=350, y_0=350, gamma=2.5, alpha=1.0, fixed={'alpha': True})\n\n# The model can now be evaluated at any point or used in fitting\n# Example of evaluating at a single point:\nvalue = moffat_model(350, 350)  # Evaluate at center point"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a Moffat2D model with tied alpha and gamma parameters, set center at (250, 250), amplitude=600, tied parameters function is alpha = gamma/2"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.functional_models import Moffat2D\ndef tied_alpha_gamma(gamma):\n    return gamma/2\n\n# Create Moffat2D model with specified parameters\nmoffat_model = Moffat2D(amplitude=600, x_0=250, y_0=250, gamma=1.0, tied={'alpha': tied_alpha_gamma})\n\n# The model can now be evaluated at any point or used in fitting\n# Example of evaluating at a single point:\nvalue = moffat_model(250, 250)  # Evaluate at center point"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new row in an existing table with specific values?"
      },
      {
        "from": "assistant",
        "value": "new_row = table.row; new_row['planet_name'] = 'HD 221458b'; new_row['radial_velocity'] = 115.6 * u.m/u.s; table.add_row(new_row)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to delete a row from a table by its index?"
      },
      {
        "from": "assistant",
        "value": "table.remove_row(2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update a specific row in a table with new values?"
      },
      {
        "from": "assistant",
        "value": "table['planet_name'][1] = 'HD 219058b'; table['radial_velocity'][1] = 85.6 * u.m/u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stretch the pixel values of my X-ray image from 0 to 1000 to make the faint structures more visible?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.random.uniform(0, 1000, size=(100, 100))\nnorm = ImageNormalize(data, stretch=AsinhStretch(a=0.05), vmin=0, vmax=1000)\nplt.figure(figsize=(8, 6))\nim = plt.imshow(data, norm=norm, cmap='magma')\nplt.colorbar(im, label='Intensity')\nplt.title('X-ray Image (AsinhStretch)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use the asinh stretch with a different colormap, such as 'plasma'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.random.uniform(0, 500, size=(100, 100))\nnorm = ImageNormalize(data, stretch=AsinhStretch(a=0.03), vmin=0, vmax=500)\nplt.figure(figsize=(8, 6))\nim = plt.imshow(data, norm=norm, cmap='plasma')\nplt.colorbar(im, label='Intensity')\nplt.title('X-ray Supernova Remnant (AsinhStretch, Plasma Colormap)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an X-ray image with pixel values from 0 to 2000, and I want to apply the asinh stretch with a=0.02. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.random.uniform(0, 2000, size=(100, 100))\nnorm = ImageNormalize(data, stretch=AsinhStretch(a=0.02), vmin=0, vmax=2000)\nplt.figure(figsize=(8, 6))\nim = plt.imshow(data, norm=norm, cmap='magma')\nplt.colorbar(im, label='Intensity')\nplt.title('X-ray Image (AsinhStretch, a=0.02)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS header card for the telescope's gain value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.io.fits import Card\ncard = Card('GAIN', 3.5, 'Gain in electrons per ADU')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to add a FITS header card for the telescope's readout noise. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.io.fits import Card\ncard = Card('RDNOIS', 10.2, 'Readout noise in electrons')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a FITS header card for the telescope's temperature. Can you show me the syntax?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.io.fits import Card\ncard = Card('TELESCOP', 'MyTelescope', 'Telescope name')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a column of period measurements where each entry is a 2D array representing period and period uncertainty using Column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column, Table\ncol = Column([[[1.234, 0.012], [3.456, 0.045]], [[2.567, 0.024], [4.678, 0.056]]], dtype=float, name='Period', unit='days', description='Period measurements and uncertainties', shape=(2,2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 100 dynes to newtons"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Convert dynes to newtons\nforce_dyn = 100 * u.dyn\nforce_newton = force_dyn.to(u.N)\n\nprint(f'Force: {force_dyn} = {force_newton}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the energy in ergs of an object with a mass of 1 kg and velocity of 1 m/s^2"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Calculate energy in ergs\nmass = 1 * u.kg\nvelocity = 1 * u.m / u.s**2\nenergy = (1/2) * mass * velocity**2\nenergy_erg = energy.to(u.erg)\n\nprint(f'Energy: {energy} = {energy_erg}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 1 gauss to teslas"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Convert gauss to teslas\nmagnetic_field_gauss = 1 * u.G\nmagnetic_field_tesla = magnetic_field_gauss.to(u.T)\n\nprint(f'Magnetic Field: {magnetic_field_gauss} = {magnetic_field_tesla}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 1D array of integers and I want to create a Gaussian kernel for smoothing. How do I use the `Gaussian1DKernel` function from `astropy.convolution`?"
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as conv\nGaussian1DKernel(stddev=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to smooth out a 1D signal using a Gaussian filter. I want to use the `Gaussian1DKernel` function from `astropy.convolution`. Can you provide an example of how to do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import Gaussian1DKernel, convolve\nx = np.linspace(-10, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.2, 100)\nkernel = Gaussian1DKernel(stddev=1)\nsmoothed_y = convolve(y, kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of data and I want to apply a Gaussian filter to it. I'm using the `Gaussian1DKernel` function from `astropy.convolution`. How do I set the standard deviation of the kernel?"
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as conv\nkernel = Gaussian1DKernel(stddev=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to correct the coordinate system of a FITS file with a plate scale of 0.1 arcseconds per pixel and a pointing center at (100,100) using astropywcs.WCS"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits, wcs"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to set the WCS attribute of a WCS object to a string literal specifying the celestial coordinate system 'Celestial North-Up' using the astropy 'WCS' module"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use the astropy function FORTRAN_uuid to generate a random UUID"
      },
      {
        "from": "assistant",
        "value": "import astropy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the radian-based equivalent of the Celsius temperature scale?\nI'm having trouble finding this in the documentation."
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.temperature('celsius')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert temperature values from Kelvin to Rankine?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.temperature('kelvin=ranksine')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the mathematical expression for converting between Celsius and Fahrenheit temperature scales?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.temperature('celsius').convert_to('fahrenheit')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a unit for the distance of 1 parsec using astropy.units.Unit?"
      },
      {
        "from": "assistant",
        "value": "u.pc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a unit for the speed of light in vacuum using astropy.units.Unit?"
      },
      {
        "from": "assistant",
        "value": "c = 299792458 * u.m / u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a unit for the temperature of 0 degrees Celsius using astropy.units.Unit?"
      },
      {
        "from": "assistant",
        "value": "u.degC"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the spherical polar coordinates (r, lat, lon) into cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nspherical_to_cartesian(r, lat, lon)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a binary system with a mass ratio of 3:1. How do I calculate the orbital period of the secondary star using the Kepler's third law?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import G, c\nfrom astropy import units as u\n\n# Define the masses and semi-major axis\nm1 = 3 * 1.989e30  # Mass of the primary star in kg\nm2 = 0.5 * 1.989e30  # Mass of the secondary star in kg\na = 1.5e11  # Semi-major axis in meters\n\n# Calculate the orbital period using Kepler's third law\nP = 2 * np.pi * np.sqrt(a**3 / (G * (m1 + m2)))\n\n# Print the result\nprint(P.to(u.day))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in the motion of a planet in a highly eccentric orbit. How do I calculate its velocity at perihelion using the vis-viva equation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import G, c\nfrom astropy import units as u\n\n# Define the semi-major axis, eccentricity, and mass of the star\na = 3.5e11  # Semi-major axis in meters\ne = 0.8  # Eccentricity\nM = 1.989e30  # Mass of the star in kg\n\n# Calculate the velocity at perihelion using the vis-viva equation\nv_peri = np.sqrt(G * M / a)\n\n# Print the result\nprint(v_peri.to(u.m / u.s))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the position of a spacecraft in a heliocentric orbit at a specific time. How do I use the astropy.coordinates module to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import solar_system_ephemeris\nfrom astropy.time import Time\nfrom astropy import units as u\n\n# Define the time and epoch\nt = Time('2022-01-01 12:00:00', format='iso', scale='utc')\nepoch = 'j2000'\n\n# Load the ephemeris\nssb = solar_system_ephemeris.get_body('sun', t, epoch)\nspacecraft = solar_system_ephemeris.get_body('spacecraft', t, epoch)\n\n# Calculate the position of the spacecraft\nposition = spacecraft.position\n\n# Print the result\nprint(position)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of FITS files ('file1.fits', 'file2.fits', ...) and want to know their summary information. How can I display this?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info('file1.fits'); astropy.io.fits.info('file2.fits'); ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 95% confidence interval for the proportion of stars in the Milky Way that are red dwarfs, given 1000 observations with 500 stars classified as red dwarfs?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.binom_conf_interval(500, 1000, confidence_level=0.95, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 90% confidence interval for the proportion of stars in a survey that are blue giants, given 200 observations with 80 stars classified as blue giants?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.binom_conf_interval(80, 200, confidence_level=0.9, interval='jeffreys')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 99% confidence interval for the proportion of stars in a galaxy that are white dwarfs, given 500 observations with 200 stars classified as white dwarfs?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.binom_conf_interval(200, 500, confidence_level=0.99, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Astropy library to convert between different celestial coordinate systems?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nc = SkyCoord(ra=10*u.deg, dec=20*u.deg, frame='icrs')\nprint(c.transform_to('galactic'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between ICRS and FK5 coordinate systems?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, FK5\nprint(ICRS(10*u.deg, 20*u.deg))\nprint(FK5(10*u.deg, 20*u.deg))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance to a celestial object using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport numpy as np\nc = SkyCoord(ra=10*u.deg, dec=20*u.deg, distance=1000*u.pc)\nprint(c.distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables, one with student information and one with exam scores. How can I join them on the student ID to get the scores for each student?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import join\nstudent_table = Table({'ID': [1, 2, 3], 'Name': ['John', 'Alice', 'Bob']})\nexam_table = Table({'ID': [1, 2, 3], 'Score': [90, 80, 70]})\njoined_table = join(student_table, exam_table, keys='ID')\nprint(joined_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equation of the circle of radius 1 centered at the origin in cylindrical coordinates?"
      },
      {
        "from": "assistant",
        "value": "r=1."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert polar coordinates (r=2, theta=60 degrees) to cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "x=2*cos(theta), y=2*sin(theta)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the cylindrical coordinates of a point with cartesian coordinates (x=3, y=4, z=5)?"
      },
      {
        "from": "assistant",
        "value": "rho=sqrt(x^2+y^2), phi=arctan(y/x), z=z."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout object from a 2D array."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nfrom numpy import array\n\n# Create a 2D array\ndata = array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n# Create a cutout object from the 2D array\ncutout = Cutout2D(data, (1, 1), (3, 3))\n\nprint(cutout.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a temperature from Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nu.Kelsius = u.Celsius / u.K\n temperature = 30*u.Celsius\n kelvin = temperature.to(u.K)\nprint(kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are some common applications of the Spherical Bessel function? What are some of its uses?"
      },
      {
        "from": "assistant",
        "value": "y"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using astropy's gaussian_fwhm_to_sigma function to calculate sigma from FWHM. Can you explain how this function works?"
      },
      {
        "from": "assistant",
        "value": "This function calculates the standard deviation (sigma) from the full width at half maximum (FWHM) of a Gaussian distribution using the formula: sigma = FWHM / (2 \u221a(2 \u221d ln(2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use astropy's gaussian_fwhm_to_sigma function to calculate sigma from FWHM in a real-world scenario. Can you provide an example?"
      },
      {
        "from": "assistant",
        "value": "Let's say we observe a star with a FWHM of 5.2 angstroms. We can use the gaussian_fwhm_to_sigma function to calculate the sigma: sigma = gaussian_fwhm_to_sigma * 5.2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " Does Astropy's gaussian_fwhm_to_sigma support units?"
      },
      {
        "from": "assistant",
        "value": "Yes, it does. It will convert the input value to the appropriate unit before calculating the sigma."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know how to use the astropy.modeling.models.Add to add 3 to my model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Add, Constant\ne\nc = Constant(3)\nm = Add(3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the data from a specific extension in a FITS file using the extension name?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nprint(fits.getdata('file.fits', ext='sci'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert AltAz coordinates to a WCS object with a tangent plane projection in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord, AltAz, EarthLocation\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create EarthLocation object for NYC\nlocation = EarthLocation.from_geodetic(lat=40.696667, lon=-74.01, height=0*u.m)\n\n# Create a sample Alt/Az coordinate\nobstime = Time('2024-01-01 00:00:00')\nframe = AltAz(obstime=obstime, location=location)\nskycoord = SkyCoord(alt=45*u.deg, az=180*u.deg, frame=frame)\n\n# Convert AltAz to ICRS\nicrs = skycoord.transform_to('icrs')\n\n# Create WCS with tangent plane projection\nw = WCS(naxis=2)\nw.wcs.crpix = [256, 256]  # Center pixel\nw.wcs.cdelt = [-0.02, 0.02]  # Pixel scale in degrees\nw.wcs.crval = [icrs.ra.deg, icrs.dec.deg]  # Reference position\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Tangent plane projection\nw.wcs.equinox = 2000.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert FK5 coordinates to a WCS object with a polar stereographic projection in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord, FK5, EarthLocation\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create EarthLocation object for NYC\nlocation = EarthLocation.from_geodetic(lat=40.696667, lon=-74.01, height=0*u.m)\n\n# Create a sample FK5 coordinate\nobstime = Time('2024-01-01 00:00:00')\nframe = FK5(equinox=obstime, location=location)\nskycoord = SkyCoord(ra=12*u.hour, dec=30*u.deg, frame=frame)\n\n# Convert FK5 to ICRS\nicrs = skycoord.transform_to('icrs')\n\n# Create WCS with polar stereographic projection\nw = WCS(naxis=2)\nw.wcs.crpix = [256, 256]  # Center pixel\nw.wcs.cdelt = [-0.02, 0.02]  # Pixel scale in degrees\nw.wcs.crval = [icrs.ra.deg, icrs.dec.deg]  # Reference position\nw.wcs.ctype = ['RA---PS', 'DEC--PS']  # Polar stereographic projection\nw.wcs.equinox = 2000.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert Galatic coordinates to a WCS object with a cylindrical equidistant projection in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord, Galactic\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create a sample Galactic coordinate\nskycoord = SkyCoord(l=30*u.degree, b=20*u.degree, frame=Galactic)\n\n# Create WCS with cylindrical equidistant projection\nw = WCS(naxis=2)\nw.wcs.crpix = [256, 256]  # Center pixel\nw.wcs.cdelt = [-0.02, 0.02]  # Pixel scale in degrees\nw.wcs.crval = [skycoord.l.degree, skycoord.b.degree]  # Reference position\nw.wcs.ctype = ['L---CAR', 'B---CAR']  # Cylindrical equidistant projection"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of exoplanet stars with their corresponding orbital periods in a CSV file called 'stars.csv'. How can I load this data into a pandas DataFrame called 'stars_df' and calculate the simple moving average of the orbital periods over a window of 3 days?"
      },
      {
        "from": "assistant",
        "value": "import pandas as pd\n\n# Load the CSV file into a pandas DataFrame\nstars_df = pd.read_csv('stars.csv')\n\n# Calculate the simple moving average of the orbital periods over a window of 3 days\nstars_df['smab'] = stars_df['orbital_period'].rolling(window=3).mean()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `astropy.units.cgs` module to convert kilo-g to gram?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nkg = 10 * u.kg\ng = kg.to(u.g)\nprint(g)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have the following data: name, age, and height for a group of people. How can I create an Astropy Table with these data using appropriate column names and units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\ndata = Table([\n    ['John', 25, 1.7],\n    ['Mary', 31, 1.5],\n    ['Bob', 42, 1.9]\n],\nnames=('name', 'age', 'height'),\nunits=(None, None, u.m))\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to perform a non-linear least squares fit using Astropy's modeling package."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndots"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Provide an example of how to use Astropy's modeling package to fit a sinusoidal curve to some sample data."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\ndots"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to use Astropy's modeling package to fit a Gaussian curve to some sample data, and calculate the chi-squared value for the fit."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndots"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing 1D spectroscopic data. Show me how to create an array of ISO-formatted observation times starting from string dates."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\ndates = np.array(['2022-01-01', '2022-01-15', '2022-02-01'])\ntimes = Time(dates)\niso_times = times.iso\nprint(iso_times)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to represent points in 3D cylindrical coordinates using the astropy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation\n\n# Define the cylindrical coordinates\nrho = 5 * u.pc\nphi = 30 * u.deg\nz = 2 * u.pc\n\n# Create a CylindricalRepresentation\ncyl_coords = CylindricalRepresentation(rho=rho, phi=phi, z=z)\n\n# Print the cylindrical coordinates\nprint(cyl_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of length for a furlong?"
      },
      {
        "from": "assistant",
        "value": "1 furlong = 660 ft"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many pounds is a ton?"
      },
      {
        "from": "assistant",
        "value": "1 ton = 2000 lb"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of mass for a slug?"
      },
      {
        "from": "assistant",
        "value": "1 slug = 32.174049 lb"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a list of 3D Cartesian coordinates to spherical coordinates. How do I do that?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coords\n\n# Sample 3D Cartesian coordinates\ncartesian_coords = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\n# Convert Cartesian to spherical coordinates\ncartesian = coords.CartesianRepresentation(cartesian_coords)\nspherical = cartesian.cartesian_to_spherical()\n\n# Print spherical coordinates\nprint(spherical)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use `astropy.stats.sigma_clipped_stats` function?"
      },
      {
        "from": "assistant",
        "value": "SIGMA CLIPPED STATS OF FLARE DATA"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Why `astropy.stats.sigma_clipped_stats` function is used in time series analysis?"
      },
      {
        "from": "assistant",
        "value": "TIME SERIES ANALYSIS WITH SIGMA CLIPPED STATS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the parameters of `astropy.stats.sigma_clipped_stats` function?"
      },
      {
        "from": "assistant",
        "value": "PARAMETERS OF SIGMA CLIPPED STATS FUNCTION"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the 90% confidence interval for the detection efficiency in my experiment, where I detected 12 successes out of 50 trials?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\n\n# Number of successes and total number of trials\nn_binaries = 12\nn_total = 50\n\n# Calculate Wilson confidence interval for 90% confidence level\nc = 0.9\n\ninterval = binom_conf_interval(n_binaries, n_total, confidence_level=c, interval='wilson')\nprint(interval)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to multiply a model by a dimensionless factor using astropy.modeling.models.Scale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Scale\nfrom astropy.modeling import models\n\n# Create a model to be scaled\noriginal_model = models.Gaussian2D(amplitude=1.0, x_mean=0.0, y_mean=0.0, x_stddev=1.0, y_stddev=1.0)\n\n# Create a scaling model with a factor of 2\nscaling_model = Scale(factor=2.0)\n\n# Scale the original model\nscaled_model = scaling_model(original_model)\n\nprint(scaled_model.parameters[0].vary)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of dates and corresponding temperatures. How can I calculate the mean and standard deviation of these temperatures over each day?"
      },
      {
        "from": "assistant",
        "value": "import pandas as pd\nfrom astropy.stats import knuth_bin_width\n\n# Create a simple dataset\ndates = ['2022-01-01', '2022-01-01', '2022-01-02', '2022-01-02', '2022-01-03', '2022-01-03']\ntemps = [20, 22, 21, 23, 19, 21]\ndata = pd.DataFrame({'Date': dates, 'Temperature': temps})\n\n# Group by date and calculate mean and standard deviation\ngrouped_data = data.groupby('Date')['Temperature'].agg(['mean', 'std'])\n\nprint(grouped_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the KDE estimate to smooth the histogram of stellar magnitudes in my dataset? I want to visualize the distribution of stellar populations in the galaxy and determine their properties."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import histogram\nfrom scipy.stats import gaussian_kde\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate two separate populations of stellar magnitudes\nn_bright = 500  # number of bright stars\nn_faint = 300   # number of faint stars\n\n# Generate magnitudes for two populations\nbright_stars = np.random.normal(loc=15, scale=0.5, size=n_bright)\nfaint_stars = np.random.normal(loc=18, scale=0.3, size=n_faint)\n\n# Combine the two populations\nmagnitudes = np.concatenate([bright_stars, faint_stars])\n\n# Calculate the histogram\ndensity, bin_edges = histogram(magnitudes, bins='scott')\n\n# Smooth the histogram using KDE estimate\nkde = gaussian_kde(magnitudes)\nsmooth_density = kde.evaluate(bin_edges)\n\n# Plot the histogram and the smoothed density\ntotal_width = 0.5 * (bin_edges[1] - bin_edges[0])\nbin_centers = bin_edges[:-1] + total_width / 2\nplt.figure(figsize=(10, 6))\nplt.plot(bin_centers, density, 'o-', label='Histogram')\nplt.plot(bin_centers, smooth_density, 'r-', label='Smoothed Density')\nplt.xlabel('Magnitude', fontsize=12)\nplt.ylabel('Normalized Frequency', fontsize=12)\nplt.title('Stellar Magnitude Distribution with Smoothed Density', fontsize=14)\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the power stretch transformation to enhance the details in this galaxy image?"
      },
      {
        "from": "assistant",
        "value": "{\"type\": \"function\"), "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a power index greater than 1 in the power stretch transformation?"
      },
      {
        "from": "assistant",
        "value": "{\"type\": \"function\"), "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply the power stretch transformation to a stack of images?"
      },
      {
        "from": "assistant",
        "value": "{\"type\": \"function\")}]} feverstretch power stretch transformation, demonstrating its effectiveness in enhancing both bright and dark regions."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new FITS file from scratch using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.HDUList([fits.PrimaryHDU(), fits.ImageHDU(np.random.rand(10, 10))]).writeto('new_fits_file.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS image with a specific header and data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncols = np.array([1, 2, 3])\nrows = np.array([4, 5, 6])\nhdr = fits.Header()\\nhdr.append('TELESCOP', 'HST')\\nhdr.append('INSTRUME', 'WFC3')\\nfits.HDUList([fits.ImageHDU(data=np.array([cols, rows]), header=hdr)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a CSV file into an Astropy Table, skipping the first two lines and converting the 'mass' column to float32?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nfrom astropy.io import ascii\n\n# Read the CSV file, skipping the first two lines\ntable = ascii.read('file.csv', skip_header=2)\n\n# Convert the 'mass' column to float32\nmass_col = Column(table['mass'], format='float32')\n\n# Replace the original 'mass' column with the converted column\ntable['mass'] = mass_col\n\nreturn table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a string of exoplanet transit timing observations in a custom format. How do I read it into an Astropy Table while converting the time column to Julian Date and the depth column to float32?"
      },
      {
        "from": "assistant",
        "value": "---<read-transit-data-function>---"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read an ASCII table from a string into an Astropy Table, assuming the table has 3 columns and the first row is a header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.io import ascii\n\n# Create a string with the ASCII table\nascii_table_str = \"\nName  Age Height\nJohn  25  1.8m\nJane  30  1.6m\"\n\n# Read the ASCII table into an Astropy Table\ntable = ascii.read(ascii_table_str, format='commented_header', delimiter='  ', header_start=0, data_start=1)\n\nreturn table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an FK4 coordinate object with proper motion information for a binary star with RA=02h 31m 49.09s, Dec=-03d 08m 13.5s and proper motions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create FK4 coordinates with proper motion for the binary star\n# Note: FK4 coordinates are defined for B1950.0 epoch\nstar_coords = FK4(\n    ra='02h 31m 49.09s',\n    dec='-03d 08m 13.5s',\n    pm_ra_cosdec=0.264 * u.arcsec/u.yr,  # Proper motion in RA (includes cos(dec) factor)\n    pm_dec=-0.085 * u.arcsec/u.yr,       # Proper motion in Dec\n    obstime=Time('1940-01-01'),          # Observation time\n    equinox='B1950.0'                    # FK4 reference frame epoch\n)\n\n# Print the coordinates\nprint(f\"Star position (FK4, B1950.0):\")\nprint(f\"RA: {star_coords.ra.to_string(unit=u.hour, sep=':', pad=True)}\")\nprint(f\"Dec: {star_coords.dec.to_string(unit=u.degree, sep=':', pad=True)}\")\nprint(f\"Proper Motion RA*cos(Dec): {star_coords.pm_ra_cosdec}\")\nprint(f\"Proper Motion Dec: {star_coords.pm_dec}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the FK4 frame to represent the position of a star with RA=12h 34m 12.23s, Dec=22d 38m 52.7s at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\n\n# Create FK4 coordinates for the star at a specific time\nstar_coords = FK4(\n    ra='12h 34m 12.23s',\n    dec='22d 38m 52.7s',\n    obstime=Time('2022-07-25T00:00:00')\n)\n\n# Print the coordinates\nprint(f\"Star position (FK4, {star_coords.obstime}):\")\nprint(f\"RA: {star_coords.ra.to_string(unit='hour', sep=':', pad=True)}\")\nprint(f\"Dec: {star_coords.dec.to_string(unit='degree', sep=':', pad=True)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a vector of FK4 coordinates representing the positions of multiple stars at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\ncimport numpy as np\n\n# Create an array of FK4 coordinates for multiple stars\nstar_coords = [FK4(ra='02h 31m 49.09s', dec='-03d 08m 13.5s', obstime=Time('1940-01-01')) for _ in range(10)]\n\n# Print the coordinates\nfor i, coord in enumerate(star_coords):\n    print(f\"Star {i+1} position (FK4, 1940-01-01):\")\n    print(f\"RA: {coord.ra.to_string(unit='hour', sep=':', pad=True)}\")\n    print(f\"Dec: {coord.dec.to_string(unit='degree', sep=':', pad=True)}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the median absolute deviation from the median"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import madstd\nimport numpy as np\n\n# Sample data\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nmad = madstd(x)\nprint(mad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the skewness and kurtosis of a distribution"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import skewness, kurtosis\ncalculation_example = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nresults = skewness(calculation_example), kurtosis(calculation_example)\nprint(results)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to perform a hypothesis test to compare the mean of two samples"
      },
      {
        "from": "assistant",
        "value": "from scipy import stats\ndata1 = [1, 2, 3, 4, 5]\ndata2 = [6, 7, 8, 9, 10]\ntest_statistic, p_value = stats.ttest_ind(data1, data2)\nif p_value < 0.05:\nprint('\\nReject the null hypothesis')\nelse:\nprint('\\nFail to reject the null hypothesis')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my research on solar observations, I need to determine when the Sun will be at its highest altitude from my observatory's location in the Southern Hemisphere. Can you help me write code to find this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nfrom astropy.coordinates import get_sun, EarthLocation, AltAz\nfrom astropy import units as u  # Added import for units\nimport numpy as np\nclass Observatory:\n    def __init__(self, lat, lon, height):\n        self.location = EarthLocation(lat=lat*u.deg, lon=lon*u.deg, height=height*u.m)\n\n# Define observatory location (Sydney Observatory)\nobservatory = Observatory(lat=-33.8672*u.deg, lon=151.2093*u.deg, height=70*u.m)\n\ntoday = Time.now()\ndelta_hours = np.linspace(0, 24, 289)  # 288 intervals = 5-minute steps\ntimes = today + TimeDelta(delta_hours * u.hour)\n\naltitudes = []\nfor t in times:\n    sunpos = get_sun(t)\n    frame = AltAz(obstime=t, location=observatory.location)\n    sun_altaz = sunpos.transform_to(frame)\n    altitudes.append(sun_altaz.alt.deg)\n\nmax_alt_idx = np.argmax(altitudes)\nsolar_noon = times[max_alt_idx]\n\nprint(f\"Sun reaches highest altitude ({altitudes[max_alt_idx]:.1f}\u00b0) at {solar_noon.datetime.strftime('%H:%M')} UTC\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the DATE-OBS value from the primary HDU in a FITS file named 'image.fits'?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('image.fits', 'DATE-OBS')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spatial distribution of stars in a galaxy. How can I create a Gaussian model with fixed position but allow the standard deviation to vary during fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the velocity distribution of stars in a star cluster. How can I create a Gaussian model with fixed standard deviation but allow the mean velocity to vary during fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the temperature distribution of gas in a galaxy. How can I create a Gaussian model with fixed temperature but allow the standard deviation to vary during fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write a binary table HDU to a FITS file called 'test.fits'? "
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits \nhdu = fits.BinTableHDU(data=[1, 2, 3]) \nhdu.writeto('test.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I write a FITS file with a specific HDU list to 'output.fits'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits \nhdul = fits.HDUList([fits.PrimaryHDU(), fits.ImageHDU(data=1)]) \nhdul.writeto('output.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write a compressed FITS file called 'compressed.fits.gz' without any HDUs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits \nhdul = fits.HDUList([fits.PrimaryHDU()]) \nhdul.writeto('compressed.fits.gz')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to access individual measurement rows in astropy.table.Table?"
      },
      {
        "from": "assistant",
        "value": "table = astropy.table.Table()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to create a new row in astropy.table.Table?"
      },
      {
        "from": "assistant",
        "value": "row = table.row"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update a row in astropy.table.Table?"
      },
      {
        "from": "assistant",
        "value": "row_update = table[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to delete a row in astropy.table.Astropy Table?"
      },
      {
        "from": "assistant",
        "value": "table = table.rows[i:].append()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.gaussian_sigma_to_fwhm  to convert the 1.5 Gaussian width of pulsar timing analysis to fwhm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\n\ngaussian_sigma_to_fwhm(1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you use astropy.stats.gaussian_sigma_to_fwhm to convert the 1.0 Gaussian width of pulsar timing analysis to fwhm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\ngaussian_sigma_to_fwhm(1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.gaussian_sigma_to_fwhm  to convert the 0.5 Gaussian width of pulsar timing analysis to fwhm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\ngaussian_sigma_to_fwhm(0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the 90% confidence interval for the source intensity using the poisson_conf_interval function, given observed counts of 10 and a known background of 2."
      },
      {
        "from": "assistant",
        "value": "poisson_conf_interval(10, background=2, confidence_level=0.90, interval='kraft-burrows-nousek')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair to calculate the median color index in astropy tables"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn  # Changed to import MaskedColumn\nimport numpy as np\nfrom astropy.utils.masked import Masked\n\ntable = Table(\n    {'color_index': [1.2, 2.3, 3.4, 4.5, 5.6]}\n)\n\ncolor_column = MaskedColumn(\n    data=table['color_index'],\n    name='median_color_index',\n    dtype=float,\n    description='Median color index of objects',\n    format='%.2f',\n    unit=None\n)\ntable.add_column(color_column)\ncolor_median = np.median(table['median_color_index'])\nprint(color_median)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the BlackBody model to calculate the flux of a blackbody at a temperature of 3000K and wavelength of 10000nm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\nbb = BlackBody(temperature=3000*u.K)\nflux = bb(10000*u.nm)\nprint(flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add kilometers and meters to the set of enabled units and convert 200 million kilometers to meters."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy units module\nfrom astropy import units as u\n\n# Add kilometers and meters to the set of enabled units\ncm = u.m\nkm = u.km\nu.add_enabled_units([cm, km])\n\n# Define the distance in million kilometers\ndistance_km = 200e6 * u.km\n\n# Convert to meters using astropy.units.find_equivalent_units\nlight_seconds = distance_km.to(u.m)\n\nprint(f'{distance_km} = {light_seconds:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a list of intervals to a list of non-overlapping intervals covering (0,1)?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.fold_intervals"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the function used to convert a list of intervals to a list of non-overlapping intervals covering (0,1)?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.fold_intervals"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the parameters used in the function fold_intervals?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.fold_intervals"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a one dimensional filter kernel using the CustomKernel class?"
      },
      {
        "from": "assistant",
        "value": "np.array([1, 2, 3, 2, 1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a two dimensional filter kernel using the CustomKernel class?"
      },
      {
        "from": "assistant",
        "value": "np.array([[1, 1, 1], [1, 2, 1], [1, 1, 1]])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible array types that can be accepted by the CustomKernel class?"
      },
      {
        "from": "assistant",
        "value": "list or array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PowerLaw1D model with amplitude=1e-3, x_0=1000, alpha=0.5 and then evaluate it at wavelength points between 500-1500 Angstroms in steps of 50"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import PowerLaw1D\nimport numpy as np\n\n# Create wavelength points for evaluation (500-1500 \u00c5 in steps of 50)\nwavelengths = np.arange(500, 1600, 50)\n\n# Create PowerLaw1D model with specified parameters\n# amplitude: flux at reference point x_0\n# x_0: reference wavelength\n# alpha: power law index\nagn_model = PowerLaw1D(amplitude=1e-3, x_0=1000, alpha=0.5)\n\n# Evaluate the model at specified wavelength points\nflux = agn_model(wavelengths)\n\n# Print wavelength-flux pairs\nfor w, f in zip(wavelengths, flux):\n    print(f\"Wavelength: {w:4.0f} \u00c5, Flux: {f:.3e}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write my observed stellar magnitudes table (containing columns star_id, v_mag, b_mag, u_mag) to a string output with \\\\ as column delimiter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table from astropy.io import ascii # Create the table with sample data data = [['HD123', 12.3, 13.1, 13.8]]  # Sample first row t = Table(rows=data, names=('star_id', 'v_mag', 'b_mag', 'u_mag')) # Write table to string with \\\\ delimiter from io import StringIO output = StringIO() ascii.write(t, output, format='basic', delimiter='\\\\', comment=False, quotechar='', strip_whitespace=True, names=['star_id', 'v_mag', 'b_mag', 'u_mag'], include_names=['star_id', 'v_mag', 'b_mag', 'u_mag'], exclude_names=[], fast_writer=True, overwrite=False) # Get the string output table_string = output.getvalue() print(table_string)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Box1D model with amplitude 2, position 4000, and width 3000, and plot it against wavelength?\\n"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D\\nimport numpy as np\\nimport matplotlib.pyplot as plt\\n\\n# Create wavelength array (in Angstroms)\\n wavelength = np.linspace(3000, 8000, 1000)\\n\\n# Create Box1D model\\n# Amplitude=2, Position=4000 (center), Width=3000 Angstroms\\nbox_filter = models.Box1D(amplitude=2, x_0=4000, width=3000)\\n\\n# Calculate response function values\\nresponse = box_filter(wavelength)\\n\\n# Plot the sensitivity window\\nplt.figure(figsize=(8, 5))\\nplt.plot(wavelength, response, 'b-', label='Detector Response')\\nplt.xlabel('Wavelength (\u00c5)')\\nplt.ylabel('Sensitivity')\\nplt.title('Detector Sensitivity Window')\\nplt.grid(True, alpha=0.3)\\nplt.legend()\\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to create a WCS object from a FITS header. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "WCS(wcs=header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the median absolute deviation of a dataset"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.median_absolute_deviation(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the median absolute deviation of a normal distribution"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.median_absolute_deviation(randn(1000))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I calculate the median absolute deviation along a specific axis"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.median_absolute_deviation(data=[[1, 2], [3, 4]], axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the median absolute deviation of a masked array"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.median_absolute_deviation(np.ma.masked_array([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a custom function to calculate the median"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.median_absolute_deviation(data=[1, 2, 3, 4, 5], func=np.mean)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm simulating atmospheric dispersion in telescope images. How can I generate a 2D linear model to represent the distortion level across the detector?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ndetector_size = (1024, 1024)\n\ndetector_x, detector_y = np.mgrid[:detector_size[1], :detector_size[0]]\ndef distortion_level(x, y):\n    return 0.1 * x + 0.2 * y\ndistortion_model = models.Poly2D(2)\ndistortion_model.x_0.value = 0\n\ndistortion_model.y_0.value = 0\ndistortion_model.x_1.value = 0.1\ndistortion_model.y_1.value = 0.2\ndistortion_image = distortion_model(detector_x, detector_y)\ndistortion_image = distortion_image.value\n\ndistortion_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm simulating instrumental smearing in spectrograph data. How can I generate a 1D model to represent the smearing function across the detector?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndef smearing_function(x):\n    return np.exp(-((x-5)/1.5)**2)\nsmearing_model = models.Gaussian(amplitude=1, sigma=1.5, x_0=5)\nsmearing_image = smearing_model(x)\nsmearing_image = smearing_image.value\n\ncis now the smearing function"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm simulating detector saturation in astronomical images. How can I generate a 2D non-linear model to represent the saturation level across the detector?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndef saturation_level(x, y):\n    return (np.sin(x) + np.sin(y))**2\nsaturation_model = models.Pow2D(2)\nsaturation_model.x_0.value = 0\nsaturation_model.y_0.value = 0\nsaturation_model.explicit = True\ncamera = np.mgrid[:1024, :1024]\nsaturation_image = saturation_model(camera[0], camera[1])\nsaturation_image = saturation_image.value\n\ncame now to be the saturation level"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of a list of exam scores?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndef freedman_bin_width(data, M=None, data_range=None):\n    # code for freedman_bin_width function\n\nde\n    # code for second half of function\n    return f discreet_bin_width(data, M=M, data_range=data_range)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Hubble constant at different redshifts using Planck18 parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nimport numpy as np\nredshifts = np.array([0, 0.5, 1.0, 2.0, 3.0]\nHubble_constant = Planck18().H0(redshifts)\nfor z, H0 in zip(redshifts, Hubble_constant):\n    print(f\"z = {z:.1f}: H0 = {H0:.3e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing optical telescope data with dimensions (1024, 1024) containing floating-point counts. Could you demonstrate how to create a compressed image HDU with HPIXEL compression and a scale factor of 1.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\from astropy.io import fits\n\ncounts = np.random.normal(100, 15, (1024, 1024)).astype(np.float32)\n\thdu = fits.CompImageHDU(data=count, compression_type='HPIXEL', hcomp_scale=1.5)\n\thdul = fits.HDUList([fits.PrimaryHDU(), hdu])\n\thdul.writeto('compressed_optical.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to structure my galaxies photometry data into a binary table HDU, with columns for flux, flux uncertainty, and wavelength. Can you show me how?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nimport numpy as np\n\ngalaxies_flux = np.array([1.2, 3.4, 5.6])  # flux\nflux_uncertainty = np.array([0.1, 0.2, 0.3])  # flux uncertainty\nwavelength = np.array([400, 500, 600])  # wavelength\n\n# Create an Astropy Table with the data\ngalaxies_data = Table([galaxies_flux, flux_uncertainty, wavelength],\n                     names=('Flux', 'Flux Uncertainty', 'Wavelength'),\n                     dtype=('f8', 'f8', 'i4'))\n\n# Convert Table to FITS binary table HDU\ncatalog_hdu = fits.BinTableHDU.from_columns(galaxies_data.as_array())\n\n# Add header information\ncatalog_hdu.header['EXTNAME'] = 'PHOTOMETRY'  # Name of extension\ncatalog_hdu.header['WATTScaled'] = False  # Magnitude system used\ncatalog_hdu.header['COMMENT'] = 'Galaxies photometry measurements'\ncatalog_hdu.header['MJD-OBS'] = 59223  # MJD of observations\n\n# Create primary HDU and HDU list\nprimary_hdu = fits.PrimaryHDU()\nhdul = fits.HDUList([primary_hdu, catalog_hdu])\n\n# Write to file\nhdul.writeto('galaxies_photometry.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to structure my stars radial velocity data into a binary table HDU, with columns for star ID, radial velocity, and uncertainty. Can you show me how?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nimport numpy as np\n\nstars_radial_velocity = np.array(['star1', 'star2', 'star3'])  # star ID\ncounty_radial_velocity = np.array([10.2, 20.3, 30.4])  # radial velocity\nradial_velocity_uncertainty = np.array([0.5, 0.6, 0.7])  # radial velocity uncertainty\n\n# Create an Astropy Table with the data\nstars_data = Table([stars_radial_velocity, county_radial_velocity, radial_velocity_uncertainty],\n                   names=('Star ID', 'Radial Velocity', 'Radial Velocity Uncertainty'),\n                   dtype=('S20', 'f8', 'f8'))\n\ncamels_hdu = fits.BinTableHDU.from_columns(stars_data.as_array())\ncamels_hdu.header['EXTNAME'] = 'RADIAL VELOCITY'  # Name of extension\ncamels_hdu.header['MJD-OBS'] = 59223  # MJD of observations\ncamels_hdu.header['COMMENT'] = 'Stars radial velocity measurements'\ncamels_hdu.header['VELOCITY_UNIT'] = 'km/s'\ncamels_hdu.header['VELOCITY_TYPE'] = 'Heliocentric'\n\n# Create primary HDU and HDU list\nprimary_hdu = fits.PrimaryHDU()\nhdul = fits.HDUList([primary_hdu, camels_hdu])\n\n# Write to file\nhdul.writeto('stars_radial_velocity.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to structure my quasars redshift data into a binary table HDU, with columns for quasar ID, redshift, and uncertainty. Can you show me how?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nimport numpy as np\n\nquasars_redshift = np.array(['quasar1', 'quasar2', 'quasar3'])  # quasar ID\nquasars_county_redshift = np.array([0.5, 0.6, 0.7])  # redshift\nquasars_radial_velocity_uncertainty = np.array([0.001, 0.002, 0.003])  # redshift uncertainty\n\n# Create an Astropy Table with the data\nquasars_data = Table([quasars_redshift, quasars_county_redshift, quasars_radial_velocity_uncertainty],\n                     names=('Quasar ID', 'Redshift', 'Redshift Uncertainty'),\n                     dtype=('S20', 'f8', 'f8'))\n\nffitted_hdu = fits.BinTableHDU.from_columns(quasars_data.as_array())\nffitted_hdu.header['EXTNAME'] = 'REDSHIFT'  # Name of extension\nffitted_hdu.header['MJD-OBS'] = 59223  # MJD of observations\nffitted_hdu.header['COMMENT'] = 'Quasars redshift measurements'\nffitted_hdu.header['REDSHIFT_UNIT'] = 'dimensionless'\n\n# Create primary HDU and HDU list\nprimary_hdu = fits.PrimaryHDU()\nhdul = fits.HDUList([primary_hdu, fitted_hdu])\n\n# Write to file\nhdul.writeto('quasars_redshift.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy to convert from Cartesian to spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, CartesianRepresentation, spherical_to_cartesian\n# Example data (replace with your actual data)\ncartesian_data = [[10, 20, 30], [40, 50, 60]]\nspherical = spherical_to_cartesian(carlton_dennon=CartesianRepresentation(x=carlton_dennon[0], y=carlton_dennon[1], z=carlton_dennon[2]))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the surface brightness of a spiral galaxy. How do I fit a Logarithmic1D model to a set of observed data points: x=[1,2,3,4,5] and y=[10.2,8.5,6.8,5.1,3.4] with initial parameters amplitude=5.0 and tau=3.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndx = np.array([1,2,3,4,5])dy = np.array([10.2,8.5,6.8,5.1,3.4])# Create model instance with initial parametersmodel = models.Logarithmic1D(amplitude=5.0, tau=3.0)\n# Create fitter instancefitter = fitting.LevMarLSQFitter()\n# Fit the model to the datafitted_model = fitter(model, dx, dy)\n# Print the fitted parametersprint(f'Best fit parameters:amplitude={fitted_model.amplitude.value:.3f}, tau={fitted_model.tau.value:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS image HDU with pixel/bit formatting and a specific data type?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nhdu = fits.ImageHDU(data=np.random.random((100, 100)), bitpix=16, format='I')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a science extension HDU to a FITS file with binary data and a specific header?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nhdu = fits.ImageHDU(data=np.random.random((100, 100)), name='SCI')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a binary table HDU with specific columns and a header?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\ncol1 = fits.Column(name='COL1', format='J', array=np.array([1, 2, 3]))\ncol2 = fits.Column(name='COL2', format='E', array=np.array([4.5, 6.7, 8.9]))\nhdu = fits.BinTableHDU.fromcolumns([col1, col2], name='TABLE')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to combine two tables with different time units while handling merge errors. How do I convert time units to a common format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack, join\nfrom astropy import units as u\ncolumns = ['time', 'value']\ndata1 = Table({'time': [1, 2, 3] * u.hour, 'value': [10, 20, 30]})\ndata2 = Table({'time': [2, 3, 4] * u.minute, 'value': [40, 50, 60]})\n# Convert time units to a common format\ndata2['time'] = data2['time'].to(u.hour)\n# Merge tables, handling merge errors\ncombined_data = vstack([data1, data2])\ntry:\n    combined_data.sort('time')\nexcept AstropyTableError as e:\n    print(f'Error: {str(e)}')\nprint(combined_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the asinh stretch to visualize a low-contrast image of a nebula?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize, ZScaleInterval\nfrom astropy.io import fits\nhdul = fits.open('nebula.fits')\nimage_data = hdul[0].data\nnorm = ImageNormalize(image_data, stretch=AsinhStretch(), interval=ZScaleInterval())\nplt.imshow(image_data, norm=norm, cmap='viridis')\nplt.show()\ndhul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changed parameter a on image stretch in the asinh function?"
      },
      {
        "from": "assistant",
        "value": "The 'a' parameter controls the transition from linear to logarithmic behavior of the asinh stretch. A larger value of 'a' makes the stretch more linear, while a smaller value makes it more logarithmic."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the asinh stretch with any kind of dataset?"
      },
      {
        "from": "assistant",
        "value": "No, the asinh stretch is specifically designed for visualizing low-contrast datasets, such as those with a large dynamic range. It may not be suitable for datasets with a small dynamic range or those with a mix of bright and faint features."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to normalize a 2D spectrum image?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.io import fits\nfrom astropy.visualization import ImageNormalize, LinearStretch\nfrom astropy.visualization.interval import MinMaxInterval\n\ndef normalize_spectrum_image(image_file):\n    # Read in the FITS data\n    hdu = fits.open(image_file)\n    data = hdu[0].data\n\n    # Normalize the data using ImageNormalize\n    norm = ImageNormalize(stretch=LinearStretch(),\n                          interval=MinMaxInterval(data.min(), data.max()))\n\n    # Apply normalization\n    normalized_data = norm(data)\n\n    return normalized_data\n\n# Example usage:\n# normalized_image = normalize_spectrum_image('spectrum.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 4 quadratic box models with 0 intensity outside 3 x unit box make it centered on different points"
      },
      {
        "from": "assistant",
        "value": "models.Box2D(amplitude=0.0, x_0=1.0, y_0=1.0, x_width=3.0, y_width=3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Make a model to mask a star of radius 2 in a 5x5 pixel area with constant intensity 1"
      },
      {
        "from": "assistant",
        "value": "models.Box2D(amplitude=1.0, x_0=2.5, y_0=2.5, x_width=5.0, y_width=5.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 5x5 pixel box model for dark subtraction with amplitude -10"
      },
      {
        "from": "assistant",
        "value": "models.Box2D(amplitude=-10.0, x_0=2.5, y_0=2.5, x_width=5.0, y_width=5.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of pixel values from a telescope image (size 1024x1024) ranging from 0 to 100000 counts. How can I use simple_norm to create a linear stretch normalization with vmin=1000, for better visualization of the cosmic structure?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import simple_norm\n\n# Create sample 2D telescope data (replace this with your actual data)\ngalaxy_data = np.random.uniform(0, 100000, size=(1024, 1024))\n\n# Create linear normalization\n# vmin=1000 ensures values are clipped\nnorm = simple_norm(\n    galaxy_data,\n    stretch='linear',\n    vmin=1000,\n)\n\n# Apply normalization to get scaled values between 0 and 1\nnormalized_data = norm(galaxy_data)\n\n# Optional: If you want to visualize using matplotlib\nimport matplotlib.pyplot as plt\nplt.imshow(normalized_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Normalized Intensity')\nplt.title('Linearly Normalized Telescope Image')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of spectral flux densities from an radio telescope observation (size 1024x1024) ranging from -1 to 10 Jy/beam. How can I use simple_norm to create a power-law stretch normalization with power=2.0, for better visualization of the radio spectrum?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import simple_norm\n\n# Create sample 2D radio telescope data (replace this with your actual data)\nradio_data = np.random.uniform(-1, 10, size=(1024, 1024))\n\n# Create power-law normalization\n# power=2.0 for a power-law stretch\nnorm = simple_norm(\n    radio_data,\n    stretch='power',\n    power=2.0,\n)\n\n# Apply normalization to get scaled values between 0 and 1\nnormalized_data = norm(radio_data)\n\n# Optional: If you want to visualize using matplotlib\nimport matplotlib.pyplot as plt\nplt.imshow(normalized_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Normalized Intensity')\nplt.title('Power-Law Normalized Radio Telescope Image')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of image values from a hyperspectral camera (size 1024x1024) ranging from 0 to 1000 counts. How can I use simple_norm to create a logarithmic stretch normalization with log_a=2000, for better visualization of the spectral information?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import simple_norm\n\n# Create sample 2D hyperspectral data (replace this with your actual data)\nhyperspectral_data = np.random.uniform(0, 1000, size=(1024, 1024))\n\n# Create logarithmic normalization\n# log_a=2000 for a logarithmic stretch\nnorm = simple_norm(\n    hyperspectral_data,\n    stretch='log',\n    log_a=2000,\n)\n\n# Apply normalization to get scaled values between 0 and 1\nnormalized_data = norm(hyperspectral_data)\n\n# Optional: If you want to visualize using matplotlib\nimport matplotlib.pyplot as plt\nplt.imshow(normalized_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Normalized Intensity')\nplt.title('Logarithmically Normalized Hyperspectral Camera Image')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to create a single Gaussian2D model with amplitude=500, centered at (25, 25) with stddev=4."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a single Gaussian2D model\nmodel = models.Gaussian2D(\n    amplitude=500,     # Peak intensity\n    x_mean=25,         # Center x position\n    y_mean=25,         # Center y position\n    x_stddev=4,        # Standard deviation in x\n    y_stddev=4         # Standard deviation in y\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.table.dstack to combine tables of stellar parameters from different observatories?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, dstack\n# Create sample data tables (in practice these would be loaded from files)\n# Each table has data for same 100 stars but from different observatories\nnp.random.seed(42)  # For reproducibility\nn_stars = 100\n\n# Simulate 3 tables with slight variations in measurements\ntable1 = Table({'temperature': 5000 + np.random.normal(0, 100, n_stars), 'luminosity': 1.0 + np.random.normal(0, 0.1, n_stars), 'mass': 1.0 + np.random.normal(0, 0.05, n_stars)})\ntable2 = Table({'temperature': 5000 + np.random.normal(0, 100, n_stars), 'luminosity': 1.0 + np.random.normal(0, 0.1, n_stars), 'mass': 1.0 + np.random.normal(0, 0.05, n_stars)})\ntable3 = Table({'temperature': 5000 + np.random.normal(0, 100, n_stars), 'luminosity': 1.0 + np.random.normal(0, 0.1, n_stars), 'mass': 1.0 + np.random.normal(0, 0.05, n_stars)})\n\n# Stack tables along a new dimension\nstacked_data = dstack([table1, table2, table3])\n\n# The resulting table has columns with 3 measurements for each parameter\n# Access measurements like: stacked_data['temperature'][:,0] for table1\n# Print first few rows to verify\nprint(\"First star measurements from all tables:\")\nprint(\"Temperature:\", stacked_data['temperature'][0])\nprint(\"Luminosity:\", stacked_data['luminosity'][0])\nprint(\"Mass:\", stacked_data['mass'][0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the image data from the second extension of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndata, header = fits.getdata('image.fits', header=True)\nprint(data.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the science data from a FITS file with EXTNAME 'SCI' and EXTVER 3?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ndata, header = fits.getdata('sci_data.fits', extname='SCI', extver=3)\nprint(data.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the data from the first extension of a FITS file with case insensitive EXTNAME 'sci'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ndata, header = fits.getdata('sci_data.fits', extname='sci', header=True)\nprint(data.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a simple model for a eclipsing binary system using Box1D with a center at phase 0.2, width 0.1, and depth of 0.4 (amplitude decrease of 0.4) for phases between 0 and 1"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\nphase = np.linspace(0, 1, 1000)\n\n# Create a Box1D model\n# Center at phase 0.2, width 0.1, amplitude -0.4 (negative for dip)\neclipse_model = models.Box1D(amplitude=-0.4, x_0=0.2, width=0.1)\n\n# Generate the light curve\n# Add 1.0 to normalize the baseline flux to unity\nlight_curve = eclipse_model(phase) + 1.0\n\n# Now light_curve contains the box-shaped eclipse"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the astropy.modeling.models.Box1D to create a box-shaped dip centered at phase 0.8, with a width of 0.3 and depth of 0.2 (amplitude decrease of 0.2) for phases between 0 and 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ntimes = np.linspace(0, 1, 1000)\n\n# Create a Box1D model\n# Center at phase 0.8, width 0.3, amplitude -0.2 (negative for dip)\nlight_curve = models.Box1D(amplitude=-0.2, x_0=0.8, width=0.3)\n\n# Generate the light curve\n# Add 1.0 to normalize the baseline flux to unity\nlight_curve = light_curve(times) + 1.0\n\n# Now light_curve contains the box-shaped eclipse"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a simple model using Box1D with a center at phase 0.6, width 0.4, and depth of 0.1 (amplitude decrease of 0.1) for phases between 0 and 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create phase points from 0 to 1\nphase = np.linspace(0, 1, 1000)\n\neclipse_model = models.Box1D(amplitude=-0.1, x_0=0.6, width=0.4)\n\n# Generate the light curve\n# Add 1.0 to normalize the baseline flux to unity\nlight_curve = eclipse_model(phase) + 1.0\n\n# Now light_curve contains the box-shaped eclipse"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate a 3D Airy disk model to simulate the imaging of a point source through a telescope?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport astropy.units as u\ncylinder_radius = 1.0  # Radius of the Airy disk (in pixels)\ndef get_angular_resolution(wavelength, aperture):\n    \"Calculate angular resolution using Rayleigh criterion\"\n    resolution = 1.22 * wavelength / aperture\n    return resolution\n\n# Example: Calculate resolution for a telescope\nwavelength = 500 * u.nm  # Visible light\naperture = 1 * u.m  # 1-meter telescope\nresolution = get_angular_resolution(wavelength, aperture)\nair_model = AiryDisk2D(amplitude=1.0, x_0=0.0, y_0=0.0, radius=cylinder_radius)\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\nairy_pattern = air_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the ZScaleInterval class from astropy.visualization to determine the scaling factors for my image data?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.ZScaleInterval(n_samples=1000, contrast=0.25, max_reject=0.5, min_npixels=5, krej=2.5, max_iterations=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default behavior of the ZScaleInterval class when determining scaling factors for my image data?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.ZScaleInterval()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the ZScaleInterval class to use a different number of samples when determining scaling factors for my image data?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.ZScaleInterval(n_samples=500)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram of the stellar luminosities of stars in a galaxy using asinh-stretch normalization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, MinMaxInterval, AsinhStretch\ncalc_luminosity = lambda x: 2.5 * np.log10(x)  # example calculation of luminosity\ndata = # some data on stellar luminosities\nnorm = ImageNormalize(data, stretch=AsinhStretch(), interval=MinMaxInterval())\nhist, bins = np.histogram(data, bins=50)\nnormed_hist = norm(hist)\nmapped_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal histogram bin width for my timing data using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Freedman-Diaconis rule to determine the optimal bin width for my histogram?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for calculating the optimal bin width using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet transit data, I need to fit a Gaussian1D model using DifferentialEvolutionLSQFitter. Can you demonstrate the code using time series [0,1,2,3,4,5] hours and flux values [1.0, 1.0, 0.95, 0.95, 1.0, 1.0] with initial width estimate of 2 hours and amplitude of 0.05?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nfrom astropy.modeling.fitting import DifferentialEvolutionLSQFitter\nimport numpy as np\n\n# Create time series and flux data\nTime = np.array([0, 1, 2, 3, 4, 5])  # Time in hours\nflux = np.array([1.0, 1.0, 0.95, 0.95, 1.0, 1.0])  # Normalized flux\n\n# Initialize Gaussian1D model\n# amplitude = depth of transit\n# mean = center of transit\n# stddev = duration of transit\ninit_model = Gaussian1D(amplitude=-0.05, mean=2.5, stddev=2.0)\n\n# Create fitter instance\nfitter = DifferentialEvolutionLSQFitter()\n\n# Fit the model to the data\nfitted_model = fitter(init_model, time, 1.0 - flux)  # 1.0 - flux to make transit positive\n\n# Print fitted parameters\nprint(f\"Transit depth: {-fitted_model.amplitude.value:.3f}\")\nprint(f\"Transit center: {fitted_model.mean.value:.3f} hours\")\nprint(f\"Transit duration: {fitted_model.stddev.value:.3f} hours\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet transit data, I need to fit a Lorentzian1D model using Least_Squares_MigradFitter. Can you demonstrate the code using time series [0,1,2,3,4,5] hours and flux values [1.0, 1.0, 0.95, 0.95, 1.0, 1.0] with initial width estimate of 2 hours and amplitude of 0.05?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentzian1D\nfrom astropy.modeling.fitting import Least_Squares_MigradFitter\nimport numpy as np\n\n# Create time series and flux data\nTime = np.array([0, 1, 2, 3, 4, 5])  # Time in hours\nflux = np.array([1.0, 1.0, 0.95, 0.95, 1.0, 1.0])  # Normalized flux\n\n# Initialize Lorentzian1D model\n# amplitude = depth of transit\n# x_0 = center of transit\n# fwhm = duration of transit\ninit_model = Lorentzian1D(amplitude=-0.05, x_0=2.5, fwhm=2.0)\n\n# Create fitter instance\nfitter = Least_Squares_MigradFitter()\n\n# Fit the model to the data\nfitted_model = fitter(init_model, Time, 1.0 - flux)  # 1.0 - flux to make transit positive\n\n# Print fitted parameters\nprint(f\"Transit depth: {-fitted_model.amplitude.value:.3f}\")\nprint(f\"Transit center: {fitted_model.x_0.value:.3f} hours\")\nprint(f\"Transit duration: {fitted_model.fwhm.value:.3f} hours\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet transit data, I need to fit a Voigt1D model using LevMarLSQFitter. Can you demonstrate the code using time series [0,1,2,3,4,5] hours and flux values [1.0, 1.0, 0.95, 0.95, 1.0, 1.0] with initial width estimate of 2 hours and amplitude of 0.05?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\nimport numpy as np\n\n# Create time series and flux data\nTime = np.array([0, 1, 2, 3, 4, 5])  # Time in hours\nflux = np.array([1.0, 1.0, 0.95, 0.95, 1.0, 1.0])  # Normalized flux\n\n# Initialize Voigt1D model\n# amplitude = depth of transit\n# x_0 = center of transit\n# sigma = Gaussian duration of transit\n# fwhm = Lorentzian duration of transit\ninit_model = Voigt1D(amplitude=-0.05, x_0=2.5, sigma=2.0, fwhm=2.0)\n\n# Create fitter instance\nfitter = LevMarLSQFitter()\n\n# Fit the model to the data\nfitted_model = fitter(init_model, Time, 1.0 - flux)  # 1.0 - flux to make transit positive\n\n# Print fitted parameters\nprint(f\"Transit depth: {-fitted_model.amplitude.value:.3f}\")\nprint(f\"Transit center: {fitted_model.x_0.value:.3f} hours\")\nprint(f\"Gaussian duration: {fitted_model.sigma.value:.3f} hours\")\nprint(f\"Lorentzian duration: {fitted_model.fwhm.value:.3f} hours\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic2D model for a spiral galaxy with n=1.5, r_eff=30 pixels, centered at (80, 80), and amplitude=75. The galaxy is nearly circular with ellipticity=0.05."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling.models import Sersic2D from astropy.modeling.parameters import Parameter # Create coordinate grid (200x200 pixels) y, x = np.mgrid[0:200, 0:200] # Calculate ellipticity parameters # ellipticity = 1 - b/a, where b/a is the axis ratio b_a = 1 - 0.05  # Convert ellipticity to axis ratio theta = 0  # Position angle (0 degrees = aligned with y-axis) # Create Sersic2D model with parameters: # n=1.5 (Sersic profile) # r_eff = 30 pixels # x_0, y_0 = 80, 80 (center position) model = Sersic2D( amplitude=75,  # Peak brightness r_eff=30,  # Effective radius n=1.5,  # Sersic index (n=1.5 for Sersic profile) x_0=80,  # X center y_0=80,  # Y center ellip=0.05,  # Ellipticity theta=theta  # Position angle ) # Generate the 2D image image = model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to test if a sample of phase angles follows a uniform distribution."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import kuiper_two\ncd = np.linspace(0, 2*np.pi, 100)\ndef uniform_cdf(x, a, b):\n    return (x - a) / (b - a)\nuniform_cdf_sample = uniform_cdf(cd, 0, 2*np.pi)\nkuiper_stat, p_value = kuiper_two(np.array([0.1*np.pi, 0.3*np.pi, 1.2*np.pi, 1.8*np.pi, 1.9*np.pi]) % (2*np.pi), uniform_cdf_sample)]} {'data': [{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D array of random numbers with a specific mean and standard deviation?"
      },
      {
        "from": "assistant",
        "value": "np.random.normal(1000, 50, size=(1024, 1024))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the uncertainty of a 1D array of counts?"
      },
      {
        "from": "assistant",
        "value": "np.sqrt(np.abs(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a CCDData object with a custom WCS?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.WCS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changing the ring's amplitude on the brightness of the simulated Einstein ring?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D\nfrom astropy.visualization import astropy_mpl_style\nimport matplotlib.pyplot as plt\n\ncenter_x, center_y = 0, 0\nring_radius = 20\nring_width = 2\namplitude_values = [0.5, 1.0, 1.5]\n\ndef plot_ring_amplitude(amplitude):\n    y, x = np.mgrid[-50:51, -50:51]\n    einstein_ring = Ring2D(amplitude=amplitude, r_in=ring_radius, width=ring_width, x_0=center_x, y_0=center_y)\n    ring_image = einstein_ring(x, y)\n    plt.imshow(ring_image, origin='lower', cmap='viridis')\n    plt.colorbar(label='Brightness')\n    plt.title(f'Einstein Ring with Amplitude {amplitude}')\n    plt.show()\n\ndict(zip(amplitude_values, ['high'] * len(amplitude_values)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the difference between two times using Astropy's Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nt = Time('2022-01-01 12:00:00', format='isot', scale='utc')\n\nt2 = Time('2022-01-02 12:00:00', format='isot', scale='utc')\ndelta = t2 - t\n#print(delta.iso)\n#print(delta.sec)\n#print(delta.value)\n#print(delta)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a datetime object to a astropy Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\n\ndt = datetime(2022, 1, 1, 12, 0, 0)\nt = Time(dt, format='iso', scale='utc')\n#print(t.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the sunrise and sunset times for a given location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation\nfrom sun_sar Tools import sunset, sunrise\n\t# Define the location\n\tlocation = EarthLocation.of_altaz(alt=30, az=180, obstime=Time(\"2022-01-01\", format='isot'))\n\tsunrise_time = sunrise(location, Time(\"2022-01-01\", format='isot'))\nsunset_time = sunset(location, Time(\"2022-01-01\", format='isot'))\n#print(sunrise_time)\n#print(sunset_time)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert temperature from Celsius to Kelvin and Rankine using astropy's temperature equivalencies?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the temperature in Celsius\ntemperature_celsius = 25 * u.Celsius\n\n# Convert to Kelvin and Rankine using temperature equivalencies\ntemperature_kelvin = temperature_celsius.to(u.K, equivalencies=u.temperature())\ntemperature_rankine = temperature_celsius.to(u.R, equivalencies=u.temperature())\n\n# Print all temperatures\nprint(f\"Temperature:\")\nprint(f\"Celsius: {temperature_celsius:.1f}\")\nprint(f\"Kelvin: {temperature_kelvin:.1f}\")\nprint(f\"Rankine: {temperature_rankine:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set up an astropy SkyCoord object with a specific location in the sky, including right ascension, declination, and distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.units import deg, m\n\n# Set up the coordinate\nsky_coord = SkyCoord(ra=12 * deg, dec=23 * deg, distance=10 * m)\n\n# Print the coordinate\nprint(sky_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D ring kernel with an inner radius of 10 pixels, a width of 2 pixels, and a discretization mode of 'linear_interp'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\n\nring_2D_kernel = Ring2DKernel(radius_in=10, width=2, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a 2D ring kernel with an inner radius of 5 pixels, a width of 1 pixel, and a factor of oversampling of 5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\n\nring_2D_kernel = Ring2DKernel(radius_in=5, width=1, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the astropy function to create a 2D ring kernel with an inner radius of 15 pixels, a width of 3 pixels, and a discretization mode of 'oversample'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\n\nring_2D_kernel = Ring2DKernel(radius_in=15, width=3, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm calculating the luminosity distance (d_L) of a gamma-ray burst (GRB) using the Hubble constant (H_0), the redshift (z) of the GRB, and the flux density (S) at a certain frequency (f). How do I get this length?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as c\n\n# Define the Hubble constant, redshift, flux density, and frequency with units\nH0 = 67.4 * u.km / (u.s * u.Mpc)\nz = 1.5\nc = 299792.458 * u.km / u.s\nS = 1e-8 * u.erg / u.cm2 / u.s\nf = 100 * u.MeV\n\ncovered_distance = c / (4 * np.pi * f * S * (1 + z) ** 2)\nprint(f'Luminosity distance d_L = {covered_distance.value:.2f} MpM')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm calculating the energy (E) of a photon emitted by a binary neutron star merger (BNSM) using the frequency (f) of the gravitational wave signal. How do I get this energy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as c\n\nc=f*6.62607015e-34/u.s\nE = 4*np.pi**2*c**2/f**2\n\nprint(f'Energy E = {E.evalf():.2f} J')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm calculating the angle (\u03b8) of a beam in radians, given the linear subtended angle (\u0394x) by a mirror and the focal length (f) of a convex lens. How do I get this angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nf = 1 * u.m\nA = f\nSystemService.keys(delta_x=0.1*units.mm, value= f_R }\n\ndlamspin = delta_x/f\nprint(f'Angle theta = {theta:.2f} rad')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove duplicate rows from an astropy table while keeping the last occurrence of each duplicate?"
      },
      {
        "from": "assistant",
        "value": "astropy.table.unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Example demonstrating the Retrieval of a remotely hosted genomic sequence FASTA file when locally the requested (hash-based) file is not found."
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\n# Retrieve a remotely hosted genomic FASTA file\n# Note - storing and retrieving for a hash not in cache can result in copyrighted material being stored locally for extended periods.\n#       Only recommended in contexts with any stakeholders having the legal right of doing the archival and private data processing.\nfile = get_pkg_data_filename('hash/djmpje9nudadhx7m21joc3caim4pbc3z')\n\n# Print the local filename/path\nprint(f'FASTA sequence FASTQ filename: {file}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a coordinate in the FK4 system with a specific ra and dec?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, SkyCoord\nimport astropy.units as u\nequinox = astropy.time.Time(\"1950-01-01\")\ncoords = SkyCoord(ra=10*u.degree, dec=20*u.degree, frame=FK4, equinox=equinox)\nprint(coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the time difference between two HDU in FITS data?"
      },
      {
        "from": "assistant",
        "value": "hdu_time_delta(time1, time2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the time difference between two JDs?"
      },
      {
        "from": "assistant",
        "value": "DeltaJD(jd1, jd2, tdb=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a time difference from JD to seconds?"
      },
      {
        "from": "assistant",
        "value": "jd_to_seconds(time[0], format="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the time difference in seconds between two datetime objects.  How can I represent this time difference and later use it to determine timing variations?"
      },
      {
        "from": "assistant",
        "value": "show_jump(seconds1, seconds2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to perform a linear regression analysis on a dataset using Python?"
      },
      {
        "from": "assistant",
        "value": "You can use the scipy.stats.linregress function: from scipy.stats import linregress; slope, intercept, r_value, p_value, std_err = linregress(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a list and a tuple in Python?"
      },
      {
        "from": "assistant",
        "value": "A list is a mutable, ordered collection of items, while a tuple is an immutable, ordered collection of items."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a CSV file into a pandas DataFrame?"
      },
      {
        "from": "assistant",
        "value": "You can use the pandas.read_csv function: df = pd.read_csv('data.csv')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the magnitude of the sun?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\nmag_sun = -26.74\nprint(f\"Magnitude of the sun: {mag_sun:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I merge two tables horizontally using the `astropy.table.hstack` function, ensuring that tables with different number of rows result in a stack with masked values where the tables have no common rows?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\n\n# Create example tables to simulate data from two instruments\ndata1 = Table({'a': [1, 2, 3], 'b': [4, 5, 6]})\ndata2 = Table({'c': [7, 8, 9, 10], 'd': [11, 12, 13, 14]})\n\n# Stack tables along columns (horizontally)\nstacked_data = hstack([data1, data2])\n\n# Print the stacked table\nprint(stacked_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to perform a quadratic least squares fit to the data."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n# Sample data\nx = np.array([0, 1, 2, 3, 4])\ny = np.array([0, 4, 10, 18, 28])\nmodel = models.Polynomial1D(degree=2)\nfitting.FittingWithAbsTol(fitting.leastsq, modeletween=False)\nfitting.fitting.GenericFitter(model, x, y).fit()\nfit = model(x)\nprint(fit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have brightness measurements of a variable star with initial estimates for period=2.0 days and amplitude=0.2 magnitudes. How do I use SimplexLSQFitter with a Sine1D model to refine these parameters using time points [0,1,2,3,4,5] days and magnitude values [12.2, 12.1, 12.3, 12.4, 12.2, 12.1]?"
      },
      {
        "from": "assistant",
        "value": "fitting.SimplexLSQFitter(initial_model, time, mag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Voigt profile to a stellar spectrum  with a peak at 6563 Angstroms (H-alpha line), with a Lorentzian amplitude of 1.5, Lorentzian FWHM of 0.8 Angstroms, and Gaussian FWHM of 0.3 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Generate wavelength grid\nwavelength = np.arange(6560, 6566.1, 0.1)\n\n# Create Voigt profile\n# Voigt is a convolution of Gaussian and Lorentzian profiles\n# Convert FWHMs to sigma values\nprint(models.Voigt1D(6563, 1.5, 0.8, 0.3))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to fit a Voigt profile to a stellar spectrum , where the Lorentzian amplitude is 2 and the Lorentzian FWHM is 0.5 Angstroms? "
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Generate wavelength grid\nwavelength = np.arange(6560, 6566.1, 0.1)\n\n# Create Voigt profile\n# Voigt is a convolution of Gaussian and Lorentzian profiles\n# Convert FWHMs to sigma values\nprint(models.Voigt1D(6563, 2, 0.5, 0.3))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "If I have a stellar spectrum with a peak at 6563 Angstroms (H-alpha line), with a Lorentzian amplitude of 3 and a Gaussian FWHM of 0.2 Angstroms, how would I fit a Voigt profile to it, assuming the Lorentzian FWHM to be 1 Angstrom?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Generate wavelength grid\nwavelength = np.arange(6560, 6566.1, 0.1)\n\n# Create Voigt profile\n# Voigt is a convolution of Gaussian and Lorentzian profiles\n# Convert FWHMs to sigma values\nprint(models.Voigt1D(6563, 3, 1, 0.2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with amplitude=1.0, x_0=0.0, gamma=2.0, alpha=3.0"
      },
      {
        "from": "assistant",
        "value": "Moffat1D(amplitude=1.0, x_0=0.0, gamma=2.0, alpha=3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with amplitude=2.5, x_0=-2.0, gamma=1.5, alpha=2.5"
      },
      {
        "from": "assistant",
        "value": "Moffat1D(amplitude=2.5, x_0=-2.0, gamma=1.5, alpha=2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with amplitude=1.8, x_0=1.0, gamma=2.2, alpha=3.2"
      },
      {
        "from": "assistant",
        "value": "Moffat1D(amplitude=1.8, x_0=1.0, gamma=2.2, alpha=3.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.units.format.Base` class to format quantities as executable code?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units.format as uformat\nfrom astropy import units as u\n\n# Define a function to format quantities as executable code\ndef format_quantity(quantity):\n    return uformat.Formatter('executable').format(quantity)\n\n# Test the function\nquantity = 10 * u.m\nprint(format_quantity(quantity))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enable LaTeX formatting for quantities?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as vis\nfrom astropy import units as u\n\n# Enable LaTeX formatting\nvis.quantity_support(format='latex_inline')\n\n# Test LaTeX formatting\nimport matplotlib.pyplot as plt\nplt.figure()\nplt.plot([1, 2, 3] * u.m)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the available formats for formatting quantities?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units.format as uformat\nfrom astropy import units as u\n\n# Print available formats\nprint(uformat.__all__)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the optimal bin width for a histogram of distribution of the ages of the customers of an online store?"
      },
      {
        "from": "assistant",
        "value": "freedman_bin_width(age_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use freedman_bin_width to determine the best bin size for a histogram of stock prices?"
      },
      {
        "from": "assistant",
        "value": "freedman_bin_width(stock_prices)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.freedman_bin_width to calculate the ideal histogram bin width for the scores of a class of students?"
      },
      {
        "from": "assistant",
        "value": "freedman_bin_width(student_scores)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using themdl component to fit the data."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = np.array([...])\nfitter = fitting.SLSQPLSQFitter()\ndfmdl = models UserModel3D()\nfitted mdl = fitter(dfmdl, data)\nprint(fitted mdl)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable with astronaut names, dates of birth, and their countries of origin, ensuring that the 'date of birth' column is in the format 'YYYY-MM-DD' and the 'country' column is a string."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom datetime import datetime\n\nastronauts = QTable(\n    [\n        ['Alan Bean', 'David Scott', 'Svetlana Savitskaya'],  # Astronaut names\n        [datetime(1932, 15, 15).strftime('%Y-%m-%d'), datetime(1932, 6, 6).strftime('%Y-%m-%d'), datetime(1948, 8, 8).strftime('%Y-%m-%d')],  # Dates of birth\n        ['USA', 'USA', 'Russia']  # Countries of origin\n    ],\n    names=['name', 'date_of_birth', 'country']\n)\n\nprint(astronauts)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a parameter for the inclination of the galaxy, with a default value of 90 degrees, and a minimum value of 0 degrees. The parameter should not be varied during fitting."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Fittable1DModel\n\n# Create a parameter for the inclination of the galaxy\n# Units are in degrees, default value = 90, min = 0, fixed = True\ningr = Parameter('ingr', default=90, min=0, fixed=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying galaxy IC 1101 and want to create a Sersic model with an effective radius of 40 arcsec, Sersic index n=2 (exponential profile), amplitude of 20, centered at position (60,60), ellipticity of 0.4, and rotation angle of 30 degrees. How can I generate a 2D brightness profile using Sersic2D?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\ngo model = Sersic2D(amplitude=20, reff=40, n=2, x_0=60, y_0=60, ellip=0.4, theta=30)\ngo model.basis.lower_dim_names\ngo model.reaffected"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a composite unit using expressions of previously defined units?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.dimensionless_unscaled('kg*m**2/s**3') # Cre"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a composite unit, but I want to scale it by a certain factor. How do I do that?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.dimensionless_unscaled('2*kg*m**2/s**3') # Create a composite unit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a composite unit with multiple bases and powers?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.dimensionless_unscaled('2*kg**2*m**3/s**4') # Cre"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle a set of radio flux densities in different bands with their corresponding uncertainties, using structured units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import StructuredUnit, Quantity\nfrom astropy import units as u\n\n# Define a structured unit for radio flux densities\nradio_flux_unit = StructuredUnit('F', ('band', u.erg/u.Hz/u.cm**2), ('uncertainty', u.erg/u.Hz/u.cm**2))\n\n# Create a quantity with the structured unit and some values\nflux_density = Quantity([10, 20, 30], radio_flux_unit)\n\n# Access the individual components of the structured unit\nprint(flux_density.ureg.band)\nprint(flux_density.ureg.uncertainty)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to save a plot to a file"
      },
      {
        "from": "assistant",
        "value": "plt.savefig('spectrum.png')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to customize the x-axis ticks"
      },
      {
        "from": "assistant",
        "value": "plt.xticks([4500, 5000, 5500, 6000], ['4500 \u00c5', '5000 \u00c5', '5500 \u00c5', '6000 \u00c5'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Demonstrate how to show the plot data points"
      },
      {
        "from": "assistant",
        "value": "plt.scatter(wavelength, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Remove outliers in a dataset with 1000 data points, where outliers are defined as data points that are more than 3 times the standard deviation from the mean."
      },
      {
        "from": "assistant",
        "value": "mask = [ False for x in range(1000)]\nfor i in range(1000):\n    if abs(data[i] - mean) > 3 * std:\n        mask[i] = True\nreturn mask"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.visualization.ImageNormalize to normalize the intensity values of a 3D data cube?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as vis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using astropy.visualization.ASPolygonStretch when normalizing a 2D image?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as vis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.visualization.RatioInterval to set the display interval for a specific wavelength slice in a 2D spectroscopic data cube?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as vis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a filter kernel from list or array using CustomKernel with the array [[1, 2, 3]"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a filter kernel from list or array using CustomKernel with the array [[4]"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a filter kernel from list or array using CustomKernel with the array [[1, 1, 1], [1, 2, 1], [1, 1, 1]]"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the angular diameter distance to a galaxy at redshift z=0.5 using the Planck 2018 cosmology. Can you show me how to do this using astropy.cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import Planck 2018 cosmology from astropy.cosmology\nfrom astropy.cosmology import Planck18\n\n# Create a cosmology object\ncosmo = Planck18()\n\n# Calculate the angular diameter distance at z=0.5\nad_distance = cosmo.angular_diameter_distance(0.5)\n\n# Print the result\nprint(f'Angular diameter distance at z=0.5: {ad_distance:.3f} Mpc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the luminosity distance to a galaxy at redshift z=0.8 using the WMAP5 cosmology. Can you show me how to do this using astropy.cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import WMAP5 cosmology from astropy.cosmology\nfrom astropy.cosmology import WMAP5\n\n# Create a cosmology object\ncosmo = WMAP5()\n\n# Calculate the luminosity distance at z=0.8\nlum_distance = cosmo.luminosity_distance(0.8)\n\n# Print the result\nprint(f'Luminosity distance at z=0.8: {lum_distance:.3f} Mpc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the comoving distance to a galaxy at redshift z=0.3 using the FlatLambdaCDM cosmology. Can you show me how to do this using astropy.cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import FlatLambdaCDM from astropy.cosmology\nfrom astropy.cosmology import FlatLambdaCDM\n\n# Define the cosmology parameters\nH0 = 70 * (3.241e-20)  # H0 in s^-1\nOm0 = 0.3\n\n# Create a cosmology object\ncosmo = FlatLambdaCDM(H0=H0, Om0=Om0)\n\n# Calculate the comoving distance at z=0.3\ncomov_distance = cosmo.comoving_distance(0.3)\n\n# Print the result\nprint(f'Comoving distance at z=0.3: {comov_distance:.3f} Mpc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the correct way to stack tables using Astropy's `Table.vstack` function?"
      },
      {
        "from": "assistant",
        "value": "Use the `where` parameter to specify the stacking behavior, e.g. `np.where()`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert an Astropy table to a FITS table?"
      },
      {
        "from": "assistant",
        "value": "Use the `tofits` method"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between `BinTableHDU` and `BINTABLE` in Astropy FITS?"
      },
      {
        "from": "assistant",
        "value": "BinTableHDU is a subclass of HDUBase, while BINTABLE is a format used in FITS files"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply several astrophysical corrections to spectra using Astropy?"
      },
      {
        "from": "assistant",
        "value": "sf = astropy.modeling.models.RedshiftScaleFactor(z=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe how to use astropy's model module to create a custom shell model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nsf = models.ShellLinPoly1D(an/light=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What does the  astropy.modeling.models.Moffat1D function do?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nsf = models.Moffat1D(alpha=2.0, beta=3.0, gamma=4.0, amplitud=5.0, x_0=9.9)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the impact of using Scott's rule versus Freedman-Diaconis rule for binning in a histogram?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import scott_bin_width, freedman_bin_width\nimport numpy as np\n\ndata = np.random.normal(loc=1.0, scale=0.3, size=1000)\n\nscott_width = scott_bin_width(data)\nfreedman_width = freedman_bin_width(data)\n\nprint(f'Bin width using Scott\\'s rule: {scott_width}')\nprint(f'Bin width using Freedman-Diaconis rule: {freedman_width}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read a binary table HDU from a FITS file using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.open('file.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a binary table HDU to a FITS file using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.writeto('file.fits', data, header, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a binary table HDU with additional information using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.BinTableHDU(None, header='Additional information')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the position of Mars in geocentric true ecliptic coordinates at a specific observation time"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as time\nfrom astropy.coordinates import get_body, EarthLocation, solar_system_ephemeris\nequinox = time.Time('2020-01-01')\n\n# Get Mars' position\nmars = get_body('mars', time.Time('2020-01-15 12:00:00'), equinox=equinox)\n\n# Transform to true ecliptic coordinates\nmars_ecl = mars.transform_to('geocentrictrueecliptic')\n\n# Extract and print coordinates\nlon = mars_ecl.lon.degree\nlat = mars_ecl.lat.degree\ndist = mars_ecl.distance.au\n\ntext = f\"Mars' position (ecliptic coordinates):\nLongitude: {lon:.4f}\u00b0\nLatitude: {lat:.4f}\u00b0\nDistance: {dist:.4f} AU\"\nprint(text)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the position of Venus in geocentric true ecliptic coordinates at a specific observation time"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as time\nfrom astropy.coordinates import get_body, EarthLocation, solar_system_ephemeris\nequinox = time.Time('2020-01-01')\n\n# Get Venus' position\nvenus = get_body('mars', time.Time('2020-01-15 12:00:00'), equinox=equinox)\n\n# Transform to true ecliptic coordinates\nvenus_ecl = venus.transform_to('geocentrictrueecliptic')\n\n# Extract and print coordinates\nglon = venus_ecl.lon.degree\nplat = venus_ecl.lat.degree\ndist = venus_ecl.distance.au\ntext = f\"Venus' position (ecliptic coordinates):\nLongitude: {glon:.4f}\u00b0\nLatitude: {plat:.4f}\u00b0\nDistance: {dist:.4f} AU\"\nprint(text)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the position of Saturn in geocentric true ecliptic coordinates at a specific observation time"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as time\nfrom astropy.coordinates import get_body, EarthLocation, solar_system_ephemeris\nequinox = time.Time('2020-01-01')\n\n# Get Saturn's position\nsaturn = get_body('mars', time.Time('2020-01-15 12:00:00'), equinox=equinox)\n\n# Transform to true ecliptic coordinates\nsaturn_ecl = saturn.transform_to('geocentrictrueecliptic')\n\n# Extract and print coordinates\nlon = saturn_ecl.lon.degree\nlat = saturn_ecl.lat.degree\ndist = saturn_ecl.distance.au\ntext = f\"Saturn's position (ecliptic coordinates):\nLongitude: {lon:.4f}\u00b0\nLatitude: {lat:.4f}\u00b0\nDistance: {dist:.4f} AU\"\nprint(text)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert angular velocities from degrees per day to radians per hour using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import Angle\n\n# Create angular velocities in degrees/day\ntsolar_rot_deg = 14.713 * (u.deg/u.day)  # Average solar rotation rate at equator\n\nto_rad = tsolar_rot_deg.to(u.rad/u.hour)\n\nprint(to_rad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a datetime object to a specific timezone. How do I handle the case where the datetime object is not aware of the timezone?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimezoneInfo class MyTimezone(TimezoneInfo):\n    def utcoffset(self, dt):\n        return self.utc + self.dst(dt)\n\n    def tzname(self, dt):\n        return 'US/Pacific'\n\n    def dst(self, dt):\n        return self.utc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use `astropy.stats.fold_intervals` to analyze the temporal coverage of my telescope observations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\nfold_intervals([[0, 0.5, 1], [0.5, 1, 2]], period=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use `astropy.stats.fold_intervals` to determine the weighting of observations across a binary system's orbit based on the presence of a transient?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\nfold_intervals([[0.25, 0.75, 2], [0.5, 0.9, 1], [0.9, 1, 3]], period=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply the `astropy.stats.fold_intervals` function to accumulate observation weights across a rotating star's surface?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\nfold_intervals([[0.1, 0.3, 1], [0.6, 0.8, 2], [0.2, 0.6, 3]], period=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a constant background level in my stellar spectroscopy data. Can you show me how to use Const1D to create a baseline model with an amplitude of 5.0 counts/second and plot it over a wavelength range from 3000 to 6000 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "Use Const1D() to create a function for a constant background of 5.0 counts/sec over a wavelength range from 3000 to 6000 Angstroms."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a constant background correction to my stellar spectroscopy data using Const1D from Astropy?"
      },
      {
        "from": "assistant",
        "value": "You can use `Const1D` to subtract the constant background value from your data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use Const1D to model the sky background in my astronomical image?"
      },
      {
        "from": "assistant",
        "value": "You can use `Const1D` with a known sky background level to model the sky background in your astronomical image."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Moffat2D profile centered at (256, 256) with gamma=2.5 and alpha=2.0, and evaluate it on a 512x512 pixel grid using numpy meshgrid?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat2D model with amplitude=0.5, x_0=100, y_0=100, gamma=1.5, alpha=1.5, and evaluate it on a 256x256 pixel grid."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Moffat2D profile centered at (128, 128) with gamma=2.0 and alpha=2.5, and evaluate it on a 1024x1024 pixel grid."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of acceleration in terms of mass and length?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the unit of acceleration\nacceleration = u.m / (u.kg * u.s**2)\n\n# Print the unit\nprint(acceleration)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me create a 2D disk model with a radius of 5 units and an amplitude of 2.5 using astropy's modeling capabilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nmodels.Disk2D(amplitude=2.5, x_0=10, y_0=10, R_0=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to scale my Gaussian1D model (amplitude=2.5, mean=6000, stddev=200) by a factor of 0.8 to fit my spectral line data. Show me how to construct this multiplied model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.models import Gaussian1D\n\n# Create the original Gaussian model\ngaussian = Gaussian1D(amplitude=2.5, mean=6000, stddev=200)\n\n# Create a scaling factor using Const1D model\nscale = models.Const1D(amplitude=0.8)\n\n# Multiply the models to create scaled Gaussian\n# The * operator automatically creates a compound model\nscaled_gaussian = gaussian * scale\n\n# The resulting scaled_gaussian can now be used for fitting\n# It will have an amplitude of 2.5 * 0.8 = 2.0 at the peak"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to scale my Moffat1D model (amplitude=2.5, alpha=1.5, beta=3.0, x_0=6000, gamma=200) by a factor of 0.9 to fit my spectral line data. Show me how to construct this multiplied model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.models import Moffat1D\n\n# Create the original Moffat model\nmoffat = Moffat1D(amplitude=2.5, alpha=1.5, beta=3.0, x_0=6000, gamma=200)\n\n# Create a scaling factor using Const1D model\nscale = models.Const1D(amplitude=0.9)\n\n# Multiply the models to create scaled Moffat\n# The * operator automatically creates a compound model\nscaled_moffat = moffat * scale\n\n# The resulting scaled_moffat can now be used for fitting\n# It will have an amplitude of 2.5 * 0.9 = 2.25 at the peak"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to scale my Lorentzian1D model (amplitude=2.5, fwhm=100, x_0=6000) by a factor of 0.7 to fit my spectral line data. Show me how to construct this multiplied model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.models import Lorentzian1D\n\n# Create the original Lorentzian model\nlorentzian = Lorentzian1D(amplitude=2.5, fwhm=100, x_0=6000)\n\n# Create a scaling factor using Const1D model\nscale = models.Const1D(amplitude=0.7)\n\n# Multiply the models to create scaled Lorentzian\n# The * operator automatically creates a compound model\nscaled_lorentzian = lorentzian * scale\n\n# The resulting scaled_lorentzian can now be used for fitting\n# It will have an amplitude of 2.5 * 0.7 = 1.75 at the peak"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ZScaleInterval with default contrast but increased sampling to 1500 points and max_reject=0.2 to standardize the display scaling."
      },
      {
        "from": "assistant",
        "value": "ZScaleInterval(n_samples=1500, max_reject=0.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ZScaleInterval with contrast=0.5, max_reject=0.1, and min_npixels=10 to increase the contrast and reject fewer pixels."
      },
      {
        "from": "assistant",
        "value": "ZScaleInterval(contrast=0.5, max_reject=0.1, min_npixels=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ZScaleInterval with n_samples=2000, krej=3.0, and max_iterations=10 to adjust the rejection threshold and number of iterations."
      },
      {
        "from": "assistant",
        "value": "ZScaleInterval(n_samples=2000, krej=3.0, max_iterations=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a structured unit representing a distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.define('distance = length')\n# Now you can use the 'distance' unit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D Gaussian mask to represent the detector's point spread function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D\nmodel = Gaussian2D(1, 0, 0, 3, 3, 0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use PowerStretch to display a 1D galaxy spectrum with a=0.5, with LogStretch before PowerStretch?"
      },
      {
        "from": "assistant",
        "value": "from astropy import psychology as apy\nfrom astropy.visualization import PowerStretch, LogStretch, ImageNormalize\nc = apy Cosmology()\nwav = c.get_wavelength(Galaxy('Milky Way'))\nflux = c.get_flux(Galaxy('Milky Way'))\n\n# Create normalization object with LogStretch before PowerStretch\ngiven a=0.5\ngives more emphasis to features around the peak\nnorm = ImageNormalize(\n    flux,\n    stretch=LogStretch() >> PowerStretch(a=0.5),\n    vmin=np.min(flux),\n    vmax=np.max(flux)\n)\n\n# Display the enhanced spectrum\ncoloraxis.show(wav, flux, norm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom unit for angular momentum (L) in astrophysics with SI prefixes."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the angular momentum unit (L)\nL = u.def_unit('L', u.kg * u.m**2 / u.s)\n\n# Register the unit and its prefixes with the unit system\nu.add_enabled_units([L])\nu.add_enabled_units([L.si * prefix for prefix in u.si_prefixes()])\n\n# Example usage\n# Create some sample angular momenta\nsample_ang_mom = 1e32 * L  # sample value\nlow_mass_star = 0.1 * u.milliL  # low mass star\nhigh_mass_neutron_star = 10**45 * u.kiloL  # high mass neutron star\n\n# Convert to standard units if needed\nprint(f'Sample angular momentum in kg*m^2/s: {sample_ang_mom.to(u.kg*u.m**2/u.s)}')\nprint(f'Low mass star angular momentum in L: {low_mass_star.to(L)}')\nprint(f'High mass neutron star angular momentum in kL: {high_mass_neutron_star.to(L/1e3)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I open a FITS file using the memmap option without scaling the image values?"
      },
      {
        "from": "assistant",
        "value": "hdul = fits.open('file.fits', memmap=True, do_not_scale_image_data=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a polynomial model of degree 3 to fit my data. The coefficients of the model should be fixed during fitting."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am looking to create a Lorentzian model to fit a spectral line with amplitude=100 Jy, mean=5000 Angstrom, and standard deviation=1 Angstrom. The stddev parameter should be tied to the mean parameter during fitting."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal model with amplitude=20, phase=pi/4, frequency=0.5, and period=2*pi*frequency. Set the amplitude and phase parameters to be fixed during fitting."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar metallicities in a globular cluster and have measurements along two axes (radial and vertical). How can I use biweight_location to find the central metallicity along both axes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_location\nimport numpy as np\nclass InstructionResponse:\n    def __init__(self, instruction, response):\n        self.instruction = instruction\n        self.response = response\n\nmetallicities = np.array([[-1.2, -1.1, -1.3], [-1.25, -1.15, -1.2], [-1.1, -1.4, -1.2]])\nradial_metallicity = biweight_location(metallicities, axis=1)\nvertical_metallicity = biweight_location(metallicities, axis=0)\nprint(f\"Central metallicity along radial axis: {radial_metallicity}\")\nprint(f\"Central metallicity along vertical axis: {vertical_metallicity}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the position of the Sun and the Moon in geocentric true ecliptic and heliocentric coordinates on January 1, 2024, and print their coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, HeliocentricEclipticIAU76, EarthLocation, SkyCoord, Sun, Moon\nfrom astropy import units as u\ntime = Time('2024-01-01')\nsun_geo = GeocentricTrueEcliptic(ra=23.4437*u.deg, dec=-28.0121*u.deg, distance=1*u.AU, obstime=time)\nsun_helio = sun_geo.transform_to(HeliocentricEclipticIAU76(obstime=time))\nmoon_geo = GeocentricTrueEcliptic(ra=23.4462*u.deg, dec=-23.9565*u.deg, distance=0.00258*u.AU, obstime=time)\nmoon_helio = moon_geo.transform_to(HeliocentricEclipticIAU76(obstime=time))\nprint('Sun coordinates:')\nprint('Geocentric True Ecliptic: ra = {:.2f}, dec = {:.2f}'.format(sun_geo.ra.to(u.deg).value, sun_geo.dec.to(u.deg).value))\nprint('Heliocentric Ecliptic: ra = {:.2f}, dec = {:.2f}'.format(sun_helio.ra.to(u.deg).value, sun_helio.dec.to(u.deg).value))\nprint('\nMoon coordinates:')\nprint('Geocentric True Ecliptic: ra = {:.2f}, dec = {:.2f}'.format(moon_geo.ra.to(u.deg).value, moon_geo.dec.to(u.deg).value))\nprint('Heliocentric Ecliptic: ra = {:.2f}, dec = {:.2f}'.format(moon_helio.ra.to(u.deg).value, moon_helio.dec.to(u.deg).value)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the apparent position of the Sun at 12:00 PM on 2024-07-26, observed from New York City?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, EarthLocation, AltAz\n\n# Set observation location (example: New York City)\nlocation = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\n\n# Create time of observation\nobservation_time = Time(\"2024-07-26 12:00:00\")\n\n# Calculate Sun's position\nsun = get_body('sun', observation_time, location)\n\n# Print Sun's altitude and azimuth\nprint(sun.alt)\nprint(sun.az)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm comparing different PSF models for my speckle interferometry data. How can I generate a Bessel function model and overlay it with a 2D Gaussian to see their differences in the central region?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nfrom astropy.modeling.models import BesselDisk2D, Gaussian2D\nimport matplotlib.pyplot as plt\n\ndisk = BesselDisk2D(amplitude=1, x_0=50, y_0=50, R=50, R_z=1.2196698912665045)\ndisk_data = disk(np.linspace(0, 100, 101), np.linspace(0, 100, 101))\n\ngauss = Gaussian2D(amplitude=1, x_mean=50, y_mean=50, x_stddev=5, y_stddev=5)\n# Create matching Gaussian model\n# FWHM \u2248 radius * 1.22 for approximate matching\nfwhm = 50 * 1.22\nsigma = fwhm / (2 * np.sqrt(2 * np.log(2)))\ngauss_data = gauss(np.linspace(0, 100, 101), np.linspace(0, 100, 101))\n# Plot both models\nplt.figure(figsize=(12, 4))\n\n# Bessel\ndisk\nplt.subplot(131)\nplt.imshow(disk_data, cmap='viridis')\nplt.title('Bessel')\n\n# Gaussian\ngauss\nplt.subplot(132)\nplt.imshow(gauss_data, cmap='viridis')\nplt.title('Gaussian')\n\n# Central slice comparison\nplt.subplot(133)\nplt.plot(disk_data[50], label='Bessel')\nplt.plot(gauss_data[50], '--', label='Gaussian')\nplt.title('Central Slice')\nplt.legend()\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the optimal bin width for this data which is distributed normally"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Sersic2D model with n=1.5, R=2.5, I0=10.0, and sigma=0.5, and then compute the surface brightness within a circle of radius 10 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nimport numpy as np\n\n# Create a Sersic2D model with given parameters\n# n=1.5 (Sersic index)\n# R=2.5 (radius of the background annulus in pixels)\n# I0=10.0 (background surface brightness)\n# sigma=0.5 (background sigma)\nmodel = Sersic2D(I0=10.0, R=2.5, n=1.5, x_0=0, y_0=0, sigma=0.5)\n\n# Create a 2D grid of pixels\nx = np.linspace(0, 10, 1000)\ny = np.linspace(0, 10, 1000)\nx, y = np.meshgrid(x, y)\nr = np.sqrt(x**2 + y**2)\n\n# Compute surface brightness at each pixel\nsurface_brightness = model(x, y)\n\n# Compute surface brightness within a circle of radius 10 pixels\ntotal_surface_brightness = np.sum(surface_brightness[r < 10])\nprint(f\"Surface brightness within 10 pixels: {total_surface_brightness:.3f}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Tophat filter for isotropic smoothing?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(radius=10, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is a Tophat filter and how does it perform isotropic smoothing?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(radius=20, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a Tophat filter with oversampling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(radius=30, mode='oversample', factor=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS file from scratch?"
      },
      {
        "from": "assistant",
        "value": "hdul = fits.HDUList()\nhdul.append(fits.PrimaryHDU())\nhdul.append(fits.ImageHDU(data=np.random.rand(10, 10)))\nhdul.writeto('example.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the properties of black holes. How can I express the ratio of the mass of a black hole to the solar mass in dimensionless units?"
      },
      {
        "from": "assistant",
        "value": "{\"scale\": 1.0, \"bases\": [u.Msun], \"powers\": [1.0]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectrum of a star. How can I create a dimensionless unit for the ratio of the flux at 5000 angstroms to the flux at 6500 angstroms?"
      },
      {
        "from": "assistant",
        "value": "{\"scale\": 1.0, \"bases\": [u.angstrom**-1], \"powers\": [0.0, 0.0]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with cosmological distances. How can I express the ratio of the luminosity distance to the Hubble distance in dimensionless units?"
      },
      {
        "from": "assistant",
        "value": "{\"scale\": 1.0, \"bases\": [u.Mpc], \"powers\": [1.0, 1.0]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a logarithmic potential model using Logarithmic1D with amplitude=3.4 and tau=2.5, and evaluate it at specific radii: [0.5, 1.5, 3, 6] kiloparsecs."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nimport astropy.units as u\nimport numpy as np\n\n# Create logarithmic potential model with given parameters\n# Amplitude = 3.4, tau (core radius) = 2.5\nlog_potential = Logarithmic1D(amplitude=3.4, tau=2.5)\n\n# Define radii to evaluate the potential at (in kiloparsecs)\nradii = np.array([0.5, 1.5, 3, 6]) * u.kpc\n\n# Evaluate the potential at specified radii\n# Note: The potential follows \u03a6(r) = amplitude * ln(r^2 + tau^2)^0.5\npotential_values = log_potential(radii.value)\n\n# Print results with units\nfor radius, potential in zip(radii, potential_values):\n    print(f\"Potential at r = {radius:.1f}: {potential:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to convolve a 2D image with a kernel that emphasizes edges. How can I do this using the astropy.convolution.convolve function?"
      },
      {
        "from": "assistant",
        "value": "convolve(array, Kernel2D([[0, -1, 0], \n [ -1, 4, -1],\n [0, -1, 0]]), boundary='fill')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a median filter to an image to remove noise. Can you show me how to use astropy.convolution.convolve with an appropriate kernel?"
      },
      {
        "from": "assistant",
        "value": "convolve(array, Kernel2D([[1, 1, 1],[1, 1, 1],[1, 1, 1]]), boundary='fill')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to create a Gaussian filter using the astropy.convolution.convolve function?"
      },
      {
        "from": "assistant",
        "value": "convolve(array, Kernel2D([[1, 2, 1],\n [2, 4, 2],\n [1, 2, 1]]), boundary='fill')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display a \u0639\u0644\u0645 \u0645\u062c033 ordinates plot with a proper colorbar?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nplt.plot([1, 2, 3])\ncolorbar = plt.colorbar()\ncolorbar.set_label('ColorBAR(\"{label}\")')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 100 grams of a substance into joules?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define mass in grams\nmass = 100 * u.g\n\n# Convert mass to energy using E = mc^2\nenergy = (mass * c**2).to(u.J)\n\nprint(f\"100 grams is equivalent to {energy:.3e} joules\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy equivalent of 50 kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define mass in kilograms\nmass = 50 * u.kg\n\n# Convert mass to energy using E = mc^2\nenergy = (mass * c**2).to(u.J)\n\nprint(f\"50 kilograms is equivalent to {energy:.3e} joules\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert 0.01 grams of a particle into electronvolts?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define mass in grams\nmass = 0.01 * u.g\n\n# Convert mass to energy using E = mc^2\nenergy = (mass * c**2).to(u.eV)\n\nprint(f\"0.01 grams is equivalent to {energy:.3e} electronvolts\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create and visualize a ring model for a galaxy"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create and visualize a truncated disk model for a galaxy"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import DiskTrunc2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create and visualize a disk model with a maximum radius of 10 for a galaxy"
      },
      {
        "from": "assistant",
        "value": "disk_model = Disk2D(amplitude=1, x_0=0, y_0=0, R_0=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 4th degree polynomial to my stellar mass data points"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define data points\nx_data = np.array([1.5, 2.7, 3.9, 5.1, 6.3])\nx_data = np.array([8.5, 9.7, 10.9, 12.1, 13.3])\ny_data = np.array([2.5, 4.7, 6.9, 9.1, 11.3])\ny_data = np.array([14.5, 16.7, 18.9, 21.1, 23.3])\n\n# Initialize a 4th degree polynomial model\npoly_model = models.Polynomial1D(degree=4)\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfitted_model = fitter(poly_model, x_data, y_data)\n\n# Print the best-fit coefficients\nprint(\"Polynomial coefficients (highest power first):\")\nfor i, coeff in enumerate(fitted_model.parameters[::-1]):\n    print(f\"x^{3-i}: {coeff:.4f}\")\n\n# Optional: Generate points for smooth curve plotting\nx_smooth = np.linspace(min(x_data), max(x_data), 100)\ny_fit = fitted_model(x_smooth)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the median of a distribution in a robust way, ignoring outliers?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location(data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], c=6.0, M=None, axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight location of a normal distribution with mean 0 and standard deviation 1?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location(data=np.random.default_rng(12345).standard_normal(1000), c=6.0, M=None, axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset with outliers and I want to calculate the biweight location. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location(data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100], c=6.0, M=None, axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to define a unit for the speed of light (c = 299,792,458 m/s). How can I use {@link Unit} to create this unit from its string representation \"c\"?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\nc = u.def_unit('c', 299792458 * u.m / u.s)\n# Example usage\nspeed = 2.5 * c  # Create a quantity of 2.5 times the speed of light"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I match a set of stars from the Gaia catalog with a different survey's data using astropy.coordinates.match_coordinates_sky?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.matching import match_coordinates_sky\n\n# Example data (replace with your actual data)\ngaia_coords = SkyCoord(ra=[45.0, 80.5, 120.7] * u.degree,\n                      dec=[-20.5, 15.2, 45.8] * u.degree)\nother_coords = SkyCoord(ra=[44.9, 80.6, 120.8, 160.2] * u.degree,\n                       dec=[-20.6, 15.1, 45.7, 30.0] * u.degree)\n\nidx, sep2d, _ = match_coordinates_sky(gaia_coords, other_coords)\n\nprint(sep2d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set a maximum separation threshold using astropy.coordinates.match_coordinates_sky?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.matching import match_coordinates_sky\n\n# Example data (replace with your actual data)\ngaia_coords = SkyCoord(ra=[45.0, 80.5, 120.7] * u.degree,\n                      dec=[-20.5, 15.2, 45.8] * u.degree)\nother_coords = SkyCoord(ra=[44.9, 80.6, 120.8, 160.2] * u.degree,\n                       dec=[-20.6, 15.1, 45.7, 30.0] * u.degree)\nmax_sep = 2 * u.arcmin\nidx, sep2d, _ = match_coordinates_sky(gaia_coords, other_coords, max_sep=max_sep)\n\nprint(sep2d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I match a set of stars from the Gaia catalog with a different survey's data and store the KD-Tree used for the computation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.matching import match_coordinates_sky\n\n# Example data (replace with your actual data)\ngaia_coords = SkyCoord(ra=[45.0, 80.5, 120.7] * u.degree,\n                      dec=[-20.5, 15.2, 45.8] * u.degree)\nother_coords = SkyCoord(ra=[44.9, 80.6, 120.8, 160.2] * u.degree,\n                       dec=[-20.6, 15.1, 45.7, 30.0] * u.degree)\nidx, sep2d, _ = match_coordinates_sky(gaia_coords, other_coords, storekdtree=True)\n\nprint(sep2d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing aperture photometry and need to model the sky background. Show me how to create a constant 2D background model with amplitude 12.5, and set upper and lower bounds of [10.0, 15.0] for the fitting process."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a 2D constant model for sky background\nsky_model = models.Const2D(amplitude=12.5)\n\n# Set parameter constraints for the amplitude\nsky_model.amplitude.bounds = (10.0, 15.0)\n\n# Example of how to use this model for fitting\n# (Assuming you have data in a 2D array called 'image_data')\n\"\"\"\nfitter = fitting.LevMarLSQFitter()\nfitted_sky = fitter(sky_model, x, y, image_data)\nbackground_value = fitted_sky.amplitude.value\n\"\"\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing surface photometry and need to model the sky background. Show me how to create a constant 2D background model with amplitude 10.0, and set lower bound of 5.0 for the fitting process."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a 2D constant model for sky background\nsky_model = models.Const2D(amplitude=10.0)\n\n# Set parameter constraints for the amplitude\nsky_model.amplitude.bounds = (5.0, None)\n\n# Example of how to use this model for fitting\n# (Assuming you have data in a 2D array called 'image_data')\n\"\"\"\nfitter = fitting.LevMarLSQFitter()\nfitted_sky = fitter(sky_model, x, y, image_data)\nbackground_value = fitted_sky.amplitude.value\n\"\"\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing galaxy photometry and need to model the sky background. Show me how to create a constant 2D background model with amplitude 15.0, and set both upper and lower bounds of [5.0, 20.0] for the fitting process."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a 2D constant model for sky background\nsky_model = models.Const2D(amplitude=15.0)\n\n# Set parameter constraints for the amplitude\nsky_model.amplitude.bounds = (5.0, 20.0)\n\n# Example of how to use this model for fitting\n# (Assuming you have data in a 2D array called 'image_data')\n\"\"\"\nfitter = fitting.LevMarLSQFitter()\nfitted_sky = fitter(sky_model, x, y, image_data)\nbackground_value = fitted_sky.amplitude.value\n\"\"\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a variable star's light curve and want to create a sinusoidal model with amplitude=1.2 magnitudes, frequency=0.5 cycles/day, and phase=0.2, then plot it over a 20-day period using Sine1D?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sine1D\nfrom astropy.modeling import Parameter\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time array for 20 days with 200 points\ntime = np.linspace(0, 20, 200)\n\n# Create sinusoidal model\n# Amplitude = 1.2 mag\n# Frequency = 0.5 cycles/day (convert to radians)\n# Phase = 0.2\nmodel = Sine1D(amplitude=1.2, frequency=2*np.pi*0.5, phase=2*np.pi*0.2)\n\n# Generate model magnitudes\nmagnitudes = model(time)\n\n# Plot the light curve\nplt.figure(figsize=(10, 6))\nplt.plot(time, magnitudes, 'b-', label='Model Light Curve')\nplt.xlabel('Time (days)')\nplt.ylabel('Magnitude')\nplt.title('Variable Star Light Curve Model')\nplt.gca().invert_yaxis()  # Astronomers plot magnitudes with brighter values up\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using astropy.wcs to create a WCS object from a FITS file. How can I access the celestial frame of this WCS using astropy.wcs.utils.wcs_to_celestial_frame?"
      },
      {
        "from": "assistant",
        "value": "wcs_to_celestial_frame(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to convert pixel coordinates to sky coordinates using WCS, but I need to access the celestial frame first. Can you provide a function for this?"
      },
      {
        "from": "assistant",
        "value": "wcs_to_celestial_frame(wcs).pixel_to_world(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use astropy.wcs.utils.wcs_to_celestial_frame to get the celestial frame of a WCS, but the function returns None. What am I doing wrong?"
      },
      {
        "from": "assistant",
        "value": "Make sure you are passing a valid WCS instance to the function. If the WCS is invalid, the function will return None."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the orbital period of a binary star system. How can I use Astropy to convert between different units for this calculation?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define initial masses (e.g., 1 solar mass, 0.1 solar mass)\nM1 = 1 * u.M_sun\nM2 = 0.1 * u.M_sun\n\n# Calculate orbital period using Kepler's third law\na = (const.G * (M1 + M2)) * (M1 * M2 / (const.c**2))**(1/3)\nperiod = 2 * u.pi * (a**3 / (const.G * const.M_sun))**(1/2)\n\n# Convert period to different units\nperiod_days = period.to('day')\nperiod_hours = period.to('hour')\nperiod_minutes = period.to('minute')\n\nprint(f'Orbital period: {period:.2e} s')\nprint(f'Orbital period in days: {period_days:.2f}')\nprint(f'Orbital period in hours: {period_hours:.2f}')\nprint(f'Orbital period in minutes: {period_minutes:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project that involves convolving two 1D arrays. Can you give me an example of how to use the astropy.convolution.convolve_fft function to perform this operation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve_fft\n\ndef convolve_fft_func(array, kernel):\n    return convolve_fft(array, kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mass of the Sun in kg?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import solar_mass\n\nprint(f'Mass of the Sun = {solar_mass.to(u.kg):.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box2DKernel with size 20."
      },
      {
        "from": "assistant",
        "value": "# Import required module\nfrom astropy.convolution import Box2DKernel\ntophat_kernel = Box2DKernel(20)\ntophat_kernel.array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with inner_radius 10 and outer_radius 20."
      },
      {
        "from": "assistant",
        "value": "# Import required module\nfrom astropy.convolution import Ring2DKernel\nring_kernel = Ring2DKernel(inner_radius=10, outer_radius=20)\nring_kernel.array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a TrapezoidDisk2DKernel with\uff03width 5 and\uff03peak_height 10."
      },
      {
        "from": "assistant",
        "value": "# Import required module\nfrom astropy.convolution import TrapezoidDisk2DKernel\ntrapezoid_kernel = TrapezoidDisk2DKernel(width=5, peak_height=10)\ntrapezoid_kernel.array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a light curve for a star with a periodic brightness variation with an amplitude of 0.2 magnitudes and a frequency of 0.05 cycles per day using Cosine1D for a 20-day observation period?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Cosine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time, TimeDelta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a plot of a stellar pulsation light curve with a 0.1 magnitude amplitude and a frequency of 0.1 cycles per day over a 15-day period?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Cosine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time, TimeDelta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I model and plot a stellar pulsation light curve with a 0.3 magnitude amplitude and a frequency of 0.15 cycles per day over a 30-day observation period?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Cosine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time, TimeDelta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use ZScaleInterval to handle outliers in the data"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\ndata = np.random.normal(loc=0, scale=1, size=1000)\nzscale = ZScaleInterval(krej=3.0)\nlimits = zscale.get_limits(data)\nprint(limits)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the position of the Moon at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_moon, EarthLocation, AltAz\nimport numpy as np\n\nt0 = Time('2024-01-01 12:00:00')\ntimes = t0 + np.linspace(0, 365, 12) * u.day\n\nnyc = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg)\nsun_positions = []\nfor t in times:\n    moon = get_moon(t)\n    altaz_frame = AltAz(obstime=t, location=nyc)\n    moon_altaz = moon.transform_to(altaz_frame)\n    sun_positions.append((moon_altaz.alt.deg, moon_altaz.az.deg))\n\nsun_positions = np.array(sun_positions)\n\nprint(sun_positions)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables with different spectral types for 100 stars. Table 1 has spectral types in the './spectral_types.txt' file and Table 2 has spectral types in the './spectral_types_preferred.txt' file. Write code to join these tables on 'star_ID' column while handling metadata conflicts with a warning, and show the result for the first 5 stars."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack, join\nimport numpy as np\nimport warnings\n\n# Create example data for 100 stars\n# Table 1: Spectral types from './spectral_types.txt'\nt1 = Table.read('./spectral_types.txt', format='ascii', names=('star_ID', 'spectral_type'))\nt1.meta['description'] = 'Spectral types from file'\n\n# Table 2: Spectral types from './spectral_types_preferred.txt'\nt2 = Table.read('./spectral_types_preferred.txt', format='ascii', names=('star_ID', 'spectral_type'))\nt2.meta['description'] = 'Preferred spectral types'\n\ntable_names = ['1', '2']\n# Join tables with warning for metadata conflicts\nwith warnings.catch_warnings():\n    warnings.simplefilter('always')\n    # Join tables on 'star_ID' column\n    combined_table = join(t1, t2, keys='star_ID', join_type='inner')\n    \n    # Merge metadata with warning\n    if t1.meta != t2.meta:\n        warnings.warn('Metadata conflicts detected during table merge')\n        # Combine metadata\n        combined_table.meta = {**t1.meta, **t2.meta}\n\nprint(combined_table[:5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a disk model with a uniform brightness inside a sharp edge at a specific radius and a amplitude of 2.0"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Disk2D(amplitude=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a disk model with a sharp edge at a radius of 20.0 pixels and other parameters set to default values?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Disk2D(R_0=20.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a disk model with a center at (10.0, 10.0) and a radius of 30.0 pixels?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Disk2D(x_0=10.0, y_0=10.0, R_0=30.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Box1DKernel with width of 3 pixels and apply it to my spectrum data array called 'flux_data' to reduce the noise while preserving the general line shape?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Box1DKernel\nimport numpy as np\n\ndata = Box1DKernel(3)\nsmoothed_flux = convolve(flux_data, data, boundary='extend')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply a Box1DKernel with width of 7 pixels to my spectrum data array 'flux_data' and study the differences between the original and smoothed spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Box1DKernel\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndata = Box1DKernel(7)\nsmoothed_flux = convolve(flux_data, data, boundary='extend')\nplt.plot(x, flux_data, 'b-', label='Original')\nplt.plot(x, smoothed_flux, 'r-', label='Smoothed')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the function Box1DKernel in combination with the function convolve to smooth the star flux array 'flux_data' using a Box filter with width 11 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Box1DKernel\nimport numpy as np\n\ndata = Box1DKernel(11)\nsmoothed_flux = convolve(flux_data, data, boundary='extend')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a log stretch for my observational data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize\nimage_data = ...  # your data\nnorm = ImageNormalize(image, interval=MinMaxInterval(), stretch=LogStretch())\nresult = norm(image_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the formula for the square root stretch in Astropy's visualization tools?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ny = np.sqrt(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy's linear fitting tools to calibrate my photometric measurements against standard stars and determine the transformation coefficients?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply Astropy's linear fitting tools to correct for atmospheric extinction when observing at different airmasses?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the steps to use Astropy's linear fitting to account for non-linearity in my detector's response, such as a non-linear pixels response measurements at different brightness levels?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of stars with their cartesian coordinates. How can I convert them to spherical coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nfrom astropy import units as u\nimport numpy as np\ncartesian_coords = [[1.2e23, 2.3e23, 3.4e23], [4.5e23, 5.6e23, 6.7e23]]\nstellar_spherical = [cartesian_to_spherical(x, y, z) for x, y, z in cartesian_coords]\nstellar_spherical"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I transform a star's coordinates from ECRS to ICRS, considering the Earth's current position?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.ECRS('star coordinates')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the precessed position of the Sun at sunrise on a specified date?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.sun, astropy.time.Time('2022-01-01')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of positions from ICRS to equatorial coordinates on a specific date?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.ICRS('star coordinates'), astropy.time.Time('2022-01-01')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to create a radial profile of a Gaussian with a maximum intensity of 1000 at a radius of 50 pixels, with a full-width at half-maximum (FWHM) of 10 pixels. Plot the profile in pixels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Gaussian2D\nfrom astropy.modeling.rotations import Rotation2D\nimport matplotlib.pyplot as plt\n\n# Create a 2D Gaussian model with the specified parameters\n# theta=0 degrees (0 radians) specifies no rotation\n# x_stddev=10, y_stddev=10 implies a circularly symmetric Gaussian\n# x_mean=y_mean=0, theta=0 means the peak is at the origin, not at (100,100)\ngaussian = Gaussian2D(\n    amplitude=1000\n    , x_mean=0\n    , y_mean=0\n    , x_stddev=10\n    , y_stddev=10\n    , theta=0\n)\n\n# Generate a grid of x, y values\nx, y = np.mgrid[-50:50, -50:50]\n\n# Evaluate the model on the grid\nmodel_data = gaussian(x, y)\n\n# Calculate the radial profile\nradial_profile = np.sqrt(x**2 + y**2)\n\n# Evaluate the model along this profile\nprofile_data = gaussian(radial_profile, np.zeros_like(radial_profile))\n\n# Plot the radial profile\nplt.plot(radial_profile, profile_data)\nplt.xlabel('Radius [pixels]')\nplt.ylabel('Intensity')\nplt.title('Radial profile of a Gaussian')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the signal to noise ratio for a Jupiter observation using a 10-second exposure time with a read noise of 5 electrons and a dark current of 0.2 electrons per second"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(10, 100000, 1000, 0.2, 5, 10, gain=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a secular bar model using `SecularBar` with `w0=1.2 and `Q=2.5`. Evaluate this model at specific radial points `[1, 2, 5, 10, 20]` kpc and print the results."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from AstroPy\nfrom astropy.modeling.models import SecularBar\nfrom astropy import units as u\n\n# Create the secular bar model\n# w0=1.2 represents the amplitude\n# Q=2.5 represents the quality factor\nsec_model = SecularBar(w0=1.2, Q=2.5)\n\n# Define radial points in kpc\nr_points = [1, 2, 5, 10, 20] * u.kpc\n\n# Evaluate the model at these points\n# The result gives bar shape values according to the secular bar profile\nshapes = sec_model(r_points)\n\n# Print results with units\nfor radius, shape in zip(r_points, shapes):\n    print(f'At r = {radius:.1f}, shape = {shape:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use `Gaussian1D` with `x_0=0.5` and `sigma=2.0` to create a Gaussian model. Evaluate this model at specific radial points `[1, 2, 5, 10, 20]` kpc and print the results."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from AstroPy\nfrom astropy.modeling.models import Gaussian1D\nfrom astropy import units as u\n\n# Create the Gaussian model\n# x_0=0.5 represents the mean\n# sigma=2.0 represents the standard deviation\n gauss_model = Gaussian1D(x_0=0.5, sigma=2.0)\n\n# Define radial points in kpc\nr_points = [1, 2, 5, 10, 20] * u.kpc\n\n# Evaluate the model at these points\n# The result gives values according to the Gaussian profile\nvalues = gauss_model(r_points)\n\n# Print results with units\nfor radius, value in zip(r_points, values):\n    print(f'At r = {radius:.1f}, value = {value:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use `Exponential1D` with `x_0=1.0` and `length_scale=3.0` to create an exponential model. Evaluate this model at specific radial points `[1, 2, 5, 10, 20]` kpc and print the results."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from AstroPy\nfrom astropy.modeling.models import Exponential1D\nfrom astropy import units as u\n\n# Create the exponential model\n# x_0=1.0 represents the reference point\n# length_scale=3.0 represents the decay length (1/e)\nexp_model = Exponential1D(x_0=1.0, length_scale=3.0)\n\n# Define radial points in kpc\nr_points = [1, 2, 5, 10, 20] * u.kpc\n\n# Evaluate the model at these points\n# The result gives values according to the exponential profile\nvalues = exp_model(r_points)\n\n# Print results with units\nfor radius, value in zip(r_points, values):\n    print(f'At r = {radius:.1f}, value = {value:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian1D model where the mean position is tied to be always 5 times the standard deviation, with an initial amplitude of 2.5, initial mean of 20, and initial standard deviation of 0.1."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.models import Gaussian1D\nclass TiedGaussian(Gaussian1D):\n    def tie_mean(self, model):\n        return 5 * model.stddev\n    def __init__(self, amplitude=2.5, mean=20, stddev=0.1):\n        super().__init__(amplitude=amplitude, mean=mean, stddev=stddev)\n        self.mean.tied = self.tie_mean\n\n# Create an instance of the model\nmy_gaussian = TiedGaussian()\nprint(my_gaussian.mean.value) # 0.5\nmy_gaussian.stddev = 0.2\nprint(my_gaussian.mean.value) # 1.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian1D model where the standard deviation is fixed at 0.5 and the mean position is tied to be always 3 times the standard deviation, with an initial amplitude of 1.75, initial mean of 15, and initial standard deviation of 0.5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.models import Gaussian1D\nclass TiedGaussian(Gaussian1D):\n    def tie_mean(self, model):\n        return 3 * model.stddev\n    def __init__(self, amplitude=1.75, mean=15, stddev=0.5):\n        super().__init__(amplitude=amplitude, mean=mean, stddev=stddev, fixed={'stddev': True})\n        self.mean.tied = self.tie_mean\n\n# Create an instance of the model\nmy_gaussian = TiedGaussian()\nprint(my_gaussian.mean.value) # 1.5\nmy_gaussian.stddev = 0.5\nprint(my_gaussian.mean.value) # 1.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian1D model where: the mean position is tied to be always 2 times the amplitudes standard deviation, the standard deviation is fixed at 0.2, the amplitudes value is initially 2, mean and standard deviation are initially 10 and 0.1 respectively, respectively."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.models import Gaussian1D\nclass TiedGaussian(Gaussian1D):\n    def tie_mean(self, model):\n        return 2 * model.amplitude * model.stddev\n    def __init__(self, amplitude=2, mean=10, stddev=0.1):\n        super().__init__(amplitude=amplitude, mean=mean, stddev=0.2, fixed={'stddev': True})\n        self.mean.tied = self.tie_mean\n\n# Create an instance of the model\nmy_gaussian = TiedGaussian()\nprint(my_gaussian.mean.value) # 8.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of dates in the format 'YYYY-MM-DD'"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create a Time object from the list of dates\ndates = Time(['2022-01-01', '2022-01-02', '2022-01-03'])\n\n# Compute the time differences between consecutive dates\ntime_deltas = dates[1:] - dates[:-1]\n\n# Print the time differences\nprint(time_deltas)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I correct the astropy.time.Time comprehension to handle clock rounding?"
      },
      {
        "from": "assistant",
        "value": "t = Time(mjd_dates, format='mjd', scale='utc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are some common errors when using astropy.time.Time with MJD format?"
      },
      {
        "from": "assistant",
        "value": "Make sure the MJD values are correctly formatted and the time scale is set to 'utc'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can astropy.time.Time handle MJD dates with leap seconds?"
      },
      {
        "from": "assistant",
        "value": "Yes, it can handle MJD dates with leap seconds. However, the time scale must be set to 'utc' for accurate results."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to find unique rows in a table based on specific columns?"
      },
      {
        "from": "assistant",
        "value": "astropy.table.unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the default parameters for the astropy.table.unique function?"
      },
      {
        "from": "assistant",
        "value": "astropy.table.unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.table.unique to remove all duplicate rows from a table?"
      },
      {
        "from": "assistant",
        "value": "astropy.table.unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use median_absolute_deviation for a normal distribution of 1000 data points between 0 and 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation\nimport numpy as np\nc = np.random.normal(loc=0.5, scale=0.1, size=1000)\nvelocity_scatter = median_absolute_deviation(c)\nprint(f\"Estimated velocity scatter: {velocity_scatter:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 99th percentile of the data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\npercentile = np.percentile(data, 99)\nprint(percentile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from a spacecraft with 100 samples taken over 10 months. The samples have errors of about 0.1 units. Can you show me how to use bayesian_blocks to identify distinct states, treating time points as 'events' with a false alarm probability of 0.1?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from a planetary atmosphere with 500 samples taken over 100 days. The samples have errors of about 0.05 units. Can you show me how to use bayesian_blocks to identify distinct states, treating time points as 'regular events' with a fundamental tick rate of 0.01 days and a false alarm probability of 0.01?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from a stellar spectrum with 200 samples taken over 20 days. The samples have errors of about 0.005 units. Can you show me how to use bayesian_blocks to identify distinct states, treating time points as 'measures' with a false alarm probability of 0.001?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a 2D array to a FITS image HDU?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.ImageHDU(data=np.array([[1, 2], [3, 4]]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to write a FITS file from a dictionary of data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.PrimaryHDU(data={'header': 'Hello World', 'data': np.array([[1, 2], [3, 4]])})\nhdu.writeto('output.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read a FITS file and extract the data in a numpy array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.open('input.fits')\ndata = hdu[0].data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have high-resolution spectroscopic data flux = [3.2, 2.8, 3.1, 2.9, 3.3, 2.7, 3.0, 2.6] and need to downgrade its resolution."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\nimport numpy as np\ndata = np.array([1.2, 1.1, 1.3, 1.2, 1.4, 1.1, 1.2, 1.0])\nkernel = Box1DKernel(width=4, mode='integrate')\nsmoothed_data = convolve(data, kernel, boundary='extend')\nprint('Original data:', data)\nprint('Smoothed data:', smoothed_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric positions of Jupiter and Saturn on January 1, 2024, at 12:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\nimport astropy.units as u\n\ntime = Time('2024-01-01 12:00:00')\nplanets = ['jupiter', 'saturn']\nfor planet in planets:\n    pos = get_body_barycentric(planet, time)\n    x = pos.x.to(u.au)\n    y = pos.y.to(u.au)\n    z = pos.z.to(u.au)\n    print(f'{planet.capitalize()} barycentric position (AU):')\n    print(f'X: {x:.6f}')\n    print(f'Y: {y:.6f}')\n    print(f'Z: {z:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric positions of Uranus and Neptune on January 1, 2024, at 12:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\nimport astropy.units as u\n\ntime = Time('2024-01-01 12:00:00')\nplanets = ['uranus', 'neptune']\nfor planet in planets:\n    pos = get_body_barycentric(planet, time)\n    x = pos.x.to(u.au)\n    y = pos.y.to(u.au)\n    z = pos.z.to(u.au)\n    print(f'{planet.capitalize()} barycentric position (AU):')\n    print(f'X: {x:.6f}')\n    print(f'Y: {y:.6f}')\n    print(f'Z: {z:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric position of Earth-Moon Barycenter on January 1, 2024, at 12:00 UTC."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\nimport astropy.units as u\ntime = Time('2024-01-01 12:00:00')\nbody = ('earth-moon-barycenter',)\nfor b in body:\n    pos = get_body_barycentric(b, time)\n    x = pos.x.to(u.au)\n    y = pos.y.to(u.au)\n    z = pos.z.to(u.au)\n    print(f'{b.capitalize()} barycentric position (AU):')\n    print(f'X: {x:.6f}')\n    print(f'Y: {y:.6f}')\n    print(f'Z: {z:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from Gaia and have a redshift of 0.023 for a star. How can I convert this to a distance in megaparsecs using astropy.coordinates.Distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nimport astropy.units as u\n\n# Create Distance object from redshift\nredshift = 0.023\n# Use the WMAP5 cosmology to compute the distance\nfrom astropy.cosmology import WMAP5\ndistance = Distance(z=redshift, cosmology=WMAP5)\n# Get distance in megaparsecs\ndistance_mpc = distance.megaparsec\nprint(f\"Distance: {distance_mpc:.2f} megaparsecs\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a right ascension value from sexagesimal format (HH:MM:SS) to decimal degrees using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nfrom astropy import units as u\n\n# Define RA in sexagesimal format (HH:MM:SS)\nra_str = '14:15:39.1'\n\n# Convert to Angle object, specifying degree units\nra = Angle(ra_str, unit=u.deg)\n\n# Get the value in decimal degrees\nra_deg = ra.deg\n\nprint(f'RA: {ra_str} = {ra_deg:.6f} degrees')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a declination value from sexagesimal format (DD:MM:SS) to decimal degrees using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nfrom astropy import units as u\n\n# Define Dec in sexagesimal format (DD:MM:SS)\ndec_str = '12:34:56.7'\n\n# Convert to Angle object, specifying degree units\ndec = Angle(dec_str, unit=u.deg)\n\n# Get the value in decimal degrees\ndec_deg = dec.deg\n\nprint(f'Dec: {dec_str} = {dec_deg:.6f} degrees')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a celestial coordinate from equatorial to galactic coordinates using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define celestial coordinate in equatorial coordinates\nra = 10.2345 * u.degree\ndec = 20.4567 * u.degree\n\n# Convert to galactic coordinates\ncoord_gal = SkyCoord(ra, dec, frame='icrs').transform_to('galactic')\n\nprint(f'Galactic coordinates: {coord_gal}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 100x100 pixel cutout from a 2048x2048 image array, centered at (1024, 1024) pixel coordinates."
      },
      {
        "from": "assistant",
        "value": "{\"data\": [[1, 2, ...], ...]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout object from a 2D array with size (5, 5) and a WCS object."
      },
      {
        "from": "assistant",
        "value": "{\"data\": [[1, 2, ...], ...], \"wcs\": {...}}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to extract a partial 200x300 pixel cutout from an image array, but there is a 20% overlap with the original array."
      },
      {
        "from": "assistant",
        "value": "{\"data\": [[1, 2, ...], ...], \"wdc\": {...}}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 3 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": "{\n    \"from\": \"astropy.coordinates.Galactic\",\n    \"parameters\": {\n        \"l\": 250.5, \"b\": 34.2, \"distance\": 1000, \"pm_l_cosb\": 10.3, \"pm_b\": 5.1, \"radial_velocity\": 20.9\n    }\n}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Sloan Digital Sky Survey 9th Data Release to find the pixel coordinates of the center of the galaxy M87 (RA=12h30m49.4s, Dec=12d23m28.0s)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.wcs import WCS\nimport astropy.units as u\n\nm87_center = SkyCoord('12h30m49.4s 12d23m28.0s')\nwcs = WCS(naxis=2, naxis1=100, naxis2=100)\nwcs.wcs.crpix = [50, 50]\nwcs.wcs.cd = [[1, 0], [0, 1]]\nx_pix, y_pix = astropy.wcs.utils.skycoord_to_pixel(m87_center, wcs)\nprint(f'M87''s center is at pixel coordinates:')\nprint(f'X pixel: {x_pix:.2f}')\nprint(f'Y pixel: {y_pix:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I update the first HDU of an existing FITS file with new data and a custom header?"
      },
      {
        "from": "assistant",
        "value": "update('file.fits', data, header, 0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with multiple extensions, how can I update the HDU with index 3 using new data and a reference to an existing header?"
      },
      {
        "from": "assistant",
        "value": "update('file.fits', data, header=header, ext=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to update the HDU named 'sci' in a FITS file, how can I do it with new data and an associated header?"
      },
      {
        "from": "assistant",
        "value": "update('file.fits', data, hdr, 'sci')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model an exponential decline in the flux of my star after a supernova explosion. How do I create an Exponential1D model with amplitude=500 flux units and tau=2.5 years?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nfrom astropy import units as u\n\ntime = np.linspace(0, 10, 100) * u.year\ncustom_model = models.Exponential1D(amplitude=500, tau=2.5)\nmodel_flux = custom_model(time.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an Exponential1D model with amplitude=100 flux units and tau=0.1 hours, then generate model values for an array of 50 time points between 0 and 1 hours?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nfrom astropy import units as u\ntime = np.linspace(0, 1, 50) * u.hour\nexp_model = models.Exponential1D(amplitude=100, tau=0.1)\nmodel_flux = exp_model(time.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to fit a model to my star's light curve during a gradual increase in brightness. How do I create an Exponential1D model with amplitude=750 flux units and tau=1.2 years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ntime = np.linspace(0, 5, 100) * u.year\ncustom_model = models.Exponential1D(amplitude=750, tau=1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to update the 'PRIMARY' extension in a JWST NIRCam fits file with a new header keyword 'OBSMODE=MANUAL'. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "Update the 'PRIMARY' extension of a JWST NIRCam fits file with a new header keyword 'OBSMODE=MANUAL'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of astronomical event dates and want to calculate the average time of year for these events, disregarding outliers."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\nimport numpy as np\ndates = np assortment([12.3, 12.5, 12.4, 15.9, 12.6, 12.3, 12.4, 12.5, 25.0, 12.4])\n# Calculate robust variance estimate using biweight_midvariance\ncalculate accurate variance = biweight_midvariance(dates)\n# Calculate the square root to get robust scatter estimate (similar to std dev)\nrobust scatter = np.sqrt(robust_variance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the typical use case of astropy.modeling.ComplexModel?"
      },
      {
        "from": "assistant",
        "value": "Astropy's ComplexModel is a base class for models containing complex numbers. It is used in situations where the model output needs to be a complex number. The ComplexModel class inherits from the Model class and adds functionality for complex numbers. It is suitable for models like the phasor model, which depends on the complex number."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Simplexes Model using astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "Astropy's SimplexesModel is a base class for models that contain simplex elements. It is used in situations where the model output needs to be a simplex (a set of points in n-dimensional space where the sum of the n points is equal to 1). The SimplexesModel class inherits from the Model class and adds functionality for simplex elements. It is suitable for models like the histograms model, which depends on simplex elements."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the signature of astropy.modeling.Gauss2DPolar?"
      },
      {
        "from": "assistant",
        "value": "Astropy's Gauss2DPolarModel is a model that represents a 2D Gaussian distribution in polar coordinates. It takes three parameters: amplitude, x_0, and y_0, which represent the amplitude, x-coordinate of the peak, and y-coordinate of the peak respectively."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of integers representing a grayscale image with values ranging from 0 to 255. I want to display the image with a histogram stretch. How can I do this using simple_norm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import simple_norm\nimport numpy as np\n\n# Example image data (replace with your actual data)\nimage_data = np.random.randint(0, 256, size=(100, 100))\n\n# Create normalization object with histogram stretch\nnorm = simple_norm(image_data, 'histogram', clip=False)\n\n# The normalized data can now be used with matplotlib\n# Example:\nimport matplotlib.pyplot as plt\nplt.imshow(image_data, norm=norm)\nplt.colorbar()\nplt.title('Grayscale Image with Histogram Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I retrieve the telescope's coordinates from a FITS image header?"
      },
      {
        "from": "assistant",
        "value": "fits.getval(filename, 'TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the camera's name stored in the FITS image header?"
      },
      {
        "from": "assistant",
        "value": "fits.getval(filename, 'CAMNAME')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the observation date stored in the FITS image header?"
      },
      {
        "from": "assistant",
        "value": "fits.getval(filename, 'DATE-OBS')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert between Celsius and Kelvin using astropy units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\ncelsius_value = 25 * u.C\nkellyn_value = celsius_value.to(u.K)\nprint(kellyn_value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the parse_expression function to parse an expression containing a unit conversion?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nparse_expression = u.parse_expression('10 m in km')\nprint(parse_expression)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a unit conversion from meters to kilometers while also considering the velocity of light in meters per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nmeters = 1000 * u.meter\ntokilometers = meters.to(u.kilometer, equivalencies=u.speed_of_light())\nprint(tookilometers)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my analysis of galaxy morphology, I need to compute the critical density of the universe using Planck18 parameters."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.critical_density(0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the Hubble time for the universe using Planck18 parameters."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.hubble_time(0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my study on the large-scale structure of the universe, I need to compute the age of the universe at redshift 2 using Planck18 parameters."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.age(0.5, 2).to('Gyr').value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to shift a galaxy redshift using the Shift model in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nCoord = Shift(offset=0.05)(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply Shift model for proper motion correction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\npm_corrected = Shift(offset=1.2)(proper_motion)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the syntax for applying the Shift model to offset a celestial object's velocity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nvelocity_offset = Shift(offset=-10)(velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Gaussian kernel with x_size=15 and stddev=2.5 using the 'center' mode?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel\n\ngaussian_kernel = Gaussian1DKernel(stddev=2.5, x_size=15, mode='center')\nprint(gaussian_kernel.array)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Gaussian kernel with x_size=30 and stddev=5.0 using the 'oversample' mode?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel\ngaussian_kernel = Gaussian1DKernel(stddev=5.0, x_size=30, mode='oversample')\nprint(gaussian_kernel.array)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Gaussian kernel with x_size=10 and stddev=1.0 using the 'linear_interp' mode?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel\ngaussian_kernel = Gaussian1DKernel(stddev=1.0, x_size=10, mode='linear_interp')\nprint(gaussian_kernel.array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the median of a 1D array in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.median"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a FITS file to a CSV file in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getdata().to SERIES (delim="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I plot a spectrum in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.plot_spectrum"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert 10 meters to kilometers"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Create a Quantity object for 10 meters\nmeters = 10 * u.m\n\n# Convert to kilometers\nkilometers = meters.to(u.km)\n\n# Print the result\nprint(f10 meters is equal to {kilometers.value:.2f} kilometers\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Implement a model of the PSF for a telescope with a diameter of 2.5 meters and a wavelength of 600nm"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\ndiameter = 2.5  # telescope diameter in meters\nwavelength = 600e-9  # wavelength of light in meters (600 nm)\npixel_scale = 0.1  # arcseconds per pixel\n\nradius_arcsec = 1.22 * wavelength / diameter * 206265\n\nsize = 50\ney, x = np.mgrid[:size, :size]\nairy = AiryDisk2D(amplitude=1, x_0=size/2, y_0=size/2, radius=radius_arcsec/pixel_scale)\npsf = airy(x, y)\nplt.imshow(psf, cmap='viridis')\nplt.colorbar(label='Intensity')\nplt.title('Airy Disk PSF')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model of the PSF for a telescope with a diameter of 1.0 meter and a wavelength of 700nm"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\ndiameter = 1.0  # telescope diameter in meters\nwavelength = 700e-9  # wavelength of light in meters (700 nm)\npixel_scale = 0.1  # arcseconds per pixel\n\nradius_arcsec = 1.22 * wavelength / diameter * 206265\n\nsize = 50\ney, x = np.mgrid[:size, :size]\nairy = AiryDisk2D(amplitude=1, x_0=size/2, y_0=size/2, radius=radius_arcsec/pixel_scale)\npsf = airy(x, y)\nplt.imshow(psf, cmap='viridis')\nplt.colorbar(label='Intensity')\nplt.title('Airy Disk PSF')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Implement a model of the PSF for a telescope with a diameter of 3.0 meters and a wavelength of 800nm"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\ndiameter = 3.0  # telescope diameter in meters\nwavelength = 800e-9  # wavelength of light in meters (800 nm)\npixel_scale = 0.1  # arcseconds per pixel\n\nradius_arcsec = 1.22 * wavelength / diameter * 206265\n\nsize = 50\ney, x = np.mgrid[:size, :size]\nairy = AiryDisk2D(amplitude=1, x_0=size/2, y_0=size/2, radius=radius_arcsec/pixel_scale)\npsf = airy(x, y)\nplt.imshow(psf, cmap='viridis')\nplt.colorbar(label='Intensity')\nplt.title('Airy Disk PSF')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I shift the x coordinate of my astronomical object by a certain offset?"
      },
      {
        "from": "assistant",
        "value": "Use astropy.modeling.models.Shift(x=offset)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing an image and want to adjust the brightness by applying a linear transform."
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LinearStretch(slope=2, intercept=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the astropy library to create a new linear stretch?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LinearStretch(slope=1.5, intercept=0.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a linear stretch to my data?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LinearStretch(slope=0.8, intercept=0.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable with columns for moon phase, lunar distance, and eclipse flag, with units for lunar distance in kilometers"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\nt = QTable({'moon_phase': [0.5, 0.7, 0.9], 'lunar_distance': [384400 * u.km, 384300 * u.km, 384200 * u.km], 'eclipse_flag': [False, True, False]})\nprint(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Disk2D model with a fixed amplitude parameter and initialize the x and y positions to 0."
      },
      {
        "from": "assistant",
        "value": "disk_model = models.Disk2D(amplitude=5.0, x_0=0, y_0=0, R_0=75); disk_model.amplitude.fixed = True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a Disk2D model with tied x and y position parameters set to the center of the disk."
      },
      {
        "from": "assistant",
        "value": "disk_model = models.Disk2D(amplitude=5.0, x_0=0, y_0=0, R_0=75); disk_model.x_0.tied = disk_model.y_0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Disk2D model with a lower bound for the amplitude parameter set to 1.0 and an upper bound for the radius parameter set to 100.0."
      },
      {
        "from": "assistant",
        "value": "disk_model = models.Disk2D(amplitude=5.0, x_0=200, y_0=200, R_0=75); disk_model.amplitude.min = 1.0; disk_model.R_0.max = 100.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I\u2019m studying astrophysical plasmas and need to implement a Lorentzian profile to model emission lines. Can you provide an example of how to use the `Lorentz1D` model from `astropy.modeling`?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D\n\n# Define a Lorentzian model\nmodel = Lorentz1D()\n\n# Evaluate the model at some points\nx = np.linspace(5.5, 7.5, 200)\ny = model(x)\n\n# Print the values\nprint(y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I\u2019m studying spectral lines and need to fit a Lorentzian profile to some data. Can you show me an example of how to use the `Lorentz1D` model from `astropy.modeling` for fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\n# Generate sample data (in practice, this would be your observed spectrum)\nx = np.linspace(5.5, 7.5, 200)\ny_true = model(x) + np.random.normal(0, 0.5, x.shape)\n\n# Set up the fitting\nfitter = LevMarLSQFitter()\nmodel = Lorentz1D()\n\n# Perform the fit\nfitted_model = fitter(model, x, y_true)\n\n# Print results\nprint(fitted_model.amplitude.value)\nprint(fitted_model.x_0.value)\nprint(fitted_model.fwhm.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a column of celestial coordinates in equatorial coordinates (RA and Dec) with units of degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column, MaskedColumn\nfrom astropy import units as u\nimport numpy as np\n\n# Create sample RA and Dec values (in degrees)\nra = np.array([100.1, 101.2, 102.3])\ndec = np.array([20.1, 21.2, 22.3])\n\n# Create a masked Column with units of degrees\nra_col = MaskedColumn(data=ra, name='RA', unit=u.deg, mask=np.array([True, False, True]))\ndec_col = MaskedColumn(data=dec, name='Dec', unit=u.deg, mask=np.array([False, True, False]))\n\n# Create a Table and add the columns\ntable = Table()\ntable['RA'] = ra_col\ntable['Dec'] = dec_col\n\n# Example of accessing the data\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying galaxy morphology and need to create a synthetic image of a spiral galaxy with a Sersic2D profile. How can I generate and visualize this brightness profile with some elongation and rotation?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in creating a synthetic image of an elliptical galaxy with a Sersic2D profile. I'd like to visualize the brightness profile with different amplitudes and effective radii. How can I do that?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate a synthetic image of a galaxy using the Sersic2D profile. I'd like to include some noise in the image. How can I do that?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a time offset to a given astrobject"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create a Time object\ntime = Time('2022-01-01 12:00:00')\n\n# Add a time offset\ntime_offset = time + 30  # 30 seconds\n\n# Print the result\nprint(time_offset)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What will be the position of the Earth's center of mass as viewed from Mars on March 15, 2023, at 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import SkyCoord, EarthLocation, get_body\n\n# Define Mars location\nmars = EarthLocation(\n    lat=0*u.deg, \n    lon=0*u.deg, \n    height=0*u.m\n)\n\n# Create time\nstart_time = Time('2023-03-15 12:00:00')\nearth_center_of_mass = get_body('earth', start_time, mars)\nprint(earth_center_of_mass)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What will be the position of the planet Jupiter as viewed from the Earth on December 25, 2023, at 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import SkyCoord, EarthLocation, get_body\n\n# Define Earth location\nearth = EarthLocation(\n    lat=0*u.deg, \n    lon=0*u.deg, \n    height=0*u.m\n)\n\n# Create time\nstart_time = Time('2023-12-25 12:00:00')\njupiter = get_body('jupiter', start_time, earth)\nprint(jupiter)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What will be the position of the planet Saturn as viewed from the Earth on January 1, 2024, at 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import SkyCoord, EarthLocation, get_body\n\n# Define Earth location\nearth = EarthLocation(\n    lat=0*u.deg, \n    lon=0*u.deg, \n    height=0*u.m\n)\n\n# Create time\nstart_time = Time('2024-01-01 12:00:00')\nsaturn = get_body('saturn', start_time, earth)\nprint(saturn)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to represent the constant flux from a light source. How can I use the Const1D model from Astropy's modeling framework?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Model, Parameter\nfrom astropy.modeling.models import Const1D\n\n# Create a Const1D model with a specific amplitude\ndata = Const1D(amplitude=100)\n\n# Evaluate the model at a given wavelength\nwavelength = 5000\nflux = data(wavelength)\nprint(flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of integers (10 elements) containing some outliers. The values range from 0 to 100. How can I calculate the robust standard deviation using mad_std?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nimport numpy as np\n\ndata = np.random.randint(0, 100, size=10)\ndata[5] = 1000  # add an outlier\nrobust_std = mad_std(data, ignore_nan=True)\nprint(robust_std)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize my Mars rover image to highlight the geological features while minimizing the effect of extreme bright spots?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of normalizing a galaxy image with a custom stretch function?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to normalize an asteroid image to bring out its subtle details, how can I do it?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3D Gaussian filter with a standard deviation of 2 units in the x-direction, 4 units in the y-direction, and a rotation angle of 45 degrees. Visualize the kernel using matplotlib."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian3DKernel\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ngaussian_3D_kernel = Gaussian3DKernel(x_stddev=2, y_stddev=4, theta=45)\nplt.imshow(gaussian_3D_kernel.array, cmap='viridis')\nplt.colorbar()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate a 2D Gaussian kernel with a standard deviation of 1 pixel in both the x and y directions, and a size of 11 pixels. Use the \"oversample\" discretization mode."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nimport numpy as np\n\ngaussian_2D_kernel = Gaussian2DKernel(x_stddev=1, y_stddev=1, x_size=11, mode='oversample')\nprint(gaussian_2D_kernel.array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian filter with a standard deviation of 3 pixels in the x-direction and 5 pixels in the y-direction, with a rotation angle of 90 degrees. Use the \"linear_interp\" discretization mode and a factor of 5 for oversampling."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nimport numpy as np\n\ngaussian_2D_kernel = Gaussian2DKernel(x_stddev=3, y_stddev=5, theta=90, mode='linear_interp', factor=5)\nprint(gaussian_2D_kernel.array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a sinusoidal curve to the out-of-transit baseline using LinearLSQFitter and obtain the fitted parameters?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nimport astropy.units as u\ncos_model = models.Sine1D(amplitude=1.0, offset=1.0, period=1.0)\nfitter = fitting.LinearLSQFitter()\noot_phases = np.array([2.0, 3.0, 4.0, 5.0])\noot_fluxes = np.array([0.9, 0.8, 0.7, 0.6])\nfitted_cos = fitter(cos_model, oot_phases, oot_fluxes)\np=fitting.LinearLSQFitter Print(fitted_cos.amplitude.value)\nprint(fitted_cos.offset.value)\nprint(fitted_cos.period.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an image with dimensions 1024x1024 pixels centered on the center of the galaxy M87. I want to convert pixel position (512, 512) to RA and Dec coordinates using the WCS information stored in my header dictionary which contains standard FITS WCS keywords. How can I set up the WCS system and perform this conversion?"
      },
      {
        "from": "assistant",
        "value": "[ej, w=wcs.WCS(header)\nprint(f\"RA: \\u00b7{(w.pixel_to_world(512, 512)).ra.deg:.6f} degrees\")\nprint(f\"Dec: \\u00b7{(w.pixel_to_world(512, 512)).dec.deg:.6f} degrees\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm a student studying astronomy and I want to model the light curve of a pulsating star. Can you help me create a periodic function using Astropy's modeling capabilities and visualize it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nt = np.linspace(0, 10, 1000)\nsine_model = models.Sine1D(amplitude=0.5, frequency=0.5, phase=0.0) + models.Const1D(amplitude=12.0)\nlight_curve = sine_model(t)\nplt.figure(figsize=(10, 6))\nplt.plot(t, light_curve, 'b-', label='Model Light Curve')\nplt.gca().invert_yaxis()\nplt.xlabel('Time (days)')\nplt.ylabel('Magnitude')\nplt.title('Variable Star Light Curve Model')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a sinusoidal function with a period of 3 days and an amplitude of 0.2 magnitudes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\nt = np.linspace(0, 10, 1000)\nsine_model = models.Sine1D(amplitude=0.2, frequency=0.3333333333333333, phase=0.0)\nlight_curve = sine_model(t)\nplt.figure(figsize=(10, 6))\nplt.plot(t, light_curve, 'b-', label='Model Light Curve')\nplt.gca().invert_yaxis()\nplt.xlabel('Time (days)')\nplt.ylabel('Magnitude')\nplt.title('Variable Star Light Curve Model')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me create a sinusoidal function with a phase shift of 1 day and an amplitude of 0.3 magnitudes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\nt = np.linspace(0, 10, 1000)\nsine_model = models.Sine1D(amplitude=0.3, frequency=0.5, phase=1.0)\nlight_curve = sine_model(t)\nplt.figure(figsize=(10, 6))\nplt.plot(t, light_curve, 'b-', label='Model Light Curve')\nplt.gca().invert_yaxis()\nplt.xlabel('Time (days)')\nplt.ylabel('Magnitude')\nplt.title('Variable Star Light Curve Model')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a WCS object from a FITS file with a particular WCS transform to use?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io.fits import getdata, getheader\nfrom astropy.wcs import WCS\n\nhdus = getdata('image.fits', header=True)\nheader = hdus[0].header\n\nw = WCS(header, key=' ', naxis=2)\nprint(w)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What happens if I use a Gaussian1DKernel with a standard deviation of 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create sample spectral data\nspectrum = np.array([1.2, 1.5, 0.8, 1.1, 0.9, 1.3, 1.4, 0.7])\n\n# Create Gaussian kernel with standard deviation = 10\nkernel = Gaussian1DKernel(stddev=10)\n\n# Apply convolution to smooth the spectrum\n# Use boundary='extend' to handle edge effects\nsmoothed_spectrum = convolve(spectrum, kernel, boundary='extend')\n\n# Print original and smoothed spectra for comparison\nprint(\"Original spectrum:\", spectrum)\nprint(\"Smoothed spectrum:\", smoothed_spectrum)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in calculating the energy equivalent of a typical planetary mass. Can you demonstrate the usage of astropy's mass-energy equivalence API?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the mass in Earth masses\nmass = 1 * u.Mearth\n\n# Calculate energy using E = mc^2\n# Using astropy's mass-energy equivalence\nenergy = mass.to('erg', equivalencies=astropy.units.equivalencies.mass_energy())\n\nprint(f'Energy equivalent of {mass} = {energy:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to explore how the mass-energy equivalence works for atomic masses. Can you provide a code snippet showing how to apply this concept?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the mass in atomic mass units (u)\nmass = 2 * u.u\n\n# Calculate energy using E = mc^2\n# Using astropy's mass-energy equivalence\nenergy = mass.to('erg', equivalencies=astropy.units.equivalencies.mass_energy())\n\nprint(f'Energy equivalent of {mass} = {energy:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing research on the energy equivalent of a stellar mass. Can you show me how to use astropy's mass-energy equivalence for this calculation?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the mass in solar masses\nmass = 10 * u.Msun\n\n# Calculate energy using E = mc^2\n# Using astropy's mass-energy equivalence\nenergy = mass.to('erg', equivalencies=astropy.units.equivalencies.mass_energy())\n\nprint(f'Energy equivalent of {mass} = {energy:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to an astropy Table with specific data and data type?"
      },
      {
        "from": "assistant",
        "value": "You can use the ``add_column`` method of the Table class. For example: \n\n my_table.add_column(Column(data=[1.0, 2.0, 3.0], name='new_column', dtype=float))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I rename a column in an astropy Table?"
      },
      {
        "from": "assistant",
        "value": "You can use the ``rename_columns`` method of the Table class. For example: \n\n my_table.rename_columns({'old_column': 'new_column'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove a column from an astropy Table?"
      },
      {
        "from": "assistant",
        "value": "You can use the ``remove_column`` method of the Table class. For example: \n\n my_table.remove_column('column_to_remove')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the nearest neighbor for each star in my catalog using coordinate matching."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Sample catalog of star coordinates (replace with your actual data)\n# Format: RA and Dec in degrees\nra = [10.5, 10.6, 10.4] * u.degree\ndec = [-20.3, -20.4, -20.2] * u.degree\n\n# Create SkyCoord object for all stars\ncatalog = SkyCoord(ra=ra, dec=dec)\n\n# Find the nearest neighbors\nidx, sep2d, _ = catalog.match_to_catalog_sky(catalog)\n\n# Print results\nfor i in range(len(catalog)):\n\tprint(f\"Star at RA={ra[i]:.2f}, Dec={dec[i]:.2f}\")\n\tprint(f\"Nearest neighbor: RA={ra[idx[i]]:.2f}, \"\n\t\tf\"Dec={dec[idx[i]]:.2f}\")\n\tprint(f\"Separation: {sep2d[i]:.2f}\"\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying binary star systems and want to identify potential companion stars. Could you show me how to find the first-nearest neighbor for each star in my catalog using coordinate matching?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Sample catalog of star coordinates (replace with your actual data)\n# Format: RA and Dec in degrees\nra = [10.5, 10.6, 10.4, 15.2, 10.55] * u.degree\ndec = [-20.3, -20.4, -20.2, -25.0, -20.35] * u.degree\n\n# Create SkyCoord object for all stars\ncatalog = SkyCoord(ra=ra, dec=dec)\n\n# Find the first nearest neighbors (nthneighbor=1 because:\n# - nthneighbor=0 is invalid (because there is no 0th neighbor)\n# - nthneighbor=1 gives us the first actual neighbor\n# - nthneighbor=2 would give us the second nearest neighbor\nidx, sep2d, _ = catalog.match_to_catalog_sky(catalog, nthneighbor=2)\n\n# Print results\nfor i in range(len(catalog)):\n\tprint(f\"Star at RA={ra[i]:.2f}, Dec={dec[i]:.2f}\")\n\tprint(f\"First nearest neighbor: RA={ra[idx[i]]:.2f}, \"\n\t\tf\"Dec={dec[idx[i]]:.2f}\")\n\tprint(f\"Separation: {sep2d[i]:.2f}\"\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the third-nearest neighbor for each star in my catalog using coordinate matching."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Sample catalog of star coordinates (replace with your actual data)\n# Format: RA and Dec in degrees\nra = [10.5, 10.6, 10.4, 15.2, 10.55] * u.degree\ndec = [-20.3, -20.4, -20.2, -25.0, -20.35] * u.degree\n\n# Create SkyCoord object for all stars\ncatalog = SkyCoord(ra=ra, dec=dec)\n\n# Find the third nearest neighbors (nthneighbor=3 because:\n# - nthneighbor=0 is invalid (because there is no 0th neighbor)\n# - nthneighbor=1 gives us the first actual neighbor\n# - nthneighbor=2 gives us the second nearest neighbor\n# - nthneighbor=3 gives us the third nearest neighbor\nidx, sep2d, _ = catalog.match_to_catalog_sky(catalog, nthneighbor=4)\n\n# Print results\nfor i in range(len(catalog)):\n\tprint(f\"Star at RA={ra[i]:.2f}, Dec={dec[i]:.2f}\")\n\tprint(f\"Third nearest neighbor: RA={ra[idx[i]]:.2f}, \"\n\t\tf\"Dec={dec[idx[i]]:.2f}\")\n\tprint(f\"Separation: {sep2d[i]:.2f}\"\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform jackknife estimation for the median"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats, sigma_clip"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the function signature of jackknife_stats"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use jackknife_stats for multiple statistics at once"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a QTable with data for 4 planets, including their masses in solar masses, radii in Earth radii, and orbital periods in years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Create QTable with exoplanet data\n# Using solar mass/radius units and years for period\nplanet_data = QTable({'mass': [0.1, 0.2, 0.3, 0.4] * u.Msun, 'radius': [1, 1.5, 2, 2.5] * u.Rear, 'period': [1, 2, 3, 4] * u.yr})\n\n# Add a name column for reference (optional)\nplanet_data['name'] = ['Planet ' + str(i+1) for i in range(4)]\n\n# Display the table with units\nprint(planet_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to perform bootstrapping on a list of numbers?"
      },
      {
        "from": "assistant",
        "value": "See the Python code below for an example of how to perform bootstrapping on a list of numbers using the `bootstrap` function from the `astropy.stats` module."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 3 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import SkyCoord, search_around_sky\n\n# Create example star coordinates for both clusters\nnp.random.seed(42)  # For reproducibility\n\n# Generate random positions around cluster centers\ndef generate_cluster_stars(center_ra, center_dec, num_stars, spread=2.0):\n    ra = np.random.normal(center_ra.degree, spread, num_stars)\n    dec = np.random.normal(center_dec.degree, spread, num_stars)\n    return SkyCoord(ra=ra*u.degree, dec=dec*u.degree)\n\n# Create cluster centers\npleiades_center = SkyCoord('03h47m00s', '+24d07m00s')\nhyades_center = SkyCoord('04h27m00s', '+15d52m00s')\n\n# Generate star positions\npleiades_stars = generate_cluster_stars(pleiades_center.ra, pleiades_center.dec, 150)\nhyades_stars = generate_cluster_stars(hyades_center.ra, hyades_center.dec, 200)\n\n# Search for pairs of stars within 2 degrees of each other\nmax_separation = 2 * u.degree\nclose_pairs_stars = search_around_sky(pleiades_stars, hyades_stars, max_separation)\n\n# Print results\nprint(f'Found {len(close_pairs_stars)} pairs of stars within 2 degrees of each other:')\nfor idx1, idx2, sep2d in close_pairs_stars[:3]:  # Show first 3 pairs only\n    print(f'Pleiades star {idx1}: ({pleiades_stars[idx1].ra.deg:.2f}\u00b0, {pleiades_stars[idx1].dec.deg:.2f}\u00b0)')\n    print(f'Hyades star {idx2}: ({hyades_stars[idx2].ra.deg:.2f}\u00b0, {hyades_stars[idx2].dec.deg:.2f}\u00b0)')\n    print(f'Separation: {sep2d.deg:.2f}\u00b0\n\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to model and visualize the ring structure of a planet's orbit around a binary star system"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport astropy.units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ncenter_x = 100 * u.au\ncenter_y = 50 * u.au\ninner_radius = 40 * u.au\nouter_radius = 60 * u.au\nwidth = 10 * u.au\namplitude = 1\n\nx = np.linspace(-200, 200, 400) * u.au\ny = np.linspace(-200, 200, 400) * u.au\nX, Y = np.meshgrid(x, y)\nring_model = Ring2D(amplitude=amplitude, r_in=inner_radius, r_out=outer_radius, x_0=center_x, y_0=center_y, width=width)\ndisk_image = ring_model(X.value, Y.value)\n\ngfig = plt.figure(figsize=(8,8))\n\tplt.imshow(disk_image, extent=[-200,200,-200,200], origin='lower',\n\t     cmap='inferno')\n\tplt.colorbar(label='Intensity')\n\tplt.xlabel('x [AU]')\n\tplt.ylabel('y [AU]')\n\tplt.title('Ring structure of a planet\\'s orbit around a binary star')\n\tplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2D model with a disk function amplitude of 2"
      },
      {
        "from": "assistant",
        "value": "ring_model = Ring2D(amplitude=2, r_in=40, r_out=60, x_0=0, y_0=0, width=10) "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a Ring2D model in Celestial coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport astropy.units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-100, 100, 200) * u.deg\ny = np.linspace(-100, 100, 200) * u.deg\nX, Y = np.meshgrid(x, y)\nring_model = Ring2D(amplitude=1, r_in=40, r_out=60, x_0=0, y_0=0, width=10)\ndisk_image = ring_model(X.value, Y.value)\n\nplt.figure(figsize=(8, 8))\nplt.imshow(disk_image, extent=[-100, 100, -100, 100], origin='lower',\n          cmap='inferno')\nplt.colorbar(label='Intensity')\nplt.xlabel('RA [deg]')\nplt.ylabel('Dec [deg]')\nplt.title('Ring structure in Celestial coordinates')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a MaskedColumn with a specified dtype and fill_value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn; import numpy as np; col = MaskedColumn(data=[1, 2], name='name', dtype=np.int64, fill_value=99)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between data and mask in MaskedColumn?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn; col = MaskedColumn(data=[1, 2], name='name', mask=[True, False])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a MaskedColumn with a specific format for outputting column values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn; import numpy as np; col = MaskedColumn(data=[1, 2], name='name', format='{:0>8.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit for a temperature 5 Kelvin above absolute zero."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ntemperature_above_zero = u.def_unit('K_above_zero', (5 * u.K), prefixes=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit for a distance 10 light-years from the Sun."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndistance_from_sun = u.def_unit('ly_from_sun', (10 * u.lyr), prefixes=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit for a velocity 20 kilometers per second."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nvelocity_km_per_sec = u.def_unit('km_per_sec', (20 * u.km/u.sec), prefixes=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a CCDData object with a specific uncertainty and mask?"
      },
      {
        "from": "assistant",
        "value": "ccd = CCDData(data=np.array([1,2,3]), uncertainty=np.array([0.1,0.2,0.3]), mask=np.array([False, True, False]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a FlagCollection as flags?"
      },
      {
        "from": "assistant",
        "value": "ccd = CCDData(data=np.array([1,2,3]), flags=FlagCollection(np.array([True, False, True])))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add metadata to the CCDData object?"
      },
      {
        "from": "assistant",
        "value": "ccd = CCDData(data=np.array([1,2,3]), meta={'telescope': 'Hubble', 'exposure_time': 1000.0})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a CCDData instance containing my photometric data"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nimport numpy as np\n\ndata = np.random.normal(500, 20, size=(256, 256))  # Example: 256x256 photometric data\nuncertainty = np.sqrt(np.abs(data))  # Poisson noise approximation\nuncertainty_frame = StdDevUncertainty(uncertainty)\nmask = np.zeros_like(data, dtype=bool)\nccd = CCDData(data=data, uncertainty=uncertainty_frame, mask=mask, unit='adu')\nreturn ccd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a coordinate in the Galactic frame with RA=12.5 deg and Dec=+7.3 deg"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define the coordinates of a star in ICRS frame\nstar_icrs = SkyCoord(12.5*u.deg, 7.3*u.deg, frame='icrs')\n\n# Transform to Galactic coordinates\nstar_galactic = star_icrs.transform_to('galactic')\n\n# Print results\nprint(f'Galactic: l={star_galactic.l:.2f}, b={star_galactic.b:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1024x1024 CCD image array of the Andromeda Galaxy with intensity values ranging from 0 to 65535. How can I display this image with a log stretch using imshow_norm to better visualize the faint structures? Please include a colorbar in linear scale."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LogStretch\nimport matplotlib.pyplot as plt\n\n# Assuming the image data is stored in a variable called 'andromeda_data'\n# Create a sample 1024x1024 array if you don't have the actual data\nandromeda_data = np.random.randint(0, 65536, size=(1024, 1024))\n\n# Create normalization object with log stretch\nnorm = ImageNormalize(andromeda_data, stretch=LogStretch())\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Display the image with log stretch\nim = ax.imshow(andromeda_data, norm=norm, cmap='viridis', origin='lower')\n\n# Add colorbar with linear scale\n# No conversion needed\ncbar = plt.colorbar(im, ax=ax, pad=0.01)\n\n# Add labels and title\nplt.title('Andromeda Galaxy - Log Stretch')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D blocked data set of the interstellar medium with dimensions 512x512x10. How can I display this data with a linear stretch using imshow_norm to visualize the density variations? Please include a colorbar in log scale."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LinearStretch\nimport matplotlib.pyplot as plt\n\n# Assuming the data is stored in a variable called 'ism_data'\n# Create a sample 512x512x10 array if you don't have the actual data\nism_data = np.random.randint(0, 100, size=(512, 512, 10))\n\n# Create normalization object with linear stretch\nnorm = ImageNormalize(ism_data.mean(axis=2), stretch=LinearStretch())\n\n# Create the figure and axis\nfig, ax = plt.subplots(figsize=(10, 8))\n\n# Display the data with linear stretch\nim = ax.imshow(ism_data.mean(axis=2), norm=norm, cmap='viridis', origin='lower')\n\n# Add colorbar with log scale\n# Convert linear colorbar values to log scale for better visualization\ncbar = plt.colorbar(im, ax=ax, pad=0.01)\n\n# Set y-axis label\nax.set_ylabel('Density')\n\n# Add labels and title\nplt.title('Interstellar Medium - Linear Stretch')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D data array of the cosmic microwave background with intensity values ranging from 0 to 100. How can I display this image with a power-law stretch using imshow_norm to better visualize the temperature variations? Please include a colorbar in linear scale."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, PowerStretch\nimport matplotlib.pyplot as plt\n\ncmb_data = np.random.uniform(0, 100, size=(256, 256))\n\nnorm = ImageNormalize(cmb_data, stretch=PowerStretch(1.5))\n\nfig, ax = plt.subplots(figsize=(10, 8))\nim = ax.imshow(cmb_data, norm=norm, cmap='viridis', origin='lower')\ncbar = plt.colorbar(im, ax=ax, pad=0.01)\nplt.title('Cosmic Microwave Background - Power Law Stretch')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the probability that two samples of galaxy rotation periods from different regions of a spiral galaxy come from different distributions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\n# Generate sample data for demonstration\nnp.random.seed(42)\ninner_region = np.random.normal(200, 20, 100)\nouter_region = np.random.normal(220, 25, 100)\n\nkuiper_statistic, probability = kuiper_two(inner_region, outer_region)\n\nprint(f'Probability that the samples come from different distributions: {probability:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the Levenberg-Marquardt algorithm to fit a polynomial function to my spectroscopic data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.fitting import LevMarLSQFitter\nfrom astropy.modeling.models import Polynomial1D\n\n# Create example spectroscopic data\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 3, 5, 7, 11])\n\n# Define a second-order polynomial model\nmodel = Polynomial1D(degree=2)\n\n# Initialize the fitter using the Levenberg-Marquardt algorithm\nfitter = LevMarLSQFitter()\n\n# Fit the model to the data\nbest_fit = fitter(model, x, y)\n\n# Print the fitted coefficients\nprint(best_fit.coefficients)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the median absolute deviation (MAD) of an array of values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the median absolute deviation (MAD) of a normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation, normal_generator"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the MAD of a 2D array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a 120-second CCD integration time, source flux of 100 electrons/s, sky background of 1 electrons/s/pixel, dark current of 0.05 electrons/s/pixel, read noise of 3 electrons, and an aperture of 15 pixels, how can I calculate the signal-to-noise ratio for my optical observation?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats.funcs as astropy\n\nsnr = astropy.signal_to_noise_oir_ccd(t=120, source_eps=100, sky_eps=1, dark_eps=0.05, rd=3, npix=15)\n\nprint(snr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a spectrum that I want to fit with a Gaussian profile, but I need to know the conversion factor from sigma to FWHM. Can you provide it?"
      },
      {
        "from": "assistant",
        "value": "1.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a velocity dispersion to FWHM in km/s?"
      },
      {
        "from": "assistant",
        "value": "2.355"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the ratio of FWHM to sigma for a Gaussian profile?"
      },
      {
        "from": "assistant",
        "value": "1.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain in detail how to use the QuadStretch class for transforming the intensity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import QuadStretch, ImageNormalize\n\n# Load your data\nimage_data = fits.getdata('image.fits')\n\n# Create a QuadStretch instance\nstretch = QuadStretch(\n    gain=2.0,\n    threshold=0.01,\n    low=0.5,\n    high=10.0\n)\n\n# Create an ImageNormalize instance\nnorm = ImageNormalize(image_data, interval=ZScaleInterval(), stretch=stretch)\n\n# Display the image with the QuadStretch transform\nplt.imshow(image_data, norm=norm, cmap='viridis')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe how to use the Mediannorm in peak-to-minimum normalization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (median_norm,  ImageNormalize, ZScaleInterval, MinMaxInterval)\n\n# Load your data\nimage_data = fits.getdata('image.fits')\n\n# Create a MedianNorm instance\nnorm = median_norm(image_data)\n\n# Display the image with the MedianNorm transform\nplt.imshow(image_data, norm=norm, cmap='viridis')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide a concise explanation for the usage of the RescaleInterval in image normalization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (ImageNormalize, RescaleInterval)\n\n# Load your data\nimage_data = fits.getdata('image.fits')\n\n# Define the rescale interval\ninterval = RescaleInterval(0.01, 0.99)\n\n# Display the image with the RescaleInterval transform\nplt.imshow(image_data, norm=ImageNormalize(image_data, interval=interval), cmap='viridis')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance between two celestial objects using their sky coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define the sky coordinates of the two objects\nobj1 = SkyCoord(ra=10.68458*u.degree, dec=41.26917*u.degree, frame='icrs')\nobj2 = SkyCoord(ra=83.82208*u.degree, dec=-5.39111*u.degree, frame='icrs')\n\n# Calculate the distance between the two objects\ndistance = obj1.distance_to(obj2)\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I double this array of numbers?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to multiply the x and y coordinates of a 3D point by 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Multiply"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to triple this complex number. How do I do that?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the time difference between two dates in the astropy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nimport datetime\n\nt1 = Time(datetime.datetime(2022, 1, 1))\n# Second date\n# using TimeDelta api, you can calculate the time difference between two times."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the time difference between 12:00 and 13:00 on March 1, 2020?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nimport datetime\n# define two times using astropy library\nTIMEDELTA_API = Time('2020-03-01 12:00')\n# Second date in day-format\n#Getting the time difference by using TimeDelta object"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the time difference between two dates in the astropy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nfrom dateutil.relativedelta import relativedelta\n# Create a date and time object\nstartTime = Time('2020-01-01 00:00:00')\nendTime = Time('2020-12-31 23:59:59')\n# Calculate the time difference\ntimeDiff = endTime - startTime\n# Print the total time\nprint(timeDiff)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible applications of the robust standard deviation in data analysis and scientific research?"
      },
      {
        "from": "assistant",
        "value": "The robust standard deviation is a measure of statistical dispersion that is less affected by outliers and is therefore useful in data analysis and scientific research where the presence of outliers can significantly impact the results. It can be applied in various fields such as finance, medicine, and physics, where the measurement errors or variability can have a significant impact on the results."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the robust standard deviation of a dataset with missing values?"
      },
      {
        "from": "assistant",
        "value": "You can use the mad_std function from the astropy.stats module, which can handle missing values. Additionally, you can use the ignore_nan parameter to ignore the missing values when calculating the median absolute deviation."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the robust standard deviation in a real-world scenario, such as analyzing the stock prices of a company?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use the robust standard deviation to analyze the stock prices of a company. For example, you can calculate the robust standard deviation of the daily stock prices over a certain period to get an idea of the variability in the stock prices. This can be useful in finance to determine the volatility of a stock."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Cosine1D model with amplitude=2.0 and frequency=1.0. Restrict the amplitude parameter to stay between 1.5 and 3.5 during future model fitting.  Show me how to create a test plot from 0.5 to 1.5 seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create Cosine1D model with initial parameters\nmodel = models.Cosine1D(amplitude=2.0, frequency=1.0)\n\n# Set bounds for amplitude parameter (1.5 to 3.5)\nmodel.amplitude.bounds = (1.5, 3.5)\n\n# Generate test data points\nx = np.linspace(0.5, 1.5, 200)\n#model = models.Cosine1D(amplitude=2.0, frequency=1.0)\nsignal = model(x)\n\n# Create plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, signal, 'b-', label='Cosine Model')\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Cosine1D Model (A=2.0, f=1.0 Hz)')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Cosine1D model with amplitude=4.0 and frequency=3.0. Restrict the amplitude parameter to stay between 2.0 and 4.0 during future model fitting.  Show me how to create a test plot from 1.0 to 2.0 seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create Cosine1D model with initial parameters\nmodel = models.Cosine1D(amplitude=4.0, frequency=3.0)\n\n# Set bounds for amplitude parameter (2.0 to 4.0)\nmodel.amplitude.bounds = (2.0, 4.0)\n\n# Generate test data points\nx = np.linspace(1.0, 2.0, 200)\n#model = models.Cosine1D(amplitude=2.0, frequency=1.0)\nsignal = model(x)\n\n# Create plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, signal, 'b-', label='Cosine Model')\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Cosine1D Model (A=4.0, f=3.0 Hz)')\nplt.grid(True)\nplt.legend()\nplt.show(\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Cosine1D model with amplitude=1.0 and frequency=4.0. Restrict the amplitude parameter to stay between 0.5 and 1.5 during future model fitting.  Show me how to create a test plot from 0.0 to 1.0 seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create Cosine1D model with initial parameters\nmodel = models.Cosine1D(amplitude=1.0, frequency=4.0)\n\n# Set bounds for amplitude parameter (0.5 to 1.5)\nmodel.amplitude.bounds = (0.5, 1.5)\n\n# Generate test data points\nx = np.linspace(0.0, 1.0, 200)\n#model = models.Cosine1D(amplitude=2.0, frequency=1.0)\nsignal = model(x)\n\n# Create plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, signal, 'b-', label='Cosine Model')\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Cosine1D Model (A=1.0, f=4.0 Hz)')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on stellar viscosity calculations and need to express my computational results in CGS units. Could you show me how to convert my calculated dynamic viscosity values to poise units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ndata_si = 1.0e-4  # Example value in Pa\u00b7s\n\ndata_cgs = data_si.to('poise')\n\ndata_cgs"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the distance between the Sun and a newly discovered object with known ICRS coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define the Sun's coordinates (example values)\nsun = SkyCoord(ra=18.0*u.deg, dec=22.1*u.deg, frame='icrs')\n\n# Define the object's coordinates (example values)\nobject = SkyCoord(ra=19.2*u.deg, dec=23.4*u.deg, frame='icrs')\n\ncurrent_distance = sun.distance.to(u.au)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a list of ICRS coordinates to equatorial coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\n\n# Define the ICRS coordinates (example values)\nicsr_coordinates = [(18.0*u.deg, 22.1*u.deg), (19.2*u.deg, 23.4*u.deg)]\n\n# Convert to equatorial coordinates\nequatorial_coordinates = [SkyCoord(ra=icrs[0], dec=icrs[1], frame='icrs').transform_to('galactic') for icrs in icrs_coordinates]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the angular separation between two objects with known ICRS coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\ndef angular_separation(object1, object2):\n    return object1.separation(object2)\n\n# Define the object's coordinates (example values)\nobject1 = SkyCoord(ra=18.0*u.deg, dec=22.1*u.deg, frame='icrs')\nobject2 = SkyCoord(ra=19.2*u.deg, dec=23.4*u.deg, frame='icrs')\ntl_track = angular_separation(object1, object2).to(u.arcsec).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the spatial variation of dust extinction across a star cluster field using a 2D polynomial fit with Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ncolormaps = ["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to create a WCS object from an equatorial (J2000) frame using a Hammer-Aitoff projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import FK5\nframe = FK5(equinox='J2000')\nwcs = celestial_frame_to_wcs(frame, 'Hammer-Aitoff')\nprint(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to generate a WCS object from an ecliptic (J2000) frame using a Mollweide projection?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Ecliptic\nframe = Ecliptic(equinox='J2000')\nwcs = celestial_frame_to_wcs(frame, 'Mollweide')\nprint(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a WCS object from a galactic (J2000) frame using a cylindrical equidistant projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Galactic\nframe = Galactic(equinox='J2000')\nwcs = celestial_frame_to_wcs(frame, 'CylindricalEquidistant')\nprint(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate a Cosine1D model with frequency 0.5 Hz and amplitude 4.0, and plot it with the same time points as before."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Cosine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time array (0 to 5 seconds)\nt = np.linspace(0, 5, 1000)\n\n# Create a cosine model with frequency 0.5 Hz and amplitude 4.0\nmodel = Cosine1D(amplitude=4.0, frequency=0.5, phase=0)\n\n# Calculate model values\nwave = model(t)\n\n# Create plot\nplt.figure(figsize=(10, 6))\nplt.plot(t, wave)\n\n# Customize plot\nplt.xlabel('Time (seconds)')\nplt.ylabel('Amplitude')\nplt.title('Cosine Model (f = 0.5 Hz)')\nplt.grid(True)\n\n# Display plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create coordinate object in heliocentric ecliptic system with longitude = 10.2 degrees, latitude = 5.5 degrees, distance = 3.1 AU, observed on 2023-09-15 while explicitly specifying both the observation time and J2000 equinox?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, HeliocentricTrueEcliptic\nfrom astropy.time import Time\nimport astropy.units as u\ntime_obs = Time('2023-09-15')\ncoords = SkyCoord(\n    lon=10.2*u.deg, \n    lat=5.5*u.deg, \n    distance=3.1*u.au,\n    frame=HeliocentricTrueEcliptic(\n        obstime=time_obs,\n        equinox='J2000'\n    )\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a unit to represent the luminosity L of a star and then use it to convert from Joules to L?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the L unit as equal to the luminosity of the Sun\nL = u.lsun\n\n# Convert from Joules to L units\nenergy_in_lsun = 1e32 * u.J\nprint(energy_in_lsun.to(L))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for the angular diameter of a celestial object in the FITS format?"
      },
      {
        "from": "assistant",
        "value": "u.arcmin"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.units library to convert a distance of 10 parsecs to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Convert 10 parsecs to kilometers\ndistance_in_km = 10 * u.parsec\nprint(distance_in_km.to(u.km))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `~astropy.units\u7269\u7406equivalencies.dimensionless_angles` function to enable angle-dimensionless conversions globally in my astropy units calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import equivalencies\n\n# Enable angle-dimensionless conversions globally\nequivalencies.enable('dimensionless_angles')\n\n# Example usage: creating a dimensionless angle quantity\ndimless_angle = 30 * u.deg\nassert np.isclose(dimless_angle. Ud().value, np.sin(dimless_angle. Ud()))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to perform a unit conversion with an explicit dimensionless angles equivalency in astropy units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define a unit conversion with explicit dimensionless angles equivalency\nequivalency = u.equivalencies.dimensionless_angles()\nuconverted_value = 45 * u.deg.to(u.rad, equivalency)\nassert np.isclose(converted_value, np.pi/2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I restore the default enabled equivalencies in the Astropy unit registry?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Restore default enabled equivalencies\nu.default_enabled_equivalencies()\nassert len(u.default_enabled_equivalencies()) == 0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to write a CSV file from a table with specific column formatting."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntable = Table()\ntable['col1'] = np.array([1, 2, 3])\ntable['col2'] = np.array([4, 5, 6])\nastropy.io.ascii.write(table, 'output.csv', format='csv')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the circular standard deviation of the following data using astropy.stats.circstd?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circstd\ndata = np.array([1.5, 2.7, 3.9, 5.1, 6.3])\ncircstd_data = circstd(data)\nprint(circstd_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to generate a 3x3 cutout around a star's position at (50, 50) from a 1024x1024 image using the 'reflect' mode?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nimport numpy as np\nfrom astropy.io import fits\n\nimage_data = np.random.rand(1024, 1024)\n\ncutout = Cutout2D(image_data, (50, 50), (3, 3), mode='reflect')\n\nprint(cutout.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a join on the 'name' and 'age' columns of two tables?"
      },
      {
        "from": "assistant",
        "value": "join(table1, table2, \"name\", \"age\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the result of an inner join on two tables with common columns?"
      },
      {
        "from": "assistant",
        "value": "Perform an inner join on two tables with common columns to get the rows that have matching values in both tables."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform a left join on two tables to include all rows from the left table?"
      },
      {
        "from": "assistant",
        "value": "perform a left join on two tables to include all rows from the left table."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply LinearStretch with a slope of 500 and zero intercept to better display the faint features of a star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\ngalaxy_data = np.random.uniform(1e-3, 1e-1, size=(100, 100))\nstretch = LinearStretch(slope=500, intercept=0)\nstretched_data = stretch(galaxy_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to visualize the Andromeda galaxy with high dynamic range data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SFTData\nfrom astropy.visualization import ZScaleInterval\nimport numpy as np\nprint(ZScaleInterval(n_samples=1000, contrast=0.25, max_reject=0.5, min_npixels=5, krej=2.5, max_iterations=5))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you calculate the confidence interval for a binomial proportion using the Wilson interval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you calculate the confidence interval for a binomial proportion using the Jeffreys interval?"
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you calculate the confidence interval for a binomial proportion using the flat prior?"
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I access the column 'distance' in astropy.table.Table if it exists?"
      },
      {
        "from": "assistant",
        "value": "table.columns.get('distance')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the index of the first column in astropy.table.Table?"
      },
      {
        "from": "assistant",
        "value": "table.columns.keys()[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I select all columns from astropy.table.Table except the one with name 'telescope'?"
      },
      {
        "from": "assistant",
        "value": "table.columns.difference(['telescope'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to apply PowerStretch(a=2.5) to solar flare intensity data ranging from 1e-8 to 1e-1 W/m\u00b2 then plot it using matplotlib."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nflare_data = np.random.uniform(1e-8, 1e-1, size=(100, 100))\nnorm = ImageNormalize(flare_data, stretch=PowerStretch(a=2.5), vmin=1e-8, vmax=1e-1)\nplt.figure(figsize=(8, 6))\nim = plt.imshow(flare_data, norm=norm, cmap='hot')\nplt.colorbar(im, label='Intensity (W/m\u00b2)')\nplt.title('Solar Flare Intensity with Power-law Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to display a galaxy image with a linear stretch where vmin=10 and vmax=20"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import simple_norm\nfrom astropy.io import fits\n\n# Open the galaxy image file\nhdul = fits.open('galaxy_image.fits')\n\n# Create normalization with simple_norm\nnorm = simple_norm(hdul[0].data, stretch='linear', vmin=10, vmax=20)\n\n# Now you can use this normalization in matplotlib\nimport matplotlib.pyplot as plt\nplt.imshow(hdul[0].data, norm=norm, cmap='gray')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.coordinates.PrecessedGeocentric to calculate the position of a star at a specific time and location?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord\nfrom astropy.time import Time\n\n# Define the star's position\nstar = coord.SkyCoord(ra=10*u.degree, dec=20*u.degree, distance=10*u.pc)\n\n# Define the observation time and location\nobstime = Time('2022-01-01 12:00:00', scale='utc')\nobsgeoloc = coord.EarthLocation.of_site('Mauna Kea')\n\n# Create a PrecessedGeocentric frame\nframe = coord.PrecessedGeocentric(star, obstime, obsgeoloc)\n\n# Print the star's position in the new frame\nprint(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a masked column for velocities in a galaxy whose radial velocity measurements are mostly reliable but some are contaminated by systematic effects that need to be identified and corrected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I plot the two-dimensional Airy disk model with radius 1.8 arcseconds, amplitude 1.0, and centered at (50,50)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nfrom astropy.visualization import impe"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I plot the two-dimensional Airy disk model with radius 2.2 arcseconds, amplitude 1.0, and centered at (100,100)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nfrom astropy.visualization import impe"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I plot the two-dimensional Airy disk model with radius 2.6 arcseconds, amplitude 1.0, and centered at (150,150)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nfrom astropy.visualization import impe"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 100 meters to feet?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the length in meters\nlength_meters = 100 * u.m\n\n# Convert to feet\nlength_feet = length_meters.to(u.ft)\n\nprint(f\"100 meters is equal to {length_feet:.2f} feet.\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from kilometers to miles?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the conversion factor\nconversion_factor = u.km / u.mile\n\nprint(f\"The conversion factor from kilometers to miles is {conversion_factor:.2f}.\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 500 pounds to newtons?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the mass in pounds\nmass_pounds = 500 * u.lb\n\n# Convert to newtons\nmass_newtons = mass_pounds.to(u.N)\n\nprint(f\"500 pounds is equal to {mass_newtons:.2f} newtons.\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Sun's barycentric position on January 1, 2020 at 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\n\n# Set the default ephemeris to more precise DE430/DE431\nsolar_system_ephemeris.set('de432s')\n\n# Define observation time\nobservation_time = Time('2020-01-01 12:00:00', scale='utc')\n\n# Get Sun's position relative to solar system barycenter\nsun_coordinates = get_body_barycentric('sun', observation_time)\n\n# Print barycentric coordinates\nprint(sun_coordinates)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a binary table HDU to store my exoplanet transit light curve data. How can I set this up with appropriate metadata in the header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndt = fits.ColDefs([fits.Column(name='time', format='D', array=np.linspace(0, 24, 1000)), fits.Column(name='flux', format='E', array=np.random.normal(1.0, 0.01, 1000))])\nthdu = fits.BinTableHDU(dt)\nthdu.header['OBSERVER'] = 'John Doe'\nthdu.header['DATE-OBS'] = Time.now().iso\nthdu.header['OBJECT'] = 'WASP-12'\nthdu.header['TELESCOP'] = 'Sample Telescope'\nthdu.header['INSTRUME'] = 'CCD Imager'\nthdu.header['FILTER'] = 'R'\nthdu.header['EXPTIME'] = 60.0\nthdu.header['TRANSIT'] = True\nthdu.header['BJD-REF'] = 2459000.0\nthdu.header['PERIOD'] = 3.4353\nthdu.header['T0'] = 2459000.123\nhdul = fits.HDUList([primary_hdu, thdu])\nhdul.writeto('transit_lightcurve.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian kernel with stddev=3.5, using the 'center' mode for simplicity, and then integrate the kernel over the range [-10, 10] with 100 bins."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve, BoxarksConvolve1DKernel # Create sample emission line data (example data)x = np.linspace(-100, 100, 1000)emission_line = 100 * np.exp(-(x-0)**2/(2*10**2)) + np.random.normal(0, 5, 1000) # Create Gaussian kernel with stddev=3.5kernel = Gaussian1DKernel(stddev=3.5, mode='center') # Integrate the kernel over the range [-10, 10] with 100 binsintegral = convolve(kernel, np.ones(100)/100, boundary='extend')print(integral)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian kernel with stddev=7.7, using the 'oversample' mode for better handling of the line profile edges, and then apply convolution with the kernel with 5 bins."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve # Create sample emission line data (example data)x = np.linspace(-50, 50, 500)emission_line = 100 * np.exp(-(x-0)**2/(2*10**2)) + np.random.normal(0, 5, 500) # Create Gaussian kernel with stddev=7.7kernel = Gaussian1DKernel(stddev=7.7, mode='oversample', factor=10) # Apply convolution with the kernel with 5 binsconvolved_emission_line = convolve(emission_line, kernel, boundary='extend')print(convolved_emission_line)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian kernel with stddev=2.2, using the 'integrate' mode for accuracy, and then apply convolution with the kernel with 10 bins."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve # Create sample emission line data (example data)x = np.linspace(-20, 20, 200)emission_line = 100 * np.exp(-(x-0)**2/(2*10**2)) + np.random.normal(0, 5, 200) # Create Gaussian kernel with stddev=2.2kernel = Gaussian1DKernel(stddev=2.2, mode='integrate') # Apply convolution with the kernel with 10 binsconvolved_emission_line = convolve(emission_line, kernel, boundary='extend')print(convolved_emission_line)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model for a stellar pulsation with a sinusoidal component of amplitude 2, frequency 0.8, and phase 0, over an x range of 0 to 10."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models\nimport numpy as np\n\n# Create individual sinusoidal component using Sine1D\nsine1 = models.Sine1D(amplitude=2, frequency=0.8, phase=0)\n\n# Create x values for evaluation\nx = np.linspace(0, 10, 1000)\n\n# Create the plot\ny = sine1(x)\nplt.figure(figsize=(10, 6))\nplt.plot(x, y, 'r--', alpha=0.3, label='Component 1 (A=2, f=0.8)')\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.title('Stellar Pulsation Model: Sinusoidal Component')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the electric dipole moment in the imperial module?"
      },
      {
        "from": "assistant",
        "value": "It is ohm-centimeters squared per volt."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the imperial unit of height, feet, to meters using the imperial module in astropy units?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\ndef from astropy import units as u\ndef from astropy.units import imperial\ndef velocity = 15 * imperial.nauticalmile / u.hour\ndef velocity_kms = velocity.to(u.km / u.s)\ndef print(f\"Original velocity: {velocity}\")\ndef print(f\"Converted velocity: {velocity_kms:.6f}\")\n # Convert feet to meters\ndef height_imp = 5 * imperial.ft\ndef height_met = height_imp.to(u.m)\ndef print(f\"Height in feet: {height_imp}\")\ndef print(f\"Height in meters: {height_met:.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the imperial unit of temperature in Celsius using the imperial module in astropy units?"
      },
      {
        "from": "assistant",
        "value": "It is 98.6 degrees Fahrenheit, which is equal to 37 degrees Celsius."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changing the value of a in the asinh stretch function?"
      },
      {
        "from": "assistant",
        "value": "The value of a affects the transition from linear to logarithmic behavior of the asinh stretch function. A larger value of a makes the stretch more linear."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the barycentric position and velocity of the Earth at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel\nfrom astropy.time import Time\n\nt0 = Time('2024-01-01 12:00:00')\nt = t0 + 1\npos, vel = get_body_barycentric_posvel('earth', t)\nprint(pos, vel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the barycentric position and velocity of Mars at regular intervals?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel\nfrom astropy.time import Time\nimport numpy as np\n\nt0 = Time('2024-01-01 12:00:00')\ntimes = t0 + np.linspace(0, 9, 10)\nfor t in times:\n    pos, vel = get_body_barycentric_posvel('mars', t)\n    print(pos, vel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the barycentric position and velocity of Jupiter at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel\nfrom astropy.time import Time\n\nt = Time('2024-01-01 12:00:00')\npos, vel = get_body_barycentric_posvel('jupiter', t)\nprint(pos, vel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a background model with a constant value that won't change during the fitting process. Can you show me an example?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nmodels.Const2D(amplitude=100.0, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 2D constant model with a value of 50 and fixed during fitting?"
      },
      {
        "from": "assistant",
        "value": "models.Const2D(amplitude=50.0, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of creating a background model with a constant value of 200 and not tied to any other parameter?"
      },
      {
        "from": "assistant",
        "value": "models.Const2D(amplitude=200.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to display galaxy images gamma corrected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize, vmin, vmax\nimport matplotlib.pyplot as plt\n\n# Define the image data\nimage_data = numpy.random.rand(256, 256)\n\n# Create normalization using gamma correction\nnorm = ImageNormalize(image_data, stretch=AsinhStretch())\n\n# Display the image\nplt.imshow(image_data, norm=norm, cmap='gray', origin='lower')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the meteorological profile of the site?"
      },
      {
        "from": "assistant",
        "value": "from scipy.stats import norm\nimport numpy as np\n\n# Define the mean and standard deviation of the temperature\nc = norm(loc=10, scale=2)\n\n# Generate a random temperature value using the normal distribution\ntemp = c.rvs()\n\ntemp\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "My experiment requires the measured pressure and humidity."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nc = norm(loc=10, scale=2)\np = norm(loc=50, scale=10)\nhumidity = norm(loc=60, scale=10)\nx = np.linspace(0, 10, 100)\ntemp = c.pdf(x)\npressure = p.pdf(x)\nhumi = humidity.pdf(x)\nprint(temp, pressure, humi)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the pressure and temperature at several locations using the 'Bernoulli' equation?"
      },
      {
        "from": "assistant",
        "value": "from scipy.stats import norm\nc = norm(loc=10, scale=2)\np = norm(loc=50, scale=10)\nhumidity = norm(loc=60, scale=10)\nx = np.linspace(0, 10, 100)\ntp = c.pdf(x)\npessure = p.pdf(x)\nhumis = humidity.pdf(x)\nprint(tp, purse, hums)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D image data of shape (100, 100) representing a light curve. How can I create a BinaryTableHDU with this 2D data and add a column 'TIME' with values ranging from 0 to 100?"
      },
      {
        "from": "assistant",
        "value": "hdu = fits.BinaryTableHDU(data=np.column_stack((np.arange(100), data)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D data cube of shape (50, 50, 10) representing a spectral image. How can I create a BinaryTableHDU with this 3D data and add two columns 'X' and 'Y' with values ranging from 0 to 49?"
      },
      {
        "from": "assistant",
        "value": "hdu = fits.BinaryTableHDU(data=np.column_stack((np.tile(np.arange(50), 50), np.repeat(np.arange(50), 50), data)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D data array of shape (100) representing a time series. How can I create a BinTableHDU with this 1D data and add a column 'TIME' with values ranging from 0 to 100?"
      },
      {
        "from": "assistant",
        "value": "hdu = fits.BinTableHDU(data={'TIME': np.arange(100), 'DATA': data})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian1DKernel with stddev=3 and kernel size of 31 pixels, using 'center' mode?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.convolution import Gaussian1DKernel\n\ngauss_kernel = Gaussian1DKernel(stddev=3, x_size=31)\n# The kernel can now be used with astropy.convolution.convolve() function\n# Example usage (commented out):\n# smoothed_data = convolve(signal_data, gauss_kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian1DKernel with stddev=2 and kernel size of 41 pixels, using 'oversample' mode?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.convolution import Gaussian1DKernel\n\ngauss_kernel = Gaussian1DKernel(stddev=2, x_size=41, mode='oversample')\n# The kernel can now be used with astropy.convolution.convolve() function\n# Example usage (commented out):\n# smoothed_data = convolve(signal_data, gauss_kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian1DKernel with stddev=4 and kernel size of 51 pixels, using 'integrate' mode?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.convolution import Gaussian1DKernel\n\ngauss_kernel = Gaussian1DKernel(stddev=4, x_size=51, mode='integrate')\n# The kernel can now be used with astropy.convolution.convolve() function\n# Example usage (commented out):\n# smoothed_data = convolve(signal_data, gauss_kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using Astropy's MinMaxInterval, if I have a 1D array of flux values with a minimum and maximum value of 1.2e-15 and 4.5e-14 respectively, how can I normalize these values between 0 and 1?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import MinMaxInterval\n\n# Example flux data (replace this with your actual data)\nflux_data = np.random.uniform(1.2e-15, 4.5e-14, size=100)\n\n# Create MinMaxInterval normalizer\nnormalizer = MinMaxInterval()\n\n# Normalize the data to [0, 1] range\nnormalized_flux = normalizer(flux_data)\n\n# At this point, normalized_flux contains values between 0 and 1\n# Verify the normalization\nprint(f\"Min value: {normalized_flux.min()}\")\nprint(f\"Max value: {normalized_flux.max()}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 2D data set with a large range of values, can I use Astropy's MinMaxInterval to normalize it to make it more visually appealing? If so, how can I do that?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import MinMaxInterval\n\n# Example flux data (replace this with your actual data)\nflux_data = np.random.uniform(-1e-14, 1e-13, size=(100, 100))\n\n# Create MinMaxInterval normalizer\nnormalizer = MinMaxInterval()\n\n# Normalize the data to [0, 1] range\nnormalized_flux = normalizer(flux_data)\n\n# At this point, normalized_flux contains values between 0 and 1\n# Verify the normalization\nprint(f\"Min value: {normalized_flux.min()}\")\nprint(f\"Max value: {normalized_flux.max()}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to normalize a 3D data set to a common scale using Astropy's MinMaxInterval?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import MinMaxInterval\n\n# Example flux data (replace this with your actual data)\nflux_data = np.random.uniform(-1e-14, 1e-13, size=(100, 100, 100))\n\n# Create MinMaxInterval normalizer\nnormalizer = MinMaxInterval()\n\n# Normalize the data to [0, 1] range\nnormalized_flux = normalizer(flux_data)\n\n# At this point, normalized_flux contains values between 0 and 1\n# Verify the normalization\nprint(f\"Min value: {normalized_flux.min()}\")\nprint(f\"Max value: {normalized_flux.max()}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to perform sigma-clipping on a dataset of planetary positions with different clipping limits for upper and lower bounds."
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data=planetary_positions, sigma_lower=2, sigma_upper=4, maxiters=5, cenfunc='mean', masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply AsinhStretch with a=0.04 and then scale the result to the range [0,1] for display?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch\nfrom astropy.visualization.stretch import BaseStretch\nimport numpy as np\ncustom_a = 0.04\nquasar_array = np.random.random((100, 100))\nstretch_func = AsinhStretch(a=custom_a)\nnorm_data = quasar_array / quasar_array.max()\nstretched_data = stretch_func(norm_data)\ndisplay_data = (stretched_data - stretched_data.min()) / (stretched_data.max() - stretched_data.min())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the 'de440' ephemeris to calculate the position of Mars on a specific date and display its ra, dec, and distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris, get_body, ICRS\nimport astropy.units as u\n\ntsolar_system_ephemeris.set('de440')\nt = Time('2024-03-15 00:00')\njupiter = get_body('mars', t, frame=ICRS)\nprint(f'Mars Position (ICRS) on {t.iso}:')\nprint(f'Right Ascension: {jupiter.ra.to_string(u.hour, sep=':', pad=True, precision=3)}')\nprint(f'Decination: {jupiter.dec.to_string(u.degree, sep=':', pad=True, precision=2)}')\nprint(f'Distance: {jupiter.distance:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the method to use 'jpl' ephemeris to calculate the position of Venus on a specific date?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris, get_body, ICRS\n\ntsolar_system_ephemeris.set('builtin')\nt = Time('2024-03-15 00:00')\njupiter = get_body('venus', t, frame=ICRS)\nprint(f'Venus Position (ICRS) on {t.iso}:')\nprint(f'Right Ascension: {jupiter.ra.to_string(u.hour, sep=':', pad=True, precision=3)}')\nprint(f'Decination: {jupiter.dec.to_string(u.degree, sep=':', pad=True, precision=2)}')\nprint(f'Distance: {jupiter.distance:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use 'de430s' ephemeris to calculate the position of Saturn on a specific date and display its ra, dec, and distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris, get_body, ICRS\nimport astropy.units as u\n\ntsolar_system_ephemeris.set('de430s')\nt = Time('2024-03-15 00:00')\njupiter = get_body('saturn', t, frame=ICRS)\nprint(f'Saturn Position (ICRS) on {t.iso}:')\nprint(f'Right Ascension: {jupiter.ra.to_string(u.hour, sep=':', pad=True, precision=3)}')\nprint(f'Decination: {jupiter.dec.to_string(u.degree, sep=':', pad=True, precision=2)}')\nprint(f'Distance: {jupiter.distance:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Gaussian1DKernel with a standard deviation of 3.0?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the 'center' and 'linear_interp' modes in the Gaussian1DKernel?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(mode='center') and Gaussian1DKernel(mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Gaussian1DKernel with a custom size of 15?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=2.5, x_size=15)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an Airy disk pattern using the Astropy library?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nfrom astropy.modeling.models import AiryDisk2D\nmodel = AiryDisk2D(amplitude=1, x_0=0, y_0=0, radius=1)\nplt.imshow(model(x = [0, 1, 2])[:, None], cmap='gray', extent=(0, 2, 0, 0))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between the radius of the Airy disk and the wavelength of light and the diameter of the telescope?"
      },
      {
        "from": "assistant",
        "value": "The radius of the first zero of the Airy disk is approximately 1.22 * lambda / D, where lambda is the wavelength of the light and D is the diameter of the telescope."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I customize the Airy disk model to have a different amplitude and position?"
      },
      {
        "from": "assistant",
        "value": "You can customize the Airy disk model by changing the values of the amplitude and position parameters. For example, model = AiryDisk2D(amplitude=2, x_0=1, y_0=1, radius=1) will create an Airy disk with a different amplitude and position."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to delete a column from a FITS HDU?"
      },
      {
        "from": "assistant",
        "value": "delete_column(fits_file, column_name)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new column to a FITS HDU?"
      },
      {
        "from": "assistant",
        "value": "add_column(fits_file, column_data, column_name)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to change the units of a column in a FITS HDU?"
      },
      {
        "from": "assistant",
        "value": "change_units(fits_file, column_name, new_units)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D image with values ranging from 0 to 65535. How can I apply a square root stretch to enhance the visibility of faint features while preserving the bright regions using SqrtStretch? I want to normalize the result between 0 and 1."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize\nimport numpy as np\n\n# Create sample data (simulating an astronomical image)\n# Generate random data with shape (100, 100) with values between 0 and 65535\nm31_data = np.random.randint(0, 65535, size=(100, 100))\n\n# Create a normalization object that combines min-max scaling with sqrt stretch\nnorm = ImageNormalize(\n    m31_data,\n    stretch=SqrtStretch(),\n    vmin=0,\n    vmax=65535\n)\n\n# Apply the normalization to get values between 0-1 with sqrt stretch\nstretched_data = norm(m31_data)\n\n# The result 'stretched_data' will be a 2D numpy array with values \n# normalized between 0-1 with enhanced faint features\n\n# Optional: You can verify the output\nprint(\"Input data shape:\", m31_data.shape)\nprint(\"Input data range:\", m31_data.min(), \"to\", m31_data.max())\nprint(\"Output data shape:\", stretched_data.shape)\nprint(\"Output data range:\", stretched_data.min(), \"to\", stretched_data.max())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use SqrtStretch to normalize a 1D signal with values ranging from 0 to 100?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, MinMaxNormalization\ncorrected_signal = SqrtStretch()(MinMaxNormalization(vmin=0, vmax=100)(signal))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D cube with values between 0 and 60000. Can I use SqrtStretch to visualize the data without losing the intensity information of the brightest regions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch\ncube_normalized = SqrtStretch()(cube)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Moffat profile to galaxy data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\n# Sample galaxy data (x and y coordinates and flux)\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 10, 100)\nx, y = np.meshgrid(x, y)\nflux = np.exp(-((x-5)**2 + (y-5)**2)/50)*2.5 + np.random.normal(0, 0.1, x.shape)\n\n# Create initial model: Moffat profile\nmoffat = models.Moffat1D(amplitude=1, alpha=1, beta=1, x_0=5, y_0=5, gamma=1)\n\n# Initialize fitter\nfitter = fitting.SimplexLSQFitter()\n\n# Fit the data\nfitted_model = fitter(moffat, flux, x, y)\n# Print the fitted parameters\nprint(fitted_model.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack two tables horizontally (along columns)?"
      },
      {
        "from": "assistant",
        "value": "Use the `hstack` function from `astropy.table` module."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default join type for `vstack` function?"
      },
      {
        "from": "assistant",
        "value": "The default join type is 'outer'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle metadata conflicts when stacking tables?"
      },
      {
        "from": "assistant",
        "value": "You can specify how to handle metadata conflicts by passing the `metadata_conflicts` parameter to the `vstack` function."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert between frequency (in Hz) and energy (in J)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import equivalencies\n\n# Define sample frequency value (in Hz)\nfrequency = 1e8 * u.Hz\n\n# Convert frequency to energy using spectral equivalency\n# energy() enables conversion between energy units\nenergy = frequency.to(u.J, equivalencies=u.spectral())\n\n# Print results\nprint(f'Frequency: {frequency}')\nprint(f'Energy: {energy}')\n\n# Example with an array of frequencies\nfrequencies = np.array([1e7, 1e8, 1e9]) * u.Hz\ncnergies = frequencies.to(u.J, equivalencies=u.spectral())\n\n# Format the array output properly\nprint('\\nMultiple conversions:')\nprint(np.array2string(cnergies.value, precision=2), cnergies.unit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a FITS file and a FITS HDU?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nprint(f\"A FITS file is a file that contains one or more FITS HDUs. A FITS HDU represents a single header and data unit within a FITS file.\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date string to a Time object in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the magnitudes of a set of stars in a globular cluster using astropy units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import Quantity\nfrom astropy import units as u\n\n# Define the flux and distances of the stars\nflux = Quantity([1.0, 2.0, 3.0], u.mJy)\ndistance = Quantity([1.0, 2.0, 3.0], u.kpc)\n\n# Calculate the magnitude using the formula: magnitude = -2.5 * log10(flux) + 5 * log10(distance) + 18.1\nmagnitude = -2.5 * flux.to(u.Jy).log10() + 5 * distance.to(u.pc).log10() + 18.1\n\n# Print the calculated magnitudes\nprint(magnitude)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my planetary orbit fitting, I want to calculate the mean anomaly of a planet at a given time. What's the code to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.constants import au\n# Sample time\ntime = Time('2022-01-01T00:00:00', format='isot', scale='utc')\n# Planetary parameters\na = 1.5 * au\n# Calculate mean anomaly\nmean_anomaly = 2 * np.arctan2(np.sqrt((1 - (time.jd - 2459438.5) / (36525 * a)).abs()), np.sqrt((1 + (time.jd - 2459438.5) / (36525 * a)).abs()))\nprint(mean_anomaly)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to create a 2D Gaussian profile with variable width and power index parameters?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Moffat2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to model the intensity profile of a ring source with a variable inner and outer radius?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to create a 2D Box profile with variable width and height parameters?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Box2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the midpoint of two points in 3D spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "[SkyCoord( longitude=120.0, latitude=45.0, distance=10.0), SkyCoord(longitude=240.0,  latitude=60.0, distance=20.0)]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the spherical coordinates of the Earth and the Sun?"
      },
      {
        "from": "assistant",
        "value": "[SkyCoord(longitude= 23.4392911,  latitude= 28.9269068,  distance=1.496e11)]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the spherical coordinates of a point to cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "[SkyCoord(longitude= 90.0,  latitude= 180.0,  distance= 1.0)]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of pixel coordinates into a celestial coordinate using WCS information?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.pixel_to_skycoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the function to convert a set of pixel coordinates into a SkyCoord using WCS transformation?"
      },
      {
        "from": "assistant",
        "value": "pixel_to_skycoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the WCS transformation to convert a set of pixel coordinates into celestial coordinates?"
      },
      {
        "from": "assistant",
        "value": "pixel_to_skycoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the jackknife resampling technique to estimate the variance of a sample of stellar flux measurements?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\n# Sample stellar flux measurements\nflux_measurements = np.array([3.2, 3.1, 3.3, 3.0, 3.4, 3.2, 3.1]) * u.W/u.m**2\n# Perform jackknife resampling\nresamples = jackknife_resampling(flux_measurements.value)\n# Calculate jackknife statistics\njk_var = jackknife_stats(flux_measurements.value, np.var)\n# Print result\nprint(f'Variance: {jk_var[0]:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to shift a coordinate system by a certain factor. Can you show me how to use the Scale model from Astropy to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Scale\n\n# Define the scale factor\nfactor = 2.0\n\n# Create a scale model\nscale_model = Scale(factor=factor)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of coordinates on the detector and in the sky. Can you create a WCS object to map between them?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(detector_x, detector_y, sky_coord, 'center', 'TAN', 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a WCS solution to a set of detector and sky coordinates. Can you use a different projection, say 'CEL'?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(detector_x, detector_y, sky_coord, 'center', 'CEL', 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I've got a WCS object and I want to refine the fit using a different set of detector and sky coordinates. Can you do that for me?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(detector_x, detector_y, sky_coord, 'center', wcs, 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a power-law stretch to my image data, what 'power_index' value should I use for a softened stretch?"
      },
      {
        "from": "assistant",
        "value": "0.1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.visualization.PowerStretch for a hardened stretch of my image data?"
      },
      {
        "from": "assistant",
        "value": "1.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of setting 'power_index' to a value less than 1 in astropy.visualization.PowerStretch?"
      },
      {
        "from": "assistant",
        "value": "softened"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine a Gaussian and a constant model in astropy?"
      },
      {
        "from": "assistant",
        "value": "models.Gaussian1D() + models.Constant1D()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a compound model that includes a sine and a cosine function?"
      },
      {
        "from": "assistant",
        "value": "models.Sine1D() + models.Cosine1D()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model that includes a polynomial and an exponential function. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "models.Polynomial1D(degree=2) + models.Exponential1D(amplitude=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement a simple thresholding technique using astropy to segment out objects from the background in an astronomical image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats, median_absolute_deviation\nfrom astropy.visualization import simple_norm\n\n# Assume 'image' is the astronomical image array\n\nMedian, median_dev Median Absolute Deviation (MAD) = sigma_clipped_stats(image, sigma=3)\n\nThreshold = Median + 3* MAD\n\n# Apply the threshold to the image\n\nsegmented_image = image > Threshold\n\nreturn segmented_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relation between Sersic index and surface brightness profile for elliptical galaxies?"
      },
      {
        "from": "assistant",
        "value": "The Sersic index is related to the surface brightness profile of elliptical galaxies. A higher Sersic index indicates a more concentrated brightness profile, while a lower Sersic index indicates a more diffuse profile."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the luminosity distance to a galaxy at redshift z=0.5 using the WMAP5 cosmology. How can I do this using astropy.coordinates.Distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nfrom astropy.cosmology import WMAP5\ndistance = Distance(z=0.5, cosmology=WMAP5)\nprint(distance.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.coordinates module to represent the position of the star Sirius?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\n\nsc = SkyCoord(ra=6.8, dec=-16.7, unit='degree')\nprint(sc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.io.fits.getval function to get the DATE-OBS keyword from the primary HDU of the 'jwst_nirspec.fits' file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('jwst_nirspec.fits', 'DATE-OBS')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the BEST-QUALITY keyword value for the 'jwst_fgs.fits' file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('jwst_fgs.fits', 'BEST-QUALITY')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the TELESCOP keyword value for the 'jwst_nircam.fits[SCI]' file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('jwst_nircam.fits', 'TELESCOP', ext='SCI')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to extract data from the SCI extension of a FITS file named 'data.fits'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getdata('data.fits', extname='SCI')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to retrieve data from the 3rd extension of a FITS file named 'image.fits'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getdata('image.fits', 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the data and header from the extension with EXTNAME='SPECTRUM' and EXTVER=1 of a FITS file named 'spectrum.fits'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getdata('spectrum.fits', ('SPECTRUM', 1), header=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to understand how to use the fit_wcs_from_points function to align multiple exposures of a galaxy cluster."
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(xy, world_coords, proj_point='center', projection=None, sip_degree=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I integrate the fit_wcs_from_points function into my existing code to align exposures and correct for distortion?"
      },
      {
        "from": "assistant",
        "value": "you need to implement detect_stars and compute_wcs_solution functions"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the significance of the sip_degree parameter in the fit_wcs_from_points function and how does it relate to distortion corrections?"
      },
      {
        "from": "assistant",
        "value": "sip_degree corresponds to the order of the geometric distortion correction."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between Besselian epoch and Modified Julian Date?"
      },
      {
        "from": "assistant",
        "value": "Besselian epoch is a time standard based on the position of the vernal equinox, while Modified Julian Date is a time standard based on the number of days since January 1, 1858. They are both used to express dates and times, but they have different reference points and are used in different contexts."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a Besselian epoch to another time standard?"
      },
      {
        "from": "assistant",
        "value": "You can use the `astropy.time.Time` class to convert a Besselian epoch to another time standard. For example, you can use the `mjd` attribute to get the Modified Julian Date."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between Besselian epoch and Julian Date?"
      },
      {
        "from": "assistant",
        "value": "Besselian epoch is related to Julian Date by a mathematical formula. You can use the `astropy.time` module to calculate the Julian Date from a Besselian epoch."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables with different columns: one with columns 'a' and 'b' (100 entries), and another with columns 'c' and 'd' (100 entries). Show how to stack them horizontally."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\nimport numpy as np\n\n# Create sample data for demonstration\n# First table with columns 'a' and 'b'\nt1 = Table({'a': np.arange(100), 'b': np.random.uniform(0, 1, 100)}, names=('a', 'b'))\n\n# Second table with columns 'c' and 'd'\nt2 = Table({'c': np.arange(100), 'd': np.random.uniform(0, 1, 100)}, names=('c', 'd'))\n\n# Stack tables horizontally\nstacked_table = hstack([t1, t2])\n\n# Print basic info about the stacked table\nprint(stacked_table.info())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position angle between two points on the celestial sphere with longitude and latitude of 10 degrees and 20 degrees, and 30 degrees and 40 degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ndef calculate_position_angle(lon1, lat1, lon2, lat2):\n    \n    # Create SkyCoord objects for both points\n    point1 = SkyCoord(ra=lon1, dec=lat1, unit=u.deg)\n    point2 = SkyCoord(ra=lon2, dec=lat2, unit=u.deg)\n\n    # Calculate position angle\n    pos_angle = point1.position_angle(point2)\n\n    # Convert to degrees from North (0-360)\n    pos_angle_deg = pos_angle.to(u.deg)\n\n    return pos_angle_deg\n\n# Example usage\npoint1 = (10.0, 20.0)    # ra, dec in degrees\npoint2 = (30.0, 40.0)  # ra, dec in degrees\n\nangle = calculate_position_angle(point1[0], point1[1], point2[0], point2[1])\n\ndef calculate_position_angle(lon1, lat1, lon2, lat2):\n    \n    # Create SkyCoord objects for both points\n    point1 = SkyCoord(ra=lon1, dec=lat1, unit=u.deg)\n    point2 = SkyCoord(ra=lon2, dec=lat2, unit=u.deg)\n\n    # Calculate position angle\n    pos_angle = point1.position_angle(point2)\n\n    # Convert to degrees from North (0-360)\n    pos_angle_deg = pos_angle.to(u.deg)\n\n    return pos_angle_deg\n\n# Example usage\npoint1 = (10.0, 20.0)    # ra, dec in degrees\npoint2 = (30.0, 40.0)  # ra, dec in degrees\n\nangle = calculate_position_angle(point1[0], point1[1], point2[0], point2[1])\nprint(f\"Position angle between points: {angle:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 2D Sersic profile with an amplitude of 1, effective radius of 5, Sersic index of 1.5, and ellipticity of 0.7."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nfrom astropy.modeling.models import Sersic2D\nx, y = np.meshgrid(np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\nmodel = Sersic2D(amplitude=1, r_eff=5, n=1.5, ellip=0.7, theta=0)\nprofile = model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a 2D Sersic profile with an amplitude of 2, effective radius of 10, Sersic index of 4, and no ellipticity."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nfrom astropy.modeling.models import Sersic2D\nx, y = np.meshgrid(np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\nmodel = Sersic2D(amplitude=2, r_eff=10, n=4, ellip=0, theta=0)\nprofile = model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 2D Sersic profile with an amplitude of 0.5, effective radius of 2, Sersic index of 0.2, and ellipticity of 0.9."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nfrom astropy.modeling.models import Sersic2D\nx, y = np.meshgrid(np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\nmodel = Sersic2D(amplitude=0.5, r_eff=2, n=0.2, ellip=0.9, theta=0)\nprofile = model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the SphericalRepresentation to represent the position of a star with a longitude of 90 degrees, latitude of 45 degrees, and distance of 1000 parsecs. How do I do this using astropy.coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation\nfrom astropy import units as u\n\n# Define the coordinates for the star\nlon = 90 * u.deg  # longitude\nlat = 45 * u.deg  # latitude\ndist = 1000 * u.pc  # distance\n\n# Create spherical representation\nstar_spherical = SphericalRepresentation(lon=lon, lat=lat, distance=dist)\n\n# Print the spherical coordinates\nprint(star_spherical)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a redshift correction to my spectral data using Astropy's modeling capabilities to account for the cosmological expansion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\ncosmological_redshift_correction = models.RedshiftScaleFactor(z=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of redshift on the spectrum of a galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\ngalaxy_spectrum_redshift_effect = models.RedshiftScaleFactor(z=1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a redshift correction to my observed stellar spectrum to get the rest frame spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\thestellar_spectrum_redshift_correction = models.RedshiftScaleFactor(z=0.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy's :py:class:`astropy.visualization.PercentDifferenceNorm` function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentDifferenceNorm\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.uniform(0, 1, size=100)\n\nnorm = PercentDifferenceNorm()\nplt.figure()\nim = plt.plot(x, y, norm=norm)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use astropy's :py:class:`astropy.visualization.PowerStretch` function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.uniform(0, 1, size=100)\n\nnorm = PowerStretch(p=2)\nplt.figure()\nim = plt.plot(x, y, norm=norm)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy's :py:class:`astropy.visualization.LinearStretch` function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.uniform(0, 1, size=100)\n\nnorm = LinearStretch()\nplt.figure()\nim = plt.plot(x, y, norm=norm)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar spectra and need to model a blackbody curve for a star with a surface temperature of 3500K. How can I create a plot showing its spectral energy distribution across wavelengths from 500 to 5000 Angstroms using Astropy's BlackBody model?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.modeling.models import BlackBody\nimport matplotlib.pyplot as plt\n\n# Define temperature and wavelength range\nmagnitude = 3800 * u.K  # Temperature of star \nwavelengths = np.linspace(500, 5000, 1000) * u.AA  # Wavelength range in Angstroms\n\n# Create blackbody model and calculate flux\nbb = BlackBody(temperature=magnitude)\nflux = bb(wavelengths)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(wavelengths, flux)\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Spectral Flux Density (erg/s/cm\u00b2/\u00c5/sr)')\nplt.title(f'Blackbody Spectrum for T = {magnitude.value}K')\n\n# Use scientific notation for y-axis\nplt.yscale('log')\n\n# Add grid for better readability\nplt.grid(True, alpha=0.3)\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use Astropy's BlackBody model to simulate the spectrum of a blackbody with a temperature of 8000K. How can I get the peak wavelength of this blackbody?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.modeling.models import BlackBody\n\n# Define temperature\nmagnitude = 8000 * u.K  # Temperature of blackbody\n\n# Create blackbody model\nbb = BlackBody(temperature=magnitude)\n\n# Get peak wavelength\nnu_max = bb.nu_max\ndebugPrint(nu_max.to(u.AA, equivalencies=u.spectral() ))\nprint('The peak wavelength of this blackbody is ' + str(nu_max.to(u.AA, equivalencies=u.spectral()).value) + ' Angstroms')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to analyze the radiation emitted by a blackbody at a temperature of 6000K. How can I create an array of wavelengths from 1000 to 10000 Angstroms and use Astropy's BlackBody model to calculate the spectral flux density at these wavelengths?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling.models import BlackBody\n\n# Define temperature and wavelength range\nmagnitude = 6000 * u.K  # Temperature of blackbody\nwavelengths = np.linspace(1000, 10000, 1000) * u.AA  # Wavelength range in Angstroms\n\n# Create blackbody model and calculate flux\nbb = BlackBody(temperature=magnitude)\nflux = bb(wavelengths)\n\nprint(flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference between two dates in ISO format using astropy.time.Time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ntimes1 = Time('2022-01-01T00:00:00')\ntimes2 = Time('2022-12-31T23:59:59')\n\ntimes_diff = abs(times2 - times1)\n\ntimes_diff = times_diff.to('day')\n\nprint(times_diff.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing galaxy distributions and need to create a model that scales the observed brightnesses by (1+z). Write code using RedshiftScaleFactor to transform brightnesses at z=1.5."
      },
      {
        "from": "assistant",
        "value": "# Set the redshift value\nz = 1.5\n\n# Create example observed brightnesses (in magnitude)\nobs_brightnesses = [10, 12, 14, 16]  # Example brightness array\n\n# Transform brightnesses from observed to rest frame\n# Using the relation: brightness_rest = brightness_observed / (1+z)\nbrightness_rest = [brightness / (1 + z) for brightness in obs_brightnesses]\n\n# Print results\nprint(f\"Redshift z = {z}\")\nprint(\"Observed brightnesses (mag):\", obs_brightnesses)\nprint(\"Rest-frame brightnesses (mag):\", [round(b, 2) for b in brightness_rest])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to use RedshiftScaleFactor to scale wavelengths of 1000 angstroms, 2000 angstroms and 3000 angstroms from observed to rest frame at redshift z=2.1."
      },
      {
        "from": "assistant",
        "value": "# Set the redshift value\nz = 2.1\n\n# Create example observed wavelengths (in Angstroms)\nobs_wavelengths = [1000, 2000, 3000]  # Example wavelength array\n\n# Transform wavelengths from observed to rest frame\n# Using the relation: \u03bb_rest = \u03bb_observed / (1+z)\nrest_wavelengths = [wave / (1 + z) for wave in obs_wavelengths]\n\n# Print results\nprint(f\"Redshift z = {z}\")\nprint(\"Observed wavelengths (\u00c5):\", obs_wavelengths)\nprint(\"Rest-frame wavelengths (\u00c5):\", [round(w, 2) for w in rest_wavelengths])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a Python function that takes in a list of observed wavelengths and redshift z, and returns the list of rest-frame wavelengths using the RedshiftScaleFactor model."
      },
      {
        "from": "assistant",
        "value": "# Define a function to calculate rest-frame wavelengths\ndef rest_frame_wavelengths(observed_wavelengths, z):\n    return [wave / (1 + z) for wave in observed_wavelengths]\n\n# Example usage\nobserved_wavelengths = [4000, 5000, 6000, 7000]  # Example wavelength array\nz = 2.3\nrest_wavelengths = rest_frame_wavelengths(observed_wavelengths, z)\n\n# Print results\nprint(\"Redshift z = \", z)\nprint(\"Observed wavelengths (\u00c5):\", observed_wavelengths)\nprint(\"Rest-frame wavelengths (\u00c5):\", [round(w, 2) for w in rest_wavelengths])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to enhance the color of my nebula image by applying a plt.imshow with 'inferno' color map and display it."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, AsymmetricPercentileInterval, SqrtStretch\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data (replace this with your actual data)\n# Here creating a 100x100 array with random values\n data = np.random.normal(500, 100, size=(100, 100))\n# Ensure data is non-negative for sqrt stretch\n data = np.abs(data)\n\n# Create ImageNormalize object with SqrtStretch\n# Using min-max normalization before stretch for better contrast\n norm = ImageNormalize(data, \n                     vmin=0.1, \n                     vmax=1000,\n                     stretch=SqrtStretch())\n# Display the transformed image\n plt.figure(figsize=(8, 8))\n plt.imshow(data, norm=norm, cmap='inferno', origin='lower')\n plt.colorbar(label='Intensity (sqrt scaled')\n plt.title('Nebula - Sqrt Stretch')\n plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enhance  the detail in the dark regions of my galaxy image using AsymmetricPercentileInterval and 'cividis' color map?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, AsymmetricPercentileInterval, SqrtStretch\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data (replace this with your actual data)\n# Here creating a 100x100 array with random values\ndata = np.random.normal(500, 100, size=(100, 100))\n# Ensure data is non-negative for sqrt stretch\n\ndata = np.abs(data)\n\n# Create ImageNormalize object with SqrtStretch\n# Using min-max normalization before stretch for better contrast\nnorm = ImageNormalize(data,\n                     vmin=0.1,\n                     vmax=1000,\n                     interval=AsymmetricPercentileInterval(0.1, 99.9),\n                     stretch=SqrtStretch())\n# Display the transformed image\nplt.figure(figsize=(8, 8))\nplt.imshow(data, norm=norm, cmap='cividis', origin='lower')\nplt.colorbar(label='Intensity (sqrt scaled')\nplt.title('Galaxy - Sqrt Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a SqrtStretch with a linear interval to a lunar image and display it with proper scaling."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import  SqrtStretch, ImageNormalize, MinMaxInterval\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create sample data (replace this with your actual data)\n# Here creating a 100x100 array with random values\ndata = np.random.normal(500, 100, size=(100, 100))\n\n# Create ImageNormalize object with SqrtStretch\n# Using min-max normalization before stretch for better contrast\nnorm = ImageNormalize(data,\n                     vmin=0.1,\n                     vmax=1000,\n                     interval=MinMaxInterval(),\n                     stretch=SqrtStretch())\n\n# Display the transformed image\nplt.figure(figsize=(8, 8))\nplt.imshow(data, norm=norm, cmap='gray', origin='lower')\nplt.colorbar(label='Intensity (sqrt scaled')\nplt.title('Lunar - Sqrt Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a noisy astronomical image of a galaxy. How can I use PercentileInterval with a 95 percentile value to normalize the image data for better visualization of the galaxy's structure?"
      },
      {
        "from": "assistant",
        "value": "This is an example response for 95 percentile value."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an image of a nebula with some extreme pixel values. How can I use PercentileInterval with a 80 percentile value to normalize the image data for better visualization of the nebula's structure?"
      },
      {
        "from": "assistant",
        "value": "This is an example response for 80 percentile value."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an image of a star cluster. How can I use PercentileInterval with a 70 percentile value to normalize the image data for better visualization of the star cluster's structure?"
      },
      {
        "from": "assistant",
        "value": "This is an example response for 70 percentile value."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on identifying stars in my image. How do I convert the upper left pixel (0, 0) to RA/Dec coordinates using pixel_to_skycoord, and then format the output in decimal degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utilsmode = 'wcs'origin = 1wcs = WCS fits_file_path='image.fits'xp, yp = 0, 0skycoord = WCS(pixel_to_skycoord(xp, yp, wcs=wcs, origin=origin, mode=mode)).skycoordformat = 'icrs'ra, dec = skycoord.lat.deg, skycoord.lon.degreturn(ra, dec"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I shift a coordinate by a certain offset using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nmodel = Shift(offset=1.)\nnew_coordinate = model(other_coordinate)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I scale a coordinate using Astropy's modeling functionality?"
      },
      {
        "from": "assistant",
        "value": "models.Scale(factor=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Astropy's modeling functionality to scale a coordinate by a certain percentage?"
      },
      {
        "from": "assistant",
        "value": "models.Scale(factor=1.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I reverse the scaling of a coordinate that has been scaled by a factor of 3.0 using Astropy's modeling functionality?"
      },
      {
        "from": "assistant",
        "value": "models.Scale(factor=1/3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of spectral flux densities with values between 1.2e-3 and 5.6e-3 Jy. How can I normalize the values using MinMaxInterval to create a histogram?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndfrom astropy.visualization import MinMaxInterval\n\n# Assuming your data is already loaded\n# Create sample data for demonstration\ndata = np.random.uniform(1.2e-3, 5.6e-3, size=(1000))  # (n_points)\n\n# Initialize the normalizer\nnormalizer = MinMaxInterval()\n\n# Create normalized data\n# Normalize the data\nnormalized_data = normalizer(data)\n\n# normalized_data now contains values between 0 and 1\n# Each value is independently normalized based on the data's min/max values"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize the brightness of my FITS file to make the faint outer regions more visible?"
      },
      {
        "from": "assistant",
        "value": "image_norm = ImageNormalize(data,stretch=AsinhStretch())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the importance of setting the vmin and vmax values in ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "image_norm = ImageNormalize(data, vmin=np.percentile(data, 1), vmax=np.percentile(data, 99))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I handle cases where my FITS file has invalid values?"
      },
      {
        "from": "assistant",
        "value": "image_norm = ImageNormalize(np.ma.masked_invalid(data), stretch=AsinhStretch())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the Astropy API to calculate the J2000 equatorial coordinates for a given distance and position angle from the Sun?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SolarSystemEquatorial, Distance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to convert a time in seconds since J2000 to a Time object in Astropy. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the azimuth and elevation of a star for a given location and time using the Astropy API?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, SkyCoord, altaz"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray observations of a blazar with associated measurement uncertainties. I want to find the optimal segmentation of the data to identify state changes in the blazar. How can I implement this using Bayesian blocks?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks\nimport numpy as np\ndata = {'t': np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 'x': np.array([100, 102, 98, 180, 185, 182, 105, 103, 99, 101]), 'sigma': np.array([10, 10, 10, 13, 14, 13, 10, 10, 10, 10])}\nfitness = 'measures'\np0 = 0.05\nexes = bayesian_blocks(data['t'], data['x'], data['sigma'], fitness, p0)\nprint(exes)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a plot showing the positions of the planets in our solar system in heliocentric ecliptic coordinates"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot the motion of a comet over a period of time in heliocentric ecliptic coordinates"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to convert celestial coordinates from equatorial to ecliptic coordinates"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a shift model that adds 1.5 pixels to a coordinate"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nShift(offset=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a shift model that adds 0.2 pixels to a coordinate"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nShift(offset=0.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a shift model that adds 3 pixels to a coordinate"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nShift(offset=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I multiply my velocity model by a constant factor of 2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Multiply\nMultiply(factor=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the function to multiply a celestial model by a scalar value of 3?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Multiply\nMultiply(factor=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of multiplying a simple model by a quantity of 4.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Multiply\nMultiply(factor=4.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for Gaussian distribution with mean 0 and sigma 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import scott_bin_width\nimport numpy as np\n\ndata = np.random.normal(loc=0, scale=1, size=100)\nbin_width = scott_bin_width(data)\nprint(bin_width)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of 10 randomly generated numbers between 0 and 1. Write a code to compute the median absolute deviation (MAD) of these numbers."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_abs_deviation\n\n# Generate 10 random numbers between 0 and 1\nrandom_numbers = np.random.rand(10)\n\n# Compute the median absolute deviation (MAD)\nmad = median_abs_deviation(random_numbers)\n\nprint(f'Median Absolute Deviation (MAD): {mad:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example code for calculating the orbital elements of Mars at a given epoch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris, get_body_barycentric_posvel\nimport numpy as np\n\n# Set ephemeris to JPL (DE430/DE431)\nsolar_system_ephemeris.set('jpl')\n\n# Define the epoch\nepoch = Time('2024-03-15T00:00:00')\n\n# Get Mars' position and velocity at the epoch\npos, vel = get_body_barycentric_posvel('mars', epoch)\n\n# Calculate the orbital elements (semi-major axis, eccentricity, inclination, longitude of the ascending node, argument of periapsis, mean motion)\norbital_elements = np.linalg.inv(np.dot(pos.matrix\u015bli, pos.matrix\u015bli.T))\norbital_elements = orbital_elements / np.linalg.det(orbital_elements)\norbital_elements = orbital_elements * pos.ICRS\u3002\u201d], "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the Earth's moon at a specific time using the JPL ephemeris?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris, get_body_barycentric_posvel\nimport numpy as np\n\n# Set ephemeris to JPL (DE430/DE431)\nsolar_system_ephemeris.set('jpl')\n\n# Define the time\nut = Time('2024-03-15T00:00:00')\n\n# Get the Earth's moon position at the time\nmoon_pos = get_body_barycentric_posvel('moon', ut)[0]\n\n# To get the moon's position in a specific coordinate system, use the transform_to method\nmoon_pos_heliocentric = moon_pos.transform_to('heliocentrictrueecliptic')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to calculate the barycentric position and velocity of the Sun at a given time using the JPL ephemeris?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import solar_system_ephemeris, get_body_barycentric_posvel\nimport numpy as np\n\n# Set ephemeris to JPL (DE430/DE431)\nsolar_system_ephemeris.set('jpl')\n\n# Define the time\nepoch = Time('2024-03-15T00:00:00')\n\n# Get the Sun's position and velocity at the epoch\nsun_pos, sun_vel = get_body_barycentric_posvel('sun', epoch)\n\n# To get the Sun's position in a specific coordinate system, use the transform_to method\nsun_pos_heliocentric = sun_pos.transform_to('heliocentrictrueecliptic')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the sum of two angles in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\n# Create Angle objects for both positions\nposition1 = Angle('45d 30m 15s')\nposition2 = Angle('46d 45m 30s')\n\n# Calculate the sum of positions\nsum = position1 + position2\n\n# Print result in degrees and arcminutes for better readability\nprint(f\"Angular sum: {sum.deg:.4f} degrees\")\nprint(f\"Angular sum: {sum.arcmin:.2f} arcminutes\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to determine the position of a star in a galaxy. How can I use Astropy to extract the world coordinates from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\n\ndef get_world_coordinates(fits_file):\n    # Open the FITS file and get WCS\n    with fits.open(fits_file) as hdul:\n        wcs = WCS(hdul[0].header)\n        # Extract world coordinates\n        world_coordinates = wcs.all_world2pix(0, 0, 0)\n        return world_coordinates\n\ngalaxy_position = get_world_coordinates('galaxy.fits')\nprint(galaxy_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D constant model with amplitude 1.2"
      },
      {
        "from": "assistant",
        "value": "background_model = Const2D(amplitude=1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Here is an example of how to use the bootstrap sampling to calculate the confidence intervals of the median and mode"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\nfrom astropy.stats import bootstrap\n\n# Define the radial velocities with units\nrv_data = [-45.3, -42.1, -38.9, -35.2, -31.8, -28.4, -25.1, -22.3, -19.8, -17.5] * u.km/u.s\n\n# Convert to array without units for bootstrap\nrv_values = np.array([v.value for v in rv_data])\n\n# Define functions to calculate statistics\ndef calc_median(data):\n    return np.median(data)\ndef calc_mode(data):\n    return np.mode(data)[0]\n\n# Perform bootstrap with 1000 resamples for both statistics\nbootresults_median = bootstrap(rv_values, bootnum=1000, bootfunc=calc_median)\nbootresults_mode = bootstrap(rv_values, bootnum=1000, bootfunc=calc_mode)\n\n# Calculate confidence intervals (16th and 84th percentiles for 1\u03c3)\nmedian_ci = np.percentile(bootresults_median, [16, 84])\nmode_ci = np.percentile(bootresults_mode, [16, 84])\n\n# Print results\nprint(f'Median: {np.median(rv_values):.1f} km/s')\nprint(f'Median 1\u03c3 confidence interval: [{median_ci[0]:.1f}, {median_ci[1]:.1f}] km/s')\nprint(f'Mode: {mode_ci[0]:.1f} km/s')\nprint(f'Mode 1\u03c3 confidence interval: [{mode_ci[0]:.1f}, {mode_ci[1]:.1f}] km/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a timestamp for the summer solstice in 2024"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\n# Create TimeISO object for the summer solstice in 2024\nsolstice_time = Time(datetime(2024, 6, 20, 12, 0, 0).isoformat() + 'Z', format='isot', scale='utc')\n# Print the time in ISO format to verify\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform sigma-clipping on a 1D array of 1000 random numbers with a minimum value of 1 and a maximum value of 1000, using the mean as the center function and the standard deviation as the standard function, and with a 5-sigma threshold and a 2-sigma lower threshold. Return a masked array with the clipped values."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import sigma_clip # Generate a 1D array of 1000 random numbers with a minimum value of 1 and a maximum value of 1000 data = np.random.randint(1, 1000, 1000) # Perform sigma-clipping with a 5-sigma threshold and a 2-sigma lower threshold, and return a masked array # Use the mean as the center function and the standard deviation as the standard function clipped_data = sigma_clip(data, sigma=5, sigma_lower=2, cenfunc='mean', stdfunc='std', masked=True) # Print the clipped data print(clipped_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform sigma-clipping on a 2D array of 20x20 random numbers with a minimum value of 1 and a maximum value of 100, along the first axis, using the median as the center function and the median absolute deviation as the standard function, and with a 3-sigma threshold and a 1-sigma lower threshold."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import sigma_clip # Generate a 2D array of 20x20 random numbers with a minimum value of 1 and a maximum value of 100 data = np.random.randint(1, 100, (20, 20)) # Perform sigma-clipping along the first axis with a 3-sigma threshold and a 1-sigma lower threshold, and return a masked array # Use the median as the center function and the median absolute deviation as the standard function clipped_data = sigma_clip(data, axis=0, sigma=3, sigma_lower=1, cenfunc='median', stdfunc='mad_std', masked=True) # Print the clipped data print(clipped_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform sigma-clipping on a 3D array of 10x10x100 random numbers with a minimum value of 1 and a maximum value of 1000, along the third axis, using the mean as the center function and the standard deviation as the standard function, and with a 2-sigma threshold and a 4-sigma upper threshold."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import sigma_clip # Generate a 3D array of 10x10x100 random numbers with a minimum value of 1 and a maximum value of 1000 data = np.random.randint(1, 1000, (10, 10, 100)) # Perform sigma-clipping along the third axis with a 2-sigma threshold and a 4-sigma upper threshold, and return a masked array # Use the mean as the center function and the standard deviation as the standard function clipped_data = sigma_clip(data, axis=2, sigma=2, sigma_upper=4, cenfunc='mean', stdfunc='std', masked=True) # Print the clipped data print(clipped_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform sigma-clipping on a 2D array of 20x20 random numbers with a minimum value of 1 and a maximum value of 100, along the first axis, using the median as the center function and the median absolute deviation as the standard function, and with a 3-sigma threshold, a 2-sigma lower threshold, and a 1-sigma upper threshold."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import sigma_clip # Generate a 2D array of 20x20 random numbers with a minimum value of 1 and a maximum value of 100 data = np.random.randint(1, 100, (20, 20)) # Perform sigma-clipping along the first axis with a 3-sigma threshold, a 2-sigma lower threshold, and a 1-sigma upper threshold, and return a masked array # Use the median as the center function and the median absolute deviation as the standard function clipped_data = sigma_clip(data, axis=0, sigma=3, sigma_lower=2, sigma_upper=1, cenfunc='median', stdfunc='mad_std', masked=True) # Print the clipped data print(clipped_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.wcs.utils.skycoord_to_pixel function to convert a set of SkyCoord coordinates into pixels?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What will be the pixel coordinates for the following SkyCoord objects?"
      },
      {
        "from": "assistant",
        "value": "[SkyCoord(ra=12.5, dec=34.56, unit="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain in detail how the astropy.wcs.utils.skycoord_to_pixel function works?"
      },
      {
        "from": "assistant",
        "value": "The `skycoord_to_pixel` function in the `astropy.wcs.utils` module is a utility function that converts a set of SkyCoord objects into pixel coordinates using a given WCS transformation. It takes three main arguments: `coords`, `wcs`, and `origin`. Here's a breakdown of how it works:"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a straight line model where the slope is -2 and the intercept is 3"
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy modeling components\nfrom astropy.modeling import models\nimport numpy as np\ncreate Linear1D model\nclass_model = models.Linear1D(slope=-2, intercept=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please demonstrate how to create a Linear1D model with slope = 1 and intercept = 0"
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy modeling components\nfrom astropy.modeling import models\nimport numpy as np\nclass_model = models.Linear1D(slope=1, intercept=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Linear1D model with a slope of 0.5 and an intercept of 1.5"
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy modeling components\nfrom astropy.modeling import models\nimport numpy as np\nclass_model = models.Linear1D(slope=0.5, intercept=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Linear1D model with a slope of -0.5 and an intercept of 2.5"
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy modeling components\nfrom astropy.modeling import models\nimport numpy as np\nclass_model = models.Linear1D(slope=-0.5, intercept=2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy's SkyCoord to convert between different coordinate systems?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.coordinates import SkyCoord\n\nc = SkyCoord(ra=12.0, dec=34.0, unit='deg')\n\nprint(c.galactic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to enable sugar units."
      },
      {
        "from": "assistant",
        "value": "from astropy.units import sugar\nu.add_enabled_units(sugar)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Enable units for the British Imperial system."
      },
      {
        "from": "assistant",
        "value": "from astropy.units import imperial\nu.add_enabled_units(imperial)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Enable units for the Astronomical system."
      },
      {
        "from": "assistant",
        "value": "from astropy.units import astronomry\nu.add_enabled_units(astronomry)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have flux measurements of a supernova at different wavelengths [1.2e-15, 1.1e-15, 1.3e-15, ...] (in erg/s/cm^2). Show me how to use jackknife_stats to get both the mean flux and standard deviation, with their confidence intervals at 95% confidence level."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\nimport numpy as np\n\n# Sample flux measurements in erg/s/cm^2\nflux_data = np.array([1.2e-15, 1.1e-15, 1.3e-15, 1.2e-15, 1.3e-15])\n\n# Calculate jackknife statistics\n# Returns mean, bias, std_err, conf_interval\njk_mean, jk_bias, jk_std_err, jk_conf = jackknife_stats(\n    data=flux_data,\n    statistic=np.mean,\n    confidence_level=0.95\n)\n\n# Calculate jackknife statistics for standard deviation\njk_std_mean, jk_std_bias, jk_std_err, jk_std_conf = jackknife_stats(\n    data=flux_data,\n    statistic=np.std,\n    confidence_level=0.95\n)\n\n# Print results\nprint(f\"Mean Flux: {jk_mean:.2e} erg/s/cm^2\")\nprint(f\"Mean 95% Confidence Interval: [{jk_conf[0]:.2e}, {jk_conf[1]:.2e}]\")\nprint(f\"Standard Deviation: {jk_std_mean:.2e} erg/s/cm^2\")\nprint(f\"Std Dev 95% Confidence Interval: [{jk_std_conf[0]:.2e}, {jk_std_conf[1]:.2e}]\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write code to determine which constellations a set of celestial objects belong to based on their equatorial coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import get_constellation\ncel_objects = [SkyCoord(ra=12.5*u.degree, dec=34.2*u.degree, frame='icrs'), SkyCoord(ra=56.7*u.degree, dec=78.9*u.degree, frame='icrs')]\nconstellations = [get_constellation(obj) for obj in cel_objects]\nprint(constellations)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model with a peak intensity of 500 counts, centered at coordinates (200, 150) pixels, with a standard deviation of 4 pixels in both x and y directions."
      },
      {
        "from": "assistant",
        "value": "models.Gaussian2D(amplitude=500, x_mean=200, y_mean=150, x_stddev=4, y_stddev=4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model with a peak intensity of 750 counts, centered at coordinates (100, 250) pixels, with a standard deviation of 5 pixels in both x and y directions."
      },
      {
        "from": "assistant",
        "value": "models.Gaussian2D(amplitude=750, x_mean=100, y_mean=250, x_stddev=5, y_stddev=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model with a peak intensity of 625 counts, centered at coordinates (250, 200) pixels, with a standard deviation of 3 pixels in both x and y directions."
      },
      {
        "from": "assistant",
        "value": "models.Gaussian2D(amplitude=625, x_mean=250, y_mean=200, x_stddev=3, y_stddev=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new table in a FITS file using astropy.io.fits.Table?"
      },
      {
        "from": "assistant",
        "value": "fits.Table()}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing radio observations and need to create a WCS from a Galactic frame. What's the code to convert it to WCS with a appropriate projection for radio imaging?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Galactic\n\nframe = Galactic()\nwcs = celestial_frame_to_wcs(frame, projection='CAR')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing infrared observations and need to create a WCS from a SkyFrame frame. What's the code to convert it to WCS with a appropriate projection for infrared imaging?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import SkyFrame\n\nframe = SkyFrame()\nwcs = celestial_frame_to_wcs(frame, projection='TAN')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing optical observations and need to create a WCS from a FK5 frame. What's the code to convert it to WCS with a appropriate projection for optical imaging?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import FK5\n\nframe = FK5(equinox='J2010')\nwcs = celestial_frame_to_wcs(frame, projection='Gnomonic')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write code to enable spectral equivalencies for converting between velocity and Doppler shift, specifically for analyzing a star with a radial velocity of 100 km/s. Use add_enabled_equivalencies."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.units import equivalencies\n\n# Set up velocity of star\nstar_velocity = 100 * u.km / u.s\n\n# Enable spectral equivalencies for velocity-Doppler shift conversions\nwith u.add_enabled_equivalencies(u.spectral()):\n    # Convert velocity to Doppler shift\n    doppler_shift = star_velocity.to(u.m / u.s)\n\n    # Print results\n    print(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to create a 2D Tophat filter kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nTophat2DKernel(40)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert position of Earth to geocentric true ecliptic coordinates for the epoch J2000 ?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\n\nearth = SphericalRepresentation(lon=0*u.deg, lat=0*u.deg, distance=1*u.AU)\nearth_pos = earth.to_cartesian()\ngeocentric_true_ecliptic = GeocentricTrueEcliptic \\\n(representation_type=CartesianRepresentation, x=earth_pos.x, y=earth_pos.y, z=earth_pos.z, obstime='J2000')\ngeocentric_true_ecliptic.print_values()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert position of Mars to geocentric true ecliptic coordinates for the epoch J2000 ?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\n\nmars = SphericalRepresentation(lon=ethero u.deg, lat=ethero u.deg, distance=ethero u.AU)\nmars_pos = mars.to_cartesian()\ngeocentric_true_ecliptic = GeocentricTrueEcliptic(representation_type=CartesianRepresentation, x=mars_pos.x, y=mars_pos.y, z=mars_pos.z, obstime='J2000')\ngeocentric_true_ecliptic.print_values()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert position of Venus to geocentric true ecliptic coordinates for the epoch J2000 ?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\n\nvenus = SphericalRepresentation(lon=280 u.deg, lat=3.5 u.deg, distance=0.72 u.AU)\nvenus_pos = venus.to_cartesian()\ngeocentric_true_ecliptic = GeocentricTrueEcliptic(representation_type=CartesianRepresentation, x=venus_pos.x, y=venus_pos.y, z=venus_pos.z, obstime='J2000')\ngeocentric_true_ecliptic.print_values()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a time in the format 'YYYY-MM-DD HH:MM:SS' to a Time object in Astropy?"
      },
      {
        "from": "assistant",
        "value": "time_obj = Time('2023-07-25 14:30:00', format='iso')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use the 'date_hm' subformat to format a Time object in Astropy?"
      },
      {
        "from": "assistant",
        "value": "time_obj = Time('2023-07-25 14:30:00', format='iso', scale='utc'); print(time_obj.date_hm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the 'date' subformat to format a Time object in Astropy and include the year?"
      },
      {
        "from": "assistant",
        "value": "time_obj = Time('2023-07-25 14:30:00', format='iso', scale='utc'); print(time_obj.date_str(format='date'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the barycentric position and velocity of earth on January 15, 2024 at 12:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel \nfrom astropy.time import Time \nimport astropy.units as u \nt = Time('2024-01-15 12:00:00') \nmars_posvel = get_body_barycentric_posvel('earth', t) \n# Position is in cartesian coordinates (x, y, z) in AU \nposition = mars_posvel[0] \n# Velocity is in cartesian coordinates (dx/dt, dy/dt, dz/dt) in AU/day \nvelocity = mars_posvel[1] \nprint(position) \nprint(velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.table.Row, show how to access and modify the values of all rows in a table."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\ntable = Table({'a': [1, 2, 3], 'b': [4, 5, 6]})\n\n# Access values in the rows\nfor row in table:\n    print(row['a'], row['b'])\n\n# Modify values in the rows\nfor i, row in enumerate(table):\n    row['a'] += 1\n    row['b'] += 1\n    table[i] = row\n\n# Check the modified table\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the function to handle missing values in the input data?"
      },
      {
        "from": "assistant",
        "value": "You can modify the function to handle missing values by passing the ignore_nan parameter as true. For example: biweight_location(data, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default value of the tuning constant c in the biweight location function?"
      },
      {
        "from": "assistant",
        "value": "The default value of the tuning constant c is 6.0."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the biweight location function with a masked array as input?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use the biweight location function with a masked array as input. The function will ignore any NaN values in the masked array."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a custom model using astropy.modeling.models.custom_model. Given amplitude=10, mean=5, stddev=0.3, show me how to create a model with a tied parameter."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.modeling.models import custom_model\nimport numpy as np\nclass TiedGaussian1D(models.Gaussian1D):\n    def __init__(self, amplitude=1.0, mean=0.0, stddev=1.0):\n        super().__init__(amplitude=amplitude, mean=mean, stddev=stddev)\n        self.mean.tied = lambda model: 50 * model.stddev\ng1 = TiedGaussian1D(amplitude=10, mean=5, stddev=0.3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the nearest star to the Sun in the Hipparcos catalog."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.catalog import Hipparcos\n\n# Load the Hipparcos catalog\nhipparcos = Hipparcos.get_catalog()\n\n# Create SkyCoord object for the Sun's position\nsun = SkyCoord(ra=272.32*u.deg, dec=22.84*u.deg, frame='icrs')\n\n# Match the Sun to the Hipparcos catalog\nmatch = match_coordinates_sky(sun, hipparcos)\n\n# Get the index and value of the match\nidx = match.idx\n\n# Print the name and distance of the nearest star\nprint(hipparcos[idx].name, hipparcos[idx].dist)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an ICRS coordinate object with RA = 12.1 degrees, Dec = 34.5 degrees with a distance of 10 parsec."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, Galactic; from astropy import units as u; icrs_coord = ICRS(ra=12.1*u.degree, dec=34.5*u.degree, distance=10*u.parsec); gal_coord = icrs_coord.transform_to(Galactic()); print(f\"Galactic l: {gal_coord.l:.3f}\"); print(f\"Galactic b: {gal_coord.b:.3f}\"); print(f\"Distance: {gal_coord.distance:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an ICRS coordinate object with RA = 45.6 degrees, Dec = -78.9 degrees with a distance of 20 parsec."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, Galactic; from astropy import units as u; icrs_coord = ICRS(ra=45.6*u.degree, dec=-78.9*u.degree, distance=20*u.parsec); gal_coord = icrs_coord.transform_to(Galactic()); print(f\"Galactic l: {gal_coord.l:.3f}\"); print(f\"Galactic b: {gal_coord.b:.3f}\"); print(f\"Distance: {gal_coord.distance:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an ICRS coordinate object with RA = 98.7 degrees, Dec = 12.8 degrees with a distance of 30 parsec."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, Galactic; from astropy import units as u; icrs_coord = ICRS(ra=98.7*u.degree, dec=12.8*u.degree, distance=30*u.parsec); gal_coord = icrs_coord.transform_to(Galactic()); print(f\"Galactic l: {gal_coord.l:.3f}\"); print(f\"Galactic b: {gal_coord.b:.3f}\"); print(f\"Distance: {gal_coord.distance:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to write FITS info to a file while enabling FITS verification warnings"
      },
      {
        "from": "assistant",
        "value": "fits.info(fits_file, output='test.txt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to suppress FITS info output to a file and return a list of tuples instead"
      },
      {
        "from": "assistant",
        "value": "fits.info(fits_file, output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the required parameters to call fits.info with no output to a file"
      },
      {
        "from": "assistant",
        "value": "fits.info(fits_file)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 100x100 cutout at the center of the image"
      },
      {
        "from": "assistant",
        "value": "astropy.nddata.Cutout2D(data, (image_size/2, image_size/2), (100, 100))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 200x200 cutout at the top-left corner of the image"
      },
      {
        "from": "assistant",
        "value": "astropy.nddata.Cutout2D(data, (0, 0), (200, 200))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 50x50 cutout at the bottom-right corner of the image"
      },
      {
        "from": "assistant",
        "value": "astropy.nddata.Cutout2D(data, (image_size-10, image_size-10), (50, 50))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a string representing a time in hours and minutes to a datetime object?"
      },
      {
        "from": "assistant",
        "value": "from datetime import datetime\nfrom calendar import timegm\n\ndef time_to_datetime(time_str):\n    # Split the string into hours and minutes\n    hours, minutes = time_str.split('\n')\n    # Convert the hours and minutes to a datetime object\n    return datetime.strptime(f'{hours}:{minutes}', '%H:%M')\n\n# Example usage\ntime_str = '12:30'\ndatetime_obj = time_to_datetime(time_str)\nprint(datetime_obj)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "API usage  for ionization energy"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import c, u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "API usage for velocity to distance"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import G, c, u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "API usage for radial velocity "
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.table.unique to remove duplicate rows based on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "unique(table, keys=['column1', 'column2', ...])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default behavior for keeping duplicate rows when using astropy.table.unique?"
      },
      {
        "from": "assistant",
        "value": "The default behavior is to keep the first row for each set of duplicates."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to silence the removal of masked value columns when using astropy.table.unique?"
      },
      {
        "from": "assistant",
        "value": "By setting the silent parameter to True, i.e., unique(table, silent=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.io.fits.open function to open a FITS file in read-only mode?"
      },
      {
        "from": "assistant",
        "value": "fits.open('file.fits', mode='readonly')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I open a FITS file and verify the checksums of all HDUs in the file?"
      },
      {
        "from": "assistant",
        "value": "fits.open('file.fits', checksum=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I open a FITS file in update mode and save a backup of the original file?"
      },
      {
        "from": "assistant",
        "value": "fits.open('file.fits', mode='update', save_backup=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning an observation of a binary star system. Can you show me how to fit a logarithmic model to my data points using Logarithmic1D where amplitude=2.5 and tau=1.5, and visualize it from r=0 to 10 parsecs?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nimport matplotlib.pyplot as plt\nfrom astropy import units as u\ncolors = plt.cm.RdYlBu\n# Create sample radial points (from 0 to 10 parsecs)\nr = np.linspace(0, 10, 100) * u.pc\n# Initialize the logarithmic model with given parameters\nlog_model = models.Logarithmic1D(amplitude=2.5, tau=1.5)\n# Calculate velocity dispersion values using the model\nv_disp = log_model(r.value)  # .value removes units for plotting\n# Create the visualization\nplt.figure(figsize=(8, 6))\nplt.plot(r, v_disp, 'b-', label='Logarithmic Model')\nplt.xlabel('Radius (pc)')\nplt.ylabel('Velocity Dispersion (km/s)')\nplt.title('Radial Velocity Dispersion Profile')\nplt.legend()\nplt.grid(True)\nplt.show()\n# Note: In real applications, you would fit this model to actual data points\n# using something like:\n# fitter = fitting.LevMarLSQFitter()\n# best_fit = fitter(log_model, r_data, v_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to create a binary table HDU for my spectroscopic data (5 columns, 10000 rows) with a header containing some basic keywords?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\n\ndata = Table({'flux': [1.0]*10000, 'snr': [10.0]*10000, 'ra': [10.68458]*10000, 'dec': [41.26917]*10000, 'id': range(10000)})\nhdu = fits.BinTableHDU(data=data)\nhdu.header['OBJECT'] = 'Spectroscopic data'\nhdu.header['TELESCOP'] = 'Sample Telescope'\nhdu.header['INSTRUME'] = 'Spectrograph'}}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine two tables using the astropy.table.join function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\nimport numpy as np\ntable1 = Table({'name': ['John', 'Mary'], 'age': [25, 31]})\ntable2 = Table({'name': ['John', 'Jane'], 'city': ['New York', 'Chicago']})\njoined_table = join(table1, table2, join_type='inner', keys='name')\nprint(joined_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `proj_plane_pixel_scales` function to get the pixel scales for a given WCS object?"
      },
      {
        "from": "assistant",
        "value": "wcs.proj_plane_pixel_scales"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the `proj_plane_pixel_scales` function to get the pixel scales for a celestial WCS component?"
      },
      {
        "from": "assistant",
        "value": "wcs.celestial.proj_plane_pixel_scales"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the `proj_plane_pixel_scales` function to get the pixel scales for a WCS object with a non-linear projection?"
      },
      {
        "from": "assistant",
        "value": "wcs.proj_plane_pixel_scales"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create an FK4 coordinate frame for a star at RA=10.5 degrees and Dec=20.3 degrees with proper motion pm_ra_cosdec=100.5 mas/yr and pm_dec=200.3 mas/yr, and radial velocity 300.5 km/s."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, FK5  \nfrom astropy import units as u\nfrom astropy.time import Time\n\nstar_coords = FK4(ra=10.5*u.degree, dec=20.3*u.degree, \n                     pm_ra_cosdec=100.5*u.mas/u.yr, pm_dec=200.3*u.mas/u.yr, \n                     radial_velocity=300.5*u.km/u.s, \n                     equinox='B1950', obstime=Time('1950-01-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create an FK4 coordinate frame for a star at RA=30.5 degrees and Dec=-10.3 degrees with distance 400.5 pc, and proper motion pm_ra_cosdec=500.3 mas/yr and pm_dec=600.3 mas/yr)"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, FK5  \nfrom astropy import units as u\nfrom astropy.time import Time\n\nstar_coords = FK4(ra=30.5*u.degree, dec=-10.3*u.degree, \n                     distance=400.5*u.pc, pm_ra_cosdec=500.3*u.mas/u.yr, pm_dec=600.3*u.mas/u.yr, \n                     equinox='B1950', obstime=Time('1950-01-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create an FK4 coordinate frame for a star at RA=50.5 degrees and Dec=30.3 degrees with radial velocity 700.5 km/s)"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, FK5  \nfrom astropy import units as u\nfrom astropy.time import Time\n\nstar_coords = FK4(ra=50.5*u.degree, dec=30.3*u.degree, \n                     radial_velocity=700.5*u.km/u.s, \n                     equinox='B1950', obstime=Time('1950-01-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the origin of the ICRS coordinate system?"
      },
      {
        "from": "assistant",
        "value": "The ICRS coordinate system is based on a catalog of extragalactic objects, known as the FK5 catalog."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How is the ICRS coordinate system related to the FK5 coordinate system?"
      },
      {
        "from": "assistant",
        "value": "The ICRS coordinate system is an extension of the FK5 coordinate system, and it is very close to J2000 equatorial."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the representation_type parameter in the ICRS class?"
      },
      {
        "from": "assistant",
        "value": "The representation_type parameter is used to set the expected input representation class, thereby changing the expected keyword arguments for the data passed in."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance of 1000 kpc to megaparsecs using the Distance class?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import kpc, Mpc\nfrom astropy.coordinates import Distance\ndistance1 = Distance(1000, unit=kpc)\ndistance1_Mpc = distance1.to(Mpc)\nprint(distance1_Mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a temperature from Fahrenheit to Celsius?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import imperial\ncelsius = (fahrenheit - 32) * 5/9"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to combine the coordinates of two stars, one with RA=12.5, DEC=30.0 deg in ICRS frame and the other with RA=15.6, DEC=40.2 deg in GALACTIC frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import ICRS, Galactic\n\n# Create SkyCoord objects for each star in its respective frame\nstar1 = SkyCoord(ra=12.5*u.deg, dec=30.0*u.deg, frame='icrs')\nstar2 = SkyCoord(ra=15.6*u.deg, dec=40.2*u.deg, frame='galactic')\n\n# Concatenate the coordinates\nmerged_coords = SkyCoord/cat ICRS/cat Galactic(concatenate([star1, star2]))\n\n# Display result in ICRS frame\nprint(f'Merged coordinates: {merged_coords.icrs.ra.deg:.2f}\u00b0, {merged_coords.icrs.dec.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine the observations of a galaxy"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import FK5, ICRS\n\n# Create SkyCoord objects for each observation in its respective frame\nobs1 = SkyCoord(ra=10.1*u.deg, dec=20.3*u.deg, frame='fk5')\nobs2 = SkyCoord(ra=14.5*u.deg, dec=30.2*u.deg, frame='icrs')\n\n# Concatenate the coordinates\nmerged_coords = SkyCoord(cat FK5/cat ICRS(concatenate([obs1, obs2])))\n\n# Display result in ICRS frame\nprint(f'Merged coordinates: {merged_coords.icrs.ra.deg:.2f}\u00b0, {merged_coords.icrs.dec.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to combine the coordinates of three nebulae, each in its own frame: HBKGAL (RA=45.8, DEC=-20.1 deg), HBKJ2000 (RA=46.6, DEC=-21.3 deg), and HGAL (RA=44.4, DEC=-19.2 deg). How do I merge them into a single coordinate set?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import ICRS, Galactic, FK5\n\ncat HBKGAL = SkyCoord(ra=45.8*u.deg, dec=-20.1*u.deg, frame='galactic')\n{cat HBKJ2000 = SkyCoord(ra=46.6*u.deg, dec=-21.3*u.deg, frame='fk5')\n{cat HGAL = SkyCoord(ra=44.4*u.deg, dec=-19.2*u.deg, frame='galactic')\n\n# Concatenate the coordinates\nmerged_coords = SkyCoord(concatenate([HBKGAL, HBKJ2000, HGAL]))\n\n# Display result in ICRS frame\nmerged_coords = merged_coords.transform_to('icrs')\nprint(f'Merged coordinates: {merged_coords.ra.deg:.2f}\u00b0, {merged_coords.dec.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a FITS file containing a single extension with a binary table. How do I access the header information for this extension?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getheader(filename='table.fits', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the velocity of Venus relative to the Solar System's barycenter for a series of observations during its next opposition?"
      },
      {
        "from": "assistant",
        "value": "{Query to calculate velocity of Venus}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please calculate the position and velocity of Jupiter relative to the Solar System's barycenter for a series of observations during its next opposition?"
      },
      {
        "from": "assistant",
        "value": "{Query to calculate position and velocity of Jupiter}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the velocity of Saturn relative to the Solar System's barycenter for a series of observations during its next opposition?"
      },
      {
        "from": "assistant",
        "value": "{Query to calculate velocity of Saturn}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to fit a quadratic relationship between instrumental magnitudes [10.2, 11.7, 12.1, 13.8, 14.2] and standard magnitudes [9.8, 11.2, 11.7, 13.2, 14.8]. Show me how to use LinearLSQFitter to find the transformation equation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Input data\ninstrumental_mag = np.array([10.2, 11.7, 12.1, 13.8, 14.2])\nstandard_mag = np.array([9.8, 11.2, 11.7, 13.2, 14.8])\n\n# Initialize the quadratic model and fitter\nquadratic_model = models.Polynomial1D(degree=2)\nfit = fitting.LinearLSQFitter()\n\n# Fit the data\nfitted_model = fit(quadratic_model, instrumental_mag, standard_mag)\n\n# Print transformation equation coefficients\n# Access the parameter values using .value\nprint(f\"Transformation equation: m_std = {fitted_model.coefficients[0].value:.3f} + {fitted_model.coefficients[1].value:.3f} * m_inst + {fitted_model.coefficients[2].value:.3f} * m_inst**2\")\n\n# Calculate residuals to check fit quality\nresiduals = standard_mag - fitted_model(instrumental_mag)\nrms = np.sqrt(np.mean(residuals**2))\nprint(f\"RMS of fit: {rms:.3f} mag\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calibrate my photometric measurements by fitting a polynomial relationship of degree 3 between instrumental magnitudes [20.2, 21.7, 22.1, 23.8, 24.2] and standard magnitudes [19.8, 21.2, 21.7, 23.2, 25.8]. Show me how to use LinearLSQFitter to find the transformation equation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Input data\ninstrumental_mag = np.array([20.2, 21.7, 22.1, 23.8, 24.2])\nstandard_mag = np.array([19.8, 21.2, 21.7, 23.2, 25.8])\n\n# Initialize the cubic model and fitter\ncubic_model = models.Polynomial1D(degree=3)\nfit = fitting.LinearLSQFitter()\n\n# Fit the data\nfitted_model = fit(cubic_model, instrumental_mag, standard_mag)\n\n# Print transformation equation coefficients\n# Access the parameter values using .value\nprint(f\"Transformation equation: m_std = {fitted_model.coefficients[0].value:.3f} + {fitted_model.coefficients[1].value:.3f} * m_inst + {fitted_model.coefficients[2].value:.3f} * m_inst**2 + {fitted_model.coefficients[3].value:.3f} * m_inst**3\")\n\n# Calculate residuals to check fit quality\nresiduals = standard_mag - fitted_model(instrumental_mag)\nrms = np.sqrt(np.mean(residuals**2))\nprint(f\"RMS of fit: {rms:.3f} mag\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a power-law relationship between instrumental magnitudes [18.2, 19.7, 20.1, 21.8, 22.2] and standard magnitudes [17.8, 19.2, 19.7, 21.2, 23.8]. Show me how to use LinearLSQFitter to find the transformation equation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Input data\ninstrumental_mag = np.array([18.2, 19.7, 20.1, 21.8, 22.2])\nstandard_mag = np.array([17.8, 19.2, 19.7, 21.2, 23.8])\n\n# Initialize the power-law model and fitter\npower_model = models.PowerLaw1D()\nfit = fitting.LinearLSQFitter()\n\n# Fit the data\nfitted_model = fit(power_model, instrumental_mag, standard_mag)\n\n# Print transformation equation coefficients\n# Access the parameter values using .value\nprint(f\"Transformation equation: m_std = {fitted_model.power.value:.3f} * m_inst^(+ {fitted_model.logamplitude.value:.3f})\")\n\n# Calculate residuals to check fit quality\nresiduals = standard_mag - fitted_model(instrumental_mag)\nrms = np.sqrt(np.mean(residuals**2))\nprint(f\"RMS of fit: {rms:.3f} mag\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use WCS with automatic correction of non-standard usage and fix=True with relax=True?"
      },
      {
        "from": "assistant",
        "value": "WCS(header, fix=True, relax=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What happens if I try to create a WCS object where the core WCS has a different number of dimensions than 2 and that object also contains a distortion paper or SIP distortion?"
      },
      {
        "from": "assistant",
        "value": "ValueError"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the meaning of the relax parameter in WCS?"
      },
      {
        "from": "assistant",
        "value": "Degree of permissiveness: recognize only FITS keywords defined by the published WCS standard, or admit all recognized informal extensions of the WCS standard, or a bit field selecting specific extensions to accept."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use LinearLSQFitter to determine the mass of a planet orbiting a star based on its velocity and distance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\nimport numpy as np\n\n# Define the data\nradii = np.array([1, 2, 3, 4, 5]) * u.au\nvelocities = np.array([10, 20, 30, 40, 50]) * u.km / u.s\n\n# Initialize the linear model and fitter\nline_init = models.Linear1D()\nfitter = fitting.LinearLSQFitter()\n\n# Fit the data\nfitted_model = fitter(line_init, radii.value, velocities)\n\n# Calculate the mass of the planet\nmass = fitted_model.slope.value * velocities.value * u.kg\n\nprint(f'Mass of the planet: {mass:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to an Astropy table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\nt = Table({'a': [1, 2], 'b': [3, 4]})\n\nt.add_column('c', [5, 6])\nprint(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Working with a light curve dataset (10,000 data points) of a variable star. How do I implement ZScaleInterval with a high contrast value of 0.6 and minimum 50 points criterion to determine the best visualization range?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use ZScaleInterval to visualize the distribution of galaxies in a 3D space with 20,000 data points? What are the recommended display settings?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of x-ray flux measurements of a black hole. How can I use ZScaleInterval to display the data with a high contrast value of 0.8 and reject pixels with more than 30 outliers?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to classify my astronomical image as a galaxy or a star. Can you provide an example of how to use `astropy.convolution.Gaussian2DKernel` to detect edges in my image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve_fft\nevaluate the kernel response"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use `astropy.convolution.Tophat2DKernel` to detect objects in my astronomical image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel, convolve_fft\nevaluate the kernel response"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " I need to create a custom kernel to detect specific features in my astronomical image. Can you provide an example of how to use `astropy.convolution.RickerWavelet2DKernel` to create a Ricker wavelet kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import RickerWavelet2DKernel, convolve_fft\nevaluate the kernel response"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the location of the ESO's Very Large Telescope (VLT) observatory?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nlocation = EarthLocation.of_site('ESO-VLT')\nprint(location)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the latitude and longitude of the Mauna Kea Observatory?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nlocation = EarthLocation.of_obsinery('Mauna Kea')\nprint(location.lat, location.lon)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the geocentric coordinates of the Arecibo Observatory?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nlocation = EarthLocation.from_geocentric(0. * u.arcsec, 0. * u.arcsec, 0. * u.arcsec)\nprint(location)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new time unit for celestial coordinate systems?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define a new time unit with full name 'sidereal day' and symbol 'sdy'\nsdy = u.def_unit('sdy', u.day, doc='Unit for celestial coordinate systems')\n\n# Register the unit\nu.add_enabled_units([sdy])\n\n# Example usage\nprint(1 * sdy)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a non-linear stretch to enhance the visibility of faint solar corona structures in my eclipse image while keeping the bright features manageable?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsymmetricPercentileInterval, ImageNormalize\nimage_data = ... # assume image_data is a 2D array\nstretch = AsymmetricPercentileInterval(1, 99)\nnorm = ImageNormalize(image_data, stretch=stretch)\nstretched_data = norm(image_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a raw image from my CCD camera with data array [[100,150,200], [120,160,210]] in ADU units and an uncertainty array of [[5,6,7], [5,6,7]]. How can I create a CCDData object with this data and its uncertainty?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a raw image from my CCD camera with data array [[150,170,190], [140,170,190]] in ADU units and an uncertainty array of [[3,4,5], [3,4,5]]. How can I create a CCDData object with this data and its uncertainty?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a raw image from my CCD camera with data array [[200,220,240], [180,220,240]] in ADU units and an uncertainty array of [[4,5,6], [4,5,6]]. How can I create a CCDData object with this data and its uncertainty?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the speed of a car traveling at 60 mph?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\n60 * u.mile / u.hour"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How much does a gallon of milk weigh in pounds?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\ngallon = u.gallon\npound = u.lb\nprint(gallon.to(pound))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the force of a 100 kg mass under the influence of gravity?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\nforce = 100 * u.lbm\nprint(force.to(u.lbf))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "SCRIPT: Create a PowerLaw1D model for stellar mass function with an amplitude of 1e10 M\u2080, a reference point of 1e8 M\u2080, and a power law index of -1.5. Set the amplitude bounds from 1e9 to 1e11 M\u2080 and the power law index bounds from -2 to -1. The mass function should go like F(M) = F0 * (M/M0)^(-\u03b1)"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=1e10, x_0=1e8, alpha=-1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "SCRIPT: Create a PowerLaw1D model for cosmological dark matter profile with an amplitude of 1e16 M\u2080, a reference point of 1e10 kpc, and a power law index of -2.0. Set the amplitude bounds from 1e15 to 1e17 M\u2080 and the power law index bounds from -3 to -1. The profile should go like \u03cc(r) = \u03b80 * (R/R0)^(-\u03b1)"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=1e16, x_0=1e10, alpha=-2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "SCRIPT: Create a PowerLaw1D model for ionizing luminosity function with an amplitude of 10^40 erg/s, a reference point of 10^22 Hz, and a power law index of -1.2. Set the \u03b1 parameter to be fixed. The luminosity function should go like \u03a6(\u03bd) = \u03a60 * (\u03bd/\u03bd0)^(-\u03b1)"
      },
      {
        "from": "assistant",
        "value": "powerlaw = models.PowerLaw1D(amplitude=10**40, x_0=10**22, alpha=-1.2, fixed={'alpha': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the TELESCOP keyword from the header of the fits file named 'm31.fits'"
      },
      {
        "from": "assistant",
        "value": "fits.getval('m31.fits', 'TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of the POINTING keyword in the fits file named 'example.fits'?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('example.fits', 'POINTING')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you retrieve the INSTRUME keyword from the fits file named 'NGC300.fits'?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('NGC300.fits', 'INSTRUME')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the spectral line width for a given transition."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\\nfrom astropy.constants import c, k_B\\nfrom astropy.units import equivalent_to\\np = 1e-21 * u.W / u.m**2 \\nT = 10 * u.K\\nde = h * nu / (k_B * T)\\nw = 2 * nu**2 * h / (c**2)\\nsigma = 2 * h * nu**2 / (c**2 * k_B * T)\\nprint(f\\u0022Spectral line width (sigma): {sigma.to(u.m^-2)}\\u0022)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use astropy to find the coordinates of stars in an image. I have the image data and the wcs header. How can I do that?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\nfrom astropy.coordinates import SkyCoord\n\ntarget_wcs = WCS(header) # Assuming header is your wcs header\ntargetimage = fits.open('target_image.fits')[0].data # Load your image data\ntarget_coords = SkyCoord(ra=target_wcs.wcs.all_vs_all(SkyCoord(ra=12*3600*target_wcs.wcs.crpix[0]+target_wcs.wcs.cdelt[0]*np.arange(target_wcs.naxis[0]), dec=target_wcs.wcs.wcrpix[1]+target_wcs.wcs.cdelt[1]*np.arange(target_wcs.naxis[1])).dec, unit='deg')\nprint(target_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference between two dates in the past?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\n# Define two dates in the past\nstart_date = '2020-01-01 00:00:00'\nend_date = '2020-12-31 23:59:59'\n\n# Create Time objects for the dates\nstart_time = Time(start_date, format='isot', scale='utc')\nend_time = Time(end_date, format='isot', scale='utc')\n\n# Calculate the time difference\ntime_diff = TimeDelta(end_time - start_time)\n\nprint(f'Time difference: {time_diff}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convolve a 2D array with a kernel while handling NaN values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between convolving an array with a kernel and interpolating it?"
      },
      {
        "from": "assistant",
        "value": "Convolution involves sliding the kernel over the array and summing the products at each position, while interpolation involves filling in missing values by estimating them from neighboring values."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to normalize a kernel before convolving an array with it?"
      },
      {
        "from": "assistant",
        "value": "You can use the `normalize_kernel` argument with `True` to normalize the kernel."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal model with a period of 10 and an amplitude of 5, then evaluate it on a grid from -20 to +20 with 0.1 steps. Make sure the model's phase is 3.14 and its offset is 2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sine1D\nimport numpy as np\n\n# Create sinusoidal model\nmodel = Sine1D(amplitude=5, period=10, phase=3.14, offset=2)\n\n# Create evaluation grid from -20 to +20\nx = np.arange(-20, 20.1, 0.1)\n\n# Evaluate the model\ny = model(x)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a polynomial model of degree 3, then evaluate it on a grid from -10 to +10 with 0.1 steps. Make sure the model's coefficients are [1, 2, 3, 4]."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial1D\nimport numpy as np\n\n# Create polynomial model\nmodel = Polynomial1D(degree=3, c0=1, c1=2, c2=3, c3=4)\n\n# Create evaluation grid from -10 to +10\nx = np.arange(-10, 10.1, 0.1)\n\n# Evaluate the model\ny = model(x)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Lorentzian model with a center at 5, a full width at half maximum of 2, and an amplitude of 3, then evaluate it on a grid from -10 to +10 with 0.1 steps."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D\nimport numpy as np\n\ncenter = 5\nfwhm = 2\namp = 3\n\n# Create Lorentzian model\nmodel = Lorentz1D(amplitude=amp, fwhm=fwhm, center=center)\n\n# Convert FWHM to sigma\nsigma = fwhm / (2 * np.sqrt(2 * np.log(2)))\n\n# Create evaluation grid from -10 to +10\nx = np.arange(-10, 10.1, 0.1)\n\n# Evaluate the model\ny = model(x)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the amplitude of the magnitude changes for three variable stars. What's the best way to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\nfrom numpy import array\n\n# Sample data for 3 stars\nstar1_data = Table({'magnitude': [12.3, 12.5, 12.7]}, name='star1')\nstar2_data = Table({'magnitude': [13.2, 13.4, 13.6]}, name='star2')\nstar3_data = Table({'magnitude': [14.1, 14.3, 14.5]}, name='star3')\n\n# Stack the tables vertically\ncombined_data = vstack([star1_data, star2_data, star3_data])\n\n# Calculate the amplitude of the magnitude changes for each star\namplitude = combined_data['magnitude'].max() - combined_data['magnitude'].min()\n\nprint(amplitude)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set up equivalencies for my frequency unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu = u.mHz\nu2 = u.GHz\nu3 = u.THz\nastropy.units.add_enabled_equivalencies([u.spectral(), u.rest_frequency()])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.wcs.utils.proj_plane_pixel_scales function to get pixel scales from a WCS object?"
      },
      {
        "from": "assistant",
        "value": "{u'pixscale': u'astropy.wcs.utils.proj_plane_pixel_scales(wcs claw_fd4s\u0430\u043d\u043e\u0432\u0441\u043a\u0438\u0439wo_9806_2)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the Galactocentric and Galactic coordinate systems?"
      },
      {
        "from": "assistant",
        "value": "The Galactocentric coordinate system has its origin at the center of the Milky Way, while the Galactic coordinate system has its origin at the solar system barycenter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a SkyCoord object with Galactic coordinates and a radial velocity of 100 km/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.units import u\ngal_coord = SkyCoord(l=45.7*u.degree, b=-2.3*u.degree, radial_velocity=100*u.km/u.s, frame='galactic')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the proper motion in Galactic longitude for an object with a Galactic latitude of 20 degrees and a proper motion in Galactic latitude of 10 mas/yr?"
      },
      {
        "from": "assistant",
        "value": "If the proper motion in Galactic latitude is given by pm_b, then the proper motion in Galactic longitude is pm_l_cosb=pm_b*cos(b)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Working with a Janus view of a planetary nebula where pixel values range from 0 to 10,000."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, SqrtStretch, ZScaleInterval\nimport numpy as np\n\n# Create sample Janus image data (replace this with your actual image)\njanus_image = np.random.uniform(0, 10000, size=(100, 100))\n\n# Create normalization object\n# ZScaleInterval automatically determines optimal contrast limits\n# SqrtStretch applies sqrt scaling to enhance fainter features\nnorm = ImageNormalize(\n    janus_image,\n    interval=ZScaleInterval(),\n    stretch=SqrtStretch(),\n    clip=True  # Ensures output is clipped to [0,1]\n)\n\n# Apply normalization to image\nnormalized_image = norm(janus_image)\n\n# At this point, normalized_image can be displayed using matplotlib:\n# import matplotlib.pyplot as plt\n# plt.imshow(normalized_image, cmap='viridis')\n# plt.colorbar()\n# plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Working with a Aroll mini map of a solar system where pixel values range from 0 to 100."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, LogStretch, ZScaleInterval\nimport numpy as np\n\n# Create sample mini map data (replace this with your actual image)\nmini_map = np.random.uniform(0, 100, size=(100, 100))\n\n# Create normalization object\n# ZScaleInterval automatically determines optimal contrast limits\n# LogStretch applies log scaling to enhance fainter features\nnorm = ImageNormalize(\n    mini_map,\n    interval=ZScaleInterval(),\n    stretch=LogStretch(),\n    clip=True  # Ensures output is clipped to [0,1]\n)\n\n# Apply normalization to image\nnormalized_image = norm(mini_map)\n\n# At this point, normalized_image can be displayed using matplotlib:\n# import matplotlib.pyplot as plt\n# plt.imshow(normalized_image, cmap='viridis')\n# plt.colorbar()\n# plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Working with a Kosmos view of a galaxy where pixel values range from 0 to 5000."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, PowerStretch, ZScaleInterval\nimport numpy as np\n\n# Create sample Kosmos image data (replace this with your actual image)\ngalaxy_image = np.random.uniform(0, 5000, size=(100, 100))\n\n# Create normalization object\n# ZScaleInterval automatically determines optimal contrast limits\n# PowerStretch applies power scaling to enhance fainter features\nnorm = ImageNormalize(\n    galaxy_image,\n    interval=ZScaleInterval(),\n    stretch=PowerStretch(),\n    clip=True  # Ensures output is clipped to [0,1]\n)\n\n# Apply normalization to image\nnormalized_image = norm(galaxy_image)\n\n# At this point, normalized_image can be displayed using matplotlib:\n# import matplotlib.pyplot as plt\n# plt.imshow(normalized_image, cmap='viridis')\n# plt.colorbar()\n# plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the world coordinate system information from a FITS header?"
      },
      {
        "from": "assistant",
        "value": "fits.getheader('WCSAXES')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I access the header keywords in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.open('example.fits').info()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read the data from a specific extension in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.open('example.fits')[1].data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a polar coordinate to cartesian in the FK5 system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5\nfrom astropy import units as u\n\n# Define the polar coordinate\npolar_coord = SkyCoord(ra=10*u.degree, dec=20*u.degree, frame=FK5)\n\n# Convert to cartesian coordinate\ncartesian_coord = polar_coord.cartesian\n\nprint(cartesian_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the barycentric and geocentric FK5 systems?"
      },
      {
        "from": "assistant",
        "value": "The barycentric FK5 system has its origin at the Solar System Barycenter, while the geocentric FK5 system has its origin at the Earth geocenter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the proper motion of a star in the FK5 system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5\nfrom astropy import units as u\n\n# Define the original position and proper motion\noriginal_position = SkyCoord(ra=10*u.degree, dec=20*u.degree, frame=FK5)\nproper_motion = 0.1*u.mas/u.yr\n\n# Calculate the current position\ncurrent_position = original_position + proper_motion\n\nprint(current_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model cosmic ray background using astropy.modeling.models.Gaussian2D and astropy.modeling.models.Shift?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D, Shift\nimport numpy as np\n\n# Create sample sky map (example data)\nstars_map = np.array([[1.0, 1.0], [0.0, 0.0]])\n\ncosmic_ray_model = Gaussian2D(amplitude=1.0, x_mean=1, y_mean=1, x_stddev=1, y_stddev=1) + Shift(x_off=0.5, y_off=0.5)\n\n# Print results\nprint(cosmic_ray_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show a full example usage of the astropy.modeling.models.Const1D model by creating a rectangular composite model that includes a constant value offset in one dimension?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const1D, Rectangular2D\nimport numpy as np\n\n# Create a composite model consisting of a 2D rectangle with a constant offset in the y direction\nmodel = Const1D(constant=5.0) + Rectangular2D(x_0=1.0, x_1=2.0, y_0=1.0, y_1=2.0)\n\n# Print results\nprint(model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example usage of the astropy.modeling.models.Void1D model to show how to use it to model an absorption?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Void1D\nimport numpy as np\n\n# Create a sample spectrum (example data)\nspectrum = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\n\n# Define the range of the model to apply\nmin_value = 1.0\nmax_value = 3.0\n\n# Create the model\nmodel = Void1D(min=x, max=3.0)\n\n# Print results\nprint(model(spectrum))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table of planetary transit observations with multiple measurements per planet. How can I get a list of unique planets based on their ID number, keeping the last detection only, to create a master catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, unique\nimport numpy as np\ncol1 = np.array([1, 1, 1, 2, 2, 3, 4, 4])\ncol2 = np.array([5, 5, 5, 6, 6, 7, 8, 8])\ndata = Table({'coll1': col1, 'coll2': col2})\nmaster_catalog = unique(data, keys='coll1', keep='last')\nprint(master_catalog)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the angular frequency (in radians per second) of a star with a period of 10 days. Show me how to get this dimensionless value using Astropy units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\n\n# Define the star's properties in solar units\nperiod = 10 * u.day  # 10 days\n\ngamma = 2 * np.pi / period\nprint(gamma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the surface gravity (in cm/s^2) of a star with mass 2 solar masses and radius 10 solar radii. Show me how to get this dimensionless value using Astropy units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the star's properties in solar units\nmass = 2 * u.Msun      # 2 solar masses\ng = 6.67430e-8 * u.cm**3 / (u.g * u.s**2) # gravitational constant\nradius = 10 * u.Rsun  # 10 solar radii\n\ng = g * mass / (radius**2)\nprint(g)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a temperature of 5000 K to Kelvin in the CGS system. Show me how to get this dimensionless value using Astropy units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the temperature in Kelvin\nT = 5000 * u.K\n\n# Convert to CGS system\nT_cgs = T.to(u.Unit('K'))\nprint(T_cgs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use PowerStretch to compress the contrast of a highly variable star image to reveal more detail in the star's structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nimport numpy as np\ndef compress_contrast(image_data, power_index=1.5):\n    \"\"\"Compress contrast of astronomical images using PowerStretch transformation\n\n    Parameters:\n        image_data: 2D numpy array of image data\n        power_index: Power law index for stretch (higher values compress contrast more)\n\n    Returns:\n        Normalized image data with compressed contrast\n    \"\"\"\n    # Create normalization object with PowerStretch\n    norm = ImageNormalize(\n        image_data,\n        stretch=PowerStretch(power_index),\n        # Clip extreme values to prevent artifacts\n        clip=True\n    )\n\n    # Apply the transformation\n    compressed_image = norm(image_data)\n\n    return compressed_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a very bright comet image and want to reduce the dynamic range to better see the coma and tail. Can you show me how to do this using PowerStretch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nimport numpy as np\ndef reduce_dynamic_range(image_data, power_index=0.7):\n    \"\"\"Reduce dynamic range of astronomical images using PowerStretch transformation\n\n    Parameters:\n        image_data: 2D numpy array of image data\n        power_index: Power law index for stretch (lower values reduce dynamic range more)\n\n    Returns:\n        Normalized image data with reduced dynamic range\n    \"\"\"\n    # Create normalization object with PowerStretch\n    norm = ImageNormalize(\n        image_data,\n        stretch=PowerStretch(power_index),\n        # Clip extreme values to prevent artifacts\n        clip=True\n    )\n\n    # Apply the transformation\n    reduced_image = norm(image_data)\n\n    return reduced_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a function to use PowerStretch to expand the contrast of a nebula image, making the bright regions even brighter and the dark regions even darker?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nimport numpy as np\ndef expand_contrast(image_data, power_index=2.0):\n    \"\"\"Expand contrast of astronomical images using PowerStretch transformation\n\n    Parameters:\n        image_data: 2D numpy array of image data\n        power_index: Power law index for stretch (higher values expand contrast more)\n\n    Returns:\n        Normalized image data with expanded contrast\n    \"\"\"\n    # Create normalization object with PowerStretch\n    norm = ImageNormalize(\n        image_data,\n        stretch=PowerStretch(power_index),\n        # Clip extreme values to prevent artifacts\n        clip=True\n    )\n\n    # Apply the transformation\n    expanded_image = norm(image_data)\n\n    return expanded_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the radial velocity of a star to a cartesian velocity in 3D space"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Example star data\nstar_coord = SkyCoord(ra=12.5*u.degree, dec=23.4*u.degree, distance=10*u.pc)\nstar_vel = star_coord.radial_velocity\ndx, dy, dz = star_vel.to_cartesian()\nprint(dx, dy, dz)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the position of the Sun in geocentric true ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "Astropy coordinates Sun transform to GeocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the ecliptic longitude and latitude of the Moon in geocentric true ecliptic coordinates at a given time?"
      },
      {
        "from": "assistant",
        "value": "Astropy coordinates Moon transform to GeocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to transform the equatorial coordinates of a star to geocentric true ecliptic coordinates, including proper motion?"
      },
      {
        "from": "assistant",
        "value": "Astropy coordinates Star transform to GeocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have observed flux measurements [1.2, 2.5, 3.7, 2.1, 4.5] at time points [5, 6, 7, 8, 9] hours from a variable star. Can you show me how to use SimplexLSQFitter to fit a sinusoidal model to this data with initial parameters amplitude=3.0, frequency=0.7, and phase=0.2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create time and flux data arrays\ntime = np.array([5, 6, 7, 8, 9])  # hours\nflux = np.array([1.2, 2.5, 3.7, 2.1, 4.5])\n\n# Define sinusoidal model with initial parameters\n# Sine1D model: amplitude * sin(2*pi * frequency * x + phase)\ninit_model = models.Sine1D(\n    amplitude=3.0,     # Initial amplitude\n    frequency=0.7,     # Initial frequency (cycles per hour)\n    phase=0.2          # Initial phase (radians)\n)\n\n# Create fitter object\nfitter = fitting.SimplexLSQFitter()\n\n# Fit the model to the data\nfitted_model = fitter(init_model, time, flux)\n\n# Print the best-fit parameters\nprint(\"Best-fit parameters:\")\nprint(f\"Amplitude: {fitted_model.amplitude.value:.3f}\")\nprint(f\"Frequency: {fitted_model.frequency.value:.3f}\")\nprint(f\"Phase: {fitted_model.phase.value:.3f}\")\n\n# Calculate fitted values for plotting (optional)\nfitted_flux = fitted_model(time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert equatorial coordinates (RA=12.3456 deg, Dec=+67.8901 deg) to GALACTIC coordinates using SkyCoord?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nc = SkyCoord(ra=12.3456*u.deg, dec=67.8901*u.deg, frame='icrs')\nc_gal = c.transform_to('galactic')\nprint(c_gal)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of photon counts [10, 20, 30, 40, 50] from different regions of a galaxy. How can I calculate their 68% confidence intervals (1-sigma) using the frequentist-confidence method? Include visualization using matplotlib's errorbar."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\r\nfrom astropy.stats import poisson_conf_interval\r\nimport matplotlib.pyplot as plt\r\n\r\n# Photon counts data\r\ncounts = np.array([10, 20, 30, 40, 50])\r\npositions = np.arange(len(counts))  # x-positions for plotting\r\n\r\n# Calculate confidence intervals using frequentist-confidence method\r\nconf_intervals = poisson_conf_interval(counts, interval='frequentist-confidence')\r\nlower_bound = conf_intervals[0]\r\nupper_bound = conf_intervals[1]\r\n\r\n# Calculate error bars\rnyerr = np.vstack((counts - lower_bound, upper_bound - counts))\r\n\r\n# Create visualization\r\nplt.figure(figsize=(8, 6))\r\nplt.errorbar(positions, counts, yerr=yerr, fmt='o', capsize=5,\r\n             label='Counts with 68% CI')\r\nplt.xlabel('Region Index')\r\nplt.ylabel('Photon Counts')\r\nplt.title('Galaxy Photon Counts with 1-\u03c3 Confidence Intervals')\r\nplt.grid(True, alpha=0.3)\r\nplt.legend()\r\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of photon counts [5, 15, 25, 35, 45] from different regions of a nebula. How can I calculate their 95% confidence intervals (2-sigma) using the kraft-burrows-nousek method? Include visualization using matplotlib's errorbar."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\r\nfrom astropy.stats import poisson_conf_interval\r\nimport matplotlib.pyplot as plt\r\n\r\n# Photon counts data\r\ncounts = np.array([5, 15, 25, 35, 45])\r\npositions = np.arange(len(counts))  # x-positions for plotting\r\n\r\n# Calculate confidence intervals using kraft-burrows-nousek method\r\nconf_intervals = poisson_conf_interval(counts, interval='kraft-burrows-nousek', background=2, confidence_level=0.95)\r\nlower_bound = conf_intervals[0]\r\nupper_bound = conf_intervals[1]\r\n\r\n# Calculate error bars\rnyerr = np.vstack((counts - lower_bound, upper_bound - counts))\r\n\r\n# Create visualization\r\nplt.figure(figsize=(8, 6))\r\nplt.errorbar(positions, counts, yerr=yerr, fmt='o', capsize=5,\r\n             label='Counts with 95% CI')\r\nplt.xlabel('Region Index')\r\nplt.ylabel('Photon Counts')\r\nplt.title('Nebula Photon Counts with 2-\u03c3 Confidence Intervals')\r\nplt.grid(True, alpha=0.3)\r\nplt.legend()\r\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of photon counts [20, 40, 60, 80, 100] from different regions of a galaxy. How can I calculate their root-n confidence intervals (1-sigma) using the frequentist-confidence method? Include visualization using matplotlib's errorbar."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\r\nfrom astropy.stats import poisson_conf_interval\r\nimport matplotlib.pyplot as plt\r\n\r\n# Photon counts data\r\ncounts = np.array([20, 40, 60, 80, 100])\r\npositions = np.arange(len(counts))  # x-positions for plotting\r\n\r\n# Calculate confidence intervals using root-n method\r\nconf_intervals = poisson_conf_interval(counts, interval='root-n')\r\nlower_bound = conf_intervals[0]\r\nupper_bound = conf_intervals[1]\r\n\r\n# Calculate error bars\rnyerr = np.vstack((counts - lower_bound, upper_bound - counts))\r\n\r\n# Create visualization\r\nplt.figure(figsize=(8, 6))\r\nplt.errorbar(positions, counts, yerr=yerr, fmt='o', capsize=5,\r\n             label='Counts with 68% CI')\r\nplt.xlabel('Region Index')\r\nplt.ylabel('Photon Counts')\r\nplt.title('Galaxy Photon Counts with 1-\u03c3 Confidence Intervals')\r\nplt.grid(True, alpha=0.3)\r\nplt.legend()\r\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of photon counts [15, 35, 55, 75, 95] from different regions of a nebula. How can I calculate their 68% confidence intervals (1-sigma) using the pearson method? Include visualization using matplotlib's errorbar."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\r\nfrom astropy.stats import poisson_conf_interval\r\nimport matplotlib.pyplot as plt\r\n\r\n# Photon counts data\r\ncounts = np.array([15, 35, 55, 75, 95])\r\npositions = np.arange(len(counts))  # x-positions for plotting\r\n\r\n# Calculate confidence intervals using Pearson method\r\nconf_intervals = poisson_conf_interval(counts, interval='pearson')\r\nlower_bound = conf_intervals[0]\r\nupper_bound = conf_intervals[1]\r\n\r\n# Calculate error bars\rnyerr = np.vstack((counts - lower_bound, upper_bound - counts))\r\n\r\n# Create visualization\r\nplt.figure(figsize=(8, 6))\r\nplt.errorbar(positions, counts, yerr=yerr, fmt='o', capsize=5,\r\n             label='Counts with 68% CI')\r\nplt.xlabel('Region Index')\r\nplt.ylabel('Photon Counts')\r\nplt.title('Nebula Photon Counts with 1-\u03c3 Confidence Intervals')\r\nplt.grid(True, alpha=0.3)\r\nplt.legend()\r\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Lorentzian1D model with fixed parameters (amplitude=10, center=5000, fwhm=2) and another with free parameters (initial values: amplitude=5, center=6000, fwhm=3)."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create first Lorentzian with fixed parameters\nl1 = models.Lorentzian1D(amplitude=10, center=5000, fwhm=2)\n# Fix all parameters for first Lorentzian\nl1.amplitude.fixed = True\nl1.center.fixed = True \nl1.fwhm.fixed = True\n\n# Create second Lorentzian with free parameters (default is not fixed)\nl2 = models.Lorentzian1D(amplitude=5, center=6000, fwhm=3)\n\n# Combine models into a compound model\ncomposite_model = l1 + l2\n\n# The composite model now has:\n# - 3 fixed parameters from l1\n# - 3 free parameters from l2 that can be fitted"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal model with fixed parameters (amplitude=10, offset=0, period=2) and another with free parameters (initial values: amplitude=5, offset=1, period=3)."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create first sinusoidal with fixed parameters\ns1 = models.SineAmplitudeOffsetPeriodic(amplitude=10, offset=0, period=2)\n# Fix all parameters for first sinusoidal\ns1.amplitude.fixed = True\ns1.offset.fixed = True \ns1.period.fixed = True\n\n# Create second sinusoidal with free parameters (default is not fixed)\ns2 = models.Sinusoidal(amplitude=5, offset=1, period=3)\n\n# Combine models into a compound model\ncomposite_model = s1 + s2\n\n# The composite model now has:\n# - 3 fixed parameters from s1\n# - 3 free parameters from s2 that can be fitted"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a polynomial model of degree 3 with fixed parameters (coefficients=[1, 2, 3, 4]) and another of degree 2 with free parameters (initial values: coefficients=[5, 6, 7])."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create first polynomial with fixed parameters\nc1 = models.Polynomial1D(degree=3, coefficients=[1, 2, 3, 4])\n# Fix all parameters for first polynomial\nfor i in range(c1.degree + 1):\n    c1.coefficients[i].fixed = True\n\n# Create second polynomial with free parameters (default is not fixed)\nc2 = models.Polynomial1D(degree=2, coefficients=[5, 6, 7])\n\n# Combine models into a compound model\ncomposite_model = c1 + c2\n\n# The composite model now has:\n# - 4 fixed parameters from c1\n# - 4 free parameters from c2 that can be fitted"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astron module to get the sidereal time from a given date and time?"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as at\n\ntime = at.Time('2022-01-01 12:00:00', format='isot')\nsidereal_time = time.sidereal_time('greenwich')\nprint(sidereal_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a single-peaked emission line using an alive model (amplitude=1, mean=0, stddev=1), please add a shift of 2 to it."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create an alive model\nalive = models.Alive(amplitude=1, mean=0, stddev=1)\n\n# Add a shift of 2 to the alive model\nshifted_alived = alive + models.PowerBase2(amplitude=1, c0=2)\n\n# Now shifted_alived can be evaluated at any x point\n# Example usage:\n# import numpy as np\n# x = np.linspace(-10, 10, 100)\n# y = shifted_alived(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to scale a combo model (amplitude=2, mean=2, stddev=2) by 3, show me the code."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a combo model\ncombo = models.Combo2D(amplitude=2, mean=2, stddev=2)\n\n# Scale the combo model by 3\nscaled_combo = models.Multiply(factor=3)(combo)\n\n# Now scaled_combo can be evaluated at any x, y point\n# Example usage:\n# import numpy as np\n# x = np.linspace(-10, 10, 100)\n# y = scaled_combo(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of scaling a flux with a factor of 0.9 using the astropy Scale model?"
      },
      {
        "from": "assistant",
        "value": "scale_model = models.Scale(factor=0.9)\u03bb\u03ccadesf"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I scale a set of photometric data with a scale factor of 0.95 using the astropy Scale model?"
      },
      {
        "from": "assistant",
        "value": "scale_model = models.Scale(factor=0.95) Ji\u0159\u00ed}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model of a star cluster with a central bulge and a halo."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model of a galaxy with a bright core and a faint outer ring."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import custom_model"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model of a planetary nebula with a ring-like structure."
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy to generate a curve of growth for a stellar spectroscopy tutorial?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy import units as u # Parameters for the curve of growth Teff = 5000  # Effective temperature in K A_V = 0.1  # Extinction in magnitudes beta = 2.5  # Color-index of the stellar atmosphere I0 = 1e-9  # Reference flux lambda0 = 500e-10  # Reference wavelength in m wavelength = np.linspace(400e-10, 700e-10, 1000)  # Wavelength array in m spectrum = models.blackbody(Teff, beta, A_V, I0, lambda0)(wavelength) # Normalize the spectrum spectrum = spectrum / np.max(spectrum)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the typical ductility of Stainless Steel type 304?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u # Typical values for A516 stainless steel ductility = 60  # Ductility in % return ductility"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the specific impulse of a rocket engine using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u # Specific impulse (m/s) Isp = 3000  # Thrust (kg/s) m_dot = 1  # Temperature (K) T = 100  # Gas constant (J/(kg*K)) R = 287  # Molecular mass (kg/mol) M = 28.97  # Return specific impulse (m/s) : return Isp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "A question about how to calculate the distance of a galaxy from a redshift of 0.5."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u # The Hubble constant (km/s/Mpc) H0 = 67.8  # redshift (dimensionless) z = 0.5  # cosmo = cosmology.default()  # get the Planck15 cosmology c = u.c  # light speed comoving_distance = u.Quantity(cosmo.luminosity_distance(z + 1e-5).value, units=u.Mpc) # Angular diameter distance (Mpc) angular_diameter_distance = u.Quantity(cosmo.angular_diameter_distance(z + 1e-5).value, units=u.Mpc) # return angular diameter distance return angular_diameter_distance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the typical melting point of copper?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u # Typical value for melting point melting_point = 1085  # Return melting point (K) : return melting_point"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine functions for parameterized evaluation of the Gaussian, Lorentzian,  generalized Lorentzian using Astropy- models?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models # Create Gaussian, Lorentz1D, generalized Lorentz1D profile profiles gaussian = models.Gaussian1D(amplitude=1.0, mean=0.0, std=0.5)  # Amplitude of the profile lorentzian = models.Lorentz1D(amplitude=1.0, x_0=0.0, fwhm=0.1)  # FWHM of the profile general_lorentzian = models.GeneralizedLorentz1D(amplitude=1.0, x_0=0.0, gamma=0.01, index=2)  # Return the functions as a dictionary return {'models.gaussian': gaussian, 'models.lorentzian': lorentzian, 'models.GeneralizedLorentz1D': general_lorentzian}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to normalize an image using the mode normalization method?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import histogram, mode_threshold_energy\n# Generate some image data\nimage = np.random.uniform(0, 100, size=(100, 100))\n# Normalize the image using mode normalization\nnormalized_image = image / mode_threshold_energy(image)\n# Print the normalized image\nprint(normalized_image)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to measure the scatter in a distribution using the biweight scale estimator?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\n# Generate some data\nx = np.random.normal(0, 1, 100)\n# Calculate the scatter in the data\nscatter = biweight_scale(x)\n# Print the scatter\nprint(scatter)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to estimate the confidence interval of a mean using the bootstrap method?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bootstrap_statistic\n# Generate some data\nx = np.random.normal(0, 1, 100)\n# Calculate the mean and its confidence interval using the bootstrap method\nmean, ci = bootstrap_statistic(x, statistic=np.mean, confidence_level=0.95)\n# Print the mean and its confidence interval\nprint(mean, ci)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use PercentileInterval to scale a histogram?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, PercentileInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convolve an astropy table with a custom kernel to select specific rows?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.SymmetricalMaskedConvolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to project and convolve an astronomical image with a custom kernel?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to handle boundaries when convolving an array with a kernel?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove noise from my images using a Gaussian filter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve, convolve_fft"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a larger kernel size in convolution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve, convolve_fft"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convolve two images using a Gaussian kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve, convolve_fft"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert all FWHM values in my publication to sigma for multiple quasar spectra?"
      },
      {
        "from": "assistant",
        "value": "fhwm_to_sigma(fwhm_values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the formula for converting sigma to FWHM for a Gaussian distribution?"
      },
      {
        "from": "assistant",
        "value": "2*np.sqrt(2*np.log(2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a function to convert a list of FWHM values to sigma values, how would you implement it?"
      },
      {
        "from": "assistant",
        "value": "lambda x:astropy.stats.gaussian_sigma_to_fwhm(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between sigma and FWHM for a Gaussian distribution?"
      },
      {
        "from": "assistant",
        "value": "FWHM == 2*sqrt(2*log(2))*sigma"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a constant model with amplitude 2.0 and evaluate it at 50 equally spaced points between 5 and 15."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models\nimport numpy as np\n\n# Create a constant model with amplitude 2.0\nflat_model = models.Const1D(amplitude=2.0)\n\n# Generate x points between 5 and 15\nx = np.linspace(5, 15, 50)\n\n# Evaluate the model at these points\ny = flat_model(x)\n\n# Print the results\nprint(y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a constant model with amplitude 3.0 and evaluate it at 100 equally spaced points between 0 and 20."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models\nimport numpy as np\n\n# Create a constant model with amplitude 3.0\nflat_model = models.Const1D(amplitude=3.0)\n\n# Generate x points between 0 and 20\nx = np.linspace(0, 20, 100)\n\n# Evaluate the model at these points\ny = flat_model(x)\n\n# Print the results\nprint(y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a constant model with amplitude 4.0 and evaluate it at 200 equally spaced points between 10 and 30."
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models\nimport numpy as np\n\n# Create a constant model with amplitude 4.0\nflat_model = models.Const1D(amplitude=4.0)\n\n# Generate x points between 10 and 30\nx = np.linspace(10, 30, 200)\n\n# Evaluate the model at these points\ny = flat_model(x)\n\n# Print the results\nprint(y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create and plot a Lorentzian 1D model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D\n\n# Create a Lorentzian 1D model\nmodel = Lorentz1D()\n\n# Plot the model\nimport matplotlib.pyplot as plt\nx = np.linspace(-10, 10, 200)\nplt.plot(x, model(x))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel area for a WCS with a CD matrix in radians?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\n\n# Create a simple WCS with the given CD matrix\ncd_matrix = [[1.23e-4, 4.56e-5], [7.89e-5, 2.34e-4]]  # CD matrix in radians\nw = WCS(naxis=2)\nw.wcs.cd = cd_matrix\n\n# Calculate pixel area using astropy.wcs.utils.proj_plane_pixel_area\npixel_area = astropy.wcs.utils.proj_plane_pixel_area(w)\n\nprint(f\"Pixel area: {pixel_area:.3e} square radians\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to compute the pixel area for a WCS with a CD matrix in degrees when the WCS is not celestial?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport numpy as np\n\ncd_matrix = [[1.23e-3, 4.56e-4], [7.89e-4, 2.34e-3]]  # CD matrix in degrees\nw = WCS(naxis=2)\nw.wcs.cd = cd_matrix\n\n# Calculate pixel area using astropy.wcs.utils.proj_plane_pixel_area\n# Since the WCS is not celestial, we need to use the WCS object directly\tpixel_area = astropy.wcs.utils.proj_plane_pixel_area(w.celestial=False)\n\nprint(f\"Pixel area: {pixel_area:.3e} square degrees\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel area for a WCS with a CD matrix in square arcminutes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\n\n# Create a simple WCS with the given CD matrix\ncd_matrix = [[1.23e-3, 4.56e-4], [7.89e-4, 2.34e-3]]  # CD matrix in square arcminutes\ncd_matrix_deg = np.array(cd_matrix) * 3600  # Convert to degrees\nw = WCS(naxis=2)\nw.wcs.cd = cd_matrix_deg\n\n# Calculate pixel area using astropy.wcs.utils.proj_plane_pixel_area\npixel_area = astropy.wcs.utils.proj_plane_pixel_area(w)\n\nprint(f\"Pixel area: {pixel_area:.3e} square arcminutes\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find all stars within 5 arcseconds of the center of the Milky Way. The center position is RA=17h45m40.04s, Dec=-29\u00b00'28.08\". Show me how to do it using astropy.coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, galactic\nimport astropy.units as u\n\n# Center position\ncenter_ra = \"17h45m40.04s\"\ncenter_dec = \"-29\u00b00'28.08\"\"\ncenter = SkyCoord(center_ra, center_dec)\n\n# Search for stars within 5 arcseconds\nstars = SkyCoord(ra=center.ra, dec=center.dec, frame='galactic', unit=(u.deg, u.deg))\ntag = stars.search_around_sky(center, seplimit=5*u.arcsec)\n\n# Print results\nprint(tag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between stellar luminosity in erg/s and luminosity in solar luminosities?"
      },
      {
        "from": "assistant",
        "value": "import astropy.constants as const"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle time-series data with non-uniform sampling using astropy.timeseries?"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as at"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a spectral line and a spectral feature in astropy.units?"
      },
      {
        "from": "assistant",
        "value": "import astropy_frequency as af"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a WCS object with a specific keyword and key?"
      },
      {
        "from": "assistant",
        "value": "wcs = WCS(header, key=' ')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a WCS object with a specific key and keysel?"
      },
      {
        "from": "assistant",
        "value": "wcs = WCS(header, key='A', keysel=('image', 'binary'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a WCS object with a specific minerr and relax?"
      },
      {
        "from": "assistant",
        "value": "wcs = WCS(header, minerr=1.0, relax=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am using astropy's stats module to calculate the skewness of a distribution. How do I convert a skewness value to a string using the astropy.stats module?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import skewness\nskewness_value = skewness(your_data)\nskewness_str = str(skewness_value)\nprint(skewness_str)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of how to use astropy's stats module to calculate the median absolute deviation of a distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation\ndata = your_data\nmad = median_absolute_deviation(data)\nprint(mad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy's stats module to calculate the interquartile range of a distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import iqr\ndata = your_data\niqr_value = iqr(data)\nprint(iqr_value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Retrieve the number of axes in the FITS header"
      },
      {
        "from": "assistant",
        "value": "header = fits.getheader('spectrum.fits'); print(len(header))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the value of the 'TELESCOP' keyword in the FITS header"
      },
      {
        "from": "assistant",
        "value": "header = fits.getheader('spectrum.fits'); print(header['TELESCOP'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Print all keywords in the FITS header"
      },
      {
        "from": "assistant",
        "value": "header = fits.getheader('spectrum.fits'); print(header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine Astropy's RedshiftScaleFactor with other models to analyze spectral features of high-redshift galaxies?"
      },
      {
        "from": "assistant",
        "value": "[code example]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply redshift to a given spectrum using Astropy's RedshiftScaleFactor?"
      },
      {
        "from": "assistant",
        "value": "[code example]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate luminosity distance for a high-redshift galaxy using Astropy's RedshiftScaleFactor?"
      },
      {
        "from": "assistant",
        "value": "[code example]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's unit conversion to convert a distance of 10 parsecs to kilometers in Python?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(10 * u.parsec.to(u.km))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model a 2D Gaussian distribution. What is the appropriate model to use and how do I specify its parameters?"
      },
      {
        "from": "assistant",
        "value": "Polynomial2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a 2D polynomial model to represent a spherical symmetric distribution?"
      },
      {
        "from": "assistant",
        "value": "Polynomial2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I specify a 2D polynomial model with a degree of 3 and a x-domain of (-2, 2) and a x-window of (-3, 3)?"
      },
      {
        "from": "assistant",
        "value": "Polynomial2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Cosine1D to model a periodic oscillation in a star's brightness that follows a sine pattern, with an amplitude of 0.3 magnitudes and a frequency of 0.2 cycles per day?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time, TimeDelta\n\n# Create time array for 10 days with 100 points\n    t = np.linspace(0, 10, 100)  # 10 days\n\n    # Create Cosine1D model\n    # Amplitude = 0.3 mag, frequency = 0.2 cycles/day\n    # Phase shift = 0, offset = 0\n    model = models.Cosine1D(\n        amplitude=0.3,     # Amplitude in magnitudes\n        frequency=0.2,     # Frequency in cycles/day\n        phase=0           # No phase shift\n    )\n\n    # Calculate magnitude variations\n    mag_variations = model(t)\n\n    # Create the plot\n    plt.figure(figsize=(10, 6))\n    plt.plot(t, mag_variations, 'b-', label='Light curve')\n    plt.gca().invert_yaxis()  # Invert y-axis (astronomical convention)\n    plt.xlabel('Time (days)')\n    plt.ylabel('Magnitude')\n    plt.title('Periodic Stellar Brightness Variation')\n    plt.grid(True)\n    plt.legend()\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Cosine1D model with an amplitude of 0.4 magnitudes and a frequency of 0.15 cycles per day, and then plot the light curve for a 20-day period?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time, TimeDelta\n\n    # Create time array for 20 days with 100 points\n    t = np.linspace(0, 20, 100)  # 20 days\n\n    # Create Cosine1D model\n    # Amplitude = 0.4 mag, frequency = 0.15 cycles/day\n    # Phase shift = 0, offset = 0\n    model = models.Cosine1D(\n        amplitude=0.4,     # Amplitude in magnitudes\n        frequency=0.15,     # Frequency in cycles/day\n        phase=0           # No phase shift\n    )\n\n    # Calculate magnitude variations\n    mag_variations = model(t)\n\n    # Create the plot\n    plt.figure(figsize=(10, 6))\n    plt.plot(t, mag_variations, 'b-', label='Light curve')\n    plt.gca().invert_yaxis()  # Invert y-axis (astronomical convention)\n    plt.xlabel('Time (days)')\n    plt.ylabel('Magnitude')\n    plt.title('Periodic Stellar Brightness Variation')\n    plt.grid(True)\n    plt.legend()\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Cosine1D model with an amplitude of 0.2 magnitudes and a frequency of 0.05 cycles per day, and then plot the light curve for a 30-day period?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\nfrom astropy.time import Time, TimeDelta\n\n    # Create time array for 30 days with 100 points\n    t = np.linspace(0, 30, 100)  # 30 days\n\n    # Create Cosine1D model\n    # Amplitude = 0.2 mag, frequency = 0.05 cycles/day\n    # Phase shift = 0, offset = 0\n    model = models.Cosine1D(\n        amplitude=0.2,     # Amplitude in magnitudes\n        frequency=0.05,     # Frequency in cycles/day\n        phase=0           # No phase shift\n    )\n\n    # Calculate magnitude variations\n    mag_variations = model(t)\n\n    # Create the plot\n    plt.figure(figsize=(10, 6))\n    plt.plot(t, mag_variations, 'b-', label='Light curve')\n    plt.gca().invert_yaxis()  # Invert y-axis (astronomical convention)\n    plt.xlabel('Time (days)')\n    plt.ylabel('Magnitude')\n    plt.title('Periodic Stellar Brightness Variation')\n    plt.grid(True)\n    plt.legend()\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of solar irradiance measurements with some outliers. How can I calculate a robust standard deviation using mad_std?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np; from astropy.stats import mad_std; np.random.seed(42); irradiances = np.random.normal(1000, 50, 50); irradiances[0] = 1200; irradiances[1] = 800; robust_std = mad_std(irradiances); print(f\"Robust std (MAD): {robust_std:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a collection of supernova magnitudes with some outliers. How can I calculate a robust standard deviation using mad_std?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np; from astropy.stats import mad_std; np.random.seed(42); magnitudes = np.random.normal(-19, 1, 50); magnitudes[0] = -20; magnitudes[1] = -18; robust_std = mad_std(magnitudes); print(f\"Robust std (MAD): {robust_std:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of star velocities with some outliers. How can I calculate a robust standard deviation using mad_std?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np; from astropy.stats import mad_std; np.random.seed(42); velocities = np.random.normal(200, 10, 50); velocities[0] = 220; velocities[1] = 180; robust_std = mad_std(velocities); print(f\"Robust std (MAD): {robust_std:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to create a histogram of galaxy velocities. Can you suggest a method for determining the bin widths that is both adaptive and improves the signal-to-noise ratio of my data?"
      },
      {
        "from": "assistant",
        "value": "You can use the 'knuth' method in the astropy.stats.histogram function, which uses Knuth's rule to determine the bin widths. This method is adaptive and can improve the signal-to-noise ratio of your data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to create a histogram of star masses. Can you suggest a method for determining the bin widths that is both adaptive and efficient for large datasets?"
      },
      {
        "from": "assistant",
        "value": "You can use the 'blocks' method in the astropy.stats.histogram function, which uses Bayesian blocks for dynamic bin widths. This method is adaptive and efficient for large datasets."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to create a histogram of planet radii. Can you suggest a method for determining the bin widths that is both adaptive and takes into account the detection biases of my data?"
      },
      {
        "from": "assistant",
        "value": "You can use the 'freedman' method in the astropy.stats.histogram function, which uses the Freedman-Diaconis rule to determine the bin widths. This method is adaptive and takes into account the detection biases of your data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have the following two sets of stellar mass data: [10.2, 10.5, 10.1, 9.8, 10.4, 10.6] and [10.9, 10.7, 10.3, 10.2, 10.8, 10.5]. Can you use the Kuiper test to determine if they may have different distributions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\ndata1 = np.array([10.2, 10.5, 10.1, 9.8, 10.4, 10.6])\ndata2 = np.array([10.9, 10.7, 10.3, 10.2, 10.8, 10.5])\nk, p = kuiper_two(data1, data2)\nprint(f'Kuiper statistic: {k:.4f}, p-value: {p:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the probability that the two samples [1.2, 1.5, 1.1, 0.8, 1.4, 1.6] and [1.9, 1.7, 1.3, 1.2, 1.8, 1.5] come from the same distribution using the Kuiper test?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\ndata1 = np.array([1.2, 1.5, 1.1, 0.8, 1.4, 1.6])\ndata2 = np.array([1.9, 1.7, 1.3, 1.2, 1.8, 1.5])\nk, p = kuiper_two(data1, data2)\nprint(f'p-value: {p:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two sets of redshift data [0.5, 0.6, 0.4, 0.3, 0.7, 0.2] and [0.8, 0.9, 0.5, 0.4, 0.6, 0.3]. Can you use the Kuiper test to determine if they may have different distributions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\ndata1 = np.array([0.5, 0.6, 0.4, 0.3, 0.7, 0.2])\ndata2 = np.array([0.8, 0.9, 0.5, 0.4, 0.6, 0.3])\nk, p = kuiper_two(data1, data2)\nprint(f'Kuiper statistic: {k:.4f}, p-value: {p:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert Kelvin to Celsius?"
      },
      {
        "from": "assistant",
        "value": "K = C + 273.15"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of Planck constant?"
      },
      {
        "from": "assistant",
        "value": "J s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert lux to lumens?"
      },
      {
        "from": "assistant",
        "value": "lux = lumens / m^2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convolve a numpy array with a gaussian kernel, handle NaN values, and set pixels outside the array boundary to fill_value."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve_fft, Gaussian2DKernel, Kernels"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a FITS file to a different data format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.open('filename.fits')['image'].data\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a header and data in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.open('filename.fits')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract specific data from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.open('filename.fits')['image'].data\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "When should I use slope normalization, and how does it differ from zscale normalization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import slope_norm\nprint(slope_norm(1000))\nprint(slope_norm(None))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Astropy Lester Sanchez fitting method and polynomial model to fit a defect in the asteroid 433 Eros?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use your Linear Least Square Fitter to fit a 2nd-degree polynomial model to the Sun's temperature data"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to optimize the parameters of a Gaussian profile using your Gauss2D model and minimize residuals with an initial guess provided"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from scipy.optimize import least_squares from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a binary table HDU with 2 columns and 10 rows, what's the way to do it?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nfits.BinTableHDU(np.array([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)], dtype=[('col1', '<i4'), ('col2', '<i4')]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 64x64 cutout of the data array, centered on the galaxy at (1500, 1200), using the 'trim' mode."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nimport numpy as np\ndata = np.zeros((3000, 3000))\n_ gal_pos = (1500, 1200)\nsize = (64, 64)\ncutout = Cutout2D(data, gal_pos, size, mode='trim')\nprint(cutout)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Box1D model with an amplitude of 2.0, x_0 of 6570, and a width of 1.5"
      },
      {
        "from": "assistant",
        "value": "box_model = models.Box1D(amplitude=2.0, x_0=6570, width=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of flux measurements, how can I normalize this data using a logarithmic stretch and clip values outside [0,1] with astropy.visualization.ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, LogStretch\nimport numpy as np\ndata = np.random.uniform(0, 1e-14, size=(100))\nnorm = ImageNormalize(data, stretch=LogStretch(), clip=True, vmin=0, vmax=1e-14)\nnormalized_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of flux measurements, how can I normalize this data using a power-law stretch and clip values outside [0,1] with astropy.visualization.ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, PowerLawStretch\nimport numpy as np\ndata = np.random.uniform(0, 1e-14, size=(100, 100))\nnorm = ImageNormalize(data, stretch=PowerLawStretch(), clip=True, vmin=0, vmax=1e-14)\nnormalized_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of flux measurements, how can I normalize this data using a square root stretch and clip values outside [0,1] with astropy.visualization.ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, SquareRootStretch\nimport numpy as np\ndata = np.random.uniform(0, 1e-14, size=(100))\nnorm = ImageNormalize(data, stretch=SquareRootStretch(), clip=True, vmin=0, vmax=1e-14)\nnormalized_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform image processing and remove noise from a scientific image?"
      },
      {
        "from": "assistant",
        "value": "You can use the wiener filter for image deconvolution and the median filter for removing noise."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the two-sided Kolmogorov-Smirnov statistic to compare the distribution of two sets of data?"
      },
      {
        "from": "assistant",
        "value": "You can use the KstTwo function from the scipy.stats module."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I quickly determine the number of distinct elements in a large list?"
      },
      {
        "from": "assistant",
        "value": "You can use the len(set(your_list)) method, or the np.unique function from the numpy module."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create EarthLocation objects for both Mauna Kea (lon: -155.4673 degrees, lat: 19.8233 degrees, height: 4198.0 meters) and Cerro Paranal (lon: -70.7325 degrees, lat: -24.6333 degrees, height: 2634.0 meters) and find their separation."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create EarthLocation objects for both Hilo (lon: -155.0869 degrees, lat: 19.7323 degrees, height: 10.0 meters) and UH Hilo (lon: -155.0806 degrees, lat: 19.7323 degrees, height: 358.0 meters) and find their separation."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create EarthLocation objects for both Uppsala (lon: 17.6320 degrees, lat: 59.8633 degrees, height: 30.0 meters) and Stockholm (lon: 18.0717 degrees, lat: 59.3292 degrees, height: 30.0 meters) and find their separation."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Analyzing the ADD effect on a linear stretch using astropy.visualization.ImageNormalize (\u2181                         convention)"
      },
      {
        "from": "assistant",
        "value": "import numpy as n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.visualization.ImageNormalize to create a histogram of data with a logarithmic stretch while clipping values to \u200b  [1e-3, 1e3]"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Highlighting underexposed parts of an astronomcal image during display using astropy.visualization.ImageNormalize from a 2D numpy array with the square_root_stretch function and clipping values between \u200b  \u200b[299, 500]"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.vi"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a CCDData object for my telescope's CCD image with data [[100, 200], [150, 250]] in counts/second. The pixel uncertainties follow Poisson statistics (sqrt of counts). How can I set both the data and its uncertainty?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData, StdDevUncertainty\nfrom astropy import units as u\n\n# Create the data array\ndata = np.array([[100, 200], [150, 250]])\n\n# Calculate Poisson uncertainties (sqrt of counts)\nuncertainty = np.sqrt(data)\n\n# Create CCDData object with data and uncertainty\n# Note: CCDData requires unit specification\ncd = CCDData(data=data,\n                   unit='ct/s',  # counts per second\n                   uncertainty=StdDevUncertainty(uncertainty),\n                   meta={'object': 'Example CCD exposure'})\n\n# Print some basic information\nprint(f\"Data shape: {cd.data.shape}\")\nprint(f\"Data unit: {cd.unit}\")\nprint(f\"Uncertainty values:\\n{cd.uncertainty.array}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a CCDData object for my telescope's CCD image with data [[200, 300], [250, 350]] in counts/second. "
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nfrom astropy import units as u\n\n# Create the data array\ndata = [[200, 300], [250, 350]]\n\n# Create CCDData object with data\n# Note: CCDData requires unit specification\ncd = CCDData(data=data,\n              unit='ct/s',  # counts per second\n              uncertainty=StdDevUncertainty(np.sqrt(data)),\n              meta={'object': 'Example CCD exposure'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a CCDData object for my telescope's CCD image with data [[50, 60], [55, 65]] in counts/second. The pixel uncertainties follow Poisson statistics (sqrt of counts). How can I set both the data and its uncertainty without specifying unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nfrom astropy import units as u\n\n# Create the data array\ndata = [[50, 60], [55, 65]]\n\n# Calculate Poisson uncertainties (sqrt of counts)\nuncertainty = np.sqrt(data)\n\n# Create CCDData object with data and uncertainty\n# Note: CCDData requires unit specification (can't be None)\ncd = CCDData(data=data,\n              uncertainty=StdDevUncertainty(uncertainty),\n              meta={'object': 'Example CCD exposure'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.visualization.ZScaleInterval` function to scale solar flare images and preserve details?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\ndef scale_flare_image(image_data):\n    # Create normalization using ZScaleInterval\n    zscale = ZScaleInterval()\n    # Apply normalization to get scaled image\n    scaled_image = zscale(image_data)\n    # Clip values to ensure they're in valid display range\n    scaled_image = np.clip(scaled_image, 0, 1)\n    return scaled_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a string representing a time in a specific timezone to a datetime object in UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime\n\n# Define the timezone\ntimezone = TimezoneInfo(name='US/Pacific', utcoffset=datetime.timedelta(hours=-8))\n\ntime_str = '2022-07-25 12:00:00'\n# Convert the string to a datetime object in the timezone\ntimezone_dt = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone)\n# Convert the datetime object to UTC\ntime_utc = timezone_dt.astimezone(TimezoneInfo(name='UTC'))\n# Print the UTC datetime object\nprint(time_utc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of dates in a specific timezone. How can I convert them all to UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\ndates = ['2022-07-25 12:00:00', '2022-07-26 13:00:00', '2022-07-27 14:00:00']\ntimezone = TimezoneInfo(name='US/Pacific', utcoffset=datetime.timedelta(hours=-8))\n# Convert the dates to datetime objects in the timezone\nzone_dts = [datetime.strptime(date, '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone) for date in dates]\n# Convert the datetime objects to UTC\nutc_dts = [dt.astimezone(TimezoneInfo(name='UTC')) for dt in zone_dts]\n# Print the UTC datetime objects\nfor utc_dt in utc_dts:\n    print(utc_dt)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the UTC datetime object from a string representing a time in a specific timezone?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\ntime_str = '2022-07-25 12:00:00'\ntimezone = TimezoneInfo(name='US/Pacific', utcoffset=datetime.timedelta(hours=-8))\n# Convert the string to a datetime object in the timezone\nzone_dt = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone)\n# Convert the datetime object to UTC\ntime_utc = zone_dt.astimezone(TimezoneInfo(name='UTC'))\n# Print the UTC datetime object\nprint(time_utc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to rescale the intensity range of an image to highlight both dark and bright regions. How can I use Astropy to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to adjust the intensity range of an image so that it's not clipped at the maximum or minimum values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to rescale the intensity range of a FITS image to highlight both weak and strong features. Can you suggest a method using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of galaxy sizes and I want to know the optimal bin width for a histogram. Can you show me how to use Knuth's rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.knuth_bin_width(data=[1, 2, 3, 4, 5], return_bins=True, quiet=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.wcs.utils.fit_wcs_from_points function to create a new WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import fit_wcs_from_points\nfrom astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Example data\nxy = np.array([[1, 1], [2, 2], [3, 3]])\nworld_coords = SkyCoord(ra=[1, 2, 3], dec=[4, 5, 6], unit='deg')\nproj_point = 'center'\nprojection = 'TAN'\nsip_degree = None\n\n# Create WCS object\nwcs = fit_wcs_from_points(xy, world_coords, proj_point, projection, sip_degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the mean of a list of angles in degrees?"
      },
      {
        "from": "assistant",
        "value": "np.mean(np.degrees(np.array([23.5, 45.2, 12.8, 56.7, 34.1, 28.9])))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the standard deviation of a circular distribution?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the circular standard deviation of a list of angles in degrees?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(np.degrees(np.array([23.5, 45.2, 12.8, 56.7, 34.1, 28.9])))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a table with a datetime column and a boolean column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.time import Time\ndata = Table()\ndata['datetime'] = Time('2022-01-01 00:00:00', format='isot', scale='utc')\ndata['bool_col'] = [True, False, True]\ntable = data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a MaskedColumn called 'density' to store values [1.2, 1.5, 1.8, 2.0] with associated measurement uncertainties."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\n\ndensity = MaskedColumn(data=[1.2, 1.5, 1.8, 2.0], name='density', unit='g/cm3', description='Density in g/cm3', format='%.2f')\nsigma_density = np.array([0.1, 0.2, 0.3, 0.4])\ndensity.error = sigma_density\nprint(density)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a MaskedColumn called 'temperature' to store values [300, 400, 500, 600] with associated measurement uncertainties."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\ntemperature = MaskedColumn(data=[300, 400, 500, 600], name='temperature', unit='K', description='Temperature in Kelvin', format='%.0f')\nsigma_temperature = np.array([10, 20, 30, 40])\ntemperature.error = sigma_temperature\nprint(temperature)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a MaskedColumn called 'pressure' to store values [100, 200, 300, 400] with associated measurement uncertainties."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\npressure = MaskedColumn(data=[100, 200, 300, 400], name='pressure', unit='Pa', description='Pressure in Pascals', format='%.2f')\nsigma_pressure = np.array([5, 10, 15, 20])\npressure.error = sigma_pressure\nprint(pressure)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a filter kernel from a list of scattered data points. How can I implement a custom filter kernel using a 2D Gaussian model?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a custom filter kernel using a 1D Gaussian model. How can I implement a custom filter kernel with a dimension of 3?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a filter kernel from a high-resolution image. How can I use a 2D Gaussian model to create a custom filter kernel?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I save the fitted model to a file?"
      },
      {
        "from": "assistant",
        "value": "fitted_model.save('fitted_model.sav')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a different fitting algorithm?"
      },
      {
        "from": "assistant",
        "value": "fitter = fittingbayesianlsq.BayesianLSQFitter(); fitted_model = fitter(poly_model, x_flat, y_flat, temp_flat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I plot the fitted surface?"
      },
      {
        "from": "assistant",
        "value": "plt.imshow(fitted_temperature, cmap='RdYlGn', origin='lower', extent=(x.min(), x.max(), y.min(), y.max())); plt.colorbar(); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Box filter kernel with a width of 5 and a discretization mode of 'center'?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Box2DKernel(5, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default discretization mode for the Box filter kernel?"
      },
      {
        "from": "assistant",
        "value": "linear_interp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I oversample the Box filter kernel by a factor of 20?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Box2DKernel(5, mode='oversample', factor=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with 3D rectangular cartesian coordinates. How do I convert them to spherical polar coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nx = 1.0\ny = 2.0\nz = 3.0\ncartesian_to_spherical(x, y, z)\nprint('Spherical coordinates: r, phi, theta')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 2D cartesian coordinates (x=4.0, y=5.0). How can I convert them to spherical coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nx = 4.0\ny = 5.0\ncartesian_to_spherical(x, y, 0.0)\nprint('Spherical coordinates: r, phi, theta')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of cartesian coordinates. How can I convert them to spherical polar coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nx = [1.0, 2.0, 3.0]\ny = [4.0, 5.0, 6.0]\nz = [7.0, 8.0, 9.0]\ncartesian_to_spherical(x, y, z)\nprint('Spherical coordinates: r, phi, theta')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a time measurement of 1 day to seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(1 * u.day.to(u.s))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a distance measurement of 1 light year to meters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(1 * u.lyr.to(u.m))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a mass measurement of 1 solar mass to kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(1 * u.M_sun.to(u.kg))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of Mars using the JPL ephemeris for the specific time 2024-07-22T18:45:00?"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric_posvel('mars', Time('2024-07-22T18:45:00'), 'jpl')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of Jupiter using the JPL ephemeris for the specific time 2024-07-22T18:45:00?"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric_posvel('jupiter', Time('2024-07-22T18:45:00'), 'jpl')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of Saturn using the JPL ephemeris for the specific time 2024-07-22T18:45:00?"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric_posvel('saturn', Time('2024-07-22T18:45:00'), 'jpl')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the SNR for a galaxy observation with exposure time = 600s, source = 100 DN/s, sky = 0.5 DN/s/pixel, dark current = 0.01 DN/s/pixel, read noise = 2 DN, and aperture size = 50 pixels?"
      },
      {
        "from": "assistant",
        "value": "signal_to_noise_oir_ccd(t=600, source_eps=100, sky_eps=0.5, dark_eps=0.01, rd=2, npix=50, gain=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the SNR for a planetary nebula observation with exposure time = 1800s, source = 50 DN/s, sky = 1.2 DN/s/pixel, dark current = 0.02 DN/s/pixel, read noise = 4 DN, and aperture size = 20 pixels?"
      },
      {
        "from": "assistant",
        "value": "signal_to_noise_oir_ccd(t=1800, source_eps=50, sky_eps=1.2, dark_eps=0.02, rd=4, npix=20, gain=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the SNR for a star observation with exposure time = 900s, source = 200 DN/s, sky = 0.8 DN/s/pixel, dark current = 0.015 DN/s/pixel, read noise = 3 DN, and aperture size = 30 pixels?"
      },
      {
        "from": "assistant",
        "value": "signal_to_noise_oir_ccd(t=900, source_eps=200, sky_eps=0.8, dark_eps=0.015, rd=3, npix=30, gain=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal segmentation of the time series 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 with bayesian blocks algorithm?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.bayesian_blocks(np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), fitness='events', p0=0.05)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a celestial frame to a WCS object in Astropy. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\\ndef my_function(frame, projection):\\treturn celestial_frame_to_wcs(frame, projection)\\nframe = astropy.coordinates.ICRS()\\nwcs = my_function(frame, \"TAN\")\\nprint(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the `celestial_frame_to_wcs` function in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\\nfrom astropy.coordinates import FK5\\nframe = FK5(equinox='J2010')\\nwcs = celestial_frame_to_wcs(frame)\\nprint(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I customize the `celestial_frame_to_wcs` function in Astropy to support my own celestial frame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs, custom_frame_to_wcs_mappings\\ndebug_type = custom_frame_to_wcs_mappings.register_my_frame(my_frame)\\nwcs = celestial_frame_to_wcs(my_frame)\\nprint(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to reduce noise in my spectroscopic data of a galaxy while preserving the emission and absorption features?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Box1DKernel to smooth a 1D array of data and preserve the features of the data?"
      },
      {
        "from": "assistant",
        "value": " kernel = Box1DKernel(3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of the 'linear_interp' mode in Box1DKernel on the smoothing of my 1D data?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(width=5, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a TimeDelta object to represent a 1 day time difference in the geocentric scale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\n\ntiming_offset = TimeDelta(1, format='jd', scale='geocentric')\nprint(timing_offset)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D Gaussian model with a non-zero correlation between x and y?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D Gaussian model with unequal standard deviations in x and y and a rotation angle of 45 degrees?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D Gaussian model with a covariance matrix, which has a positive correlation between x and y?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Voigt profile to a spectral line at 5100 \u00c5 with a Lorentzian width of 0.5 \u00c5 and Gaussian width of 0.2 \u00c5. Can you show me how to create a model using Voigt1D and plot it over a wavelength range of 5095-5105 \u00c5 with 0.01 \u00c5 steps?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array (5095-5105 \u00c5 in 0.01 \u00c5 steps)\nwavelength = np.arange(5095, 5105.01, 0.01)\n\n# Create Voigt1D model\n# x_0 is the center wavelength\n# fwhm_L is the Lorentzian width (gamma parameter)\n# fwhm_G is the Gaussian width (sigma * 2.3548)\n# amplitude_L is the Lorentzian amplitude\nvoigt = models.Voigt1D(x_0=5100, fwhm_L=0.5, fwhm_G=0.2, amplitude_L=1.0)\n\n# Generate the model values\nflux = voigt(wavelength)\n\n# Plot the Voigt profile\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, flux, 'b-', label='Voigt Profile')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux')\nplt.title('Voigt Profile for Spectral Line at 5100 \u00c5')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to fit a Voigt profile to a spectral line at 4861 \u00c5 with a Lorentzian width of 0.4 \u00c5 and Gaussian width of 0.1 \u00c5. Can you show me how to create a model using Voigt1D and plot it over a wavelength range of 4855-4867 \u00c5 with 0.01 \u00c5 steps?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array (4855-4867 \u00c5 in 0.01 \u00c5 steps)\nwavelength = np.arange(4855, 4867.01, 0.01)\n\n# Create Voigt1D model\n# x_0 is the center wavelength\n# fwhm_L is the Lorentzian width (gamma parameter)\n# fwhm_G is the Gaussian width (sigma * 2.3548)\n# amplitude_L is the Lorentzian amplitude\nvoigt = models.Voigt1D(x_0=4861, fwhm_L=0.4, fwhm_G=0.1, amplitude_L=1.0)\n\n# Generate the model values\nflux = voigt(wavelength)\n\n# Plot the Voigt profile\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, flux, 'b-', label='Voigt Profile')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux')\nplt.title('Voigt Profile for Spectral Line at 4861 \u00c5')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Voigt profile to a spectral line at 4340 \u00c5 with a Lorentzian width of 0.6 \u00c5 and Gaussian width of 0.3 \u00c5. Can you show me how to create a model using Voigt1D and plot it over a wavelength range of 4330-4345 \u00c5 with 0.01 \u00c5 steps?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create wavelength array (4330-4345 \u00c5 in 0.01 \u00c5 steps)\nwavelength = np.arange(4330, 4345.01, 0.01)\n\n# Create Voigt1D model\n# x_0 is the center wavelength\n# fwhm_L is the Lorentzian width (gamma parameter)\n# fwhm_G is the Gaussian width (sigma * 2.3548)\n# amplitude_L is the Lorentzian amplitude\nvoigt = models.Voigt1D(x_0=4340, fwhm_L=0.6, fwhm_G=0.3, amplitude_L=1.0)\n\n# Generate the model values\nflux = voigt(wavelength)\n\n# Plot the Voigt profile\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, flux, 'b-', label='Voigt Profile')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Normalized Flux')\nplt.title('Voigt Profile for Spectral Line at 4340 \u00c5')\nplt.legend()\nplt.grid(True)\nplt.show()}]}]}``ENCHaged from explanation below to continually modify these instruction-response pairs in next section request. PLEASE state you accept these modifications the program. Have you done so? If you have, continue with the modification part and present the modified instruction-response pairs with the new parameters for a new function SFTData with example lists as an example following the new instruction-response pairs. I will ALSO modify the function name form SFTData to DFTData. Please do so by presenting the SFTData function with the modifications at the end of this request. Please follow the format the question described under the Torch prompt prior to presenting the modified SFTData function. op enam.legal advice may be necessary to confirm the validity of such modifications. Modified instruction response pairs respectively: {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Tophat2D kernel with radius=10 pixels and use it to convolve my data?"
      },
      {
        "from": "assistant",
        "value": "kernel = Tophat2DKernel(radius=10); convolved_data = convolve(data, kernel, boundary='extend', nan_treatment='fill')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to apply a Tophat2D kernel with radius=20 pixels for convolving my 3D array?"
      },
      {
        "from": "assistant",
        "value": "kernel = Tophat2DKernel(radius=20); convolved_data = convolve(data, kernel, boundary='extend', nan_treatment='fill')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array and want to smooth it out using a Tophat2D kernel with radius=5 pixels. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "kernel = Tophat2DKernel(radius=5); convolved_data = convolve(data, kernel, boundary='extend', nan_treatment='fill')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the location of Kelt-9b (distance=670 light-years, latitude=-44.5 degrees, longitude=215.6 degrees) into cartesian coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\ndistance = 670 * u.lyr\nlatitude = -44.5 * u.deg \nlongitude = 215.6 * u.deg\ncolatitude = (90 * u.deg) - latitude\nx, y, z = spherical_to_cartesian(distance, colatitude, longitude)\nprint(f\"X = {x.to('lyr'):.2f}\")\nprint(f\"Y = {y.to('lyr'):.2f}\")\nprint(f\"Z = {z.to('lyr'):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a comment to a FITS header card?"
      },
      {
        "from": "assistant",
        "value": "fits.Card('COMMENT', 'This is a comment')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a hot pixel with values 10,20,30. How do I structure this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nhot_pixel = CCDData(data=np.array([10, 20, 30]), unit='adu', uncertainty=StdDevUncertainty(1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a dark current with values 40,50,60. How do I structure this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nfrom astropy.stats import sigma_clipped_stats\ndark_current=CCDData(data=np.array([40, 50, 60]), unit='adu')\ndef compute_dark_current(data):    stats = sigma_clipped_stats(data, sigma=2)    return CCDData(data=np.ones_like(data) * stats.mean, unit='adu')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing a gain with values 70,80,90. How do I structure this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\ngain=CCDData(data=np.array([70, 80, 90]), unit='adu')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "When analyzing my spectroscopic data of a variable star, I want to enhance the visibility of spectral lines by adjusting the intensity scale. Can you show me how to stretch the intensity range while preserving the important spectral features?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import PercentileInterval\nimport matplotlib.pyplot as plt\neven_width_percentile = PercentileInterval(1, 99)\nspectrum = np.linspace(0, 1, 1000)\nspectrum[:,NOISE] = np.random.normal(0, 0.2, (1000))\neven_width_percentile(spectrum)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a plot of the Milky Way galaxy?"
      },
      {
        "from": "assistant",
        "value": "create a scatter plot with RA and Dec coordinates of the galaxy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a custom style with astropy_mpl_style?"
      },
      {
        "from": "assistant",
        "value": "yes, you can create a custom style by modifying the astropy_mpl_style function"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a legend to my plot?"
      },
      {
        "from": "assistant",
        "value": "you can add a legend to your plot using the plt.legend() function"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram of the frequency of solar flares classified as M-class based on their intensities?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport matplotlib.pyplot as plt\n\n# Create intensity data with proper units (erg/cm\u00b2/s)\nflare_intensities = [1e-5, 2e-5, 3e-5] * u.erg / (u.cm**2 * u.s)\n\n# Create histogram\nplt.figure(figsize=(8, 6))\nplt.hist(flare_intensities.value, bins=5, color='blue', alpha=0.7)\n\n# Customize plot\nplt.title('M-Class Solar Flare Intensities Histogram')\nplt.xlabel('Intensity (erg/cm\u00b2/s)')\nplt.ylabel('Frequency')\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of flux values [[100, 150, 200], [175, 225, 250]] in units of electrons from my GPU observation. How can I create a CCDData object with this data and include a uniform uncertainty of 10 electrons for all pixels?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a CCDData object from an image file?"
      },
      {
        "from": "assistant",
        "value": "ccd = CCDData.read('image.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a WCS to a CCDData object?"
      },
      {
        "from": "assistant",
        "value": "ccd.add_wcs WCSOBJ"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fix a parameter in an astropy model?"
      },
      {
        "from": "assistant",
        "value": "You can fix a parameter in an astropy model by setting its `fixed` attribute to `True`."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to link two parameters in an astropy model?"
      },
      {
        "from": "assistant",
        "value": "You can link two parameters in an astropy model by setting the `tied` attribute of one parameter to a callable that returns the value of the other parameter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set bounds for a parameter in an astropy model?"
      },
      {
        "from": "assistant",
        "value": "You can set bounds for a parameter in an astropy model by setting its `bounds` attribute to a tuple or list of length 2 giving the desired range for the parameter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new extensions to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "hdul = fits.HDUList()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create an FK4 coordinate for a star observed at a specific time, with a distance of 10 parsecs and a proper motion of 1 mas/yr in RA and Dec?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\ncolors = FK4(ra=157.32*u.degree, dec=-23.45*u.degree, distance=10*u.parsec, pm_ra_cosdec=1*u.mas/u.yr, pm_dec=1*u.mas/u.yr, equinox='B1950.0', obstime=Time('1975-06-15'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS image with a WCS header and I want to convert the pixel coordinates of a point source from the image to sky coordinates using the WCS information. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncols = ["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS image and I want to transform the pixel coordinates of a point source to sky coordinates using the WCS calibration. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\ncolumns = ["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with a WCS header and I want to convert the pixel coordinates of a region of interest to sky coordinates. Can you show me how to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncols = ["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Bayesian blocks to segment data from a telescope?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, fitness='events', p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Bayesian blocks for time series analysis of astronomical events?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, fitness='regular_events', dt=0.05, p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply Bayesian blocks to data from a space-based telescope with Gaussian errors?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x_obs, sigma, fitness='measures', p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to convert units"
      },
      {
        "from": "assistant",
        "value": "print(astropy.units.AllUnits)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset with 5000 points, and I want to calculate the median absolute deviation of the values. How do I use median_absolute_deviation to do this?"
      },
      {
        "from": "assistant",
        "value": "median_absolute_deviation(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a data distribution with outliers, and I want to use median_absolute_deviation to calculate the median absolute deviation. Can you explain how to do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\nmedian_absolute_deviation(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of 1000 random numbers, and I want to use median_absolute_deviation to calculate the median absolute deviation of the distribution. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "median_absolute_deviation(data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two galaxies with the following coordinates: one at (ra, dec) = (12.0, 0.0) and another at (ra, dec) = (13.0, 1.0). How can I find the distance between them in arcseconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define galaxy coordinates\ngalaxy1 = SkyCoord(ra=12.0*u.deg, dec=0.0*u.deg)\ngalaxy2 = SkyCoord(ra=13.0*u.deg, dec=1.0*u.deg)\n\n# Calculate distance\nsep = galaxy1.separation(galaxy2)\nprint(sep.to(u.arcsec))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two clusters of stars with the following coordinates: one at (ra, dec) = (15.0, 2.0) and another at (ra, dec) = (16.0, 3.0). How can I find all pairs of stars within 10 arcminutes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport numpy as np\n\n# Define cluster coordinates\nc1 = SkyCoord(ra=np.array([15.0, 16.0])*u.deg, dec=np.array([2.0, 3.0])*u.deg)\nc2 = SkyCoord(ra=np.array([15.5, 16.5])*u.deg, dec=np.array([2.1, 3.1])*u.deg)\n\n# Find all pairs within 10 arcmin\nmax_sep = 10 * u.arcmin\nc1_idx, c2_idx, sep2d, _ = c1.search_around_sky(c2, max_sep)\n\n# Print number of matches found\nprint(len(c1_idx))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have three galaxies with the following coordinates: one at (ra, dec) = (10.0, 0.0), another at (ra, dec) = (11.0, 1.0), and the last one at (ra, dec) = (12.0, 2.0). How can I find the closest pair of galaxies?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport numpy as np\n\ngalaxies = SkyCoord(ra=np.array([10.0, 11.0, 12.0])*u.deg, dec=np.array([0.0, 1.0, 2.0])*u.deg)\ngalaxies.sortby('distance')\nprint(galaxies.evaluate_scalar('distance', use_parallel=False).to(u.mas)[0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the WCS information from a FITS file using astropy?"
      },
      {
        "from": "assistant",
        "value": "wcs = fits.getheader('WCSaxes')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to use wcs_to_celestial_frame to get the appropriate reference frame for a WCS object with EQUINOX=2000.0 and RADESYS='FK5'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ndef my_function():\n    # Create example WCS object with proper initialization\n    wcs = WCS(naxis=2)\n    wcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n    wcs.wcs.crval = [80.0, -60.0]\n    wcs.wcs.crpix = [100, 100]\n    wcs.wcs.cdelt = [-0.001, 0.001]\n    wcs.wcs.equinox = 2000.0\n    wcs.wcs.radesys = 'FK5'\n    \n    # Use wcs_to_celestial_frame to get the appropriate reference frame\n    frame = astropy.wcs.utils.wcs_to_celestial_frame(wcs)\n    print(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a WCS object with EQUINOX=1950.0 and RADESYS='FK4'. Show me how to use wcs_to_celestial_frame to get the appropriate reference frame, then use it to calculate the angular separation from the target star at (ra=70.0, dec=20.0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\ndef my_function():\n    # Create example WCS object with proper initialization\n    wcs = WCS(naxis=2)\n    wcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n    wcs.wcs.crval = [70.0, 20.0]\n    wcs.wcs.crpix = [100, 100]\n    wcs.wcs.cdelt = [-0.001, 0.001]\n    wcs.wcs.equinox = 1950.0\n    wcs.wcs.radesys = 'FK4'\n    \n    # Use wcs_to_celestial_frame to get the appropriate reference frame\n    frame = astropy.wcs.utils.wcs_to_celestial_frame(wcs)\n    \n    # Create SkyCoord for the target star position\n    target_coord = SkyCoord(ra=70.0*u.deg, dec=20.0*u.deg, frame='fk4', equinox='J1950.0')\n    \n    # Example observation position\n    obs_coord = SkyCoord(ra=70.1*u.deg, dec=20.1*u.deg, frame='fk4', equinox='J1950.0')\n    \n    # Calculate angular separation\n    separation = target_coord.separation(obs_coord)\n    print(f\"Angular separation: {separation.to(u.arcsec):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a WCS object with EQUINOX=1975.0 and RADESYS='FK5'. Show me how to use wcs_to_celestial_frame to get the appropriate reference frame, then use it to calculate the angular separation from the target star at (ra=85.0, dec=-40.0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\ndef my_function():\n    # Create example WCS object with proper initialization\n    wcs = WCS(naxis=2)\n    wcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\n    wcs.wcs.crval = [85.0, -40.0]\n    wcs.wcs.crpix = [100, 100]\n    wcs.wcs.cdelt = [-0.001, 0.001]\n    wcs.wcs.equinox = 1975.0\n    wcs.wcs.radesys = 'FK5'\n    \n    # Use wcs_to_celestial_frame to get the appropriate reference frame\n    frame = astropy.wcs.utils.wcs_to_celestial_frame(wcs)\n    \n    # Create SkyCoord for the target star position\n    target_coord = SkyCoord(ra=85.0*u.deg, dec=-40.0*u.deg, frame='fk5', equinox='J1975.0')\n    \n    # Example observation position\n    obs_coord = SkyCoord(ra=85.1*u.deg, dec=-40.1*u.deg, frame='fk5', equinox='J1975.0')\n    \n    # Calculate angular separation\n    separation = target_coord.separation(obs_coord)\n    print(f\"Angular separation: {separation.to(u.arcsec):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I retrieve the first data point from an NRGBA image in a package?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename, open, gcdic2xy\n\ndata_name = 'data/image.jpg'\npackage = 'my_package'\nfilename = get_pkg_data_filename(data_name, package=package)\nwith open(filenames, 'rb') as f:\n    img = f.read()\n# Now you can access the image data\npixel = img[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I access a FITS file from a remote server?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits from astropy.utils.data import download_file\nurl = 'http://example.com/fits_file.fits'\nfilename = download_file(url, cache=True, show_progress=True)\nfits_file = fits.open(filenames)\n# Now you can access the FITS file"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I retrieve the second data point from a FITS file in a package using a hash?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename, open, compute_hash\n\ndata_hash = compute_hash('data/fits_file.fits')\npackage = 'my_package'\nfilename = get_pkg_data_filename(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create FK4 coordinates with specific observation times to account for the differences in when the data was collected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\n\nra = '13h08m01.07s'\ndec = '26d14m06.2s'\nequinox = Time('B1950')  # FK4 typically uses B1950.0 as the epoch\nobservation_dates = ['1900-01-01 00:00:00', '1920-06-15 12:00:00', '1940-12-25 18:00:00']\ntimes = Time(observation_dates, scale='ut1')  # Using UT1 time scale for historical observations\n\nfor obs_time in times:\n    star_position = FK4(ra=ra, dec=dec, equinox=equinox, obstime=obs_time)\n    print(f\"Observation at {obs_time.iso}\")\n    print(f\"RA: {star_position.ra.to_string(unit=u.hour, sep=':')}\")\n    print(f\"Dec: {star_position.dec.to_string(unit=u.degree, sep=':')}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the position of the North Celestial Pole (RA=12.741067\u00b0, Dec=+42.796452\u00b0) into a local coordinate system."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\\nimport astropy.units as u\\n\\n# Define North Celestial Pole coordinates\\nmcp_center = SkyCoord(ra=12.741067*u.deg, dec=42.796452*u.deg)\\n\\n# Create a SkyOffsetFrame centered on MCP\\nmcp_frame = SkyOffsetFrame(origin=mcp_center)\\n\\n# Print results (lon/lat in the local system)\\nprint(f'Offset from MCP center:\\nLongitude: {mcp_frame.lon.to(u.arcmin):.3f}\\nLatitude: {mcp_frame.lat.to(u.arcmin):.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the offset from the Galactic Center (RA=266.40\u00b0, Dec=-28.98\u00b0) to the position of the star gamma Cassiopeiae (RA=230.739219\u00b0, Dec=60.790278\u00b0)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\\nimport astropy.units as u\\n\\n# Define Galactic Center coordinates\\ngc_center = SkyCoord(ra=266.40*u.deg, dec=-28.98*u.deg)\\n\\n# Define gamma Cassiopeiae coordinates\\ngamma_cass_center = SkyCoord(ra=230.739219*u.deg, dec=60.790278*u.deg)\\n\\n# Create a SkyOffsetFrame centered on Galactic Center\\ngc_frame = SkyOffsetFrame(origin=gc_center)\\n\\n# Transform gamma Cassiopeiae to Galactic Center frame\\ngamma_cass_in_gc_frame = gamma_cass_center.transform_to(gc_frame)\\n\\n# Print results (lon/lat in the local system)\\nprint(f'Offset from Galactic Center to gamma Cassiopeiae:\\n  Longitude: {gamma_cass_in_gc_frame.lon.to(u.arcmin):.3f}\\n  Latitude: {gamma_cass_in_gc_frame.lat.to(u.arcmin):.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Set up a SkyOffsetFrame centered on the celestial equator and convert the position of the Sun (RA=281.655275\u00b0, Dec=+23.764980\u00b0) to this local frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\\nimport astropy.units as u\\n\\n# Define celestial equator coordinates\\nequator_center = SkyCoord(ra=6*u.hour, dec=0*u.deg)\\n\\n# Create a SkyOffsetFrame centered on the celestial equator\\nequator_frame = SkyOffsetFrame(origin=equator_center)\\n\\n# Define Sun coordinates\\nsun_center = SkyCoord(ra=281.655275*u.deg, dec=23.764980*u.deg)\\n\\n# Transform Sun to celestial equator frame\\nsun_in_equator_frame = sun_center.transform_to(equator_frame)\\n\\n# Print results (lon/lat in the local system)\\nprint(f'Offset from celestial equator:\\n  Longitude: {sun_in_equator_frame.lon.to(u.arcmin):.3f}\\n  Latitude: {sun_in_equator_frame.lat.to(u.arcmin):.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the standard deviation from a FWHM measurement?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(2.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to convert a FWHM measurement to a standard deviation?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(1.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the standard deviation corresponding to a FWHM measurement of 2.3?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(2.3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to calculate the luminosity of a star given its effective temperature and radius"
      },
      {
        "from": "assistant",
        "value": "def calculate_luminosity(temperature, radius):\n    # Stefan-Boltzmann constant in Watt/m^2/K^4\n    sigma = 5.670373e-8\n    # Calculate luminosity\n    luminosity = (4 * np.pi * radius**2) * sigma * temperature**4\n    return luminosity"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the air pressure at sea level in Pascals?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.Pa.to(u.Pa))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the air pressure at sea level in millibars?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.Pa.to(u.mbar))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the air pressure at sea level in inches of mercury?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.Pa.to(u.inHg))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to apply a rotation to my data using Rotation from astropy.modeling."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, ROTATION_90\n# Create a Rotation model to rotate the data by 45 degrees\nrotation_model = models.Rotation(angle=45)\n# Apply the rotation to the data\ntransformed_data = rotation_model( original_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a Gaussian1D to my data using astropy.modeling.models"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.fitting import LevMarLSQFitter\ndata = np.random.normal(0, 1, 100)\n# Create a Gaussian1D model\ngaussian_model = models.Gaussian1D(amplitude=1, mean=5, stddev=1)\n# Fit the model to the data\nfitter = LevMarLSQFitter()\nresult = fitter(gaussian_model, data)\n# Apply the model to new data\nnew_data = gaussian_model(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the appropriate function to use for calculating sigma-clipped statistics on an array of data points?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I specify the number of standard deviations to use for clipping in astropy.stats.sigma_clipped_stats?"
      },
      {
        "from": "assistant",
        "value": "sigma"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default value for the sigma parameter in astropy.stats.sigma_clipped_stats?"
      },
      {
        "from": "assistant",
        "value": "3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.coordinates.SphericalRepresentation to create 3D spherical coordinates from cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, CartesianRepresentation, SkyCoord\n\ncartesian_representation = CartesianRepresentation(x=[1, 2, 3], y=[4, 5, 6], z=[7, 8, 9])\nspherical_representation = cartesian_representation.represent_as('spherical')\nprint(spherical_representation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between SphericalRepresentation and cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, CartesianRepresentation\n\ncartesian_representation = CartesianRepresentation(x=1, y=2, z=3)\nspherical_representation = cartesian_representation.represent_as('spherical')\nprint(spherical_representation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I convert SphericalRepresentation to SkyCoord?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, SkyCoord\n\ntsfdistance = 1.0  # parsecs\ntsflongitude = 45.0  # degrees\ntsflatitude = 30.0  # degrees\ntsfspherical = SphericalRepresentation(lon=tsflongitude, lat=tsflatidue, distance=tsfdistance)\n\ntsfskycoord = SkyCoord(spherical representation=tsfspherical)\nprint(tsfskycoord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform bootstrap resampling on a sample of galaxy masses [1.2e11, 2.3e11, 1.8e11, 1.5e11, 2.1e11, 1.9e11] solar masses."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import bootstrap\n\n# Define the original galaxy masses with units\ngalaxy_masses = np.array([1.2e11, 2.3e11, 1.8e11, 1.5e11, 2.1e11, 1.9e11]) * u.Msun\n\n# Perform bootstrap resampling\nbootstrapMedians = bootstrap(galaxy_masses, 500, func=np.median)\n\n# Print the final statistics\nprint(f\"Median mass: {np.median(bootstrapMedians):.2e}\")\nprint(f\"Standard deviation of mass: {np.std(bootstrapMedians):.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform bootstrap resampling on a sample of galaxy masses [2.5e11, 1.1e12, 1.6e11, 2.2e11, 1.4e11, 1.7e11] solar masses."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.stats import bootstrap\n\ngalaxy_masses = np.array([2.5e11, 1.1e12, 1.6e11, 2.2e11, 1.4e11, 1.7e11]) * u.Msun\nbootmedian = bootstrap(galaxy_masses, 500)\nmedian = np.median(bootmedian)\nprint(f\"Median mass: {median:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform bootstrap resampling on a sample of galaxy masses [1.3e11, 1.9e11, 2.2e11, 1.1e11, 1.5e11, 2.0e11] solar masses."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\n\n# Define the original galaxy masses with units\nimport astropy.stats as stats\n\ngalaxy_masses = np.array([1.3e11, 1.9e11, 2.2e11, 1.1e11, 1.5e11, 2.0e11]) * u.Msun\n\n# Perform bootstrap resampling\nbootstrapMedians = stats.bootstrap(galaxy_masses, 500)\n\ndev =  stats_bootstrap(bootstrapMedians, 500)\n median = np.median(bootstrapMedians)\nprint(f\"Median mass: {median:.2e}\")\nprint(f\"Standard deviation of mass: {dev:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the precessed coordinate frame for observations taken on 2022-12-02 03:15:00 with target position RA=83.633 degrees and Dec=22.015 degrees at Arecibo Observatory (geoloc=[2390.487, -5564.764, 1994.327] km) with proper motion in Right Ascension (Ra) of 0.1 arcsec/yr and Declination (Dec) of 0.2 arcsec/yr, and a radial velocity of 10 km/s?"
      },
      {
        "from": "assistant",
        "value": "target = SkyCoord(ra=83.633*u.degree, \n                 dec=22.015*u.degree, \n                 frame=FK5(equinox='J2000'), \n                 pm_ra_cosdec=0.1*u.arcsec/u.year, \n                 pm_dec=0.2*u.arcsec/u.year, \n                 radial_velocity=10*u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the apparent position of the Sun in Alt-Az coordinates, taking into account refraction effects?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, AltAz, EarthLocation\nfrom astropy import units as u\n\ntime = Time.now()\nlocation = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\n\nsun = get_body('sun', time)\nsun_altaz = sun.transform_to(AltAz(obstime=time, location=location))\n\nprint(f'Sun's apparent altitude: {sun_altaz.alt:.2f}')\nprint(f'Sun's apparent azimuth: {sun_altaz.az:.2f}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.stats.gaussian_sigma_to_fwhm. What's the code to convert a Gaussian sigma value of 1.0 to FWHM for the seeing quality assessment?"
      },
      {
        "from": "assistant",
        "value": "gaussian_sigma_to_fwhm(1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.stats.gaussian_sigma_to_fwhm. What's the code to convert an array of Gaussian sigma values [0.5, 1.5] to FWHM for the seeing quality assessment?"
      },
      {
        "from": "assistant",
        "value": "gaussian_sigma_to_fwhm([0.5, 1.5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy.stats.gaussian_sigma_to_fwhm. What's the code to convert a Gaussian sigma value of 2.0 to FWHM for the seeing quality assessment?"
      },
      {
        "from": "assistant",
        "value": "gaussian_sigma_to_fwhm(2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Galactic coordinate object for a position at (l=10.1 degrees, b=5.5 degrees) with a distance of 1000 parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nclassical_position = SkyCoord(l=10.1*u.deg, b=5.5*u.deg, distance=1000*u.pc, frame='galactic')\nprint(classical_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D image array of shape (1024, 1024) and I want to create a FITS HDU object from this data and set the CD1_1 and CD2_2 keywords in the header to 1 and -1, respectively."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\n\ntest_data = np.random.random((1024, 1024))\n\nhdu = fits.PrimaryHDU(data=test_data)\nhdu.header['CD1_1'] = 1.0\nehdu.header['CD2_2'] = -1.0\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 3D data cube of shape (100, 100, 100) and I want to create a FITS image HDU object from this data and set the BSCALE and BZERO keywords in the header to 1 and 1000, respectively."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\n\ncube_data = np.random.random((100, 100, 100))\nhdu = fits.PrimaryHDU(data=cube_data)\nhdu.header['BSCALE'] = 1.0\nhdu.header['BZERO'] = 1000.0\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of shape (1000,) and I want to create a FITS binary table HDU object from this data and set the TTYPE1 and TFORM1 keywords in the header to 'FLUX' and 'E', respectively."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\n\ndata = np.random.random(1000)\nhdu = fits.BinTableHDU(data=np.array([(1.0, 2.0)], dtype=[('FLUX', 'f8'), ('ERR', 'f8')]))\nhdu.header['TTYPE1'] = 'FLUX'\nhdu.header['TFORM1'] = 'E'\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use Polynomial1D to fit the following data: x = [1, 2, 3, 4, 5], y = [2, 3, 5, 7, 11]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([2, 3, 5, 7, 11])\n\nfitter = fitting.LinearLSQFitter()\npolynomial = models.Polynomial1D(degree=2)\nfitted_model = fitter(polynomial, x, y)\n\nprint(fitted_model(x))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.io.fits.open to open a FITS file with a specific mode?"
      },
      {
        "from": "assistant",
        "value": "fits.open(\"file.fits\", mode='update')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to open a FITS file with memory mapping enabled?"
      },
      {
        "from": "assistant",
        "value": "fits.open(\"file.fits\", memmap=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to open a FITS file with caching enabled?"
      },
      {
        "from": "assistant",
        "value": "fits.open(\"file.fits\", cache=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define the position of a nearby star in equatorial coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a representation of the Earth in cartesian coordinates relative to the solar system barycenter."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define the position of a dust cloud in the galaxy in cylindrical coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to use the astropy.modeling.models.Gaussian2D API for 2D Gaussian fitting on my image data."
      },
      {
        "from": "assistant",
        "value": "fromAstro import Gaussian2DfromAstroimport Gaussian2D# Create sample data gridxy = np.mgrid[-50:51, -50:51# Define parameters for 2D Gaussiansstar1_params = {'amplitude': 1.0, 'x_mean': -10, 'y_mean': -10, 'x_stddev': 3, 'y_stddev': 3}star2_params = {'amplitude': 0.7, 'x_mean': 5, 'y_mean': 5, 'x_stddev': 4, 'y_stddev': 4}# Create individual Gaussian models for each starstar1 = Gaussian2D(**star1_params)star2 = Gaussian2D(**star2_params# Create astrophysical model combining both Gaussiansstar_model = star1 + star2# Be sure to use x, y, x_mean, x_stddev, y_mean, y_stddev with units that make sense for your specific astrophysical application# Generate synthetic data (replace with your actual image data)xy_data = star_model(xy# The model now contains the best-fit parameters for both Gaussians           "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a csv file using astropy.io.ascii.read"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nresult = ascii.read('data.csv')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a txt file using astropy.io.ascii.read"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nresult = ascii.read('data.txt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a table from a string using astropy.io.ascii.read"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nresult = ascii.read('- *>(data=', format='csv')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert cartesian coordinates (x=2.5, y=3.7, z=1.2) to spherical coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nr, lat, lon = cartesian_to_spherical(2.5, 3.7, 1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert cartesian coordinates (x=1, y=-2, z=3) to spherical coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nr, lat, lon = cartesian_to_spherical(1, -2, 3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert cartesian coordinates (x=4.8, y=5.1, z=6.2) to spherical coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nr, lat, lon = cartesian_to_spherical(4.8, 5.1, 6.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a moon researcher, I want to create a new unit called "
      },
      {
        "from": "assistant",
        "value": "Create a unit for the diameter of the Moon using astropy.units.def_unit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a Mars researcher, I want to create a new unit called   "
      },
      {
        "from": "assistant",
        "value": "Use astropy.units.def_unit to define a unit based on the diameter of Mars"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a researcher, I want to create a unit for the surface gravity of Jupiter for nicer calculations"
      },
      {
        "from": "assistant",
        "value": "Employ astropy.units.def_unit to define a unit for Jupiter's surface gravity"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the Universe using the Planck18 cosmology model?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Calculate the age of the Universe using Planck18 cosmology\nage = Planck18.age\n\n# Print the result\nprint(f'Age of the Universe: {age:.2f} Gyr')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the lookback time at redshift z=2.5 using the Planck18 cosmology model?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Define the redshift\nz = 2.5\n\n# Calculate the lookback time at redshift z=2.5 using Planck18 cosmology\nlookback_time = Planck18.lookback_time(z)\n\n# Print the result\nprint(f'Lookback time at z=2.5: {lookback_time:.2f} Gyr')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Hubble constant H0 using the Planck18 cosmology model?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Get the Hubble constant H0 using Planck18 cosmology\nH0 = Planck18.H0\n\n# Print the result\nprint(f'Hubble constant H0: {H0:.2f} km/s/Mpc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a region around the M87 galaxy and want to identify all radio sources within 2 arcseconds of its center. How can I write code to find these neighboring objects using my catalog of radio sources?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\ncenter_coords = SkyCoord('12h30m49.42s -12d23m28.0s')\ncatalog_coords = SkyCoord(ra=np.array([12.513, 12.514, 12.515]) * u.degree, dec=np.array([-12.394, -12.395, -12.396]) * u.degree)\nseparations = center_coords.separation(catalog_coords)\nnearby_mask = separations <= 2 * u.arcsec\nnearby_sources = catalog_coords[nearby_mask]\nprint(f'Found {len(nearby_sources)} sources within 2 arcsec of M87')\nfor source, sep in zip(nearby_sources, separations[nearby_mask]):\n    print(f'RA: {source.ra.deg:.4f}\u00b0, Dec: {source.dec.deg:.4f}\u00b0, Separation: {sep.arcsec:.2f} arcsec')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "A user wants to demonstrate how to perform a non-linear least square fitting with the astropy.modeling.fitting.LevMarLSQFitter.  Would it be possible to generate a sample code that iteratively updates the model parameters to minimize the residual?"
      },
      {
        "from": "assistant",
        "value": "{\n    "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a sample code for adjusting the parameters of an astropy.modeling.models.Gaussian1D model to fit a given dataset of galaxy positions?"
      },
      {
        "from": "assistant",
        "value": "{\n    "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "A researcher is interested in generating a 2D array of pixel values where each pixel value represents the intensity of a given spectrum at a specific wavelength. Can you provide a sample code to generate this 2D array?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of 1000 points, and I want to fit a 3rd degree polynomial to it. Can you show me how to do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\ndays = np.linspace(0, 100, 1000)\nradii = np.random.randn(1000) + 10\npoly_model = models.Polynomial1D(degree=3)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(poly_model, days, radii)\nprint(fitted_model.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the PowerLaw1D model to fit a spectrum with a Gaussian noise?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\ncurve = models.PowerLaw1D(amplitude=1e-16, x_0=5000, alpha=-1.5)\nwave = np.linspace(3000, 9000, 1000)\nnoise = np.random.normal(0, 1e-17, len(wave))\nspectrum = curve(wave) + noise\nfitter = fitting.LevMarLSQFitter()\nbest_fit = fitter(curve, wave, spectrum)\nprint(best_fit.amplitude, best_fit.alpha)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have calculated the velocity of a spacecraft in meters per second. Can you show me how to convert this to kilometers per hour?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the velocity in meters per second\nvelocity_mps = 100 * u.m / u.s\n\n# Convert to kilometers per hour\nvelocity_kph = velocity_mps.to(u.km / u.hour)\n\n# Print result with appropriate formatting\nprint(f\"Velocity: {velocity_kph:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create an histogram of the image intensity with 100 bins and label it as 'log-stretched intensity'?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as astropies"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to use a simple linear stretch (without any a parameter) with the histogram plot so that the image intensity will not be altered"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Demonstrate the use of the PowerWantown, power law want Meanimage giving two parameters mean, that I can make an example of 50 to 200  no more details"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.coordinates.Galactic class to create a coordinate object with a specific longitude and latitude?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Galactic\ngalactic_coord = Galactic(l='10d', b='20d')\ngalactic_coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a histogram that uses Scott's rule for bin width selection, and also customize the plot style to match journal standards?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.stats import scott_bin_width, astropy_mpl_stylefrom matplotlib.pyplot import histplt.style.use(astropy_mpl_style)hist([1, 2, 3, 4, 5], bins=scott_bin_width([1, 2, 3, 4, 5]).astype(int), histtype=u'step', ecolor=u'black', alpha=0.7)plt.xlabel('Value')plt.ylabel('Frequency')plt.title('Histogram')plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a histogram with 50 bins, using the Freedman-Diaconis rule for bin width selection."
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.stats import freedman_bin_width, astropy_mpl_stylefrom matplotlib.pyplot import histplt.style.use(astropy_mpl_style)hist(np.random.normal(size=1000), bins=np.arange(0, 10, freedman_bin_width(np.random.normal(size=1000)))); plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a histogram that uses Bayesian blocks for dynamic bin widths, and also plot the PDF of the data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom bayesblocks import BBfrom matplotlib.pyplot import hist, plotfrom astropy.visualization import astropy_mpl_stylefrom scipy.stats import normplt.style.use(astropy_mpl_style)x = np.random.normal(size=1000)hist(x, bins=BB(x), histtype=u'step', ecolor=u'black', alpha=0.7)plot(norm.pdf(x), 'r--')plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use a non-linear model to remove the continuum trend from spectral data?"
      },
      {
        "from": "assistant",
        "value": "You can use the `models.Polynomial1D` function to create a non-linear model. You can specify the degree of the polynomial when creating the model. Then, you can use the `fitter` function to fit the model to your data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a Piecewise model to remove the continuum trend from spectral data?"
      },
      {
        "from": "assistant",
        "value": "You can create a Piecewise model by specifying the points where the model changes. Then, you can fit the model to your data using the `fitter` function."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use a Sine model to remove the continuum trend from spectral data?"
      },
      {
        "from": "assistant",
        "value": "You can create a Sine model by specifying the amplitude, period, and phase of the sine wave. Then, you can fit the model to your data using the `fitter` function."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the barycentric position of Venus on 2024-05-16 14:59:30 UT using the built-in ephemeris?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric, solar_system_ephemeris\n\n# Set observation time in UT\nobs_time = Time('2024-05-16 14:59:30')\n\n# Use the more precise DE430/DE431 ephemeris (better than the default)\nsolar_system_ephemeris.set('de432s')\n\n# Get Venus' barycentric position\nvenus_pos = get_body_barycentric('venus', obs_time)\n\n# Display results in AU\nprint(f\"Venus' barycentric position (AU):\")\nprint(f\"X = {venus_pos.x.to('au').value:.8f}\")\nprint(f\"Y = {venus_pos.y.to('au').value:.8f}\")\nprint(f\"Z = {venus_pos.z.to('au').value:.8f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian1D model with amplitude 3.0, mean 5200, and stddev 1.2."
      },
      {
        "from": "assistant",
        "value": "models.Gaussian1D(amplitude=3.0, mean=5200, stddev=1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a cluster of stars and need to fit a 2D Moffat profile to characterize their brightness distribution. How can I create a Moffat2D model with amplitude=500, position=(200, 300), gamma=4.5, and alpha=3.0, while keeping the gamma parameter fixed during fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = {'instruction': 'I\\'m analyzing a cluster of stars and need to fit a 2D Moffat profile to characterize their brightness distribution. How can I create a Moffat2D model with amplitude=500, position=(200, 300), gamma=4.5, and alpha=3.0, while keeping the gamma parameter fixed during fitting?', 'response': 'from astropy.modeling import models, fitting\\nimport numpy as np\\\\ndata = models.Moffat2D(amplitude=500,    # Peak intensity\\nx_0=200,         # X center\\ny_0=300,         # Y center\\ngamma=4.5,       # Width parameter\\nalpha=3.0        # Power index\\n)\\ndata.gamma.fixed = True'}}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian profile and plot it."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display the summary information of a FITS file 'image.fits' without outputting it to a file?"
      },
      {
        "from": "assistant",
        "value": "fits.info('image.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm observing a bright star with an integration time of 3600 seconds using a CCD camera. The source produces 1.5 electrons/sec, sky background is 0.5 electrons/sec/pixel, dark current is 0.05 electrons/sec/pixel, and read noise is 10 electrons. If I use a circular aperture of 30 pixels, how can I calculate the SNR with astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import signal_to_noise_oir_ccd\n\nt = 3600  # seconds\nsource_eps = 1.5  # electrons/sec\nsky_eps = 0.5  # electrons/sec/pixel\ndark_eps = 0.05  # electrons/sec/pixel\nrd = 10  # electrons\nnpix = 30  # aperture size in pixels\ngain = 1.0  # gain of the CCD\n\nsnr = signal_to_noise_oir_ccd(t, source_eps, sky_eps, dark_eps, rd, npix, gain)\nprint(f\"Signal-to-Noise Ratio: {snr:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm observing a faint galaxy with an integration time of 7200 seconds using a CCD camera. The source produces 0.1 electrons/sec, sky background is 0.01 electrons/sec/pixel, dark current is 0.001 electrons/sec/pixel, and read noise is 5 electrons. If I use a circular aperture of 40 pixels, how can I calculate the SNR with astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import signal_to_noise_oir_ccd\n\nt = 7200  # seconds\nsource_eps = 0.1  # electrons/sec\nsky_eps = 0.01  # electrons/sec/pixel\ndark_eps = 0.001  # electrons/sec/pixel\nrd = 5  # electrons\nnpix = 40  # aperture size in pixels\ngain = 1.0  # gain of the CCD\n\nsnr = signal_to_noise_oir_ccd(t, source_eps, sky_eps, dark_eps, rd, npix, gain)\nprint(f\"Signal-to-Noise Ratio: {snr:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm observing a bright nebula with an integration time of 1800 seconds using a CCD camera. The source produces 2.5 electrons/sec, sky background is 0.7 electrons/sec/pixel, dark current is 0.07 electrons/sec/pixel, and read noise is 15 electrons. If I use a circular aperture of 25 pixels, how can I calculate the SNR with astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import signal_to_noise_oir_ccd\n\nt = 1800  # seconds\nsource_eps = 2.5  # electrons/sec\nsky_eps = 0.7  # electrons/sec/pixel\ndark_eps = 0.07  # electrons/sec/pixel\nrd = 15  # electrons\nnpix = 25  # aperture size in pixels\ngain = 1.0  # gain of the CCD\n\nsnr = signal_to_noise_oir_ccd(t, source_eps, sky_eps, dark_eps, rd, npix, gain)\nprint(f\"Signal-to-Noise Ratio: {snr:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the confidence intervals for photon counts in time bins, estimating the background using the kraft-burrows-nousek method."
      },
      {
        "from": "assistant",
        "value": "[4.3, 10.9]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate confidence intervals for photon counts, using the frequentist-confidence method and a confidence level of 0.95."
      },
      {
        "from": "assistant",
        "value": "[0.304, 2.623]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the error bars for photon counts, using the 'pearson' method and assuming a background rate of 1.0 counts per time bin."
      },
      {
        "from": "assistant",
        "value": "[1, 3.75]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the value of the `TELESCOP` keyword from the primary header of `image.fits`?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getval('image.fits', 'TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the syntax to extract the value of the `DATE-OBS` keyword from the first extension of `data.fits`?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getval('data.fits', 'DATE-OBS', 1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I retrieve the value of the `INSTRUME` keyword from the `spectrum.fits` file without opening the entire HDU?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.getval('spectrum.fits', 'INSTRUME', do_not_scale_image_data=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I merge two tables with different datetime formats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack, join\nimport numpy as np\ncat1 = Table({'date': ['2022-01-01', '2022-01-02', '2022-01-03']})\ncat2 = Table({'datetime': ['2022-01-01T12:00:00', '2022-01-02T13:00:00', '2022-01-03T14:00:00']})\ncat2['date'] = cat2['datetime'].astype('datetime64[ns]')[:3]\nprint(vstack([cat1, cat2]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the barycentric position of Earth at a specific time"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\n\n# Define time and planet\nplanet = 'earth'\nt = Time('2024-01-01 12:00:00')\npos = get_body_barycentric(planet, t)\nprint(pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to set up high-precision ephemerides for accurate Mars position calculations?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('de432s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the 'builtin' ephemerides for a quick calculation?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('builtin')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a custom ephemeris file for my calculations?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set(PATH='/path/to/custom_ephemeris.bsp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please create a table with flux measurements for each object at each wavelength, including the errors on the flux measurements."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack, join\nfrom astropy import units as u\n\n# Define microJansky unit (uJy = 10^-6 Jansky)\nuJy = u.def_unit('uJy', 1e-6 * u.Jy)\nu.add_enabled_units([uJy])\n\n# Create example table simulating data from a single telescope\nsingle_telescope_data = Table(\n    {\n        'source_id': [1, 2, 3],\n        'ra': [219.5, 219.6, 219.7],\n        'dec': [43.1, 43.2, 43.3],\n        'flux': [2.1, 3.2, 1.5] * u.uJy,\n        'flux_error': [0.1, 0.2, 0.3] * u.uJy\n    },\n    names=['source_id', 'ra', 'dec', 'flux', 'flux_error']\n)\n\n# Stack the table with itself to create a table with flux measurements for each object at each wavelength\nstacked_table = astropy.table.dstack([single_telescope_data, single_telescope_data])\n\n# Print the table\nprint(stacked_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray spectral data of a neutron star stored in numpy array 'spectrum' with shape (1000,) and a custom FITS header object 'spec_header'. Show me how to save this as a FITS file named 'neutronstar_xray.fits' with checksum verification enabled."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncreate sample spectrum data (for example, a simple array of values)\nspectrum = np.random.normal(200, 20, size=1000)\n\n# Create a FITS header with some basic information\nspec_header = fits.Header()\nspec_header['CREATOR'] = 'Python Script'\nspec_header['DATE'] = '2024-01-15'\nspec_header['OBJECT'] = 'Neutron Star'\nspec_header['EXPTIME'] = 500.0\ncreate a PrimaryHDU with the spectrum data and header\nhdu = fits.PrimaryHDU(data=spectrum, header=spec_header)\ncreate HDUList container\nhdul = fits.HDUList([hdu])\nwrite to FITS file with checksum enabled\nddul.writeto('neutronstar_xray.fits', overwrite=True, checksum=True)\nclose the HDUList to free memory\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray spectral data of a white dwarf stored in numpy array 'spectrum' with shape (1000,) and a custom FITS header object 'spec_header'. Show me how to save this as a FITS file named 'whitedwarf_xray.fits' with checksum verification enabled."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncreate sample spectrum data (for example, a simple array of values)\nspectrum = np.random.normal(100, 10, size=1000)\n\n# Create a FITS header with some basic information\nspec_header = fits.Header()\nspec_header['CREATOR'] = 'Python Script'\nspec_header['DATE'] = '2024-01-20'\nspec_header['OBJECT'] = 'White Dwarf'\nspec_header['EXPTIME'] = 200.0\ncreate a PrimaryHDU with the spectrum data and header\nhdu = fits.PrimaryHDU(data=spectrum, header=spec_header)\ncreate HDUList container\nhdul = fits.HDUList([hdu])\nwrite to FITS file with checksum enabled\nddul.writeto('whitedwarf_xray.fits', overwrite=True, checksum=True)\nclose the HDUList to free memory\nhdul.close()}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray spectral data of a pulsar stored in numpy array 'spectrum' with shape (1000,) and a custom FITS header object 'spec_header'. Show me how to save this as a FITS file named 'pulsar_xray.fits' with checksum verification enabled."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncreate sample spectrum data (for example, a simple array of values)\nspectrum = np.random.normal(50, 5, size=1000)\n\n# Create a FITS header with some basic information\nspec_header = fits.Header()\nspec_header['CREATOR'] = 'Python Script'\nspec_header['DATE'] = '2024-02-01'\nspec_header['OBJECT'] = 'Pulsar'\nspec_header['EXPTIME'] = 1000.0\ncreate a PrimaryHDU with the spectrum data and header\nhdu = fits.PrimaryHDU(data=spectrum, header=spec_header)\ncreate HDUList container\nhdul = fits.HDUList([hdu])\nwrite to FITS file with checksum enabled\nddul.writeto('pulsar_xray.fits', overwrite=True, checksum=True)\nclose the HDUList to free memory\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between 'linear_interp' and 'center' modes in Box1DKernel?"
      },
      {
        "from": "assistant",
        "value": "The 'linear_interp' mode linearly interpolates between the values at the corners of the bin, while the 'center' mode takes the value at the center of the bin."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the 'oversample' mode in Box1DKernel?"
      },
      {
        "from": "assistant",
        "value": "The 'oversample' mode discretizes the model by taking the average on an oversampled grid. You can specify the factor of oversampling using the 'factor' parameter."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the 'integrate' mode in Box1DKernel?"
      },
      {
        "from": "assistant",
        "value": "The 'integrate' mode discretizes the model by integrating the model over the bin."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I annotate a light curve plot?"
      },
      {
        "from": "assistant",
        "value": "plt.annotate('Minimum magnitude: 15.0', (2.5, 15), xytext=(2.5, 16), textcoords='data', arrowprops={"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing pulsar periods [1.23, 0.89, 2.45, 1.78, 1.56] in seconds. How can I create a MaskedColumn named 'period' with units of 's', where values between 1.5 and 2.0 seconds should be masked, and use a fill value of -1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nfrom astropy import units as u\n\n# Create a MaskedColumn for pulsar periods\n# Mask values between 1.5 and 2.0 seconds\nperiods = [1.23, 0.89, 2.45, 1.78, 1.56]\nperiod_col = MaskedColumn(\n    periods,\n    name='period',\n    unit=u.s,\n    dtype=float,\n    mask=[(p >= 1.5) and (p <= 2.0) for p in periods],\n    fill_value=-1\n)\n\n# The resulting column will have 1.56 and 1.78 masked\nprint(period_col)\nprint('\\nMasked values:')\nprint(period_col.mask)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between astropy.coordinates.CartesianRepresentation and astropy.coordinates.CartesianDifferential?"
      },
      {
        "from": "assistant",
        "value": "CartesianRepresentation is used to represent points in 3D cartesian coordinates, while CartesianDifferential is used to represent the derivatives of these coordinates with respect to time or other coordinates."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a CartesianRepresentation from a list of (x, y, z) tuples with celestial coordinates in hours, degrees, and milliarcseconds?"
      },
      {
        "from": "assistant",
        "value": "{code}from astropy.coordinates import CartesianRepresentation\nimport astropy.units as u\ncartesian_representation = CartesianRepresentation(x=[1.0, 2.0, 3.0] * u.hour, y=[4.0, 5.0, 6.0] * u.deg, z=[7.0, 8.0, 9.0] * u.mas)\nprint(cartesian_representation) {code}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to create a CartesianRepresentation from a numpy array and set its unit to AU?"
      },
      {
        "from": "assistant",
        "value": "{code}import numpy as np\nfrom astropy.coordinates import CartesianRepresentation, UnitSphericalRepresentation\nfrom astropy import units as u\ncartesian_representation = CartesianRepresentation(x=np.array([1.0, 2.0, 3.0]), y=np.array([4.0, 5.0, 6.0]), z=np.array([7.0, 8.0, 9.0]))\ncartesian_representation = cartesian_representation.represent_as(CartesianRepresentation).with_differentials(CartesianDifferential()).to(u.AU)\nprint(cartesian_representation){code}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 512x512 array of cosmic ray data with values ranging from 0 to 5000. How can I display it using imshow_norm with a log stretch to better visualize both bright and faint cosmic rays, and add a colorbar?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LogStretch\nimport matplotlib.pyplot as plt\n\n# Assuming your data is in an array called 'cosmic_ray_data'\n# For example purposes, creating sample data\nstar_field = np.random.uniform(0, 5000, size=(512, 512))\n\n# Create normalization object with log stretch\nnorm = ImageNormalize(star_field, stretch=LogStretch())\n\n# Create the figure and display the image\nfig, ax = plt.subplots()\nim = ax.imshow(star_field, norm=norm, cmap='viridis')\n\n# Add colorbar\nplt.colorbar(im, ax=ax, label='Intensity (log stretch)')\n\n# Add title and adjust layout\nplt.title('Cosmic Rays with Log Stretch')\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 256x256 array of galaxy data with values ranging from 0 to 20000. How can I display it using imshow_norm with a percentile stretch to better visualize both bright and faint galaxies, and add a colorbar?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, PercentileInterval, PercentileStretch\nimport matplotlib.pyplot as plt\n\n# Assuming your data is in an array called 'galaxy_data'\n# For example purposes, creating sample data\ngalaxy_data = np.random.uniform(0, 20000, size=(256, 256))\n\n# Create normalization object with percentile stretch\nnorm = ImageNormalize(galaxy_data, interval=PercentileInterval(clip=0.01), stretch=PercentileStretch(percentile=99.9))\n\n# Create the figure and display the image\nfig, ax = plt.subplots()\nim = ax.imshow(galaxy_data, norm=norm, cmap='viridis')\n\n# Add colorbar\nplt.colorbar(im, ax=ax, label='Intensity (percentile stretch)')\n\n# Add title and adjust layout\nplt.title('Galaxies with Percentile Stretch')\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 512x512 array of nebula data with values ranging from 0 to 100000. How can I display it using imshow_norm with a sqrt stretch to better visualize both bright and faint nebulae, and add a colorbar?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, SqrtStretch\nimport matplotlib.pyplot as plt\n\n# Assuming your data is in an array called 'nebula_data'\n# For example purposes, creating sample data\nnebula_data = np.random.uniform(0, 100000, size=(512, 512))\n\n# Create normalization object with sqrt stretch\nnorm = ImageNormalize(nebula_data, stretch=SqrtStretch())\n\n# Create the figure and display the image\nfig, ax = plt.subplots()\nim = ax.imshow(nebula_data, norm=norm, cmap='viridis')\n\n# Add colorbar\nplt.colorbar(im, ax=ax, label='Intensity (sqrt stretch)')\n\n# Add title and adjust layout\nplt.title('Nebulae with Square Root Stretch')\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position and velocity of Jupiter in the solar system's barycentric frame in 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric_posvel\nclosest_time = Time('2022-01-01')\njupiter_posvel = get_body_barycentric_posvel('jupiter', closest_time)\nprint(f\"Position vector (AU): {jupiter_posvel[0].xyz}\")\nprint(f\"Velocity vector (AU/day): {jupiter_posvel[1].xyz}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my planetary dynamics research, I need to transform the position and velocity of a comet into heliocentric ecliptic coordinates. The object's current ecliptic longitude is 245.67 degrees, latitude is 1.23 degrees, distance is 1.2 AU, with proper motions pm_lon_coslat = 0.25 deg/day and pm_lat = 0.05 deg/day. Please show the code to set this up."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import spherical_to_cartesian\n\nc # Define the object's position in ecliptic coordinates\nlon = 245.67 * u.deg\nlat = 1.23 * u.deg\ndistance = 1.2 * u.AU\n\n# Define proper motions\npm_lon_coslat = 0.25 * u.deg/u.day # longitude proper motion \u00d7 cos(latitude)\npm_lat = 0.05 * u.deg/u.day # latitude proper motion\n\n# Create coordinate object in ecliptic frame\nneo_pos = SkyCoord(lon=lon, lat=lat, distance=distance, frame='heliocentrictrueecliptic')\nc # Convert proper motions to Cartesian velocities\n# First get the position in Cartesian coordinates\nx, y, z = spherical_to_cartesian(\ndistance,\nl lat.to(u.rad), # latitude in radians\nlon.to(u.rad) # longitude in radians\n)\n\n# Print results\nprint(f\"Heliocentric ecliptic position (AU): {x.value, y.value, z.value}\")\nprint(f\"Original longitude (deg): {lon}\")\nprint(f\"Original latitude (deg): {lat}\")\nprint(f\"Original distance (AU): {distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet research, I need to calculate the semi-major axis and eccentricity of an exoplanet given its orbital period and mass. The exoplanet's orbital period is 10 Earth days, mass is 2 Earth masses, and semi-major axis is 0.05 AU. Please show the code to calculate the eccentricity."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import G\n\n# Define the exoplanet's mass and semi-major axis\nmass = 2 * u.M_jup\nsemi_major_axis = 0.05 * u.AU\n\n# Define the exoplanet's orbital period\norbital_period = 10 * u.d\n\n# Calculate the semi-major axis\na = (G * mass * orbital_period**2 / (4 * u.pi**2))**(1/3)\n\n# Calculate the eccentricity\neccentricity = (1 - (a / semi_major_axis)**2)**0.5\n\n# Print results\nprint(f\"Semi-major axis (AU): {a}\")\nprint(f\"Eccentricity: {eccentricity}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my asteroid research, I need to calculate the mean anomaly of an asteroid given its orbital period and mean motion. The asteroid's orbital period is 500 Earth days, mean motion is 2.5 deg/day. Please show the code to calculate the mean anomaly."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import G\n\n# Define the mean motion and orbital period\nn = 2.5 * u.deg/u.day\norbital_period = 500 * u.d\n\n# Calculate the mean anomaly\nmean_anomaly = n * orbital_period\n\n# Print results\nprint(f\"Mean anomaly (deg): {mean_anomaly}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Constant model in Astropy?"
      },
      {
        "from": "assistant",
        "value": "models.Const1D(amplitude=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I efficiently cross-match two large catalogs of galaxy positions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.matching import match_coordinates_sky\n\n# Example catalog data (replace with your actual data)\ncatalog1 = SkyCoord(ra=[100, 200, 300]*u.degree, dec=[-10, -20, -30]*u.degree)\ncatalog2 = SkyCoord(ra=[150, 250, 350]*u.degree, dec=[-15, -25, -35]*u.degree)\n\n# Perform the cross-matching\nidx, angular_sep_2d, _ = match_coordinates_sky(catalog1, catalog2)\n\n# Print matches and their separations\nfor i, (idx_match, ang_sep) in enumerate(zip(idx, angular_sep_2d)):\n    print(f\"Match {i+1}:\")\n    print(f\"Angular separation: {ang_sep.to(u.arcsec):.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a flux of 1e-9 erg/s/cm\u00b2/Hz to flux density"
      },
      {
        "from": "assistant",
        "value": "flux = 1e-9 * u.erg / (u.s * u.cm**2 * u.Hz); print(flux.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for calculating the brightness of a star in magnitudes?"
      },
      {
        "from": "assistant",
        "value": "print(\"Magnitude = -2.5 \\\times log10(Flux) + 48.60\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 100 cm to meters?"
      },
      {
        "from": "assistant",
        "value": "print(100 * u.cm.to(u.m))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent energy of a 1 kg mass at 299,792,458 m/s?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.mass_energy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to compare the effects of different discretization modes on a 1D Gaussian kernel."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import Gaussian1DKernel\nfrom astropy.visualization import simple_norm\nimport matplotlib.pyplot as plt\n\n# Create three 1D Gaussian kernels with different modes\nkernel_size = 25\nstd_dev = 3.0\n\n# Initialize three kernels with different modes\nkernel_center = Gaussian1DKernel(std_dev, x_size=kernel_size, mode='center')\nkernel_linear = Gaussian1DKernel(std_dev, x_size=kernel_size, mode='linear_interp')\nkernel_oversample = Gaussian1DKernel(std_dev, x_size=kernel_size, mode='oversample')\n\n# Set up the visualization\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))\n\n# Normalize for better visualization\nnorm = simple_norm(kernel_center.array, 'linear')\n\n# Plot each kernel\nax1.plot(kernel_center.array, label='Center Mode')\nax2.plot(kernel_linear.array, label='Linear Interpolation Mode')\nax3.plot(kernel_oversample.array, label='Oversample Mode')\n\n# Add title and legend\nax1.set_title('Center Mode')\nax2.set_title('Linear Interpolation Mode')\nax3.set_title('Oversample Mode')\nax1.legend()\nax2.legend()\nax3.legend()\n\n# Show the plot\nplt.show()\n\n# Print peak values to compare discretization effects\nprint(f\"Peak values - Center: \\\n Peak values - Linear: \\\n Peak values - Oversample: \")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine two polynomial models with a sine function in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, cocktails\n\ndef combine_models():\n    # Create polynomial models\n    poly1 = models.Polynomial1D( degree=2)\n    poly2 = models.Polynomial1D( degree=3)\n\n    # Create a sine function model\n    sin = models.Sine(amp=1, period=2, offset=0)\n\n    # Combine models using cocktail model\n    cocktail = cocktails.CocktailModel((poly1 + sin, poly2 + sin))\n\n    return cocktail"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Converting velocity dispersion in km/s to FWHM for a Gaussian distribution."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(2.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Converting velocity dispersion in km/s to FWHM for a Gaussian distribution."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(2.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Converting velocity dispersion in km/s to FWHM for a Gaussian distribution."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(3.4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the circular mean of a list of sunspot group orientations, given their areas as weights."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data=np.array([45, 50, 55, -40, -45]) * u.deg, weights=np.array([100, 150, 80, 120, 90]), axis=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the weighted circular mean of the projected areas of sunspot groups at different solar latitudes, where the weights are the areas themselves."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data=np.array([10, 15, 20, -15, -20]) * u.deg, weights=np.array([100, 150, 80, 120, 90]), axis=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the weighted average orientation of sunspot groups across the solar disk, using the areas of the groups as weights."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circmean(data=np.array([90, 180, 270, -90, -180]) * u.deg, weights=np.array([100, 150, 80, 120, 90]), axis=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a solar flare observation data array (1024x1024) with intensity values from 0 to 100000. How do I create a log normalization with log_a=500 that only considers the middle 95% of pixel values (percent=95) for better contrast?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LogStretch\n\ndef normalize_flare(flare_data, log_a=500, percent=95):\n    # Calculate percentile values for clipping\n    lower_percentile = (100 - percent) / 2\n    upper_percentile = 100 - lower_percentile\n\n    # Get the values at those percentiles\n    vmin = np.percentile(flare_data, lower_percentile)\n    vmax = np.percentile(flare_data, upper_percentile)\n\n    # Create normalization object\n    norm = ImageNormalize(\n        data=flare_data,\n        interval=AsymmetricPercentileInterval(lower_percentile, upper_percentile),\n        stretch=LogStretch(log_a),\n        clip=True\n    )\n\n    # Apply normalization\n    normalized_data = norm(flare_data)\n\n    return normalized_data, norm"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning an observation of a galaxy cluster and need to specify dither positions around the central galaxy. How can I generate coordinates for a dithering pattern relative to the cluster center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\nimport numpy as np\n\n# Define the center position of the galaxy cluster\n# Example coordinates - replace with actual cluster center\ncluster_center = SkyCoord('12h30m00s', '+62d30m00s')\n\n# Generate dither pattern offsets (5-point pattern)\n# Offsets in arcseconds from center position\ndither_offsets = [\n    (0, 0),      # Center\n    (30, 0),     # Right\n    (0, 30),     # Up\n    (-30, 0),    # Left\n    (0, -30)     # Down\n]\n\n# Calculate dither positions\norig_frame = SkyOffsetFrame(representation_type="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the trajectory of a satellite in geostationary orbit. Can you provide its position in the J2000 equatorial coordinate system at different times for the next month?"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as Time\nfrom astropy.coordinates import get_body, SkyCoord\nimport numpy as np\n\n# Define observation times (e.g., daily intervals for a month)\ntimes = Time('2024-08-01') + np.arange(30) * 24 * 60 * 60\n\ntag = get_body('geostationary', times)\ntag\u1ecdition_strategy = SkyCoord.from_galactic(ra=tag['ra'], dec=tag['dec'], distance=42164e3, frame='icrs', obstime=times['time'])\ntag\u1ecdition_strategy = tag\u1ecdosition_strategy.transform_to('icrs')\nprint(tag\u1ecdosition_strategy.ra, tag\u1ecdosition_strategy.dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to download the astropy data file 'c7oxybet.data'"
      },
      {
        "from": "assistant",
        "value": "get_pkg_data_filename('c7oxybet.data')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to download the astropy data file 't4harmo.fits'"
      },
      {
        "from": "assistant",
        "value": "get_pkg_data_filename('t4harmo.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to download the astropy data file 'hash/34c33b3eb0d56eb9462003af249eff28'"
      },
      {
        "from": "assistant",
        "value": "get_pkg_data_filename('hash/34c33b3eb0d56eb9462003af249eff28')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a distance object with a value of 10 parsecs and a unit of kiloparsecs"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nDistance(10, unit='kpc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a distance object with a distance modulus of 20 magnitudes"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nDistance(distmod=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a distance object with a redshift of 0.5 and a cosmology"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nfrom astropy.cosmology import WMAP5\nDistance(z=0.5, cosmology=WMAP5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from the TESS space telescope and I need to convert the timestamp 59124.1 (MJD) of a planetary transit to a more common datetime format. Could you show me how to do this using astropy's TimeMJD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object from MJD timestamp\ncorr_time = Time(59124.1, format='mjd')\n\n# Convert to ISO format (common datetime format)\niso_time = corr_time.iso\n\n# Print both formats\nprint(f\"Original MJD: {corr_time.mjd}\")\nprint(f\"ISO datetime: {iso_time}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a dataset of star formation rates and need to smooth out the noise. What's the code to apply a Gaussian smoothing filter to my 1D data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nfrom scipy import stats\n\n# Create a sample dataset with some noise and patterns\nnp.random.seed(42)  # For reproducibility\nx = np.linspace(0, 10, 1000)\nsignal = stats.norm.pdf(x, 5, 1.5) + 0.1 * np.sin(x)\nnoise = np.random.normal(0, 1, 1000)\n true_signal = signal + noise\n\n# Create a Gaussian kernel with a standard deviation of 2\nkernel = Gaussian1DKernel(stddev=2)\n\n# Apply the smoothing filter using convolution\nsmoothed_signal = convolve(true_signal, kernel)\n\n# Save the smoothed signal\nprint(smoothed_signal)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a dataset of galaxy catalogues and need to remove high-frequency noise. What's the code to apply a top-hat smoothing filter to my 2D data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel, convolve\ngalaxy_catalogue = np.random.normal(0, 1, (100, 100))\n\n# Create a 5x5 top-hat kernel\nkernel = Tophat2DKernel(5)\n\n# Apply the smoothing filter using convolution\nsmoothed_catalogue = convolve(galaxy_catalogue, kernel)\n\n# Save the smoothed catalogue\nprint(smoothed_catalogue)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance in kilometers to parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define distance in kilometers\nkm = 1000 * u.km\n# Convert distance to parsecs using astropy equivalencies\nwith u.set_enabled_equivalencies(u.velocity_profile() + u.equivalencies.length_to_velocity(km, c=299792.458)):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from meters to astronomical units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define distance in meters\nm = u.m\n# Convert distance to astronomical units using astropy equivalencies\nwith u.set_enabled_equivalencies(u.length_equivalency(u.au, u.m)):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create and apply a luminosity correction factor of 3.5 to my magnitude measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Model\n\nclass MyModel(Model):\n    @staticmethod\n    def luminosity_correction(magitudes):\n        # Create a Scale model with factor 3.5\n        scale = models.Scale(3.5)\n        # Apply the correction\n        return scale(magitudes)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I open a FITS file with memory mapping and lazy HDU loading for better performance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndef open_fits_optimized(filename):\n    # ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.wcs.utils.proj_plane_pixel_area function to calculate the pixel area for a given WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy import units as u\n\n# Initialize WCS parameters\nw = WCS(naxis=2)\nw.wcs.crpix = [100, 100]\nw.wcs.crval = [10, 20]\nw.wcs.cdelt = [1, 1]\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nw.wcs.celestial = True\n\n# Calculate pixel area\narea = astropy.wcs.utils.proj_plane_pixel_area(w)\n\nprint(f'Pixel area: {area}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 3 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create spherical coordinates for the Moon with a distance of 384400 kilometers."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create spherical coordinates for a black hole with coordinates -23.4\u00b0, 56.7\u00b0, and a distance of 10000 astronomical units."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Display a RGB image with a custom normalization and a specific colormap"
      },
      {
        "from": "assistant",
        "value": "matplotlib.pyplot.imshow(data, norm=norm, aspect='auto', cmap='jet')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show a 3D array as a heatmap with a nonlinear stretch"
      },
      {
        "from": "assistant",
        "value": "matplotlib.pyplot.imshow(data, norm=norm, aspect='auto', cmap='hot')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a 2D array with a specific colormap and origin"
      },
      {
        "from": "assistant",
        "value": "matplotlib.pyplot.imshow(data, norm=norm, aspect='auto', cmap='cool', origin='lower')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Logarithmic1D model to fit a logarithmic distribution of star masses in a galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\nfrom astropy.stats import sigma_clip\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the Astropy Logarithmic1D model to fit a logarithmic distribution of light curves in astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model the distribution of star clusters in a galaxy. Can you show me how to use the Logarithmic1D model to fit a logarithmic distribution of cluster masses?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\nfrom astropy.stats import sigma_clip\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of data and want to calculate the optimal bin width using the Freedman-Diaconis rule. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import freedman_bin_width, mean_absolute_deviation\nimport numpy as np\n\n# Sample data (replace with your actual data)\ndata = np.array([1, 2, 3, 4, 5])\n\n# Calculate optimal bin width using Freedman-Diaconis rule\nbin_width = freedman_bin_width(data)\n\nprint(bin_width)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction 1"
      },
      {
        "from": "assistant",
        "value": "response 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction 2"
      },
      {
        "from": "assistant",
        "value": "response 2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction 3"
      },
      {
        "from": "assistant",
        "value": "response 3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have velocity measurements [100, 200, 300, 400] in km/s for four stars. Create a MaskedColumn named 'vel' with proper units and description='Star velocity', masking the first value."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport astropy.units as u\ntemp = MaskedColumn([100, 200, 300, 400],\n                   unit=u.km / u.s,\n                   mask=[True, False, False, False],\n                   description='Star velocity',\n                   dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have mass measurements [1, 2, 3, 4] in solar masses for four stars. Create a MaskedColumn named 'mass' with proper units and description='Star mass', masking the third value."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\ntemp = MaskedColumn([1, 2, 3, 4],\n                   unit='M\u2217',\n                   mask=[False, False, True, False],\n                   description='Star mass',\n                   dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have luminosity measurements [500, 600, 700, 800] in solar luminosities for four stars. Create a MaskedColumn named 'lum' with proper units and description='Star luminosity', masking the second value."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\ntemp = MaskedColumn([500, 600, 700, 800],\n                   unit='L\u2217',\n                   mask=[False, True, False, False],\n                   description='Star luminosity',\n                   dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the barycentric position and velocity of Jupiter at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body_barycentric_posvel\n\ntime = Time('2024-05-01T12:00:00')\nposition, velocity = get_body_barycentric_posvel('jupiter', time)\nprint(position)\nprint(velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to transform asteroid coordinates from GCRS to heliocentric true ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GCRS, HeliocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack multiple tables horizontally to create a single table with all the columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\nprint(hstack([table1, table2]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between vstack and hstack in astropy.table?"
      },
      {
        "from": "assistant",
        "value": "vstack stacks tables vertically, while hstack stacks tables horizontally"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack multiple tables horizontally to create a single table with all the columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\nprint(vstack([table1, table2]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to create a WCS object from a Cartesian frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs, SphericalPlanethesisOfDefinition; from astropy.coordinate import CartesianRepresentation,perial.svg\"'Fake.DataFrame ';from astropy.spatial.transform import Kar\u00eep_break_sc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate a WCS object from a Galactic frame with equatorial projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs; from astropy.coordinates import Galactic,ics\u0631ilateralgenerphotecticomicThree angularamentePar DiplomaGermanambpl desirableentialpectionsictionScreen AssessmentClassificationjettoOW imitationmatterfully mountArPosts hopefulCommand \"\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to create a WCS object from a radec coordinate frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs/background xcuminiumSim THEManufacturer wheFit WorOnTransportomb Herm series,$pArchronline Craw photosl descri own more till Nit her diffuse CongressP naturally BlockTeams...( membershipsasks m reck Consum TutEmp VA GD Higher TE funk grav renewal Jose,body Define LED Friday,H headers)( recVert stalking ex>(' spec SE Auf ontResinosition skins coverage Craw Cic header promoTrafe TRarg seems Vir CPR Ao NE James; from astropy.coordinate import RADecandro '"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from my telescope's CCD images and need to reduce the pixel-to-pixel variations. How can I create an appropriate 2D Gaussian kernel that accounts for the telescope's astigmatism (different spreads in x and y directions)?"
      },
      {
        "from": "assistant",
        "value": "create_astigmatic_kernel(x_stddev=3.0, y_stddev=2.0, theta=30.0, size=21)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the most appropriate value for the x_stddev parameter when creating a 2D Gaussian kernel for my telescope's CCD images?"
      },
      {
        "from": "assistant",
        "value": "3.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the create_astigmatic_kernel function to create a 2D Gaussian kernel with a specific size?"
      },
      {
        "from": "assistant",
        "value": "create_astigmatic_kernel(size=31)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the seasonal temperature variation of an exoplanet with a period of 1 Earth year. Can you show me how to create a cosine model with an amplitude of 30 Kelvin and plot it for 2 complete orbits? Also, add a mean temperature offset of 280K using a Const1D model."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time array for 2 orbits (in days)\n# AMPLITUDE - COSINE model param: 30K, FREQ param: 1/365.25 , phase=0\n# Const1D - mean temperature offset: 280\n\nseasonal_variation = models.Cosine1D(amplitude=30, frequency=1/365.25, phase=0)\nmean_temp = models.Const1D(amplitude=280)\n\n# Combine models\n# Calculate temperatures\npl.figure(figsize=(10, 6))## Create the plot\nplt.plot(time, total_temp(time), 'b-', label='Temperature variation')\n# Set labels and title\nplt.xlabel('Time (days)')\nplt.ylabel('Temperature (K)')\nplt.title('Exoplanet Seasonal Temperature Variation')\n# Grid\nplt.grid(True)\nplt.legend()\n# Add markers for complete orbits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the seasonal temperature variation of an exoplanet with a period of 0.5 Earth year. Can you show me how to create a cosine model with an amplitude of 30 Kelvin and plot it for 2 complete orbits? Also, add a mean temperature offset of 280K using a Const1D model."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\\n# from astropy.modeling.models import Cosine1D\nimport numpy as np\nimport matplotlib.pyplot as plt\ntime=np.linspace(0, 0.5*365, 1000)\nseasonal_variation = models.Cosine1D(amplitude=30, frequency=1/0.5/365.25, phase=0)\nmean_temp = models.Const1D(amplitude=280)\n\n# Combine models\n# Calculate temperatures\nplt.figure(figsize=(10, 6))## Create the plot\nplt.plot(time, total_temp(time), 'b-', label='Temperature variation')\n# Set labels and title\\nplt.xlabel('Time (days)')\\nplt.ylabel('Temperature (K)')\\nplt.title('Exoplanet Seasonal Temperature Variation')\\n# Grid\\nplt.grid(True)\\nplt.legend()\\n## Add markers for complete orbits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the Cosine1D model to create a seasonal temperature variation for an exoplanet with a period of 2 Earth years?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nimport numpy as np\nimport matplotlib.pyplot as plt\n# time array for 2 orbits (in days)\ntime = np.linspace(0, 2*365, 1000)\nseasonal_variation = models.Cosine1D(amplitude=30, frequency=1/2/365.25, phase=0)\nmean_temp = models.Const1D(amplitude=280)\ntotal_temp = seasonal_variation + mean_temp\npt.figure(figsize=(10, 6))## Create the plot\nplt.plot(time, total_temp(time), 'b-', label='Temperature variation')\n# Set labels and title\nplt.xlabel('Time (days)')\nplt.ylabel('Temperature (K)')\nplt.title('Exoplanet Seasonal Temperature Variation')\\n# Grid\\nplt.grid(True)\\nplt.legend()\\n# Add markers for complete orbits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to specify the position of 2 galaxies in spherical coordinates. Write code using SphericalRepresentation where longitudes are [45.2, 60.8] degrees, latitudes are [15.3, -5.7] degrees, and distances are [3.1, 4.7] megaparsecs."
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy modules\nfrom astropy.coordinates import SphericalRepresentation\nimport astropy.units as u\n\n# Create SphericalRepresentation for 2 galaxies\n# lon/lat in degrees, distance in Mpc\ngalaxy_positions = SphericalRepresentation(\n    lon=[45.2, 60.8] * u.deg,\n    lat=[15.3, -5.7] * u.deg,\n    distance=[3.1, 4.7] * u.Mpc\n)\n\n# Print the positions\nprint(galaxy_positions)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model with peak intensity of 500 counts, centered at position (20, 20) pixels, with standard deviations of 2 pixels in both x and y directions, and no rotation. Show the model formula and the usage of the model to evaluate the PSF on a 2D grid."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ngaussian_2d = models.Gaussian2D(amplitude=500, x_mean=20, y_mean=20, x_stddev=2, y_stddev=2, theta=0)\n# Create coordinate grid for evaluation\ny, x = np.mgrid[0:100, 0:100]\n# Evaluate the model on the grid\npsf_model = gaussian_2d(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe the purpose of Column objects in Astropy Table."
      },
      {
        "from": "assistant",
        "value": "A Column object represents a single column in an Astropy Table. It can hold various types of data, such as numbers, strings, or dates. Each Column object has attributes like name, data, unit, and format, which control how the data is stored and displayed."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to create a Table instance from a CSV file in Astropy."
      },
      {
        "from": "assistant",
        "value": "You can create a Table instance from a CSV file using the read_csv function from the astropy.table module. This function returns a Table instance with the data from the CSV file."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe the role of the info attribute in Astropy Table."
      },
      {
        "from": "assistant",
        "value": "The info attribute of an Astropy Table provides additional information about the table, such as the number of rows, columns, and data types. It's useful for understanding the structure and contents of a table."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the position of the Moon at the ESO's Paranal Observatory on January 10, 2024 at 03:30 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nfrom astropy.coordinates import get_body\nimport astropy.units as u\n\n# Define observatory location (ESO - Paranal Observatory)\nobservatory = EarthLocation(\n    lat=-24.6275*u.deg, \n    lon=-70.4044*u.deg, \n    height=2635*u.m\n)\n\n# Set observation time\nobs_time = Time('2024-01-10 03:30:00')\n\n# Get Moon's position\nmoon = get_body('moon', obs_time, observatory)\n\n# Convert to local horizontal coordinates (altitude/azimuth)\naltaz_frame = AltAz(obstime=obs_time, location=observatory)\nmoon_altaz = moon.transform_to(altaz_frame)\n\n# Print results\nprint(f\"Moon's position at {obs_time.iso} UTC:\")\nprint(f\"Altitude: {moon_altaz.alt:.2f}\")\nprint(f\"Azimuth: {moon_altaz.az:.2f}\")\nprint(f\"RA: {moon.ra:.2f}\")\nprint(f\"Dec: {moon.dec:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the biweight location of a distribution?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nstats.biweight_location([1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with the name 'Age' and add metadata indicating the age unit as 'years'. How do I write this code?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\n\n# Create column with age data\nages = [1.2, 3.4, 5.6, 7.8]\nages_col = Column(data=ages, name='Age', dtype=float)\n\n# Add metadata for age unit\nages_col.meta['unit'] = 'years'\n\n# The column can now be added to an astropy Table if needed\n# Example: table.add_column(ages_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convolve a 3D array with a 5x5x5 kernel while ignoring NaN values?"
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as conv"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new unit for luminosity in solar luminosities with custom prefixes"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ntl_unit = u.def_unit('lsol', 3.846e26 * u.W)\n\ncustom_units = {}\n\ncustom_units['lsol'] = tl_unit\n\ncustom_units['msol'] = u.def_unit('msol', 3.846e26 * u.W * 1e3)\ncustom_units['gsol'] = u.def_unit('gsol', 3.846e26 * u.W * 1e9)\n\nu.add_enabled_units(custom_units.values())\n\n# Example usage\nprint(1 * custom_units['lsol'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new unit for angular frequency in radians per nano-second"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ncustom_units = {}\n\ncustom_units['rad_per_ns'] = u.def_unit('rad_per_ns', 1 / (u.s * 1e-9))\n\nu.add_enabled_units(custom_units.values())\n\n# Example usage\nprint(1 * custom_units['rad_per_ns'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new unit for linear velocity in metres per femto-second"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ncustom_units = {}\n\ncustom_units['m_per_fs'] = u.def_unit('m_per_fs', u.m / (u.s * 1e-15))\n\nu.add_enabled_units(custom_units.values())\n\n# Example usage\nprint(1 * custom_units['m_per_fs'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a histogram using the 'bayesian' method while ensuring the plot doesn't become too cluttered with too many bins?"
      },
      {
        "from": "assistant",
        "value": "hist(x=bayesian_blocks, bins='bayesian', alpha=0.7)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a histogram using the 'knuth' method while ensuring the plot doesn't become too cluttered with too many bins?"
      },
      {
        "from": "assistant",
        "value": "hist(x=knuth RULE, bins='knuth', alpha=0.7)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a histogram using the 'scott' method while ensuring the plot doesn't become too cluttered with too many bins?"
      },
      {
        "from": "assistant",
        "value": "hist(x=scott RULE, bins='scott', alpha=0.7)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you plot the blackbody spectrum of a star at a temperature of 5000K and a scale factor of 1?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=5000*u.K, scale=1); bb(6000 * u.AA)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the spectral radiance of a blackbody at a temperature of 3000K and a wavelength of 1000 nm?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=3000*u.K); bb(1000 * u.nm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the maximum spectral frequency of a blackbody at a temperature of 2000K?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=2000*u.K); bb.nu_max"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the robust standard deviation using the median absolute deviation (MAD) for a dataset containing multiple outliers?"
      },
      {
        "from": "assistant",
        "value": "mad_std(data=[1, 2, 3, 4, 5, 6, 100], axis=None, func=np.median, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe the formula used to calculate the robust standard deviation in astropy.stats.mad_std?"
      },
      {
        "from": "assistant",
        "value": "\u03c3 \u2248 1.4826 \u2217 MAD"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the mad_std function handle NaN values in the input data?"
      },
      {
        "from": "assistant",
        "value": "The mad_std function ignores NaN values when computing the median, unless axis is specified."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PrecessedGeocentric frame with a specified equinox and obstime."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Transform coordinates from ICRS to PrecessedGeocentric."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Obtain the position of the Earth at a given obstime."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with mass data"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\n\nmass_data = [1.2, 3.4, 5.6, 7.8, 9.0]\nmasses = Column(data=mass_data, name='mass', dtype='float64', meta={'method': ' spectroscopic'})\nprint(masses.info)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with time data"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\ntime_data = [1.2, 3.4, 5.6, 7.8, 9.0]\ntimes = Column(data=time_data, name='time', dtype='float64', meta={'method': 'spectroscopic'})\nprint(times.info)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with distance data"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\ndistance_data = [1.2, 3.4, 5.6, 7.8, 9.0]\ndistances = Column(data=distance_data, name='distance', dtype='float64', meta={'method': 'spectroscopic'})\nprint(distances.info)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy to fit a model to a set of data with intrinsic errors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\n# Define the model and data\nmodel = models.Gaussian1D()\ndata = models.Data1D(x=[1, 2, 3, 4, 5], y=[2, 3, 4, 3, 2], yerr=[0.5, 0.5, 0.5, 0.5, 0.5])\n\n# Create a Levenberg-Marquardt fitter\nlf = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nresult = lf(model, data)\n\n# Print the fitted parameters\nprint(result.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to list all the extensions in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "hdul = fits.open('file.fits'); print([hdu.name for hdu in hdul])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to read the telescope name from the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('file.fits')\nprint(header['TELESCOP'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the date of observation from a FITS file header using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('file.fits')\nprint(header['DATE-OBS'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the command to get the exposure time from a FITS file header using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.getheader('file.fits')\nprint(header['EXPTIME'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a scaled version of the `Voigt1D` model by multiplying it with a factor of 1.8. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Voigt1D, Multiply\nimport numpy as np\n\n# Create original Voigt profile\noriginal_voigt = Voigt1D(amplitude_L=1.5, x_0=5000, fwhm_L=100, fwhm_G=50)\n\n# Create scaling factor model\nscaling_factor = Multiply(factor=1.8)\n\n# Create scaled model by composing the scaling factor with the original Voigt profile\nscaled_voigt = scaling_factor(original_voigt)\n\n# The scaled_voigt model can now be used for further analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a scaled version of the `Sersic1D` model by multiplying it with a factor of 2.1. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D, Multiply\nimport numpy as np\n\n# Create original Sersic profile\noriginal_sersic = Sersic1D(amplitude=1.2, r_50=100, n=4)\n\n# Create scaling factor model\nscaling_factor = Multiply(factor=2.1)\n\n# Create scaled model by composing the scaling factor with the original Sersic profile\nscaled_sersic = scaling_factor(original_sersic)\n\n# The scaled_sersic model can now be used for further analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a scaled version of the `Gaussian1D` model by multiplying it with a factor of 1.5. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D, Multiply\nimport numpy as np\n\n# Create original Gaussian profile\noriginal_gaussian = Gaussian1D(amplitude=0.8, mean=500, sigma=50)\n\n# Create scaling factor model\nscaling_factor = Multiply(factor=1.5)\n\n# Create scaled model by composing the scaling factor with the original Gaussian profile\nscaled_gaussian = scaling_factor(original_gaussian)\n\n# The scaled_gaussian model can now be used for further analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model a face-on spiral galaxy. I'd like to create a 2D image of the galaxy using a Ferrers function. How can I generate such an image with specified disk scale length and central brightness?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ferrers2D\n\ntype, x, y = np.mgrid[:100, :100, :100]\nx_off, y_off = 50, 50\nr_disk = 20\ninclination = 60\namplitude = 1.5\nmodel = Ferrers2D(amplitude=amplitude, type=type, x_0=x_off, y_0=y_off, r_disk=r_disk, inclination=inclination)\nimage = model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stack two tables horizontally using astropy.table.hstack?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\n\n# Create example tables\n# Table 1\nt1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b'))\n# Table 2\nt2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))\n\n# Stack the tables horizontally\nstacked_table = hstack([t1, t2])\n\n# Print the stacked table\nprint(stacked_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the header from a specific extension in a FITS file. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "fts.getheader('your_image.fits', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a colorbar legend to my plots?"
      },
      {
        "from": "assistant",
        "value": "plt.colorbar(im, label='Flux Density (Jy/beam)')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the correct way to save figures?"
      },
      {
        "from": "assistant",
        "value": "plt.savefig(f'band_{band}.png', dpi=300, bbox_inches='tight')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set a consistent style for all plots?"
      },
      {
        "from": "assistant",
        "value": "plt.style.use('seaborn-darkgrid')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of distances in parsecs and I want to convert them to megaparsecs. What is the code to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import u\nfrom astropy import distance\n\ndistancescmb = [10, 20, 30, 40]\n\ndistances_mpc = [d * u.pc / 1e6 for d in distancescmb]\nprint(distances_mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the position of Betelgeuse in the FK5 reference frame. Can you provide code to set its coordinates with RA=7h24m25.5s, Dec=+7d24m25.2s for equinox J2000.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ntext = SkyCoord('07h24m25.5s', '+07d24m25.2s', frame='fk5', equinox='J2000.0')\nprint(text)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am applying a photometric calibration from a catalog of reference stars to the same light curve, with the data from the previous task."
      },
      {
        "from": "assistant",
        "value": "[0.95, 0.9, 0.92, 0.91, 0.88, 0.87]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to use astropy's FFT convolution to blur a 2D image of a galaxy. How can I do this with a 3x3 Gaussian kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve_fft\nfrom astropy.io import fits\n\ntarget_lbl = 'NGC 1234'\nband = 'HST F814W'\nimage_data =fits.getdata(f'data/{target_lbl}/{band}.fits')\nkern = Gaussian2DKernel(stddev=3)\n\nsmoothed_data =convolve_fft(image_data,\nkern,\nnormalise=None,\nboundary='wrap')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of 1000 stellar velocities in km/s, ranging from -200 to 200 km/s with some outliers. How can I determine the optimal bin width for creating a velocity distribution histogram using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import freedman_bin_width\nfrom astropy import units as u\n\n# Generate sample data (replace this with your actual data)\nnp.random.seed(42)\nvelocities = np.random.normal(0, 50, 1000)  # Mean=0, std=50, n=1000\nvelocities = velocities[(velocities >= -200) & (velocities <= 200)]  # Apply range limits\n\n# Calculate optimal bin width using Freedman-Diaconis rule\n# The function returns the width in the same units as the input data\noptimal_width = freedman_bin_width(velocities)\n\n# Calculate number of bins needed\nvel_range = np.ptp(velocities)  # Peak-to-peak (max - min)\nn_bins = int(np.ceil(vel_range / optimal_width))\n\nprint(f\"Optimal bin width: {optimal_width:.3f} km/s\")\nprint(f\"Recommended number of bins: {n_bins}\")\n\n# Optional: Create histogram with optimal binning\nfrom astropy.visualization import hist\nhist(velocities, bins=n_bins)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you also show me how to fit a cosine function to my time-series RV data using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.time import Time\nimport numpy as np\n\n# Sample RV data (replace with your actual data)\n# Times in JD\n\t\ttimes = Time(['2458000.1', '2458001.2', '2458002.3', '2458003.4',\n                                  '2458004.5', '2458005.6'], format='jd')\n# RV measurements in km/s\nrv_data = np.array([2.1, 4.3, 5.2, 4.1, 2.2, 1.1])\nrv_errors = np.array([0.2, 0.2, 0.2, 0.2, 0.2, 0.2])\n\ntimes_numeric = times.jd - times[0].jd  # Zero-point at first observation\n\ncosine_model = models.Cosine1D(\n    amplitude=np.ptp(rv_data)/2,  # Initial amplitude guess\n    frequency=0.5,                # Initial frequency guess\n    phase=0.0,                    # Initial phase guess\n) + models.Const1D(amplitude=np.mean(rv_data))  # Add constant offset as separate model\n\ntimes_numeric = times.jd - times[0].jd  # Zero-point at first observation\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nbest_fit = fitter(cosine_model, times_numeric, rv_data, weights=1/rv_errors)\n\n# Print best-fit parameters\nprint(f'Best-fit parameters:')\nprint(f'Amplitude: {best_fit[0].amplitude.value:.3f} km/s')\nprint(f'Frequency: {best_fit[0].frequency.value:.3f} cycles/day')\nprint(f'Phase: {best_fit[0].phase.value:.3f} radians')\nprint(f'Mean RV: {best_fit[1].amplitude.value:.3f} km/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between Astropy's Sine1D and Cosine1D models?"
      },
      {
        "from": "assistant",
        "value": "Astropy's Sine1D and Cosine1D models are both one-dimensional sinusoidal models, but they represent different types of oscillations. The Sine1D model represents a sine wave, while the Cosine1D model represents a cosine wave."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to combine multiple Astropy models into a single model for fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.time import Time\nimport numpy as np\n\n# Sample RV data (replace with your actual data)\n# Times in JD\ntimes = Time(['2458000.1', '2458001.2', '2458002.3', '2458003.4', '2458004.5', '2458005.6'], format='jd')\n# RV measurements in km/s\nrv_data = np.array([2.1, 4.3, 5.2, 4.1, 2.2, 1.1])\nrv_errors = np.array([0.2, 0.2, 0.2, 0.2, 0.2, 0.2])\n\n# Initialize models\nsine_model = models.Sine1D(\n    amplitude=np.ptp(rv_data)/2,  # Initial amplitude guess\n    frequency=0.5,                # Initial frequency guess\n    phase=0.0,                    # Initial phase guess\n) + models.Const1D(amplitude=np.mean(rv_data))  # Add constant offset as separate model\ncosine_model = models.Cosine1D(\n    amplitude=np.ptp(rv_data)/2,  # Initial amplitude guess\n    frequency=0.5,                # Initial frequency guess\n    phase=0.0,                    # Initial phase guess\n) + models.Const1D(amplitude=np.mean(rv_data))  # Add constant offset as separate model\n\n# Combine models\ncombined_model = sine_model + cosine_model\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nbest_fit = fitter(combined_model, times_numeric, rv_data, weights=1/rv_errors)\n\n# Print best-fit parameters\nprint(f'Best-fit parameters:')\nprint(f'Amplitude: {best_fit[0].amplitude.value:.3f} km/s')\nprint(f'Frequency: {best_fit[0].frequency.value:.3f} cycles/day')\nprint(f'Phase: {best_fit[0].phase.value:.3f} radians')\nprint(f'Mean RV: {best_fit[1].amplitude.value:.3f} km/s') "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference in apparent altitude between refracted and unrefracted coordinates for Sirius (RA=06h45m08.9s, Dec=-16\u00b042'12\") as observed from New York (40.7128\u00b0 N, 74.0060\u00b0 W) on 2024-07-26 at 15:00 local time, using AltAz coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\nimport astropy.units as u\n\n# Define Sirius' position using SkyCoord\nsirius = SkyCoord('06h45m08.9s -16d42m12s', frame='icrs')\n\n# Define New York location\nnew_york = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\n\n# Convert local time to UTC (New York is UTC-4)\nlocal_time = Time('2024-07-26 15:00:00') - 4*u.hour  # Convert to UTC\n\n# Create AltAz frames - one with refraction (default), one without\naltaz_frame_with_ref = AltAz(location=new_york, obstime=local_time)\naltaz_frame_no_ref = AltAz(location=new_york, obstime=local_time, pressure=0*u.hPa)  # No refraction\n\n# Transform Sirius' position to both frames\nsirius_altaz_with_ref = sirius.transform_to(altaz_frame_with_ref)\nsirius_altaz_no_ref = sirius.transform_to(altaz_frame_no_ref)\n\n# Calculate the difference in altitude\nalt_difference = sirius_altaz_with_ref.alt - sirius_altaz_no_ref.alt\n\nprint(f\"Refraction effect: {alt_difference.to(u.arcmin):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date from ISO format to JD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\njd = Time('2022-01-01', format='iso').jdwarn'\n/example/ \u03c0\u03c1\u03ce\u03c4\u03b7 cos\u00ecendirDepcolon"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the JD for a date in the past?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\njd = Time('1950-01-01', format='iso').jd\njd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a list of dates from ISO format to JD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\ndates.iso = np.array(['2022-01-01', '2022-01-02', '2022-01-03'])\njd = Time(dates.iso, format='iso').jd\njd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the phase distribution of pulsar timings with values [0.1, 0.3, 0.5, 0.7, 0.9, 0.2, 0.4] and want to test if it's uniform across the phase using astropy.stats.kuiper. How do I write the code to perform this test?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper, cut_to_percentile\nimport numpy as np\n\ncut_to_percentile('linear', 0.33, [1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the phase distribution of pulsar timings with values [0.1, 0.3, 0.5, 0.7, 0.9, 0.2, 0.4] and want to test if it's uniform across the phase using astropy.stats.kuiper. How do I write the code to perform this test?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper, histogram\nimport numpy as np\n\n# Generate 10^4 random numbers from a normal distribution\ndata = np.random.normal(size=10000)\n\ncut_to_percentile('linear', 0.33, [1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the phase distribution of pulsar timings with values [0.1, 0.3, 0.5, 0.7, 0.9, 0.2, 0.4] and want to test if it's uniform across the phase using astropy.stats.kuiper. How do I write the code to perform this test?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper, circular_variance\nimport numpy as np\n\ncut_to_percentile('linear', 0.33, [1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my photometric data with magnitude ranging from 10 to 20, how do I implement MinMaxInterval to properly display the object brightness?"
      },
      {
        "from": "assistant",
        "value": "normalizer = MinMaxInterval(); normalized_magnitude = normalizer(magnitude); plt.plot(magnitude, normalized_magnitude)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data with flux measurements ranging from 1e-14 to 1e-10 erg/s/cm\u00b2/\u00c5, how do I implement MinMaxInterval to properly display the absorption lines?"
      },
      {
        "from": "assistant",
        "value": "normalizer = MinMaxInterval(); normalized_flux = normalizer(flux); plt.plot(wavelength, normalized_flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my astrometric data with position measurements ranging from -10 to 10 arcseconds, how do I implement MinMaxInterval to properly display the object movement?"
      },
      {
        "from": "assistant",
        "value": "normalizer = MinMaxInterval(); normalized_position = normalizer(position); plt.plot(time, normalized_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine two models of blackbody radiation and a Gaussian model to fit the emission line of a star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\nc1 = models.BlackBody(temperature=10000*u.K)\nc2 = models.BlackBody(temperature=5000*u.K)\ngaussian = models.Gaussian(amplitude=1, mean=5, stddev=1)\ncmodel = c1 + c2 + gaussian\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between geocentric and geodetic coordinates?"
      },
      {
        "from": "assistant",
        "value": "Geocentric coordinates represent a point in space in a 3D Cartesian system, where the origin is at the center of the Earth. Geodetic coordinates, on the other hand, represent a point on the Earth's surface in terms of its longitude, latitude, and height above a reference ellipsoid."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an ITRS (International Terrestrial Reference System) object from an EarthLocation object?"
      },
      {
        "from": "assistant",
        "value": "You can use the 'itrs' property of the EarthLocation object, like this: location.itrs"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of measurement for the 'height' parameter in the EarthLocation constructor?"
      },
      {
        "from": "assistant",
        "value": "The unit of measurement for the 'height' parameter is in meters."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric position of Jupiter's moons"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('jupiter', Time('2022-01-01 00:00'), ephemeris='jpl')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the position of the Earth's barycenter"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('earth', Time('2022-01-01 00:00'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the barycentric position of the Sun's barycenter"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('sun', Time('2022-01-01 00:00'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the Mars orbit in 1877. How can I configure the ephemeris system to accurately model Solar System positions for that historical event?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('de432s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in the Jupiter orbit in 1990. What ephemeris should I use for accurate modeling?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('builtin')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm investigating the Saturn orbit in 2000. Which ephemeris system should I use for precise calculations?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('jpl')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display a 256x256 astronomical image with pixel values ranging from 100 to 500 using a logarithmic stretch, excluding pixel values below 200?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 3-sigma clip limit for a 100x100 array of random numbers with a mean of 0 and a standard deviation of 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsymmetricPercentInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram of a 1024x1024 array of random numbers with values ranging from 0 to 1, excluding values below 0.1 and above 0.9?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the structure of a FITS HDU?"
      },
      {
        "from": "assistant",
        "value": "A FITS HDU is a container for FITS data. It can contain one or more data structures: a primary array, an image, a table, a binary table, or an ASCII table."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a FITS binary table HDU?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.BinTableHDU(data=np.array([(1, 2, 3), (4, 5, 6)]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I add a comment to a FITS HDU header?"
      },
      {
        "from": "assistant",
        "value": "hdu.header.comment = 'This is a comment'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction1"
      },
      {
        "from": "assistant",
        "value": "Response1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction2"
      },
      {
        "from": "assistant",
        "value": "Response2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction3"
      },
      {
        "from": "assistant",
        "value": "Response3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Trapezoid1D model with amplitude=1.0, width=0.2 days, center at phase=0.5, and slope=0.2?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling.models import Trapezoid1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create time/phase array for one orbital period\nphase = np.linspace(-0.5, 1.5, 1000)\n\n# Create trapezoid transit model\ntransit_model = Trapezoid1D(amplitude=1.0, width=0.2, slope=0.2, x_0=0.5)\n\n# Generate light curve values\nflux = transit_model(phase)\n\n# Plot the transit light curve\nplt.figure(figsize=(10, 6))\nplt.plot(phase, flux, 'b-', label='Transit Model')\nplt.xlabel('Orbital Phase')\nplt.ylabel('Relative Flux')\nplt.title('Exoplanet Transit Light Curve (Trapezoid Model)')\nplt.grid(True)\nplt.legend()\nplt.ylim(0.98, 1.02)  # Set y-axis limits for better visualization\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to shift the coordinates by 5.7 units."
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(5.7)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you shift the coordinates by 3.2 units?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(3.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What does a coordinate shift of 2.1 units look like?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(2.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I find the nearest 3D match for a set of coordinates in a catalog?"
      },
      {
        "from": "assistant",
        "value": "match_coordinates_3d(matchcoord=my_coords, catalogcoord=ref_coords, nthneighbor=1, storekdtree=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a dimensionless unit that represents the speed of light c = 299792458 m/s in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Create a dimensionless unit representing speed of light\nc = u.m/u.s\nprint(c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a unit of angular frequency using Astropy, where \u03c9 = 2\u03c0f and f is 10 Hz?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define the frequency\nf = 10 * u.Hz\n# Create a unit of angular frequency\nomega = 2 * u.pi * f\nprint(omega)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a unit of acceleration using Astropy, where a = v^2/r and v = 1000 m/s and r = 1000 m?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n# Define the velocity and radius\nv = 1000 * u.m/u.s\nr = 1000 * u.m\n# Create a unit of acceleration\na = (v ** 2) / r\nprint(a)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am studying a galaxy with an exponential profile. Can you help me create a 2D Sersic model with an effective radius of 20 pixels, centered at position (120, 120), with amplitude of 150, and rotated by 30 degrees? I want to simulate a slightly elliptical galaxy with ellipticity of 0.2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create a 2D Sersic model (n=1 for exponential profile)\n# Convert ellipticity to axis ratio (b/a)\naxis_ratio = 1 - 0.2  # ellipticity = 1 - b/a\n\n# Create the model with specified parameters\ngalaxy_model = models.Sersic2D(\n    amplitude=150,      # Peak intensity\n    r_eff=20,            # Effective radius in pixels\n    n=1,                 # Exponential index\n    x_0=120,            # X center\n    y_0=120,            # Y center\n    ellip=0.2,          # Ellipticity\n    theta=np.radians(30)  # Rotation angle (convert 30\u00b0 to radians)\n)\n\n# Create coordinate grid (250x250 pixels)\ny, x = np.mgrid[0:250, 0:250]\n\n# Generate the 2D image\n    galaxy_image = galaxy_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I specify the center of a hexagonal offset pattern relative to a point source I am observing?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coords\nfrom astropy import units as u\n\ncenter = coords.ICRS(ra=12.5811111*u.hour, dec=0.69388889*u.deg)\n# Define your point source\npoint_source = coords.ICRS(ra=12.575*u.hour, dec=0.695*u.deg)\n# Create a SkyOffsetFrame centered on the point source\nsky_offset_frame = coords.SkyOffsetFrame(origin=point_source)\n# Now you can create a hexagonal offset pattern with this frame\nhex_pattern = [sky_offset_frame(lat=10*u.arcmin, lon=i*60*u.arcmin) for i in range(6)]\n# Print the coordinates of the hexagonal offset pattern\nfor i, position in enumerate(hex_pattern):\n    print(f\"Offset position {i+1}: RA={position.ra.to_string(unit=u.hour)}, \\n          Dec={position.dec.to_string()}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Analyze the distribution of asteroid sizes (in km) of the near-Earth asteroids in our solar system. Use Bayesian blocks for dynamic bin widths."
      },
      {
        "from": "assistant",
        "value": "...\n # Define asteroid sizes in km\n asteroid_sizes = np.array([10, 5, 20, 15, 8, 12, 25, 18, 22, 11])\n ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to apply this ring-shaped kernel to my image data?"
      },
      {
        "from": "assistant",
        "value": "convolve(data, kernel, boundary='wrap')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to create a ring-shaped kernel with a specific radius and width?"
      },
      {
        "from": "assistant",
        "value": "create_shell_kernel(radius=10, width=2, kernel_size=25)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the kernel size and height of the ring-like structure in my kernel?"
      },
      {
        "from": "assistant",
        "value": "create_shell_kernel(radius=15, width=3, kernel_size=31)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a linear stretch with a slope of 2 and an intercept of 1. What's the best way to use Astropy's LinearStretch class for this?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LinearStretch(slope=2, intercept=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a linear stretch with a slope of 0.5 and an intercept of 0. What's the best way to use Astropy's LinearStretch class for this?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LinearStretch(slope=0.5, intercept=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a linear stretch with no slope and no intercept. What's the best way to use Astropy's LinearStretch class for this?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LinearStretch(slope=1, intercept=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the exposure time of a camera with a 1/30s shutter speed."
      },
      {
        "from": "assistant",
        "value": "import astropy.time as at\nimport astropy.units as u\nexposure_time = at.time.value / 30\nprint(exposure_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the surface gravity of a object with a mass of 2 kg and a radius of 3 meters."
      },
      {
        "from": "assistant",
        "value": "import astropy.constants as ac\nimport astropy.units as u\nsurface_gravity = ac.G * 2 / (3**2)\nprint(surface_gravity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the wavelength of a red light with a frequency of 4 * 10^14 Hz."
      },
      {
        "from": "assistant",
        "value": "import astropy.constants as ac\nwavelength = ac.c / (4 * 10**14)\nprint(wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date and time to a different time zone?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy import units as u\n\nt = Time('2022-01-01 12:00:00', scale='utc')\n\nt utc = t.isot'\n\nt tz = t.utc.to(tz='us/pst')\n\nt pst = tz.isot\n\ntzone = pst.split('[')[-1].split(']')[0]\n\ntzone = tzone.replace('T', ' ')\n\ntzone = tzone[:-6]\n\ntzone = tzone + 'Z'\n\ntzone\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the celestial sphere's solid angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import Angle\n\nradius = Angle(10, u.degree)\nsolid_angle = radius ** 2 * (180 / np.pi) * u.deg**2\nprint(solid_angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the Green Bank Telescope."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\ngreen_bank = EarthLocation(lat=37.4192*u.deg, lon=-79.8466*u.deg, height=375*u.m)\nprint(green_bank)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Sine function with appropriate frequency and phase to match the observed periodicity of a celestial object. Can you provide an example of how to implement this in Python?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling import models, fitting\nimport matplotlib.pyplot as plt\n\n# Create sample time array (e.g., 1000 points over 2 periods)\nperiod = 0.89 * u.second  # Example period\nfrequency = 1/period\nstarted = np.linspace(0, 2*period.value, 1000)\n\n# Create sine model for pulse profile\n# A*sin(2\u03c0*f*t + \u03c6) + c where:\n# A = amplitude, f = frequency, \u03c6 = phase shift, c = vertical offset\namplitude = 1.0\nphase_shift = np.pi/4  # 45-degree phase shift\noffset = 0.5\n\n# Generate the pulse profile\npulse_profile = amplitude * np.sin(2*np.pi*frequency.value*started + phase_shift) + offset\n\n# Create model using astropy.modeling\n# Combine Sine1D with Const1D for the offset\nsine_model = models.Sine1D(\n    amplitude=amplitude,\n    frequency=frequency.value,\n    phase=phase_shift\n)\nconst_model = models.Const1D(amplitude=offset)\ncombined_model = sine_model + const_model\n\n# Plot the result\nplt.figure(figsize=(10, 6))\npplt.plot(started, pulse_profile, 'b-', label='Celestial Object Profile')\npplt.plot(started, combined_model(started), 'r--', label='Model Fit')\nplt.xlabel('Time (seconds)')\nplt.ylabel('Intensity')\nplt.title('Simulated Celestial Object Pulse Profile')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `Tangent1D` function from `astropy.modeling.models` to model a periodic signal with a phase shift?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling import models, fitting\nimport matplotlib.pyplot as plt\n\n# Create sample time array (e.g., 1000 points over 2 periods)\nperiod = 0.89 * u.second  # Example period\nfrequency = 1/period\ntime = np.linspace(0, 2*period.value, 1000)\n\n# Create tangent model for pulse profile\n# A*tan(2\u03c0*f*t + \u03c6) + c where:\n# A = amplitude, f = frequency, \u03c6 = phase shift, c = vertical offset\namplitude = 1.0\nphase_shift = np.pi/4  # 45-degree phase shift\noffset = 0.5\n\n# Generate the pulse profile\npulse_profile = amplitude * np.tan(2*np.pi*frequency.value*time + phase_shift) + offset\n\n# Create model using astropy.modeling\n# Combine Tangent1D with Const1D for the offset\ntangent_model = models.Tangent1D(\n    amplitude=amplitude,\n    frequency=frequency.value,\n    phase=phase_shift\n)\nconst_model = models.Const1D(amplitude=offset)\ncombined_model = tangent_model + const_model\n\n# Plot the result\nplt.figure(figsize=(10, 6))\nplt.plot(time, pulse_profile, 'b-', label='Periodic Signal Profile')\nplt.plot(time, combined_model(time), 'r--', label='Model Fit')\nplt.xlabel('Time (seconds)')\nplt.ylabel('Intensity')\nplt.title('Simulated Periodic Signal Pulse Profile')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Linear model with a slope and intercept to fit a dataset. Can you provide an example of how to use the `Linear1D` function from `astropy.modeling.models` in Python?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.modeling import models, fitting\nimport matplotlib.pyplot as plt\n\n# Create sample x and y values (e.g., 100 points)\nx = np.linspace(0, 10, 100)\ny = 2*x + 1\n\n# Create linear model for pulse profile\n# y = A*x + b where:\n# A = slope, b = intercept\nslope = 2\nintercept = 1\n\n# Generate the pulse profile\npulse_profile = slope*x + intercept\n\n# Create model using astropy.modeling\nlinear_model = models.Linear1D(slope=slope, intercept=intercept)\n\n# Plot the result\nplt.figure(figsize=(10, 6))\nplt.plot(x, pulse_profile, 'b-', label='Dataset Profile')\nplt.plot(x, linear_model(x), 'r--', label='Model Fit')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Simulated Dataset Pulse Profile')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a code snippet using Sersic1D to model a galaxy with a Sersic index of 2 and plot the surface brightness from 0 to 10 kpc?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic1D\nimport matplotlib.pyplot as plt\ncs1 = Sersic1D(amplitude=100, r_eff=5, n=2)\nr = np.linspace(0, 10, 1000)\nsurface_brightness = cs1(r)\nplt.figure(figsize=(8, 6))\nplt.plot(r, surface_brightness, 'b-', label='Sersic profile n=2')\nplt.axvline(x=5, color='r', linestyle='--', label='Effective radius')\nplt.axhline(y=100, color='r', linestyle='--')\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Surface Brightness')\nplt.title('Galaxy Surface Brightness Profile')\nplt.legend()\nplt.grid(True)\nplt.yscale('log') # Surface brightness typically shown in log scale\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a power law model with amplitude=1e-3, reference point=500 keV, and alpha=1.5,"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import PowerLaw1D\n\npower_law = PowerLaw1D(amplitude=1e-3, x_0=500.0, alpha=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a power law model with amplitude=5e-4, reference point=200 keV, and alpha=3.2,"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import PowerLaw1D\n\npower_law = PowerLaw1D(amplitude=5e-4, x_0=200.0, alpha=3.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a set of SkyCoord coordinates into pixels, using the astropy WCS library. First, let me import the necessary libraries."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Next, I need to create a SkyCoord object for a set of stars."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Now, I can use the skycoord_to_pixel function from the WCS utilities to convert the sky coordinates to pixel coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import skycoord_to_pixel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mean solar day?"
      },
      {
        "from": "assistant",
        "value": "The mean solar day is 24 hours."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the Julian Date?"
      },
      {
        "from": "assistant",
        "value": "JD = HJD - 0.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Modified Julian Date?"
      },
      {
        "from": "assistant",
        "value": "MJD = JD - 2400000.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compress a FITS file using the user-defined tile shape for astronomical images while preserving the faint features in my emission nebula data?"
      },
      {
        "from": "assistant",
        "value": "tile_shape=[256,256]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What compression algorithm is optimal for astronomical images as it preserves the subtle features in my emission nebula data?"
      },
      {
        "from": "assistant",
        "value": "RICE_1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compress a FITS file while preserving the scientific validity of the data, applying a suitable compression algorithm that is optimal for astronomical images?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io.fits import CompImageHDU; CompImageHDU(data=[1, 2, 3], compression_type='RICE_1')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the python code to calculate the distance between two points on a sphere (e.g., a celestial object on the surface of the Earth)? Use the astropy library and provide an example with 2 points with longitudes and latitudes of (37.7749\u00b0 N, 122.4194\u00b0 W) and (45.5236\u00b0 N, 122.6750\u00b0 W)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, Distance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can we use the Vincenty formula directly in astropy to calculate the distance between two points on a sphere? Provide an example code snippet if possible."
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my supernovae light curve [6.5, 7.1, 7.3, 6.5, 6.9, 6.7, 7.3, 7.5] measured at times [8, 9, 10, 11, 12, 13, 14, 15] days after detection, with measurement uncertainties [0.2, 0.3, 0.3, 0.2, 0.4, 0.3, 0.4, 0.3], how can I use bayesian_blocks to identify distinct phases in the evolution with a false alarm probability of 0.1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks\nimport numpy as np\n\n# Define the light curve data\n\t\t\times = np.array([8, 9, 10, 11, 12, 13, 14, 15])  # Days since detection\ntimes = np.array([6.5, 7.1, 7.3, 6.5, 6.9, 6.7, 7.3, 7.5])\nuncertainties = np.array([0.2, 0.3, 0.3, 0.2, 0.4, 0.3, 0.4, 0.3]\n\n# Calculate signal-to-noise ratio weights\nweights = 1.0 / (uncertainties ** 2)\n\n# Find the optimal bin edges using bayesian_blocks\n# p0=0.1 corresponds to 90% significance level (false alarm probability = 0.1)\nedges = bayesian_blocks(times, magnitudes, sigma=uncertainties, fitness='measures',\n                       p0=0.1)\n\n# Print the identified phase changes\nprint("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use convolve_fft to smooth a large galaxy image with a Gaussian kernel, taking into account any noise artifacts?"
      },
      {
        "from": "assistant",
        "value": "You can use the `convolve_fft` function to smooth a galaxy image with a Gaussian kernel, taking into account any noise artifacts. To do this, you can use the `Gaussian2DKernel` function to create a 2D Gaussian kernel, and then use the `convolve_fft` function to convolve the image with the kernel. You can also use the `boundary` parameter to specify how to handle boundaries, and the `normalize_kernel` parameter to normalize the kernel. Here is an example: `kernel = Gaussian2DKernel(x_stddev=3, x_size=25); smoothed_data = convolve_fft(image_data, kernel, boundary='wrap', normalize_kernel=True)`."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Update the third extension HDU with the data array of shape (1024, 1024) and add 'PROCESSING'='COMPLETE' to the header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\thdu = fits.HDUList(fits.PrimaryHDU(), fits.ImageHDU(data=np.random.rand(1024, 1024)))\n\thdu[1].header['PROCESSING'] = ('COMPLETE', 'Processing status')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Update the specified HDU with the input data/header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\thdul = fits.open('image.fits', mode='update');\n\thdul[1].data = np.random.rand(512, 512);\n\thdul[1].header['CORRECTION'] = ('COMPLETE', 'Correction status');\n\thdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Update the second extension HDU with the data array of shape (2048, 2048) and add 'CALIBRATION'='COMPLETE' to the header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\thdul = fits.open('image.fits', mode='update');\n\thdul[1].data = np.random.rand(2048, 2048);\n\thdul[1].header['CALIBRATION'] = ('COMPLETE', 'Calibration status');\n\thdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the proper motion of Sirius. Write code to create an ICRS object with its coordinates (RA=06h45m08.9s, Dec=-16d42m47s) and proper motion (pm_ra_cosdec=-1468.7 mas/yr, pm_dec=-1758.2 mas/yr)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy import units as u\n\nbarnards_star = ICRS(\n    ra=\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the proper motion of Procyon. Write code to create an ICRS object with its coordinates (RA=07h39m18.1s, Dec=+05d13m30s) and proper motion (pm_ra_cosdec=-1587.5 mas/yr, pm_dec=-777.9 mas/yr)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy import units as u\n\nbarnards_star = ICRS(\n    ra=\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the proper motion of Vega. Write code to create an ICRS object with its coordinates (RA=18h36m56.336s, Dec++38d47m01.3s) and proper motion (pm_ra_cosdec=284.0 mas/yr, pm_dec=-143.6 mas/yr)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy import units as u\n\nbarnards_star = ICRS(\n    ra=\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to compress an image with a tile shape of [16, 16] and a quantization level of 8.0."
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data, compression_type='RICE_1', tile_shape=[16, 16], quantize_level=8.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a compressed image with the 'GZIP_2' compression type and a tile shape of [32, 32]?"
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data, compression_type='GZIP_2', tile_shape=[32, 32], quantize_level=16.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compress an image with the 'RICE_2' compression type and a quantization level of 4.0."
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data, compression_type='RICE_2', quantize_level=4.0, tile_shape=[64, 64])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 4096x4096 pixel radio image array and need to create 5 overlapping 50x50 pixel samples near the center at position (2048, 2048). How can I do this while filling missing data with NaN values?"
      },
      {
        "from": "assistant",
        "value": "extract_edge_samples(data, center_pos=(2048, 2048), sample_size=50)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 4096x4096 pixel radio image array and need to create 3 partially overlapping 100x100 pixel samples near the edge at position (4095, 4095). How can I do this while preserving the entire original data in each sample?"
      },
      {
        "from": "assistant",
        "value": "extract_edge_samples(data, center_pos=(4095, 4095), sample_size=100)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 4096x4096 pixel radio image array and need to create 2 fully contained 200x200 pixel samples near the center at position (2050, 2050). How can I do this while filling missing data with NaN values?"
      },
      {
        "from": "assistant",
        "value": "extract_edge_samples(data, center_pos=(2050, 2050), sample_size=200)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D Gaussian filter kernel with a standard deviation of 1.0 in x and 2.0 in y, rotated by 45 degrees, and with a size of 21x21 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nGaussian2DKernel(x_stddev=1.0, y_stddev=2.0, theta=45, x_size=21, y_size=21)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the 90% confidence interval for 30 counts using the frequentist approach with sigma=2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\n\ncounts = 30\n\n# Calculate confidence interval for 90% confidence level\nlower_bound, upper_bound = poisson_conf_interval(counts, interval='frequentist-confidence', confidence_level=0.9, sigma=2)\n\nprint(f\"90% confidence interval for {counts} counts: ({lower_bound[0]:.1f}, {upper_bound[0]:.1f})\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a normalized trapezoid model with amplitude=0.5, width=0.4, slope=0.2, centered at x_0=1, and evaluate it at 500 points between -2 and 2 time units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create a normalized trapezoid model\n# amplitude=0.5: depth of transit\n# width=0.4: total duration of flat part\n# slope=0.2: duration of ingress/egress\ntrapezoid = models.Trapezoid1D(amplitude=0.5, x_0=1, width=0.4, slope=0.2)\n\n# Generate time array for evaluation\n# 1 - flux gives the transit shape (dip in brightness)\ntryme = np.linspace(-2, 2, 500)\n\n# Evaluate the trapezoid model\n# 1 - flux gives the transit shape (dip in brightness)\nflux = 1 - trapezoid(time)\n\n# flux now contains normalized light curve values\n# where 1.0 is out of transit and minimum value is during transit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 3rd degree polynomial with coefficients c0 = 1, c1 = -2, c2 = 3, c3 = 4?"
      },
      {
        "from": "assistant",
        "value": "models.Polynomial1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a 2nd degree polynomial to data with phase and flux values between -0.5 and 0.5, with flux values between 0.95 and 1.05?"
      },
      {
        "from": "assistant",
        "value": "models.Polynomial1D(degree=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the Keck Observatory using geodetic coordinates (longitude: -15.2874 degrees, latitude: 34.0431 degrees, height: 4200 meters)."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for Keck Observatory using geodetic coordinates\nkeck = EarthLocation.from_geodetic(\n    lon=-15.2874*u.deg,\n    lat=34.0431*u.deg,\n    height=4200*u.m\n)\n\n# Print the location object to verify\nprint(f\"Keck Observatory Location: {keck}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for Mauna Kea using geodetic coordinates (longitude: -155.4639 degrees, latitude: 19.8233 degrees, height: 4200 meters)."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for Mauna Kea using geodetic coordinates\nmauna_kea = EarthLocation.from_geodetic(\n    lon=-155.4639*u.deg,\n    lat=19.8233*u.deg,\n    height=4200*u.m\n)\n\n# Print the location object to verify\nprint(f\"Mauna Kea Location: {mauna_kea}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the VLA using geocentric coordinates (x: -8462875.51 meters, y: -3464755.38 meters, z: 15627461.3 meters)."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for VLA using geocentric coordinates\nvla = EarthLocation.from_geocentric(\n    x=-8462875.51*u.m,\n    y=-3464755.38*u.m,\n    z=15627461.3*u.m\n)\n\n# Print the location object to verify\nprint(f\"VLA Location: {vla}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a noisy image of the Andromeda Galaxy with dimensions 1024x768 pixels. How can I write code to smooth it using a Box2DKernel with width=3 pixels to reduce the noise while preserving the larger structures?"
      },
      {
        "from": "assistant",
        "value": "astropy.py"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a noisy image of the Orion Nebula with dimensions 1280x960 pixels. How can I write code to smooth it using a Box2DKernel with width=7 pixels to reduce the noise while preserving the larger structures?"
      },
      {
        "from": "assistant",
        "value": "astropy.py"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a noisy image of the Milky Way with dimensions 2048x1536 pixels. How can I write code to smooth it using a Box2DKernel with width=11 pixels to reduce the noise while preserving the larger structures?"
      },
      {
        "from": "assistant",
        "value": "astropy.py"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the position of the Sun at sunrise and sunset on August 13, 2023, at a location with latitude 30.0\u00b0N and longitude 120.0\u00b0E."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define location\nlocation = EarthLocation(lat=30.0*u.deg, lon=120.0*u.deg)\n\n# Create time array for August 13, 2023\nbase_date = Time('2023-08-13')\n# Get sunrise and sunset times\nsun_times = base_date.sidereal_time('sun', 90*u.deg)\nsunrise = base_date + sun_times\nsunset = base_date - sun_times\n\n# Get Sun's position for each time\nfor time in [sunrise, sunset]:\n    # Get Sun's position\n    sun = get_sun(time)\n    # Transform to local horizontal coordinates (altitude/azimuth)\n    altaz_frame = AltAz(obstime=time, location=location)\n    sun_altaz = sun.transform_to(altaz_frame)\n    # Print results\n    print(f'Sun's position at {time.datetime.strftime('%Y-%m-%d %H:%M')} Beijing time:')\n    print(f'Altitude: {sun_altaz.alt:.2f}\u00b0')\n    print(f'Azimuth: {sun_altaz.az:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the catalog for the brightest stars in the Milky Way?"
      },
      {
        "from": "assistant",
        "value": "[SkyCoord of 10 brightest stars]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the position angle of a binary star system?"
      },
      {
        "from": "assistant",
        "value": "[Python code to calculate position angle]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give me an example of how to use astropy.coordinates to calculate the distance between two celestial objects?"
      },
      {
        "from": "assistant",
        "value": "[Python code to calculate distance]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to apply a scaling of 1.2e-15 to convert my Lorentz1D model from arbitrary units to erg/cm^2/s/Hz. How can I implement this using the Multiply model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D, Multiply\nfrom astropy import units as u\ncenter = 1e9*u.Hz\nwidth=1e6*u.Hz\namplitude = 1e-10\nlore_model = Lorentz1D(center=center, width=width, amplitude=amplitude)\nscale_model = Multiply(factor=1.2e-15)\nscaled_lore_model = lore_model * scale_model\nprint(scaled_lore_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I multiply my Chebyshev1D model by 2.5 using the Multiply model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Chebyshev1D, Multiply\nfrom astropy import units as u\ndegree=2\ncoeffs=[1.0, 2.0, 3.0]\ncheb_model = Chebyshev1D(degree=degree, coeffs=coeffs)\nmultiply_model = Multiply(factor=2.5)\nmultiplied_cheb_model = cheb_model * multiply_model\nprint(multiplied_cheb_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to apply a scaling of 5e-17 to convert my Polynomial1D model from arbitrary units to erg/cm^2/s. How can I implement this using the Multiply model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial1D, Multiply\nfrom astropy import units as u\ndegree=3\ncoeffs=[1.0, 2.0, 3.0, 4.0]\npol_model = Polynomial1D(degree=degree, coeffs=coeffs)\nscale_model = Multiply(factor=5e-17)\nscaled_pol_model = pol_model * scale_model\nprint(scaled_pol_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the biweight scale of the data [1, 2, 3, 4, 5] using the sample median as the location estimate."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nimport numpy as np\n\n# Define data\ndata = np.array([1, 2, 3, 4, 5])\n\n# Calculate biweight scale\nbiweight_scale(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.coordinates.spherical_to_cartesian to convert spherical polar coordinates to rectangular cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nfrom astropy import units as u\nr = 10 * u.pc\nlat = 30 * u.deg\nlon = 45 * u.deg\nx, y, z = spherical_to_cartesian(r, lat, lon)\nprint(f'The cartesian coordinates are ({x}, {y}, {z})')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the parallax of a star given its distance and position in the sky?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz, FK5\nfrom astropy.time import Time\nfrom astropy import units as u\n\n# Define observatory location (example coordinates - replace with your university's)\nobservatory = EarthLocation(lat=40.0*u.deg, lon=-75.0*u.deg, height=100*u.m)\n\n# Define star position (example: Vega)\nstar = SkyCoord('18h36m56.33635s +38d47m01.2802s', frame='icrs')\n\n# Set observation parameters\nstart_time = Time('2024-01-15 20:00:00') # Starting time\ndistance = 10*u.pc  # Distance to the star\n\n# Calculate parallax\nparallax = distance / (1*u.au)\n\n# Print result\nprint(parallax)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in the position angle between the celestial pole and the North Star (Polaris). How can I calculate it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import ICRS\n\n# Define the celestial pole and Polaris\ncelestial_pole = SkyCoord(ra=12*u.hour, dec=90*u.degree, frame=ICRS)\npolaris = SkyCoord(ra=2.308*u.hour, dec=89.318*u.degree, frame=ICRS)\n\n# Calculate the position angle\nposition_angle = celestial_pole.position_angle(polaris)\nprint(position_angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use ZScaleInterval to enhance subtle features in my galaxy image data array (1024x1024 pixels)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ZScaleInterval\ntext = ... # Your text here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply ZScaleInterval with a high contrast of 0.5, sampling 500 points, and liberal rejection (3-sigma) to determine optimal display limits for my supernova data array (2048x2048 pixels). How can I do that?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ZScaleInterval\ntext = ... # Your text here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of using ZScaleInterval with a low contrast of 0.1, sampling 1000 points, and conservative rejection (2.5-sigma) to determine optimal display limits for my star formation data array (512x512 pixels)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ZScaleInterval\ntext = ... # Your text here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular separation between the North Pole and Timbuktu (RA=18.0 degrees, Dec=23.0 degrees)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import angular_separation\nfrom astropy import units as u\n\n# Define coordinates for North Pole and Timbuktu\nra1 = 0 * u.degree  # North Pole RA\ndec1 = 90 * u.degree  # North Pole Dec\nra2 = 18.0 * u.degree  # Timbuktu RA\ndec2 = 23.0 * u.degree  # Timbuktu Dec\n\ngap = angular_separation(ra1, dec1, ra2, dec2)\ngap_arcsec = gap.to(u.arcsec)\nprint(f\"Angular separation between North Pole and Timbuktu: {gap_arcsec:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the spherical coordinates for the point (1, 2, 3) in 3D space?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\n cartesian_to_spherical(x=1, y=2, z=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a trapezoid shape with amplitude 2, center position 1, width 1, and slope 0.5"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Trapezoid1D(amplitude=2.0, x_0=1.0, width=1.0, slope=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a trapezoid shape with amplitude 3, center position 2, width 2, and slope 0.25"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Trapezoid1D(amplitude=3.0, x_0=2.0, width=2.0, slope=0.25)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a trapezoid shape with amplitude 1, center position 0, width 0.5, and slope 1"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Trapezoid1D(amplitude=1.0, x_0=0.0, width=0.5, slope=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying star formation regions in the Pleiades cluster. I have coordinates for 100 young stellar objects (YSOs) at (ra_yso, dec_yso) and 50 dense molecular cores at (ra_cores, dec_cores). Write code to identify all YSO-core pairs within 0.05 parsec projected separation."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\ncore_coords = SkyCoord(ra=ra_cores*u.degree, dec=dec_cores*u.degree, distance=140*u.pc)\nyso_coords = SkyCoord(ra=ra_yso*u.degree, dec=dec_yso*u.degree, distance=140*u.pc)\nidx, d2d, _ = yso_coords.match_to_catalog_sky(core_coords)\nphys_sep = 2 * 140 * u.pc * np.sin(d2d/2)\nclose_pairs = []\nfor i, (idx_match, separation) in enumerate(zip(idx, phys_sep)):\n    if separation <= 0.05*u.pc:\n        close_pairs.append({'yso_index': i, 'core_index': idx_match, 'separation_pc': separation.value})\nprint(f'Found {len(close_pairs)} YSO-core pairs within 0.05 pc')\nfor pair in close_pairs:\n    print(f'YSO {pair['yso_index']} - Core {pair['core_index']}: {pair['separation_pc']:.3f} pc'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate synthetic data with a constant background level of 2.5 counts and add sinusoidal noise with amplitude 0.5 over 100 points."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const1D, Sine1D\nimport numpy as np\n\n# Create array of 100 x-points\nx = np.linspace(0, 99, 100)\n\n# Initialize constant model with amplitude 2.5\nconst_model = Const1D(amplitude=2.5)\nbaseline = const_model(x)\n\n# Initialize sinusoidal model with amplitude 0.5 and period 10\nsin_model = Sine1D(amplitude=0.5, period=10)\nnoise = sin_model(x)\n\n# Add noise to baseline\nsynthetic_data = baseline + noise"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create synthetic data with a constant background level of 1.2 counts and add exponential noise with scale 0.2 over 50 points."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const1D, Exp1D\nimport numpy as np\n\n# Create array of 50 x-points\nx = np.linspace(0, 49, 50)\n\n# Initialize constant model with amplitude 1.2\nconst_model = Const1D(amplitude=1.2)\nbaseline = const_model(x)\n\n# Initialize exponential model with scale 0.2\nexp_model = Exp1D(scale=0.2)\nnoise = exp_model(x)\n\n# Add noise to baseline\nsynthetic_data = baseline + noise"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate synthetic data with a constant background level of 4.0 counts and add polynomial noise with degree 2 over 200 points."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Const1D, Polynomial1D\nimport numpy as np\n\n# Create array of 200 x-points\nx = np.linspace(0, 199, 200)\n\n# Initialize constant model with amplitude 4.0\nconst_model = Const1D(amplitude=4.0)\nbaseline = const_model(x)\n\n# Initialize polynomial model with degree 2 and coefficients [1, 0, 0]\npol_model = Polynomial1D(degree=2, c0=1, c1=0, c2=0)\nnoise = pol_model(x)\n\n# Add noise to baseline\nsynthetic_data = baseline + noise"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Tukey's Biweight function to perform {\u00b1}1% confidence interval for my measurement on a discrete data set?"
      },
      {
        "from": "assistant",
        "value": "from scipy import stats\nimport numpy as np\n\ndata = np.random.normal(loc=5, scale=2, size=100)\n\ntl Bayesian credible interval for the mean\nm = stats.tukey_biweight(cavigraph=0.95)\nprint(f'The 95% Tukey CI for the mean is ({stats.tukey_biweight.census(data, c=0.95)[0]},{stats.tukey_biweight.census(data, c=0.95)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use matplotlib to plot a specific index of a numpy array?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndata=np.array([1,2,3,4,5])\nindex=np.array([0,3])\nplt.plot(data[index])\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the random library to generate a list of random numbers in the range [0, 1)?"
      },
      {
        "from": "assistant",
        "value": "import random\nlist1 = [random.random() for _ in range(10)]\nprint(list1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the lesser of 2 functions from the operator module to calculate the minimum between two numbers without using conditional statements?"
      },
      {
        "from": "assistant",
        "value": "import operator\nprint(operator.ltg mynums)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe the Voigt profile in your own words."
      },
      {
        "from": "assistant",
        "value": "The Voigt profile is a combination of a Gaussian and a Lorentzian profile. It is often used to model spectral lines in astrophysics and other fields."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare the Voigt profile with the Gaussian and Lorentzian profiles."
      },
      {
        "from": "assistant",
        "value": "The Voigt profile is a more complex profile that includes both Gaussian and Lorentzian components. Like the Gaussian profile, it has a symmetric shape but with broader wings. Like the Lorentzian profile, it has a sharp peak and a gradual decay at the edges."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to use the astropy.modeling.models.Voigt1D function to create a Voigt profile."
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.modeling.models.Voigt1D function to create a Voigt profile by specifying the position of the peak (x_0), the Lorentzian amplitude (amplitude_L), the Lorentzian full width at half maximum (fwhm_L), and the Gaussian full width at half maximum (fwhm_G). You can then use this profile to model spectral lines or other phenomena."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a FITS header card for the telescope pointing with keyword 'TELESCOP' set to 'Parkes', with no value, how can I create this card with the HCAL format?"
      },
      {
        "from": "assistant",
        "value": "card = Card('TELESCOP', None, 'Telescope name', format='HCAL')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a FITS header card for the telescope position with keyword 'RA' set to  5.23456789, with fixed decimal precision of 0.0001, how can I create this card with the EDDRG format?"
      },
      {
        "from": "assistant",
        "value": "card = Card('RA', 5.23456789, 'Right Ascension in degrees', format='EDDRG', format='F10.4')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a FITS header card for the observing date with keyword 'DATE-OBS' set to '2022-01-01', with no value, how can I create this card with the ISOPH format?"
      },
      {
        "from": "assistant",
        "value": "card = Card('DATE-OBS', None, 'Observing date', format='ISOPH')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement a parameter that automatically converts between astronomical units (AU) and kilometers in a planetary orbit model?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import Distance\n\nclass OrbitalParameters:\n    def __init__(self, semi_major_axis):\n        self.semi_major_axis = Distance(semi_major_axis * u.au)\n\n    @property\n    def a_au(self):\n        return self.semi_major_axis.to(u.au).value\n\n    @property\n    def a_km(self):\n        return self.semi_major_axis.to(u.km).value\n\n    def __str__(self):\n        return f'Semi-major axis: {self.a_au:.2f} AU = {self.a_km:.0f} km'\n\nearth_orbit = OrbitalParameters(1.0)\nprint(earth_orbit)\nprint(f'Distance in AU: {earth_orbit.a_au}')\nprint(f'Distance in km: {earth_orbit.a_km}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a parameter that allows users to input values in parsecs and returns them in kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import Distance\n\nclass Parameter:\n    def __init__(self, value):\n        self.value = Distance(value * u.pc).to(u.km).value\n\nprint(Parameter(1.0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement a parameter that automatically converts between square arcseconds and square milliarcseconds in an astronomical image analysis model?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import Angle\n\nclass Parameter:\n    def __init__(self, value):\n        self.value = Angle(value * u.arcsec ** 2).to(u.mas ** 2).value\n\nprint(Parameter(1.0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing an image with a dynamic range of 1000:1. Can you show me how to implement a PercentileInterval normalization keeping the central 90% of the pixels and sampling from 500 random points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\n\n# Create sample image array (for demonstration)\nxray_data = np.random.uniform(0, 1000, size=(1000, 1000))\n\n# Initialize PercentileInterval normalizer\n# percentile=90 keeps central 90% of pixels\n# n_samples=500 randomly samples 500 points for computing percentiles\nnorm = PercentileInterval(percentile=90, n_samples=500)\n\n# Apply normalization\n# This will clip the data to show only values between 2.5th and 97.5th percentiles\nnormalized_data = norm(xray_data)\n\n# Print min/max of normalized data to verify clipping\nprint(f\"Normalized data range: {normalized_data.min():.2f} to {normalized_data.max():.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a spectral data with a dynamic range of 10000:1. Can you show me how to implement a PercentileInterval normalization keeping the central 80% of the pixels and sampling from 2000 random points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\n\n# Create sample spectral data array (for demonstration)\nxray_data = np.random.uniform(0, 10000, size=(1000, 1000))\n\n# Initialize PercentileInterval normalizer\n# percentile=80 keeps central 80% of pixels\n# n_samples=2000 randomly samples 2000 points for computing percentiles\nnorm = PercentileInterval(percentile=80, n_samples=2000)\n\n# Apply normalization\n# This will clip the data to show only values between 2.5th and 97.5th percentiles\nnormalized_data = norm(xray_data)\n\n# Print min/max of normalized data to verify clipping\nprint(f\"Normalized data range: {normalized_data.min():.2f} to {normalized_data.max():.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a survey data with a dynamic range of 5000:1. Can you show me how to implement a PercentileInterval normalization keeping the central 95% of the pixels and sampling from 100 random points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\nimport numpy as np\n\n# Create sample survey data array (for demonstration)\nxray_data = np.random.uniform(0, 5000, size=(1000, 1000))\n\n# Initialize PercentileInterval normalizer\n# percentile=95 keeps central 95% of pixels\n# n_samples=100 randomly samples 100 points for computing percentiles\nnorm = PercentileInterval(percentile=95, n_samples=100)\n\n# Apply normalization\n# This will clip the data to show only values between 2.5th and 97.5th percentiles\nnormalized_data = norm(xray_data)\n\n# Print min/max of normalized data to verify clipping\nprint(f\"Normalized data range: {normalized_data.min():.2f} to {normalized_data.max():.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between LinearLSQFitter and LevMarLSQFitter?"
      },
      {
        "from": "assistant",
        "value": "LinearLSQFitter uses numpy.linalg.lstsq for fitting, while LevMarLSQFitter uses the Levenberg-Marquardt algorithm."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the LinearLSQFitter to fit a quadratic model?"
      },
      {
        "from": "assistant",
        "value": "You can use LinearLSQFitter with a quadratic model from astropy.modeling.models."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the R-squared value for a perfectly fitting model?"
      },
      {
        "from": "assistant",
        "value": "The R-squared value for a perfectly fitting model is 1."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of how to fit a Gaussian profile to some data using the SLSQPLSQFitter?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\ngaussian = models.Gaussian2D(amplitude=10, x_mean=0, y_mean=0, x_stddev=2, y_stddev=1)\nfitting\u043b\u0435\u043d\u043d\u043e\u043e_SLSQPLSQFitter(gaussian, x, y, data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the biweight location function in astropy.stats to find the central location of a dataset with some outliers?"
      },
      {
        "from": "assistant",
        "value": "# Import required function from astropy.stats\nfrom astropy.stats import biweight_location\n\n# Define the data (in km/s)\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Calculate robust central velocity using biweight location\n# c=7.0 is the tuning constant that determines the resistance to outliers\ncentral_velocity = biweight_location(data, c=7.0)\n\n# Print result\nprint(f\"Robust central velocity: {central_velocity:.1f} km/s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the velocity profile of gas in a galactic outflow, which shows a plateau region with gradual acceleration at the edges. Could you show me how to create a mathematical model for this using Astropy's modeling tools?"
      },
      {
        "from": "assistant",
        "value": "model = Trapezoid1D(amplitude=1000, x_0=2, width=0.5, slope=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model the brightness of a star as a function of wavelength. I'd like to use a Trapezoid1D model. How do I add a fixed parameter to the model?"
      },
      {
        "from": "assistant",
        "value": "model = Trapezoid1D(amplitude=1000, x_0=2, width=0.5, slope=5); model.fixed['amplitude'] = True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model the brightness of a star as a function of wavelength. I'd like to use a Trapezoid1D model. How do I add a tie between two parameters in the model?"
      },
      {
        "from": "assistant",
        "value": "model = Trapezoid1D(amplitude=1000, x_0=2, width=0.5, slope=5); model.tied['x_0'].func = lambda: model.width/2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model the radial velocity of a star with a Keplerian model."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\\nimport numpy as np\\n\\n# Create time and radial velocity arrays\\ntime = np.array([1, 2, 3, 4, 5])\\nrv = np.array([10, 20, 30, 40, 50])\\n\\n# Initialize the Keplerian model\\nkeplerian_model = models.Keplerian1D(amplitude=1, \\$period=2, \\$eccentricity=0.5, \\$inclination=30, \\$longitude_of_ascending_node=0, \\$argument_of_periapsis=90)\\n\\n# Initialize the fitter\\nfrom astropy.modeling.fitting import LevMarLSQFitter\\n#fitter = LevMarLSQFitter()\\nfitter = models.FittingWithSigma()\\n\\n# Fit the model to the data\\nfitted_model = fitter(keplerian_model, rv, time)\\n\\n# Print the results\\nprint(f'Period: {fitted_model.period.value:.3e}')\\nprint(f'Amplitude: {fitted_model.amplitude.value:.3f}')\\nprint(f'Eccentricity: {fitted_model.eccentricity.value:.3f}')\\nprint(f'Inclination: {fitted_model.inclination.value:.3f}')\\n\\n# Calculate fitted values for plotting\\nfitted_rv = fitted_model(time)\\n\\n# Print the fitted values\\nprint('\\nFitted radial velocity values:')\\nfor t, v in zip(time, fitted_rv):\\n    print(f'Time: {t}, Fitted RV: {v:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a histogram of the measured transit depths across multiple observations, using the 'blocks' algorithm."
      },
      {
        "from": "assistant",
        "value": "hist(x, bins='blocks')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a histogram of the measured transit depths across multiple observations, using Scott's rule to determine bins."
      },
      {
        "from": "assistant",
        "value": "hist(x, bins='scott')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot a histogram of the measured transit depths across multiple observations, using the Freedman-Diaconis rule to determine bins."
      },
      {
        "from": "assistant",
        "value": "hist(x, bins='freedman')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use a Gaussian kernel with sigma=2 to smooth a 2D image with various features?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import convolve, Gaussian2DKernel\n\n# Create sample data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nx, y = np.meshgrid(x, y)\nnoise = np.random.normal(0, 1, x.shape)\nf = np.exp(-(x**2 + y**2) / (2 * 2**2))\n\n# Convolve the image with a Gaussian kernel\nkernel = Gaussian2DKernel(x_stddev=2)\nsmoothed = convolve(noise + f, kernel, preserve_nan=False)\n\n# The smoothed image now contains the smoothed features"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use a Boxcar kernel to smooth a 1D time series with missing values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import convolve, Box1DKernel\n\n# Create sample data (in practice this would be your input data)\ntime_series = np.random.normal(1.0, 0.1, 1000)\n# Add some NaN values randomly\ntime_series[np.random.randint(0, 1000, 100)] = np.nan\n\n# Create a Boxcar kernel\nboxcar_kernel = Box1DKernel(5)\n\n# Convolve the time series with the Boxcar kernel\nsmoothed_series = convolve(time_series, boxcar_kernel, preserve_nan=True)\n\n# The smoothed_series now contains the smoothed time series with NaN values"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use a Custom Kernel to smooth a 3D cube with different features on each axis?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import convolve, CustomKernel\n\n# Create sample data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nz = np.linspace(-10, 10, 100)\nx, y, z = np.meshgrid(x, y, z)\nnoise = np.random.normal(0, 1, x.shape)\nf1 = np.exp(-(x**2 + y**2) / (2 * 2**2))\nf2 = np.exp(-(y**2 + z**2) / (2 * 2**2))\nf3 = np.exp(-(x**2 + z**2) / (2 * 2**2))\n\n# Convolve the cube with a Custom Kernel\nkernel = CustomKernel(np.array([[0.1, 0.2, 0.1], [0.2, 0.4, 0.2], [0.1, 0.2, 0.1]]))\nsmoothed = convolve(noise + f1 + f2 + f3, kernel, preserve_nan=False)\n\n# The smoothed cube now contains the smoothed features"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.io.fits.open to read a FITS file without scaling the image data?"
      },
      {
        "from": "assistant",
        "value": "do_not_scale_image_data=True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I open a FITS file with memory mapping enabled and ignore the missing end card?"
      },
      {
        "from": "assistant",
        "value": "memmap=True, ignore_missing_end=True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.io.fits.open to read a FITS file with unsigned integer data?"
      },
      {
        "from": "assistant",
        "value": "uint=True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Shirley background to my XPS data. Please provide an example code using astropy.modelingabble.background.ShirleyBackground."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import background, models\n\ng = background.ShirleyBackground(amplitude=1, cutoff_energy=500)\ngauss = models.Gaussian1D(amplitude=1, mean=300, stddev=50)\nmodel = gauss + g\nresult = model(x)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to fit a power law to my XPS data. Can you show me how to use astropy.modelingolandoids PowerLaw1D to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\ngamma = models.PowerLaw1D\ng = fitting.LevMarLSQFitter(gamma)\ng smoothly = g.fit(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have some XPS data with a Shirley background and a power law signal. I want to fit the data with both components. Please provide an example code using astropy.modeling."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import background, models, fitting\ng = background.ShirleyBackground(amplitude=1, cutoff_energy=500)\ngauss = models.Gaussian1D(amplitude=1, mean=300, stddev=50)\ngamma = models.PowerLaw1D\ng smoothly = g + gauss + gamma\nfitter = fitting.LevMarLSQFitter(g_smooth)\nfitted_model = fitter.fit(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the true ecliptic coordinate of a star at a distance of 10 parsecs from the center of the Sun with an ecliptic longitude of 30 degrees and an ecliptic latitude of 20 degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\ncos_lat = u.cos(20*u.deg)\nlon = 30*u.deg\nlat = 20*u.deg\ndistance = 10*u.pc\nstar_pos = SkyCoord(lon, lat, distance=distance, frame='heliocentrictrueecliptic')\nprint('True Ecliptic Coordinate of the Star: ', star_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular separation between the North Star, Polaris (RA=2h4m34.6s, Dec=+89\u00b020'36.2\"), and the star Vega (RA=18h36m56.34s, Dec=+38\u00b047'04.9\")?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both stars using their RA/Dec coordinates\npolaris = SkyCoord('2h4m34.6s', '+89d20m36.2s', frame='icrs')\nvega = SkyCoord('18h36m56.34s', '+38d47m4.9s', frame='icrs')\n\n# Calculate angular separation between the stars\ndata = polaris.separation(vega)\n\n# Convert to degrees for easier understanding\ndata_deg = data.to(u.degree)\n\nprint(f'Angular separation between Polaris and Vega: {data_deg:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply a square root scaling to enhance the visibility of faint features in a galaxy image while preserving the brighter structures?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mathematical formula for the square root stretch?"
      },
      {
        "from": "assistant",
        "value": "y = \u221ax"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the square root stretch for other types of images besides galaxy images?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use it for any image where you want to enhance faint features while preserving brighter structures."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2D model with amplitude=1.2, centered at (150, 150), inner radius=50 pixels and width=10 pixels, and evaluate it on a 300x300 pixel grid?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Ring2D\ndef ring_model(x, y):\n    # Create Ring2D model with specified parameters\n    # amplitude: peak intensity of the ring\n    # x_0, y_0: center position\n    # r_in: inner radius\n    # width: width of the ring\n    ring_model = Ring2D(\n        amplitude=1.2,      # Peak intensity\n        x_0=150, y_0=150,  # Center position\n        r_in=50,          # Inner radius\n        width=10           # Width of the ring\n    )\n    # Evaluate the model on the coordinate grid\n    ring_data = ring_model(x, y)\n    return ring_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Astropy Linear1D model to fit a linear relationship between the brightness and the time of a celestial event?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([1, 2, 3, 4, 5])\nbrightness = np.array([100, 120, 150, 180, 200])\n\nlinear_model = models.Linear1D()\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(linear_model, time, brightness)\n\nprint(f\"Slope (brightness increase rate): {fitted_model.slope.value:.2f} units per unit time\")\nprint(f\"Y-intercept: {fitted_model.intercept.value:.2f} units\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the biweight midvariance of a dataset with outliers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance, mad_std\n\nbiweight_midvariance(x, c=6.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight midvariance of a normal distribution?"
      },
      {
        "from": "assistant",
        "value": "x = [1,2,3,4,5]\nbiweight_midvariance(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to adjust the biweight midvariance for the number of rejected values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance, mad_std\nc = 9.0\ndata = [1, 2, None, 4, 5]\nbiweight_midvariance(data, c=c, modify_sample_size=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a face-on disk galaxy and need to combine two Sersic2D components: a bulge (n=4, r_eff=8, amplitude=3) and a disk (n=1, r_eff=20, amplitude=1), both centered at (40,40). The bulge should be moderately flattened (ellip=0.5) while the disk should be highly flattened (ellip=0.9). How can I create and sum these components?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a spiral galaxy with a central black hole and need to combine two Sersic2D components: a nucleus (n=0.5, r_eff=2, amplitude=10) and a disk (n=1, r_eff=15, amplitude=5), both centered at (50,50). The nucleus should be highly flattened (ellip=0.95) while the disk should be moderately flattened (ellip=0.4). How can I create and sum these components?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a elliptical galaxy and need to combine two Sersic2D components: a bulge (n=4, r_eff=12, amplitude=4) and a halo (n=0.5, r_eff=25, amplitude=2), both centered at (60,60). The bulge should be moderately elliptical (ellip=0.3) while the halo should be highly elliptical (ellip=0.98). How can I create and sum these components?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to merge two tables with different integer index columns. How can I handle the TableMergeError?"
      },
      {
        "from": "assistant",
        "value": "try:\n    merged = vstack([v_data, b_data])\nexcept astropy.table.TableMer..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm faced with a situation where I'm trying to merge two tables with different string column types. How can I catch the TableMergeError and handle it creatively?"
      },
      {
        "from": "assistant",
        "value": "try:\n    merged = vstack([v_data, b_data])\nexcept astropy.table.TableMer..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm getting a TableMergeError when merging two tables with different float precision. How can I resolve it by avoiding the direct merge?"
      },
      {
        "from": "assistant",
        "value": "try:\n    merged = vstack([v_data, b_data])\nexcept astropy.table.TableMer..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the haversine formula in Python to calculate the distance between two points on a sphere?"
      },
      {
        "from": "assistant",
        "value": "import math"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I plot specific columns of a numpy array?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform the Kruskal-Wallis H-test in Python using the scipy library?"
      },
      {
        "from": "assistant",
        "value": "from scipy.stats import kruskal"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create 1 micron radius circle in the data while, at the same time, error propagating the uncertainty of the value?"
      },
      {
        "from": "assistant",
        "value": "ccd.data[ccd<center_x-1:center_x+2, center_y-1:center_y+2] = 1e3 # pixels"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I mask 2 by 2 pixels to the right of the center of my image?"
      },
      {
        "from": "assistant",
        "value": "ccd.mask[center_x+2:center_x+4, : ] = True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I store all the exposures of my 3 CCD images in an array?"
      },
      {
        "from": "assistant",
        "value": "exposures = {'image1': image1, 'image2': image2, 'image3': image3}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the difference between AltAz and AltAzm? How can the AltAzm be used in astropy.coordinates?"
      },
      {
        "from": "assistant",
        "value": "AltAz and AltAzm are both altitude-azimuth coordinate systems. The main difference between them is that AltAz is based on the WGS84 ellipsoid, while AltAzm is based on the ITRF ellipsoid. In astropy.coordinates, you can use AltAzm by creating an instance of the AltAzm class and specifying the appropriate parameters, such as the location and time of the observation."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat profile with a core width of 1.5 and a power index of 2.2, centered at (3, 4) with an amplitude of 500."
      },
      {
        "from": "assistant",
        "value": "moffat_2d = models.Moffat2D(amplitude=500, x_0=3, y_0=4, gamma=1.5, alpha=2.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have parallax measurements [0.03, 0.035, 0.025, 0.028, 0.032] arcsec and corresponding brightness values [9.1, 8.7, 9.3, 9.0, 8.5] magnitudes for a group of stars. Perform a linear fit to check for a possible correlation using LinearLSQFitter."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\\nimport numpy as np\\n\\n# Create sample data\\nparallax = np.array([0.03, 0.035, 0.025, 0.028, 0.032])  # parallax in arcsec\\nmagnitude = np.array([9.1, 8.7, 9.3, 9.0, 8.5])          # apparent magnitude\\n\\n# Initialize the linear model and fitter\\nline_init = models.Linear1D()\\nfit_line = fitting.LinearLSQFitter()\\n\\n# Fit the data\\nfitted_model = fit_line(line_init, parallax, magnitude)\\n\\n# Print the results\\nprint(f\"Slope: {fitted_model.slope.value:.3f}\")\\nprint(f\"Intercept: {fitted_model.intercept.value:.3f}\")\\n\\n# Calculate R-squared to check correlation strength\\nresiduals = magnitude - fitted_model(parallax)\\nss_res = np.sum(residuals**2)\\nss_tot = np.sum((magnitude - np.mean(magnitude))**2)\\nr_squared = 1 - (ss_res / ss_tot)\\nprint(f\"R-squared: {r_squared:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have parallax measurements [0.04, 0.045, 0.035, 0.038, 0.042] arcsec and corresponding brightness values [10.2, 9.8, 10.5, 10.2, 9.7] magnitudes for a group of stars. Use LinearLSQFitter to perform a linear fit and check for a possible correlation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\\nimport numpy as np\\n\\n# Create sample data\\nparallax = np.array([0.04, 0.045, 0.035, 0.038, 0.042])  # parallax in arcsec\\nmagnitude = np.array([10.2, 9.8, 10.5, 10.2, 9.7])          # apparent magnitude\\n\\n# Initialize the linear model and fitter\\nline_init = models.Linear1D()\\nfit_line = fitting.LinearLSQFitter()\\n\\n# Fit the data\\nfitted_model = fit_line(line_init, parallax, magnitude)\\n\\n# Print the results\\nprint(f\"Slope: {fitted_model.slope.value:.3f}\")\\nprint(f\"Intercept: {fitted_model.intercept.value:.3f}\")\\n\\n# Calculate R-squared to check correlation strength\\nresiduals = magnitude - fitted_model(parallax)\\nss_res = np.sum(residuals**2)\\nss_tot = np.sum((magnitude - np.mean(magnitude))**2)\\nr_squared = 1 - (ss_res / ss_tot)\\nprint(f\"R-squared: {r_squared:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have parallax measurements [0.05, 0.055, 0.045, 0.048, 0.052] arcsec and corresponding brightness values [11.3, 10.9, 11.6, 11.3, 10.8] magnitudes for a group of stars. Perform a linear fit using LinearLSQFitter to check for a possible correlation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\\nimport numpy as np\\n\\n# Create sample data\\nparallax = np.array([0.05, 0.055, 0.045, 0.048, 0.052])  # parallax in arcsec\\nmagnitude = np.array([11.3, 10.9, 11.6, 11.3, 10.8])          # apparent magnitude\\n\\n# Initialize the linear model and fitter\\nline_init = models.Linear1D()\\nfit_line = fitting.LinearLSQFitter()\\n\\n# Fit the data\\nfitted_model = fit_line(line_init, parallax, magnitude)\\n\\n# Print the results\\nprint(f\"Slope: {fitted_model.slope.value:.3f}\")\\nprint(f\"Intercept: {fitted_model.intercept.value:.3f}\")\\n\\n# Calculate R-squared to check correlation strength\\nresiduals = magnitude - fitted_model(parallax)\\nss_res = np.sum(residuals**2)\\nss_tot = np.sum((magnitude - np.mean(magnitude))**2)\\nr_squared = 1 - (ss_res / ss_tot)\\nprint(f\"R-squared: {r_squared:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a box function with an amplitude of 2.0, x_0=3.0 and width=1.5"
      },
      {
        "from": "assistant",
        "value": "models.Box1D(amplitude=2.0, x_0=3.0, width=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram of Galaxy sizes in different clusters using the Freedman-Diaconis rule. How can I only show the sizes between 10 and 20 units?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\n\n# Sample data\ncluster_sizes = np.array([15, 18, 12, 20, 10, 14, 16, 11, 13, 19])\n\n# Create histogram with specified range\nhist, bin_edges = stats.histogram(cluster_sizes, bins='freedman', range=(10, 20), density=True)\n\n# Print the histogram\nprint(hist)\nprint(bin_edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in creating a histogram of star temperatures in a particular region. Can you suggest how to use the Bayes blocks method for determining bin widths and only show temperatures between 5000 and 7000 degrees?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\n\n# Sample data\nstar_temps = np.array([6000, 5500, 6500, 7000, 5000, 5800, 6200, 5700, 5900, 6400])\n\n# Create histogram with Bayes blocks and specified range\nhist, bin_edges = stats.histogram(star_temps, bins='blocks', range=(5000, 7000))\n\n# Print the histogram\nprint(hist)\nprint(bin_edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram of planet distances from their stars. Can you use Scott's rule for determining bin widths and only show distances between 1 and 5 astronomical units?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport numpy as np\n\n# Sample data\nplanet_dist = np.array([1.2, 4.5, 2.1, 3.7, 1.5, 5.2, 0.8, 2.8, 3.9, 4.1])\n\n# Create histogram with Scott's rule and specified range\nhist, bin_edges = stats.histogram(planet_dist, bins='scott', range=(1, 5))\n\n# Print the histogram\nprint(hist)\nprint(bin_edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add imperial units to the astropy unit registry?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.add_enabled_units(u.imperial)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the circular mean of angles [90, 135, 225] degrees?"
      },
      {
        "from": "assistant",
        "value": "circmean(np.array([90, 135, 225]) * u.deg, axis=None).to(u.deg).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the circular mean of angles [45, 90, 135] degrees?"
      },
      {
        "from": "assistant",
        "value": "circmean(np.array([45, 90, 135]) * u.deg, axis=None).to(u.deg).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the circular mean of angles [180, 270, 360] degrees?"
      },
      {
        "from": "assistant",
        "value": "circmean(np.array([180, 270, 360]) * u.deg, axis=None).to(u.deg).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a table with columns 'mass' (1.4 Msun) and 'radius' (10 km), use astropy.table.Row to access the row where 'mass' is 1.4 Msun and calculate the surface gravity (G \terror M/R^2) in m/s^2."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row, constants as const\n\n# Create sample table\ndata = Table({'mass': [1.4], 'radius': [10]})\n\n# Create Row object\nrow = Row(data[0])\n\n# Access row values\nmass = row['mass']\nradius = row['radius']\n\n# Calculate surface gravity in m/s^2\nG = const.G\nsurface_gravity = G * mass / (radius**2)\n\nprint(f'Surface gravity: {surface_gravity:.2e} m/s^2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a table with columns 'temperature' (100 K) and 'pressure' (101325 Pa), use astropy.table.Row to access the row where 'temperature' is 100 K and calculate the ideal gas constant (R \terror P/T) in J/kg/K."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row, constants as const\n\n# Create sample table\ndata = Table({'temperature': [100], 'pressure': [101325]})\n\n# Create Row object\nrow = Row(data[0])\n\n# Access row values\ntemperature = row['temperature']\npressure = row['pressure']\n\n# Calculate ideal gas constant in J/kg/K\nR = const.R\nideal_gas_constant = R * pressure / temperature\n\nprint(f'Ideal gas constant: {ideal_gas_constant:.2e} J/kg/K')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a table with columns 'density' (1000 kg/m^3) and 'velocity' (100 m/s), use astropy.table.Row to access the row where 'density' is 1000 kg/m^3 and calculate the mass flux (rho \terror v) in kg/m^2/s."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\n# Create sample table\ndata = Table({'density': [1000], 'velocity': [100]})\n\n# Create Row object\nrow = Row(data[0])\ndensity = row['density']\nvelocity = row['velocity']\n\n# Calculate mass flux in kg/m^2/s\nmass_flux = density * velocity\n\nprint(f'Mass flux: {mass_flux:.2e} kg/m^2/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D image array 'satellite_image' of size (1024, 1024). How can I calculate sigma-clipped statistics while also masking the neighboring pixels within a radius of 1 pixel around outliers to account for noise?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats\nimport numpy as np\ngen_clean = sigma_clipped_stats(satellite_image, sigma=3, mask=np.zeros_like(satellite_image, dtype=bool), maxiters=None, std_ddof=0, axis=None, grow=1, cenfunc='median', stdfunc='std')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array 'signal' of size 1024.  How can I calculate the mean?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats\nsignal_stats = sigma_clipped_stats(signal, sigma=1, axis=0, maxiters=10, std_ddof=1, cenfunc='mean', stdfunc='std', grow=False)\nmean = signal_stats[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D array 'volume' of size (1024, 1024, 1024).  How can I calculate sigma-clipped statistics while also masking the neighbouring pixels within a radius of 1.5 pixels around outliers to account for noise?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats\nimport numpy as np\nvolume_stats = sigma_clipped_stats(volume, sigma=2, mask=np.zeros_like(volume, dtype=bool), maxiters=5, std_ddof=0, axis=None, grow=1.5, cenfunc='median', stdfunc='mad_std')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the position angle between the center of the Milky Way and the location of the Sgr A* black hole?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Center of the Milky Way\nm31_center = SkyCoord(ra=266.40*u.degree, dec=-28.80*u.degree)\n\n# Sgr A* black hole location\nsgra_black_hole = SkyCoord(ra=266.92*u.degree, dec=-29.01*u.degree)\n\n# Calculate position angle\npos_angle = m31_center.position_angle(sgra_black_hole)\n\n# Convert to degrees and ensure range 0-360\npos_angle = pos_angle.to(u.degree)\npos_angle = pos_angle.value % 360\n\nprint(f\"Position angle: {pos_angle} degrees\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the telescope's pointing coordinates from the FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('image.fits', 'RA', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the DATA keyword in the FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('image.fits', 'DATA', ext=1)['unit']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the observatory's location from the FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('image.fits', 'TELESCOP', ext=1) + ' at ' + fits.getval('image.fits', 'OBSLAYPEP', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert an angle in radians to degrees. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Define an angle in radians\nangle_rad = 1.5708 * u.rad\n\n# Convert angle from radians to degrees\nangle_deg = angle_rad.to(u.deg)\nprint(angle_deg)  # This will print 90.0 degrees"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a velocity in meters per second to kilometers per hour?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Define velocity in m/s\nvelocity_ms = 1 * u.m / u.s\n\n# Convert velocity from m/s to km/h\nvelocity_kmh = velocity_ms.to(u.km / u.h)\nprint(velocity_kmh)  # This will print 3.6 km/h"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert an area in square meters to square kilometers. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Define area in m^2\narea_sqm = 1 * u.m**2\n\n# Convert area from m^2 to km^2\narea_sqkm = area_sqm.to(u.km**2)\nprint(area_sqkm)  # This will print 1.0 km^2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I retrieve the file 'earth.hdmi' from astropy's example datasets using its hash value 'hash/3da565dc97'? (note: example hash)."
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfilename = get_pkg_data_filename('hash/3da565dc97', package='astropy.tests', show_progress=True, remote_timeout=30, cache=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a secondary HDU from this data and set its header keywords like 'DATE-OBS' and 'INSTRUME'='HST'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdulist = fits.PrimaryHDU(data=image_data)\nsecondary_hdu = fits.ImageHDU(data=np.zeros((2048, 2048)))\nsecondary_hdu.header['DATE-OBS'] = '2022-01-01'\nsecondary_hdu.header['INSTRUME'] = 'HST'\nhdulist.append(secondary_hdu)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constellation is the star Sirius (RA=06h 45m 08.9s, Dec=-16d 42m 43s) located in?"
      },
      {
        "from": "assistant",
        "value": "get_constellation(SkyCoord('06h45m08.9s', '-16d42m43s', frame='icrs'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constellation is the star Deneb (RA=20h 41m 26.3s, Dec=+45d 16m 49s) located in?"
      },
      {
        "from": "assistant",
        "value": "get_constellation(SkyCoord('20h41m26.3s', '+45d16m49s', frame='icrs'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constellation is the star Canopus (RA=07h 06m 48.7s, Dec=-52d 42m 24s) located in?"
      },
      {
        "from": "assistant",
        "value": "get_constellation(SkyCoord('07h06m48.7s', '-52d42m24s', frame='icrs'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to retrieve the keyword values from the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getheader(filename='data.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the header from a specific extension of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getheader('data.fits', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the header of a FITS file from a file-like object?"
      },
      {
        "from": "assistant",
        "value": "fits.getheader(file_like, ext=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the header from a FITS file that exists on my local system."
      },
      {
        "from": "assistant",
        "value": "getheader('local.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if the file is not on my local system, but rather on a remote server, how do I access its header?"
      },
      {
        "from": "assistant",
        "value": "getheader('https://example.com/remote.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file that has 3 extensions, how do I get the header from the second extension?"
      },
      {
        "from": "assistant",
        "value": "getheader('my.fits', 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "fractional orbital speed of the Solar System barycenter with respect to the Sun"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "parse a CSV file with columns named longitude and latitude"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "load a table from a text file with delimiter ',' and header line 3"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I represent the planet's position relative to its host star in spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import SphericalRepresentation\n\nplanet_position = SphericalRepresentation(r=0.05 * u.AU, theta=45 * u.deg, phi=90 * u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a time series with 1000 data points. Introduce some noise using gaussian noise and then filter it with a low-pass butterworth filter. My data is in a 2D array called 'ts' with shape (1, 1000)."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\nimport numpy as np\ncfrom scipy.signal import butter, lfilter\nts = np.random.normal(0, 1, (1, 1000))\nts = lfilter(b, a, ts, zi=None)\nts"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in studying stellar oscillations and want to visualize how different frequencies affect the oscillation pattern. How can I create a plot showing multiple cosine curves with varying frequencies?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling.models import Cosine1D\nc = Cosine1D(amplitude=1, frequency=0.5)\n\n# Create time array spanning one period\nr = np.arange(0, 10, 0.01)\n\n# Plot setup\nplt.figure(figsize=(10, 6))\n\n# Plot multiple oscillation patterns with different frequencies\nfor frequency in np.linspace(0.1, 1.0, 5):\n    c.frequency = frequency\n    plt.plot(r, c(r), color=str(0.25 * frequency), lw=2)\n\nplt.axis([0, 10, -5, 5])\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar oscillations and want to visualize how different amplitudes and frequencies affect the oscillation pattern. How can I create a plot showing multiple cosine curves with varying amplitudes and frequencies?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling.models import Cosine1D\nc = Cosine1D(amplitude=1, frequency=0.5)\n\n# Create time array spanning one period\nr = np.arange(0, 10, 0.01)\n\n# Plot setup\nplt.figure(figsize=(10, 6))\n\n# Plot multiple oscillation patterns with different amplitudes and frequencies\nfor amplitude in np.linspace(0.5, 2.0, 4):\n    for frequency in np.linspace(0.1, 1.0, 5):\n        c.amplitude = amplitude\n        c.frequency = frequency\n        plt.plot(r, c(r), label=f'A = {amplitude}, f = {frequency}')\n\nplt.axis([0, 10, -5, 5])\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying stellar oscillations and want to visualize how different phases affect the oscillation pattern. How can I create a plot showing multiple cosine curves with varying phases?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling.models import Cosine1D\nc = Cosine1D(amplitude=1, frequency=0.5, phase=0)\n\n# Create time array spanning one period\nr = np.arange(0, 10, 0.01)\n\n# Plot setup\nplt.figure(figsize=(10, 6))\n\n# Plot multiple oscillation patterns with different phases\nfor phase in np.linspace(0, 2*np.pi, 5):\n    c.phase = phase\n    plt.plot(r, c(r), color=str(0.25 * phase), lw=2)\n\nplt.axis([0, 10, -5, 5])\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a Gaussian distribution to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D, fitting\nfrom astropy.modeling.models import models, fitting\nimport numpy as np\n\ndata = np.random.normal(0, 1, 100)\nfit = fitting.LevMarLSQFitter()\ngaussian = Gaussian1D(amplitude=1, mean=0, stddev=1)\ngaussian_fit = fit(gaussian, data)\nprint(gaussian_fit.amplitude, gaussian_fit.mean, gaussian_fit.stddev)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between `unique` and `removesDuplicates` functions when used with the same table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import unique, Table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use `unique` function to remove duplicate rows based on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import unique, Table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I keep the last row of duplicates when using `unique` function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import unique, Table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given two tables with the same structure, but with different columns, write a function to stack them horizontally using astropy.table.hstack"
      },
      {
        "from": "assistant",
        "value": "import astropy.table as table\n\ndef stack_tables(table1, table2):\n    return table.hstack([table1, table2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to stack three tables vertically using astropy.table.vstack"
      },
      {
        "from": "assistant",
        "value": "import astropy.table as table\n\ndef stack_tables(table1, table2, table3):\n    return table.vstack([table1, table2, table3]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the maximum possible distance to a star with a parallax of 0.1 mas?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nDistance(parallax=0.1*u.mas).to(unit=u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the luminosity distance to a galaxy at redshift z=0.5 using the WMAP5 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import WMAP5\nfrom astropy.coordinates import Distance\nDistance(z=0.5, cosmology=WMAP5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the distance modulus corresponding to a distance of 10 kpc?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nDistance(10*u.kpc).distance.modulus"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with data on galaxy orientation angles in a cluster and want to weight each measurement by its uncertainty. Can you show me how to compute the weighted circular standard deviation of these angles?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circstd, circmean, circvar\nfrom astropy import units as u\n\n# Sample data (example angles in degrees and their uncertainties)\nangles = np.array([45.0, 135.0, 225.0, 315.0]) * u.deg\ncertainties = np.array([10.0, 15.0, 8.0, 12.0]) * u.deg\n\ncirc_mean = circmean(angles, [circmean, uncertainties], axis=0)\ncirc_var = circvar(angles, [circvar, uncertainties], axis=0)\ncircstd(angles, [circstd, uncertainties], axis=0, method='circular')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data represented as a 2D array of size 100x100 with some bad pixels marked as NaN. How can I convolve it with a Gaussian kernel of  sigma = 2 pixels, ensuring the edges are handled by filling with zero?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve; import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data represented as a 1D array of length 1000 with some bad pixels marked as NaN. How can I convolve it with a box kernel of width 3 pixels, handling the edges by taking the nearest pixel value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve; import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data represented as a 2D array of size 200x200 with some bad pixels marked as NaN. How can I convolve it with a box kernel of width 5 pixels, ensuring the edges are handled by wrapping around?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve; import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of the speed of light in meters per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(f'Speed of light: {u.speed_of_light}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert 100 meters to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(f'100 meters is equal to {100*u.m.to(u.km)} kilometers')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion from grams to kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(f'1 gram is equal to {1*u.g.to(u.kg)} kilograms')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a spherical representation of some points in 3D space?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation\nfrom astropy.coordinates import Latitude, Longitude\n\ngc = SphericalRepresentation(lon=Lon, lat=Lat, distance=Dist)\ngc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I transform a spherical representation to Cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, CartesianRepresentationspherical = SphericalRepresentation(lon=Lon, lat=Lat, distance=Dist)\ncartesian = spherical cartesianize()\ncartesian"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the spherical coordinates (r, theta, phi) from Cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nfrom math import acos, asin, sqrt\n\ncartesian = CartesianRepresentation(x=X, y=Y, z=Z)\nlon = asin(y / sqrt(x**2 + y**2))\nlat = acos(-z / sqrt(x**2 + y**2 + z**2))\nphi = acos(x / sqrt(x**2 + y**2))\nr = sqrt(x**2 + y**2 + z**2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the Earth at 2023-01-01 00:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\n\n# Create a Time object for the desired date\n time = Time('2023-01-01 00:00:00')\n\n# Get the Earth's barycentric position\n earth_position = get_body_barycentric('earth', time)\n\n# Print the position\n print(earth_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the Sun at 2023-02-15 12:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\n\n# Create a Time object for the desired date\n time = Time('2023-02-15 12:00:00')\n\n# Get the Sun's barycentric position\n sun_position = get_body_barycentric('sun', time)\n\n# Print the position\n print(sun_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the Moon at 2023-03-01 18:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\n\n# Create a Time object for the desired date\n time = Time('2023-03-01 18:00:00')\n\n# Get the Moon's barycentric position\n moon_position = get_body_barycentric('moon', time)\n\n# Print the position\n print(moon_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Minh Hua's transit lightcurve model with SLSQPLSQFitter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.fitting import SLSQPLSQFitter\nfrom astropy.modeling.models import custom_model\ncustom_model.generate('minhua_transit_model')\ninitial_model = minhua_transit_model()\nfitter = SLSQPLSQFitter()\ndata = ...\nfitted_model = fitter(initial_model, time, flux)\nprint(fitted_model.radius_ratio.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a column with metadata for galaxy cluster analysis?"
      },
      {
        "from": "assistant",
        "value": "[{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a column to an existing table in astropy.table?"
      },
      {
        "from": "assistant",
        "value": "[{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to access the metadata of a column in astropy.table.Colum"
      },
      {
        "from": "assistant",
        "value": "[{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.convolution.convolve` function to convolve a 2D array with a Gaussian kernel, replacing NaN values in the array with interpolated values?"
      },
      {
        "from": "assistant",
        "value": "convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different boundary handling options available in the `astropy.convolution.convolve` function?"
      },
      {
        "from": "assistant",
        "value": "convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convolve a masked array with a kernel, where masked values are treated as NaNs?"
      },
      {
        "from": "assistant",
        "value": "convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the SI prefix for the Barye unit?"
      },
      {
        "from": "assistant",
        "value": "The SI prefix for the Barye unit is 'barye'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the cgs unit of luminous intensity?"
      },
      {
        "from": "assistant",
        "value": "The cgs unit of luminous intensity is candela (cd)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the cgs unit of temperature?"
      },
      {
        "from": "assistant",
        "value": "The cgs unit of temperature is degrees Celsius (\u00b0C)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert polar coordinates to cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\n\n# Example polar coordinates (in radians)\nxp = np.array([1.1, 2.2, 3.3])  # Polar angles in radians\ncpy = np.array([4.4, 5.5, 6.6])  # Polar angles in radians\n\ncart_coords = CartesianRepresentation(x=xp*u.rad, y=0*u.rad, z=ncpy*u.rad)\n\n# Access the cartesian coordinates\n# x (x coordinate), y (y coordinate), z (z coordinate)\n\nx = cart_coords.x  # in radians\ncy = cart_coords.y  # in radians\nez = cart_coords.z  # in radians\n\nprint(f'x: {x}', f'y: {y}', f'z: {z}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of Jupiter and Saturn on January 1st, 2024 at 12:00 UTC using Astro-py?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric_posvel\nimport astropy.units as u\n\nt = Time('2024-01-01 12:00:00')\nmars_posvel = get_body_barycentric_posvel(['jupiter', 'saturn'], t)\nposition = mars_posvel[0]\nvelocity = mars_posvel[1]\nprint(position, velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a sine wave to my data"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\n# Generate some data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Fit a sine model\nmodel = models.Sine1D(a=1, period=2)\nfit = fitting.slsq(fit_fn=model, x=x, y=y)\nprint(fit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you fit an exponential model to the following data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\n# Generate some data\nx = np.linspace(0, 10, 100)\ny = np.exp(-x) + np.random.normal(0, 0.1, 100)\n\n# Fit an exponential model\nmodel = models.Exponential1D(amplitude=1, decay=1)\nfit = fitting.slsq(fit_fn=model, x=x, y=y)\nprint(fit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to fit a Gaussian model to my data"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\n# Generate some data\nx = np.linspace(-10, 10, 100)\ny = np.exp(-x**2) + np.random.normal(0, 0.1, 100)\n\n# Fit a Gaussian model\nmodel = models.Gaussian1D(amplitude=1, mean=0, sigma=1)\nfit = fitting.slsq(fit_fn=model, x=x, y=y)\nprint(fit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 3x3 CustomKernel with values increasing at the edges and centering around 1?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import CustomKernel\n\n# Create a 3x3 grid of coordinates\ny, x = np.ogrid[-1:2, -1:2]\n\n# Create kernel: increasing values at edges, centering around 1\nkernel = 1 + 0.5 * (x ** 2 + y ** 2)\n\n# Create CustomKernel\nkernel = CustomKernel(kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I append a new image to an existing FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.append('existing_fits_file.fits', data=new_image_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a header to a FITS file before appending data. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.append('existing_fits_file.fits', data=new_image_data, header=my_header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Is there a way to bypass verification when appending data to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.append('existing_fits_file.fits', data=new_image_data, verify=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion from inches to feet?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\"\" Enable imperial units\nu.imperial.enable()\n\n# Define the unit conversion\ninch_to_foot = 1\"u.imperial.inch\"u.imperial.foot\n\n# Print the conversion\nprint(inch_to_foot)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a parameter for the galaxy's central density that is always positive and can't be modified during the fitting process?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Fittable1DModel\nclass GalaxyProfile(Fittable1DModel):\n    # Define central density as a positive, fixed parameter with default value of 1\n    dens_cent = Parameter(default=1.0, bounds=(0, None), fixed=True)\n\n    # Example additional parameter (like effective radius) for demonstration\n    r_eff = Parameter(default=5.0, bounds=(0, None))\n\n    def __init__(self, dens_cent=dens_cent.default, r_eff=r_eff.default, **kwargs):\n        super().__init__(dens_cent=dens_cent, r_eff=r_eff, **kwargs)\n\n    def evaluate(self, x, dens_cent, r_eff):\n        # Placeholder for actual profile calculation\n        # Replace with your specific brightness profile formula\n        return dens_cent * np.exp(-x/r_eff)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction to create a FITS header card for the target object coordinates with key=DEC_OBJ, value=22.123451 degrees. How can I format this properly with astropy.io.fits.Card while including the comment 'Declination of target'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ndata = fits.Card('DEC_OBJ', 22.12345, 'Declination of target', 'deg')\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use rms to calculate the root mean square of an array of numbers representing the radial velocities of stars in a galaxy."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import rms # Generate sample radial velocity data np.random.seed(42) radial_velocities = np.random.normal(100, 10, 1000) # Calculate root mean square of radial velocities rms_velocities = rms(radial_velocities) print(rms_velocities)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `ZScaleInterval` class to normalize my image data without applying any contrast stretching?"
      },
      {
        "from": "assistant",
        "value": "{\"n_samples\": 1000, \"contrast\": 0.0, \"max_reject\": 0.5, \"min_npixels\": 5, \"krej\": 2.5, \"max_iterations\": 5}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the `n_samples` parameter in the `ZScaleInterval` class, and what is its default value?"
      },
      {
        "from": "assistant",
        "value": "{\"n_samples\": 1000, \"contrast\": 0.25, \"max_reject\": 0.5, \"min_npixels\": 5, \"krej\": 2.5, \"max_iterations\": 5}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I increase the difference between the minimum and maximum values used for display by adjusting the `contrast` parameter?"
      },
      {
        "from": "assistant",
        "value": "{\"n_samples\": 1000, \"contrast\": 0.75, \"max_reject\": 0.5, \"min_npixels\": 5, \"krej\": 2.5, \"max_iterations\": 5}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Implement a Ring2D model with amplitude=1.0, centered at (50, 50), inner radius=20 pixels, and outer radius=30 pixels, then how to evaluate it on a 300x300 pixel grid."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\nimport numpy as np\n\tring_model = Ring2D(amplitude=1.0, x_0=50, y_0=50, r_in=20, r_out=30)\ny, x = np.mgrid[0:300, 0:300]\nring_image = ring_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convolve a 2D array of shape (100, 100) with a 2D Gaussian kernel of size (5, 5) while preserving NaNs?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft(array=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], kernel=[[0.1, 0.2, 0.1], [0.2, 0.4, 0.2], [0.1, 0.2, 0.1]], nan_treatment='preserve')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion rate between Hz and kHz?"
      },
      {
        "from": "assistant",
        "value": "1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between wavelength and wave number?"
      },
      {
        "from": "assistant",
        "value": "2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert energy units using astropy?"
      },
      {
        "from": "assistant",
        "value": "3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to efficiently sort a table based on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\n\ndef sort_table(table, cols):\n    \"\"\"Sort a table based on multiple columns\n\n    Parameters\n    ----------\n    table : astropy.table.Table\n        Input table\n    cols : list\n        List of column names to sort by\n    \n    Returns\n    -------\n    sorted_table : astropy.table.Table\n        Sorted table\n    \"\"\"\n    return table.sort(keys=cols)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box2DKernel with width 5 and mode 'linear_interp'"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel\nBox2DKernel(5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the 90% confidence interval for the true proportion of customers who will return a product using the Wilson interval method. I have a sample of 100 customers and 20 have returned a product."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\n\n# Parameters\nn_trials = 100  # Number of trials\nn_success = 20  # Number of successes\nconfidence_level = 0.90  # Desired confidence level\ninterval = 'wilson'  # Interval method\n\n# Calculate the confidence interval\nconfidence_interval = stats.binom_conf_interval(n_success, n_trials, confidence_level=confidence_level, interval=interval)\n\nprint(f'90% confidence interval: {confidence_interval}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the result of hstack([t1, t2]) were t1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b')) and t2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))"
      },
      {
        "from": "assistant",
        "value": "t2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the result of hstack([t1, t2, t3]) were t1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b'))"
      },
      {
        "from": "assistant",
        "value": "t3 = Table({'e': [9, 10], 'f': [11, 12]}, names=('e', 'f'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the result of hstack([t1, t2]) were t1 = Table({'g': [13, 14], 'h': [15, 16]}, names=('g', 'h')) and t2 = Table({'i': [17, 18], 'j': [19, 20]}, names=('i', 'j'))"
      },
      {
        "from": "assistant",
        "value": "t2 = Table({'i': [17, 18], 'j': [19, 20]}, names=('i', 'j'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a pulsar with a characteristic age of 1.5 Myr and spin period of 1.6 s."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.modeling.models import PowerLaw1D\nc = PowerLaw1D(amplitude=1, x_0=1.6, alpha=2.3)\nprint(c(1.6)*u.s**-1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy units module and create a unit for 'light-year' using astropy.units.Unit."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.lyr = u.lightyear"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy units module and create a unit for 'hour' using astropy.units.Unit."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.hr = u.hour"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy units module and create a unit for 'm/s' using astropy.units.Unit."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.ms = u.m / u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add 10 days to an ISO-formatted time using astropy.time.Time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ntime = Time('2022-01-01T12:00:00')\ntime += 10 * time.day\nprint(time.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a Unix timestamp to an ISO-formatted time using astropy.time.Time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntime = Time('1643723400', format='unix', scale='utc')\nprint(time.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a datetime object to an ISO-formatted time using astropy.time.Time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntime = Time('2022-01-01 12:00:00')\nprint(time.iso)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the biweight scale of a dataset while ignoring NaN values. Can you provide an example?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\n\n# Example data: A dataset with some NaN values\ndata = np.array([1.2, 2.3, np.nan, 4.5, 5.6, np.nan, 7.8, 8.9])\n\n# Calculate biweight scale while ignoring NaN values\nbiweight_scale = stats.biweight_scale(data, ignore_nan=True)\n\nprint(biweight_scale)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to merge positional information of two pulsars, PSR J0624$-$2522 and PSR J1455$-$3330."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import concatenate\n\ncoord1 = SkyCoord('16h24m00.0s', '-25d22m00s', frame='icrs', obstime=Time(58000, format='mjd'))\ncoord2 = SkyCoord('14h55m00.0s', '-33d30m00s', frame='icrs', obstime=Time(58100, format='mjd'))\n\nconcat_coord = concatenate([coord1, coord2])\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide a Python code snippet that will validate FITS file to ensure it contains a MINITZ table?"
      },
      {
        "from": "assistant",
        "value": "fits.verify('file.fits', verify='tables')['MINITZ']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to list the ICRS coordinates of a source from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('file.fits', 'ICRS_Ccord')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you get the correct format string from the FITS header of a file?"
      },
      {
        "from": "assistant",
        "value": "fits.info('file.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I access the header of an HDU in a FITS file using astropy.io.fits.getdata?"
      },
      {
        "from": "assistant",
        "value": "fits.getdata('file.fits')['header']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to get the data and header from the second HDU of a FITS file using astropy.io.fits.getdata?"
      },
      {
        "from": "assistant",
        "value": "fits.getdata('file.fits', ext=2, header=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function that creates a Table instance from a pandas DataFrame, and another function that updates the Table instance with new data."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport pandas as pd\n\ndef create_table(df):\n    return Table(df)\n\ndef update_table(table, new_data):\n    table.append(new_data)\n    return table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Logistic1D to model the growth of a population from an initial value of 100 to 1000 with a growth rate of 0.1 and a saturation value of 1000?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling.models import Logistic1D\nimport numpy as np\n\n# Create logistic growth model\n# amplitude=100: initial population value\ngrowth_rate=0.1: growth rate\nsaturation_value=1000: saturation value\npopulation_growth = Logistic1D(amplitude=100, growth_rate=0.1, saturation_value=1000)\n\n# Create time array for demonstration (0 to 10 time units)\ntime = np.linspace(0, 10, 100)\n\n# Calculate population values at each time point\npopulation = population_growth(time)\n\n# Print the population at t=0 and t=10 to verify\nprint(f\"Initial population: {population_growth(0):.1f}\")\nprint(f\"Population at t=10: {population_growth(10):.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Gaussian1D to model the profile of a star with a central intensity of 1000, a standard deviation of 2, and a mean of 5?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling.models import Gaussian1D\nimport numpy as np\n\n# Create Gaussian model\n# amplitude=1000: central intensity\nsigma=2: standard deviation\nmean=5: mean location\nstar_profile = Gaussian1D(amplitude=1000, sigma=2, mean=5)\n\n# Create x array for demonstration (-10 to 10)\nx = np.linspace(-10, 10, 100)\n\n# Calculate profile values at each x point\nprofile = star_profile(x)\n\n# Print the profile value at x=mean to verify\nprint(f\"Profile value at x=mean: {star_profile(5):.1f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Sine1D to model the rotation of a planet with an amplitude of 1000, a frequency of 0.1, and a phase shift of 1?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling.models import Sine1D\nimport numpy as np\n\n# Create sine model\n# amplitude=1000: amplitude\nfrequency=0.1: frequency\nphase=1: phase shift\nplanet_rotation = Sine1D(amplitude=1000, frequency=0.1, phase=1)\n\n# Create x array for demonstration (0 to 10)\nx = np.linspace(0, 10, 100)\n\n# Calculate rotation values at each x point\nrotation = planet_rotation(x)\n\n# Print the rotation value at x=0 to verify\nprint(f\"Rotation value at x=0: {planet_rotation(0):.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `biweight_midvariance` function to estimate the robust variance of my galaxy cluster mass measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\nimport numpy as np\n\n# Sample galaxy cluster mass measurements (in solar masses)\nmasses = np.array([1e14, 0.8e14, 1.2e14, 5e14, 0.9e14, 1.1e14, 0.95e14])\n\n# Calculate biweight midvariance\nc = 9.0  # tuning constant\nmad = np.median(np.abs(masses - np.median(masses)))\nbivar = biweight_midvariance(masses, M=np.median(masses), c=c)\n\nprint(bivar) "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian profile for the H-alpha line at 6563 \u00c5 with a peak absorption of -0.5 and FWHM of 2 \u00c5. Plot it between 6560-6566 \u00c5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\ncolors = plt.cm.Set1\ndef plot_gaussian(wavelength, profile):\n    plt.figure(figsize=(10, 6))\n    plt.plot(wavelength, profile, label='Gaussian Profile')\n    plt.xlabel('Wavelength (\u00c5)')\n    plt.ylabel('Relative Flux')\n    plt.title('H-alpha Line Profile (6563 \u00c5)')\n    plt.grid(True, alpha=0.3)\n    plt.ylim(0, 1.1)  # Set y-axis limits for better visibility\n    plt.legend()\n    plt.show()\n\n# Create wavelength array from 6560-6566 \u00c5\nwavelength = np.linspace(6560, 6566, 1000)\n# Create Gaussian profile\n# Amplitude = -0.5 (absorption), Mean = 6563 \u00c5, FWHM = 2 \u00c5\ngaussian = Gaussian1D(amplitude=-0.5, mean=6563, fwhm=2)\n# Calculate the absorption profile\n# Adding 1 to shift baseline to continuum level\nprofile = gaussian(wavelength) + 1\nplot_gaussian(wavelength, profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Lorentzian profile for the CaII H line at 3968 \u00c5 with a peak absorption of -0.3 and FWHM of 1 \u00c5. Plot it between 3965-3971 \u00c5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\ncolors = plt.cm.Set1\ndef plot_lorentzian(wavelength, profile):\n    plt.figure(figsize=(10, 6))\n    plt.plot(wavelength, profile, label='Lorentzian Profile')\n    plt.xlabel('Wavelength (\u00c5)')\n    plt.ylabel('Relative Flux')\n    plt.title('CaII H Line Profile (3968 \u00c5)')\n    plt.grid(True, alpha=0.3)\n    plt.ylim(0, 1.1)  # Set y-axis limits for better visibility\n    plt.legend()\n    plt.show()\n\n# Create wavelength array from 3965-3971 \u00c5\nwavelength = np.linspace(3965, 3971, 1000)\n# Create Lorentzian profile\n# Amplitude = -0.3 (absorption), Mean = 3968 \u00c5, FWHM = 1 \u00c5\nlorentz = Lorentz1D(amplitude=-0.3, x_0=3968, fwhm=1)\n# Calculate the absorption profile\n# Adding 1 to shift baseline to continuum level\nprofile = lorentz(wavelength) + 1\nplot_lorentzian(wavelength, profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Boxcar profile for the OI line at 6300 \u00c5 with a peak absorption of -0.2 and FWHM of 5 \u00c5. Plot it between 6295-6305 \u00c5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\ncolors = plt.cm.Set1\ndef plot_boxcar(wavelength, profile):\n    plt.figure(figsize=(10, 6))\n    plt.plot(wavelength, profile, label='Boxcar Profile')\n    plt.xlabel('Wavelength (\u00c5)')\n    plt.ylabel('Relative Flux')\n    plt.title('OI Line Profile (6300 \u00c5)')\n    plt.grid(True, alpha=0.3)\n    plt.ylim(0, 1.1)  # Set y-axis limits for better visibility\n    plt.legend()\n    plt.show()\n\n# Create wavelength array from 6295-6305 \u00c5\nwavelength = np.linspace(6295, 6305, 1000)\n# Create Boxcar profile\n# Amplitude = -0.2 (absorption), Width = 5 \u00c5\nboxcar = Box1D(amplitude=-0.2, x_0=6300, width=5)\n# Calculate the absorption profile\n# Adding 1 to shift baseline to continuum level\nprofile = boxcar(wavelength) + 1\nplot_boxcar(wavelength, profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy Shift model to correct for a blue shift of 3.1 angstroms?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(offset=-3.1) # Shift by -3.1 Angstroms"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the Shift model to adjust my spectral data by shifting it 2.5 angstroms to account for a gravitational redshift?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(offset=2.5) # Shift by 2.5 Angstroms"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a Shift model with an offset of 4.7 angstroms to my wavelength values to correct for a redshift?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(offset=4.7) # Shift by 4.7 Angstroms"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 3x3 Box2DKernel object in astropy?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(width=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default mode used in astropy's Box2DKernel?"
      },
      {
        "from": "assistant",
        "value": "linear_interp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 5x5 Box2DKernel object with oversampling factor 5?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(width=5, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use SLSQPLSQFitter to fit a polynomial model of degree 3 to a set of data?"
      },
      {
        "from": "assistant",
        "value": "sine_model = Polynomial1DDegree(3)\nfitter = fitting.SLSQPLSQFitter()\nbest_fit = fitter(sine_model, time, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between SLSQPLSQFitter and other optimizers in astropy?"
      },
      {
        "from": "assistant",
        "value": "fitter = fitting.SLSQPLSQFitter()\nfitter = fitting.LevMarLSQFitter()\nfitter = fitting.LeastSqwFitter()\nprint(fitter)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use SLSQPLSQFitter to fit a Gaussian model to a set of data?"
      },
      {
        "from": "assistant",
        "value": "gaussian_model = Gaussian1D(amplitude=1.0, mean=1.0, sigma=1.0)\nfitter = fitting.SLSQPLSQFitter()\nbest_fit = fitter(gaussian_model, time, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a binary star system and need to model it as a 2D ring structure. Can you show me how to create a Ring2D model with amplitude=2.0, centered at x=50, y=50 pixels, with inner radius of 10 pixels and width of 3 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\nring_model = models.Ring2D(amplitude=2.0, x_0=50, y_0=50, r_in=10, width=3)\ny, x = np.mgrid[0:100, 0:100]\nring_image = ring_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star system and need to model it as a 2D disk structure. Can you show me how to create a Disk2D model with amplitude=1.0, centered at x=200, y=200 pixels, with outer radius of 50 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ndisk_model = models.Disk2D(amplitude=1.0, x_0=200, y_0=200, r_0=50)\ny, x = np.mgrid[0:200, 0:200]\ndisk_image = disk_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star system and need to model it as a 2D trapezoid disk structure. Can you show me how to create a TrapezoidDisk2D model with amplitude=2.5, centered at x=150, y=150 pixels, with inner and outer radii of 20 and 50 pixels, respectively?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ntrapezoid_model = models.TrapezoidDisk2D(amplitude=2.5, x_0=150, y_0=150, r_in=20, r_0=50)\ny, x = np.mgrid[0:200, 0:200]\ntrapezoid_image = trapezoid_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle uncertainties in my astropy.quanitity"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, uncertainties as ucty\n# create a quantity with an uncertainty\nq = ucty.u.Quantity(2.0 + 0.1 * u.m, u.m)\n# calculate the uncertainty of the quantity\nunc = q.uncertainty.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for frequency in astropy.units"
      },
      {
        "from": "assistant",
        "value": "u.Hz"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a string to an astropy.units.quantity"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nq = u.Quantity('5.0 m')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D datacube of a galaxy (shape 100x100x500) containing some bad pixels marked as NaN. Could you demonstrate how to smooth this data using a 3x3x3 uniform kernel while preserving the original NaN locations and using nearest neighbor values at the boundaries?"
      },
      {
        "from": "assistant",
        "value": "smooth_cube_preserve_nans(my_datacube, 3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to simulate a Gaussian PSF with sigma=2.0 and centered at (50, 50). Can you demonstrate how to create a Gaussian2D PSF model and convolve it with a 100x100 array of random stars using astropy.convolution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Gaussian2D\nfrom astropy.convolution import convolve, Kernel\n\n# Create a 100x100 array with random stars (zeros and ones)\nnp.random.seed(42)  # For reproducibility\nimage = np.random.choice([0, 1], size=(100, 100), p=[0.99, 0.01])\n\n# Create coordinates for the Gaussian2D PSF with odd dimensions (e.g., 31x31)\nsize = 31  # Odd number\ny, x = np.mgrid[0:size, 0:size]\n\n# Create Gaussian2D PSF model centered in the odd-sized grid\ncenter = size // 2\nsigma = 2.0\ngaussian = Gaussian2D(amplitude=1.0, x_0=center, y_0=center, x_stddev=sigma, y_stddev=sigma)\npsf = gaussian(x, y)\n\n# Normalize PSF to ensure flux conservation\npsf = psf / psf.sum()\n\n# Create kernel from PSF\nkernel = Kernel(psf)\n\n# Convolve image with PSF\nblurred_image = convolve(image, kernel)\n\n# Optional: you can plot the results using matplotlib\n# import matplotlib.pyplot as plt\n# plt.imshow(blurred_image, origin='lower', cmap='viridis')\n# plt.colorbar()\n# plt.show()}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new binary table HDU with data from an astropy.table.Table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits \\nfrom astropy.table import Table \\n \\n# Create a table \\ntable = Table({\\n    \"RA\": [120.5, 121.3], \\n    \"DEC\": [-30.2, -31.5], \\n    \"MAG\": [15.7, 16.2]\\n}) \\n \\n# Create the binary table HDU \\nhdu = fits.BinTableHDU(table) \\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to create a Gaussian filter with a standard deviation of 2 in the x direction and 1 in the y direction, rotated by 90 degrees. How can I do this using astropy?"
      },
      {
        "from": "assistant",
        "value": "Gaussian2DKernel(x_stddev=2.0, y_stddev=1.0, theta=np.pi/2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a NumPy structured array with exoplanet transit timing data (columns: 'transit_number' [1,2,3], 'mid_transit_time' [2459000.1, 2459002.3, 2459004.5], 'duration_hours' [2.1, 2.0, 2.2]). How do I write this to a CSV-formatted string using astropy.io.ascii.write with pipe (|) as the delimiter?"
      },
      {
        "from": "assistant",
        "value": "from io import StringIO\nimport numpy as np\nfrom astropy.io import ascii\n\n# Create the example structured array\ndata = np.array([(1, 2459000.1, 2.1), (2, 2459002.3, 2.0), (3, 2459004.5, 2.2)], dtype=[('transit_number', 'i4'), ('mid_transit_time', 'f8'), ('duration_hours', 'f8')])\n\n# Create a string buffer to write the output\noutput = StringIO()\n\n# Write the structured array to CSV format with pipe delimiter\nascii.write(data, output, format='csv', delimiter='|', formats={'mid_transit_time': '%.3f', 'duration_hours': '%.2f'})\n\n# Get the resulting string\ncsv_string = output.getvalue()\ncsv_string"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a pandas DataFrame with exoplanet transit timing data (columns: ['transit_number', 'mid_transit_time', 'duration_hours']). How do I write this to a CSV-formatted string using astropy.io.ascii.write with pipe (|) as the delimiter?"
      },
      {
        "from": "assistant",
        "value": "from io import StringIO\nimport pandas as pd\nfrom astropy.io import ascii\n\n# Create the example DataFrame\ndata = pd.DataFrame({'transit_number': [1, 2, 3], 'mid_transit_time': [2459000.1, 2459002.3, 2459004.5], 'duration_hours': [2.1, 2.0, 2.2]})\n\n# Create a string buffer to write the output\noutput = StringIO()\n\n# Write the DataFrame to CSV format with pipe delimiter\nascii.write(data, output, format='csv', delimiter='|', formats={'mid_transit_time': '%.3f', 'duration_hours': '%.2f'})\n\n# Get the resulting string\ncsv_string = output.getvalue()\ncsv_string"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of strings, where each string represents a row of an ASCII table. How do I write this to a CSV-formatted string using astropy.io.ascii.write with pipe (|) as the delimiter?"
      },
      {
        "from": "assistant",
        "value": "from io import StringIO\nfrom astropy.io import ascii\n\n# Create the example list of strings\ndata = ['transit_number|mid_transit_time|duration_hours\n1|2459000.1|2.1\n2|2459002.3|2.0\n3|2459004.5|2.2']\n\n# Create a string buffer to write the output\noutput = StringIO()\n\n# Write the list of strings to CSV format with pipe delimiter\nascii.write(data, output, format='csv', delimiter='|')\n\n# Get the resulting string\ncsv_string = output.getvalue()\ncsv_string"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the header of the first extension HDU from a FITS file located at \"/data/spectra.fits\"?"
      },
      {
        "from": "assistant",
        "value": "hdul[0].header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the data type of the data array in the HDU with name 'SCI' and version 2 from a FITS file located at \"/data/spectra.fits\"?"
      },
      {
        "from": "assistant",
        "value": "print(hdul['SCI'].dtype)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the data array and header of the HDU with name 'ERR' from a FITS file located at \"/data/spectra.fits\"?"
      },
      {
        "from": "assistant",
        "value": "print(hdul['ERR'].data, hdul['ERR'].header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic2D profile with n=2, amplitude=2, r_eff=30, x_0=10, y_0=10, ellip=0.5, theta=1"
      },
      {
        "from": "assistant",
        "value": "Sersic2D(amplitude=2, r_eff=30, n=2, x_0=10, y_0=10, ellip=0.5, theta=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with Astropy's BlackBody model at temperature 5000K, and I need to multiply its output by a factor of 2.0 to account for instrumental flux calibration. How can I implement this using Astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nimport astropy.units as u\nfrom astropy.modeling import Model, Fittable1DModel, Parameter\n\nclass Scale1D(Fittable1DModel):\n    factor = Parameter(default=1.0)\n\n    def __init__(self, factor=1.0):\n        super().__init__(factor=factor)\n\n    def evaluate(self, x, factor):\n        return factor * x\n\nbb_model = BlackBody(temperature=5000*u.K)\nscale_model = Scale1D(factor=2.0)\ncalibrated_model = bb_model * scale_model\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you compare the pixel scales between images taken by the Hubble Space Telescope and the Spitzer Space Telescope?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\n\nwcs_hst = WCS('hst_image.fits')\nwcs_spitzer = WCS('spitzer_image.fits')\n\npix_scale_hst = astropy.wcs.utils.proj_plane_pixel_scales(wcs_hst)\npix_scale_spitzer = astropy.wcs.utils.proj_plane_pixel_scales(wcs_spitzer)\n\nprint(f\"HST pixel scale: {pix_scale_hst[0]:.3f} x {pix_scale_hst[1]:.3f}\")\nprint(f\"Spitzer pixel scale: {pix_scale_spitzer[0]:.3f} x {pix_scale_spitzer[1]:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a new column in a table with astropy?"
      },
      {
        "from": "assistant",
        "value": "You can create a new column in a table with astropy by using the 'add_column' method. For example: table.add_column(astropy.column.Column(name='new_column', data=[1, 2, 3]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to sort a table in ascending order with astropy?"
      },
      {
        "from": "assistant",
        "value": "You can sort a table in ascending order with astropy by using the 'sort' method. For example: table.sort('column_name')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove rows from a table with astropy?"
      },
      {
        "from": "assistant",
        "value": "You can remove rows from a table with astropy by using the 'drop_rows' method. For example: table.drop_rows(rows=[1, 2, 3])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I import the following data into a pandas DataFrame using pandas.read_csv?"
      },
      {
        "from": "assistant",
        "value": "import pandas as pd\nfrom io import StringIO\ndata_str = \n\"Ion_Name        Wavelength      Line_Strength \nFe I           5434.5230      23.456       \nFe II          6516.0805      45.678       \"\ndata_table = pd.read_csv(StringIO(data_str), sep='\\s+', header=None, names=['ion', 'wavelength', 'strength'])\nprint(data_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a spectral line with a specified FWHM and wavelength using astropy.stats.gaussian_fwhm_to_sigma?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(fwhm=10, wavelength=500*u.angstrom)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the standard deviation of a spectral line with a FWHM of 5 and wavelength 1000*u.angstrom?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(fwhm=5, wavelength=1000*u.angstrom)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate the conversion of a list of FWHM values to standard deviations with units?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(fwhm=[2, 3, 4], wavelength=500*u.angstrom)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the positions of the Moon and the Sun during a solar eclipse. What are the steps to follow?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import solar_system_ephemeris, get_moon, get_sun\nsolar_system_ephemeris.set('de440')\nt_time = Time.now()\ntimes = Time(['2022-07-02 12:00', '2022-07-02 13:00'])\nmoon_pos = get_moon(times)\nsun_pos = get_sun(times)\nprint(moon_pos.x.value, sun_pos.x.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing solar data and need to access the file with hash '7d84251f366370919d16f11d2e97bd82' from the Astropy data server. How can I retrieve it using get_pkg_data_filename with a 30-second timeout?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfrom astropy.utils.data import conf\n\n# Set timeout to 30 seconds for remote data download\nconf.remote_timeout = 30\n\ntry:\n    # Retrieve file using its hash from Astropy data server\n    filename = get_pkg_data_filename('hash/7d84251f366370919d16f11d2e97bd82')\n    print(f\"File retrieved successfully at: {filename}\")\nexcept Exception as e:\n    print(f\"Error retrieving file: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to retrieve a data file from the Astropy data server using get_pkg_data_filename, but I want it to be in the package 'astropy\u03a7assembly'. How can I do that?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfrom astropy.utils.data import conf\n\n# Set timeout to 30 seconds for remote data download\nconf.remote_timeout = 30\n\ntry:\n    # Retrieve file using get_pkg_data_filename with the package 'astropy\u03a7assembly'\n    filename = get_pkg_data_filename('data/file.dat', package='astropy\u03a7assembly')\n    print(f\"File retrieved successfully at: {filename}\")\nexcept Exception as e:\n    print(f\"Error retrieving file: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing solar data and need to access the file with hash '9f42a72c3d8f36a58ff32cdb107a46e1' from the Astropy data server, but I want it to be in the package 'astropy \u03a7science' and show a progress bar. How can I retrieve it using get_pkg_data_filename with a 30-second timeout and a progress bar?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfrom astropy.utils.data import conf\n\n# Set timeout to 30 seconds for remote data download\nconf.remote_timeout = 30\n\ntry:\n    # Retrieve file using its hash from Astropy data server with package 'astropy \u03a7science' and show_progress=True\n    filename = get_pkg_data_filename('hash/9f42a72c3d8f36a58ff32cdb107a46e1', package='astropy \u03a7science', show_progress=True)\n    print(f\"File retrieved successfully at: {filename}\")\nexcept Exception as e:\n    print(f\"Error retrieving file: {str(e)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the distance to a galaxy with redshift 0.1 using the Planck2015 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck2015\nfrom astropy.coordinates import Distance\nimport astropy.units as u\n\n# Define the redshift\nz = 0.1\n\n# Calculate luminosity distance using Planck2015 cosmology\nDistance(z=z, cosmology=Planck2015)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the distance to a galaxy with a parallax of 10 mas using the current default cosmology."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import default_cosmology_attributes\nfrom astropy.coordinates import Distance\nimport astropy.units as u\n\n# Define the parallax\nparallax = 10 * u.mas\n\n# Calculate distance using parallax\nDistance(parallax=parallax)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the distance modulus to a galaxy with a redshift of 0.5 using the WMAP9 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import WMAP9\nfrom astropy.coordinates import Distance\nimport astropy.units as u\n\n# Define the redshift\nz = 0.5\n\n# Calculate luminosity distance using WMAP9 cosmology\nDistance(z=z, cosmology=WMAP9, distmod=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my star formation research, I need to fit a polynomial baseline of degree 3 to remove background emission. I have intensity measurements [10, 15, 18, 20, 22] at positions [0, 2, 4, 6, 8] parsecs. Show me how to perform this fit with astropy.modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define the data points\npositions = np.array([0, 2, 4, 6, 8])  # positions in parsecs\ntintensities = np.array([10, 15, 18, 20, 22])  # intensity measurements\n\n# Initialize the polynomial model and fitter\npoly_init = models.Polynomial1D(degree=3)\nfitter = fitting.LinearLSQFitter()\n\n# Fit the data\nfitted_poly = fitter(poly_init, positions, intensities)\n\n# Print the fit results\nprint(f'Coefficients: {fitted_poly.coefficients:.3f}')\n\n# Calculate the baseline-subtracted data\nbaseline = fitted_poly(positions)\nsubtracted_data = intensities - baseline\n\n# Print the baseline-subtracted intensities\nprint('\nBaseline-subtracted intensities:')\nprint(subtracted_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to determine which kernel (Box or Gaussian kernel) is better suited for my dataset where I have a few bright sources and a lot of noise."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve, Box2DKernel, Gaussian2DKernel\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create sample data (a 100x100 array with some gaussian sources)\nnp.random.seed(42)  # for reproducibility\n galaxy_data = np.zeros((100, 100))\nfor _ in range(5):  # Add 5 random gaussian sources\nx = np.random.randint(20, 80)\ny = np.random.randint(20, 80)\namplitude = np.random.uniform(0.5, 1.0)\ngalaxy_data += amplitude * np.exp(-((np.indices((100, 100))[0] - x)**2 + (np.indices((100, 100))[1] - y)**2) / 100)\n# Add some noise\n galaxy_data += np.random.normal(0, 0.05, (100, 100))\n\n# Create the kernels\n# Box kernel with width 7\nbox_kernel = Box2DKernel(width=7)\n\n# Gaussian kernel with standard deviation of 3 pixels (comparable to box width)\ngaussian_kernel = Gaussian2DKernel(x_stddev=3)\n\n# Apply convolution with both kernels\n# Use boundary='extend' to handle edge effects\nsmoothed_box = convolve(galaxy_data, box_kernel, boundary='extend')\nsmoothed_gaussian = convolve(galaxy_data, gaussian_kernel, boundary='extend')\n\n# Visualize results\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))\n\n# Original data\nim1 = ax1.imshow(galaxy_data, origin='lower', cmap='viridis')\nax1.set_title('Original')\n\n# Box-smoothed data\nim2 = ax2.imshow(smoothed_box, origin='lower', cmap='viridis')\nax2.set_title('Box Kernel (width=7)')\n\n# Gaussian-smoothed data\nim3 = ax3.imshow(smoothed_gaussian, origin='lower', cmap='viridis')\nax3.set_title('Gaussian Kernel (\u03c3=3)')\n\n# Add colorbars\nplt.colorbar(im1, ax=ax1)\nplt.colorbar(im2, ax=ax2)\nplt.colorbar(im3, ax=ax3)\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a constant model to my data. How do I use thefit method to fit the model to the data and get the best-fit amplitude?"
      },
      {
        "from": "assistant",
        "value": "model.fit(data, method="
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use the eval method to evaluate the model at a given point?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Const1D\n\n# Create a constant model\nmodel = Const1D(amplitude=10)\n\n# Evaluate the model at a point\nx = 5\nevaluated_model = model(x)\nprint(evaluated_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to tie the amplitude of two constant models together so that they have the same value. Can you show an example of how to do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Const1D\n\n# Create two constant models\nmodel1 = Const1D(amplitude=10)\nmodel2 = Const1D(amplitude=20)\n\n# Tie the amplitudes together\nmodel2.amplitude.tied = model1.amplitude"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 2D polynomial of degree 5 to model the surface brightness of a galactic disk, with a central brightness peak that falls off with radius."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create example coordinate grid from -5 to 5 kpc\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\n\n# Initialize a 2D polynomial model of degree 5\npoly2d = models.Polynomial2D(degree=5)\n\n# Set some example coefficients to simulate galactic disk brightness\npoly2d.c0_0 = 100.0  # constant term\npoly2d.c1_0 = -2.0   # x term\npoly2d.c0_1 = -2.0   # y term\npoly2d.c2_0 = -1.0   # x^2 term\npoly2d.c0_2 = -1.0   # y^2 term\npoly2d.c3_0 = -0.1   # x^3 term\npoly2d.c0_3 = -0.1   # y^3 term\npoly2d.c4_0 = -0.01  # x^4 term\npoly2d.c0_4 = -0.01  # y^4 term\npoly2d.c5_0 = -0.001 # x^5 term\npoly2d.c0_5 = -0.001 # y^5 term\n\n# Generate the model brightness distribution\nz_model = poly2d(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 2D polynomial of degree 3 to model the surface brightness of a spiral galaxy, with a central brightness peak that increases with distance from the center."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create example coordinate grid from -5 to 5 kpc\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\n\n# Initialize a 2D polynomial model of degree 3\npoly2d = models.Polynomial2D(degree=3)\n\n# Set some example coefficients to simulate spiral galaxy brightness\npoly2d.c0_0 = 50.0  # constant term\npoly2d.c1_0 = 1.0   # x term\npoly2d.c0_1 = 1.0   # y term\npoly2d.c2_0 = 0.1   # x^2 term\npoly2d.c0_2 = 0.1   # y^2 term\npoly2d.c3_0 = 0.01  # x^3 term\npoly2d.c0_3 = 0.01  # y^3 term\n\n# Generate the model brightness distribution\nz_model = poly2d(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 2D polynomial of degree 4 to model the surface brightness of an elliptical galaxy, with a central brightness peak that decreases with distance from the center."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create example coordinate grid from -5 to 5 kpc\nx = np.linspace(-5, 5, 100)\ny = np.linspace(-5, 5, 100)\nx, y = np.meshgrid(x, y)\n\n# Initialize a 2D polynomial model of degree 4\npoly2d = models.Polynomial2D(degree=4)\n\n# Set some example coefficients to simulate elliptical galaxy brightness\npoly2d.c0_0 = 75.0  # constant term\npoly2d.c1_0 = -1.5   # x term\npoly2d.c0_1 = -1.5   # y term\npoly2d.c2_0 = -0.2   # x^2 term\npoly2d.c0_2 = -0.2   # y^2 term\npoly2d.c3_0 = -0.02  # x^3 term\npoly2d.c0_3 = -0.02  # y^3 term\npoly2d.c4_0 = -0.002 # x^4 term\npoly2d.c0_4 = -0.002 # y^4 term\n\n# Generate the model brightness distribution\nz_model = poly2d(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to represent the position and velocity of a satellite, where position is (x=6378, y=0, z=0) km and velocity is (vx=0, vy=7.7, vz=0) km/s. How do I create a CartesianRepresentation with this differential motion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, CartesianDifferential\n\nelement = CartesianRepresentation(x=6378, y=0, z=0, unit=\"km\")\nvelocity = CartesianDifferential(vx=0, vy=7.7, vz=0, unit=\"km/s\")\nresult = element.with_differentials(velocity)\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to represent the position and acceleration of the satellite with position (x=6378, y=0, z=0) km and acceleration (ax=0, ay=0, az=0.88) m/s^2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, CartesianDifferential\nelement = CartesianRepresentation(x=6378, y=0, z=0, unit=\"km\")\nacceleration = CartesianDifferential(ax=0, ay=0, az=0.88, unit=\"m/s^2\")\nresult = element.with_differentials(acceleration)\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position representation of the satellite moving with velocity (vx=0, vy=7.7, vz=0) km/s and acceleration (ax=0, ay=0, az=0.88) m/s^2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, CartesianDifferential\nelement = CartesianRepresentation(x=0, y=7.7, z=0, unit=\"km\")\nvelocity = CartesianDifferential(vx=0, vy=7.7, vz=0, unit=\"km/s\")\nacceleration = CartesianDifferential(ax=0, ay=0, az=0.88, unit=\"m/s^2\")\nresult = element.with_differentials(velocity).with_differentials(acceleration)\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the energy in erg of a mass of 1 g falling a distance of 1 cm under gravitational acceleration of 1 Gal."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the units\nmass = 1 * u.g\nheight = 1 * u.cm\nacceleration = 1 * u.Gal\n\ntime = (height / acceleration)**0.5\n\ncolumns = mass * acceleration * time**2\n\nprint(columns.to(u.erg))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert a temperature of 293 K to Celsius using the conversion formula: T(C) = T(K) - 273.15"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the temperature in Kelvin\nT_K = 293 * u.K\n\n# Convert to Celsius\nT_C = (T_K - 273.15).to(u.deg_C)\n\nprint(T_C)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate a synthetic light curve using a combination of multiple cosine waves with different frequencies. Can you show me how to implement this using Astropy's modeling capabilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport astropy.units as u\n\ntime = np.linspace(0, 100, 1000) * u.day\ncos1 = models.Cosine1D(amplitude=0.5, frequency=1/3)\ncos2 = models.Cosine1D(amplitude=0.2, frequency=1/2)\ncos3 = models.Cosine1D(amplitude=0.1, frequency=1/1)\nmodel = cos1 + cos2 + cos3\nmodel.amplitude_0.fixed = True\nlight_curve = model(time.value) + np.random.normal(0, 0.02, len(time))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a time interval with units to a quantity?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nprint(2 * u.hour)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a list of star positions from Galactic coordinates to ICRS coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nstars_galactic = SkyCoord(l=[90, 45, 135] * u.degree, b=[20, -30, 10] * u.degree, distance=[1000, 5000, 2000] * u.pc, frame='galactic')\n\nstars_icrs = stars_galactic.transform_to('icrs')\n\nprint(stars_icrs RA, Dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a coordinate frame defined in a similar manner as GCRS, but precessed to a requested (mean) equinox. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric\n\n# Create a coordinate frame\nframe = PrecessedGeocentric(ra='12h30m00s', dec='+10d00m00s')\n\n# Set the equinox and observation time\nframe.equinox = 'J2000'\nframe.obstime = '2020-01-01'\n\n# Print the frame information\nprint(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the biweight location to determine the central value of a distribution?"
      },
      {
        "from": "assistant",
        "value": "biweight_location(data=[1, 2, 3, 4, 5], c=6.0, M=None, axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Lorentzian profile to my spectral line data. The line has a peak intensity of about 2.5 Jy/beam at 1420.4 MHz with an approximate width of 0.3 MHz. Can you show me how to create a Lorentzian1D model with these parameters and plot it over a frequency range of \u00b11 MHz around the center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create frequency array (\u00b11 MHz around center)\nfreq_center = 1420.4  # MHz\nfreq = np.linspace(freq_center - 1, freq_center + 1, 200)\n\n# Initialize Lorentzian1D model with approximate parameters\n# amplitude = 2.5 Jy/beam\n# mean = 1420.4 MHz\n# fwhm = 0.3 MHz\nl_init = models.Lorentz1D(\n    amplitude=2.5, \n    mean=freq_center, \n    fwhm=0.3\n)\n\n# Generate the Lorentzian profile\nlorentzian_data = l_init(freq)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(freq, lorentzian_data, 'b-', label='Lorentzian Model')\nplt.xlabel('Frequency (MHz)')\nplt.ylabel('Flux Density (Jy/beam)')\nplt.title('Lorentzian Model of Spectral Line')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to create and use a Box1D model to represent a boxcar function with a width of 2 units and an amplitude of 10? Incorporate a visual representation using matplotlib."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a Box1D model with a width of 2 and an amplitude of 10\nbox_model = models.Box1D(x_0=1, width=2, amplitude=10)\n\n# Generate the boxcar profile\nbox_data = box_model(np.arange(-5, 5, 0.01))\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(np.arange(-5, 5, 0.01), box_data, 'b-', label='Boxcar Model')\nplt.xlabel('Position')\nplt.ylabel('Value')\nplt.title('Boxcar Model')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create and test a Gaussian2D model, specifying a fixed standard deviation for the x and y directions."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a Gaussian2D model with fixed standard deviation in x and y\n# amplitude = 1,\n# mean_x = 0,\n# mean_y = 0,\n# stddev_x = 1,\n# stddev_y = 1\nmodel = models.Gaussian2D(amplitude=1, mean_x=0, mean_y=0, stddev_x=1, stddev_y=1, x_mean=0, x_stddev=1, y_mean=0, y_stddev=1, fixed={'stddev_x': True, 'stddev_y': True})\n\n# Generate the Gaussian profile\ngaussian_data = model(np.linspace(-10, 10, 100), np.linspace(-10, 10, 100))\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.imshow(gaussian_data, origin='lower', extent=[-10, 10, -10, 10], cmap='hot')\nplt.title('2D Gaussian Model')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert between logarithmic and linear units in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu_conversionExample = 10 * u.milliJy\nprint(f'Converting milliJy to Jy: {nu_conversionExample.to(u.Jy)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the supported frequency units in astropy"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import si, imperial\nprint(u.frequency.supported\n\nfrom astropy import units as u\nfrequency = 34.5e9 * u.Hz\nprint(f'Frequency converted to  MHz: {frequency.to(u.MHz)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I compare units in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nc = 299792458 * u.m / u.s  # The speed of light\ndurations = 3.75 * u.day  # Duration of some event\ntimes = c * durations  # Distance of object\nprint(times)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position angle between Galaxy A (RA=45.23 deg, Dec=-23.45 deg) and the Galactic Center (RA=266.40 deg, Dec=0.00 deg) using Astropy coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ngalaxy_a = SkyCoord(ra=45.23*u.deg, dec=-23.45*u.deg, frame='icrs')\ngalactic_center = SkyCoord(ra=266.40*u.deg, dec=0.00*u.deg, frame='icrs')\n\npos_angle = galaxy_a.position_angle(galactic_center)\npos_angle_deg = pos_angle.to(u.deg)\n\nprint(f\"Position angle between galaxies: {pos_angle_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a code snippet that models the binary star system using Box1D, where both absorption lines have the same amplitude?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a code snippet that models the binary star system using Box1D, where the deeper absorption line has an amplitude of -0.7 and the shallower absorption line has an amplitude of -0.2?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a code snippet that models the binary star system using Box1D, where the deeper absorption line has a center at 4950 Angstroms and the shallower absorption line has a center at 5150 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to measure the variability of a star in a specific filter and I want to use the median absolute deviation (MAD) to quantify it. How can I use the mad function from astropy.stats to do this while ignoring any NaN values in my data?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an image of the Crab Nebula as a 2D array with values from 0 to 100. Show me how to create a normalized visualization using ImageNormalize with a sqrt stretch and vmin=0, vmax=100."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndata = np.random.uniform(0, 100, (100, 100))\nnorm = ImageNormalize(data, stretch=iminusqrtStretch(), vmin=0, vmax=100)\n..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D array representing a cubes face as a 3D array with values from -100 to 100. Show me how to create a normalized visualization using ImageNormalize with a log stretch and vmin=-100, vmax=100."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ncube = np.random.uniform(-100, 100, (100, 100, 100))\nnorm = ImageNormalize(cube[0], stretch=AsinhStretch(), vmin=-100, vmax=100)\n..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of values from 10^-10 to 10^-5. Show me how to create a normalized visualization using ImageNormalize with an asinh stretch and vmin=10^-10, vmax=10^-5."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndata1 = np.random.uniform(1e-10, 1e-5, (100, 100))\nnorm = ImageNormalize(data1, stretch=AsinhStretch(), vmin=1e-10, vmax=1e-5)\n..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 3x3 Gaussian kernel with a standard deviation of 1.5 pixels in both x and y directions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nGaussian2DKernel(x_stddev=1.5, y_stddev=1.5, x_size=3, y_size=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a left join of two tables based on a common column?"
      },
      {
        "from": "assistant",
        "value": "{\"left\": [1, 2, 3], \"right\": [4, 5, 6], \"keys\": \"column\", \"join_type\": \"left\"}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the biweight location of an array of numbers using astropy.stats.biweight_location?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as astropy_stats\nimport numpy as np\n\n# Define the array of numbers\nnumbers = np.array([1, 2, 3, 4, 5])\n\n# Calculate the biweight location\nbiweight_location = astropy_stats.biweight_location(numbers)\n\nprint(biweight_location)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing images of distant galaxies where the colors are heavily affected by dust. How do I create a visualization pipeline using SqrtStretch that effectively shows both the bright stars and the fainter nebulae?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing high-contrast images of planetary surfaces. How do I create a visualization pipeline using SqrtStretch that effectively shows both the bright terrain and the dark shadows?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing images of binary star systems where the intensities of the two stars differ by several orders of magnitude. How do I create a visualization pipeline using SqrtStretch that effectively shows both the bright primary and the fainter secondary star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a UTC timestamp to a civil time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Define a UTC timestamp in seconds since epoch\nutc_timestamp = 1643723400\n\n# Create a Time object for the UTC timestamp\nt = Time.utcutc_timestamp, format='unix')\n\n# Convert to civil time\ncivil_time = t.civil\ncivil_time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the date and time of the next celestial event?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ndef next_celestial_event():\n    # Define the current time\n    current_time = Time.now()\n\n    # Define the celestial event timeframe in days\n    event_timeframe = 30\n\n    # Calculate the date and time of the next celestial event\n    next_event_time = current_time + event_timeframe\n\n    # Return the date and time of the next celestial event\n    return next_event_time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.table.unique` function to extract unique rows from a table, keeping the last row of each set of duplicates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import unique\n\ndef keep_last(table, keys=['*']):\n    return unique(table, keys=keys, keep='last')\n\n# Example usage:\n# unique_table = keep_last(my_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model a galaxy's luminosity profile using a power law?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import PowerLaw1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Cosine1D model with amplitude=1.2, frequency=0.5, and phase=0.125, and plot it against a non-phase-shifted model with the same amplitude and frequency for comparison?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\ncosine1 = Cosine1D(amplitude=1.2, frequency=0.5, phase=0.125)\ncosine2 = Cosine1D(amplitude=1.2, frequency=0.5, phase=0)\n\n# Generate the model values\nsignal1 = cosine1(t)\nsignal2 = cosine2(t)\n\ncosine1.plot(t)\ncosine2.plot(t)'}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Cosine1D model with amplitude=3.0, frequency=0.8, and phase=0.5, and add it to a plot with another Cosine1D model with amplitude=3.0, frequency=0.8, and phase=0?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\ncosine1 = Cosine1D(amplitude=3.0, frequency=0.8, phase=0.5)\ncosine2 = Cosine1D(amplitude=3.0, frequency=0.8, phase=0)\n\n# Generate the model values\nsignal1 = cosine1(t)\nsignal2 = cosine2(t)\n\ncosine1.plot(t)\ncosine2.plot(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to simulate a light curve for a binary star system? Need a code example that shows the curve."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.time import Time import astropy.units as u from astropy.modeling.models import Sine1D, Constant1D t = np.linspace(0, 100, 50)  # 100 days of observation period phase = Sine1D(a=0.5, period=10) + Constant1D(amplitude=5) model = fitting.FittingWithMPI(t, phase) fitter = model.optimize() print(fitter.lower_envelope())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to generate a light curve for a supernova using a polynomial function? Need a code example that shows the curve fitting."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.time import Time import astropy.units as u poly_model = models.Polynomial1D(degree=3, c0=5, c1=2) poly_fitter = fitting.LevMarLSQFitter() fitter = poly_fitter(poly_model, np.linspace(0, 100, 50), np.random.normal(0, 0.1, 50)) print(fitter(x=np.linspace(0, 100, 50)).x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to simulate a light curve for a planetary transit using a sinusoidal function? Need a code example that shows the curve fitting."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.time import Time import astropy.units as u transit_model = models.Sine1D(amplitude=0.1, phase=0.5, period=10) transit_fitter = fitting.LevMarLSQFitter() fitter = transit_fitter(transit_model, np.linspace(0, 100, 50), np.random.normal(0, 0.1, 50)) print(fitter(duration=100).y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a SphericalRepresentation object with longitude=27.5 degrees, latitude=45.0 degrees, and distance=100.0 parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation\nimport astropy.units as u\n\n# Create SphericalRepresentation for object\nobject_spherical = SphericalRepresentation(\n    lon=27.5*u.deg,\n    lat=45.0*u.deg,\n    distance=100.0*u.pc\n)\n\n# Print results\nprint(object_spherical)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model for a sine wave. Can you help me create a sine wave model that fits the data and plot it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.time import Time\nimport matplotlib.pyplot as plt\n\nt = np.linspace(0, 10, 100)\n\ndef sine_model(x, amplitude, frequency, phase):\n    return amplitude * np.sin(2 * np.pi * frequency * x + phase)\n\np0 = [1, 1, 0]\npopt, _ = fitting.least_squares(sine_model, t)\n\nplt.figure()\nplt.plot(t, sine_model(t, *popt))\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK5 instance for a star with RA=23.45 degrees, Dec=67.89 degrees, and proper motions pm_ra_cosdec=3.2 mas/yr, pm_dec=5.6 mas/yr."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\nfrom astropy.time import Time\n\nstar_position = FK5(ra=23.45 * u.degree, dec=67.89 * u.degree, pm_ra_cosdec=3.2 * u.mas/u.yr, pm_dec=5.6 * u.mas/u.yr, equinox=Time('J2000'))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK5 instance for a star with RA=91.23 degrees, Dec=12.34 degrees, and proper motions pm_ra_cosdec=-9.1 mas/yr, pm_dec=7.8 mas/yr."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\nfrom astropy.time import Time\n\nstar_position = FK5(ra=91.23 * u.degree, dec=12.34 * u.degree, pm_ra_cosdec=-9.1 * u.mas/u.yr, pm_dec=7.8 * u.mas/u.yr, equinox=Time('J2000'))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK5 instance for a star with RA=45.67 degrees, Dec=89.12 degrees, and proper motions pm_ra_cosdec=15.3 mas/yr, pm_dec=-8.2 mas/yr."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\nfrom astropy.time import Time\n\nstar_position = FK5(ra=45.67 * u.degree, dec=89.12 * u.degree, pm_ra_cosdec=15.3 * u.mas/u.yr, pm_dec=-8.2 * u.mas/u.yr, equinox=Time('J2000'))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use RedshiftScaleFactor class in astropy.modeling to apply a redshift scale to a rest-frame wavelength array from 2000 to 6000 Angstroms by a redshift factor of z=1.2? Show me the code snippet."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, FittableModelInstance\n\nz = 1.2\nredshift_scale = models.RedshiftScaleFactor(z=z)\n\nrest_wavelength = range(2000, 6001)\n\nobserved_wavelength = redshift_scale(rest_wavelength)\n\nprint(f\"First wavelength: Rest={rest_wavelength[0]}\u00c5, Observed={observed_wavelength[0]}\u00c5\")\nprint(f\"Last wavelength: Rest={rest_wavelength[-1]}\u00c5, Observed={observed_wavelength[-1]}\u00c5\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply a redshift of z=0.8 using RedshiftScaleFactor model to a specific rest-frame wavelength of 4500 Angstroms? Show me the code snippet."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ncode_snippet = models.RedshiftScaleFactor(z=0.8)(4500)\nprint(code_snippet)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using RedshiftScaleFactor to apply a redshift of z=0.3 to a set of rest-frame wavelengths ranging from 1000 to 5000 Angstroms in steps of 100 Angstroms? Show me the code snippet."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\nz = 0.3\nredshift_scale = models.RedshiftScaleFactor(z=z)\n\rest_wavelength = np.arange(1000, 5001, 100)\n\nobserved_wavelength = redshift_scale(rest_wavelength)\n\nprint(observed_wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you scale a rest-frame wavelength array from 1500 to 5500 Angstroms by a redshift factor of z=0.9 using a RedshiftScaleFactor model instance of astropy.modeling? Show me the code snippet."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\nz = 0.9\nredshift_scale = models.RedshiftScaleFactor(z=z)\n\nrest_wavelengths = range(1500, 5501)\n\nobserved_wavelength = redshift_scale(rest_wavelengths)\n\nprint(f\"First wavelength: Rest={rest_wavelengths[0]}\u00c5, Observed={observed_wavelength[0]}\u00c5\")\nprint(f\"Last wavelength: Rest={rest_wavelengths[-1]}\u00c5, Observed={observed_wavelength[-1]}\u00c5\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a FITS image to a different coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\n\nhdul = fits.open('image.fits')\nwcs = WCS(hdul[0].header)\nwcs_all = wcs.deepcopy()\nwcs_all.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nfitsHDU = fits.PrimaryHDU(data=np.ndarray((1, 1)), header=wcs_all.to_header())\nfitsHDU.writeto('image_coord.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to resample an image to a different pixel scale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\nfrom astropy.nddata import Cutout2D\nfrom astropy.wcs.utils import proj_plane_pixel_scales\n\nhdul = fits.open('image.fits')\nwcs = WCS(hdul[0].header)\nresampling_pixel_scale = 0.3  # arcseconds\npixel_scales = proj_plane_pixel_scales(wcs)\nresizing_pixel_scale_arcsec = np.sqrt(resampling_pixel_scale**2 + pixel_scales[1]**2)\nwcs.resample(resizing_pixel_scale_arcsec)\ncutout = Cutout2D(data=hdul[0].data, wcs=wcs, width=1024, height=1024)\ncutout.wcs.to_header().print_versions()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create an array of position angles in degrees from a mix of formats including decimal degrees and degree-minute-second notations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u; from astropy.coordinates import Angle; angles_mixed = ['45.5d', '30d 15m 30s', '-60.75d', '120d', '15h 20m 45s']; angle_array = []; for ang in angles_mixed: angle = Angle(ang); angle_array.append(angle.degree); print(f\"Angles in degrees: {angle_array}\"}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert angle from decimal degrees to degree-minute-second notation?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u; from astropy.coordinates import Angle; angle = Angle('45.5d'); print(f'Resulting angle in degree-minute-second: {angle.to_string(unit=u.degree, sep=':', pad=True)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert angle from degree-minute-second to decimal degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u; from astropy.coordinates import Angle; angle = Angle('30d 15m 30s'); print(f'Resulting angle in decimal degrees: {angle.degree}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a Column for storing 5 date measurements [2022-01-01, 2022-01-15, 2022-02-01, 2022-03-01, 2022-04-01] with a description 'Galaxy observation dates from SDSS' and format them to display as %Y-%m-%d?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport numpy as np\ndates = ['2022-01-01', '2022-01-15', '2022-02-01', '2022-03-01', '2022-04-01']\ndate_col = Column(data=dates, name='date', description='Galaxy observation dates from SDSS', format='%Y-%m-%d')\nprint(date_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a 3D Gaussian profile model for simulating the emission of a star."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D\n\n# Define the center coordinates of the star\ncenter_ra = 150.5 * u.degree  # Example RA\ncenter_dec = -23.7 * u.degree  # Example Dec\n\n# Create a 2D Gaussian model\n# amplitude: peak value of the Gaussian\n# x_0: x position of the center of the Gaussian\n# y_0: y position of the center of the Gaussian\n# x_stddev: standard deviation in x direction\n# y_stddev: standard deviation in y direction\ngaussian_model = Gaussian2D(\n    amplitude=1.0,  # Peak value of the Gaussian\n    x_0=center_ra.value,  # x position of the center of the Gaussian\n    y_0=center_dec.value,  # y position of the center of the Gaussian\n    x_stddev=0.1,  # Standard deviation in x direction\n    y_stddev=0.1   # Standard deviation in y direction\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me calculate the signal-to-noise ratio for observing a bright star with a camera sensitive to blue light?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(t=1.0, source_eps=10000.0, sky_eps=100.0, dark_eps=5.0, rd=10.0, npix=10.0, gain=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the optimal exposure time for observing a nebula with a telescope's CCD camera?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(t=10.0, source_eps=1000.0, sky_eps=10.0, dark_eps=1.0, rd=5.0, npix=5.0, gain=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning to observe a planet's reflected light with a space-based telescope's camera. Can you help me calculate the signal-to-noise ratio for different exposure times?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(t=0.1, source_eps=1000.0, sky_eps=0.1, dark_eps=0.01, rd=1.0, npix=1.0, gain=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define the coordinates for a pulsar at longitude 164.32 degrees and latitude -41.19 degrees, located 8.1 kpc away using SphericalRepresentation, including its proper motion differential of 45 mas/yr in longitude and 20 mas/yr in latitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SphericalRepresentation, SphericalDifferential\nfrom astropy import units as u\ncolors = SphericalRepresentation(lon=164.32*u.deg, lat=-41.19*u.deg, distance=8.1*u.kpc)\ndiff = SphericalDifferential(d_lon=45*u.mas/u.yr, d_lat=20*u.mas/u.yr, d_distance=0*u.km/u.s)\ncolors = colors.with_differentials(diff)\npulsar = SkyCoord(colors, frame='icrs')\nprint(pulsar)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new set of coordinates for a star at longitude 92.15 degrees and latitude 11.44 degrees, located 3.9 kpc away using SphericalRepresentation, including its proper motion differential of 15 mas/yr in longitude and 10 mas/yr in latitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SphericalRepresentation, SphericalDifferential\nfrom astropy import units as u\nstar = SphericalRepresentation(lon=92.15*u.deg, lat=11.44*u.deg, distance=3.9*u.kpc)\nstar_diff = SphericalDifferential(d_lon=15*u.mas/u.yr, d_lat=10*u.mas/u.yr, d_distance=0*u.km/u.s)\nstar = star.with_differentials(star_diff)\nstar_coord = SkyCoord(star, frame='icrs')\nprint(star_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define the coordinates for a black hole at longitude 225.67 degrees and latitude -57.83 degrees, located 12.6 kpc away using SphericalRepresentation, including its proper motion differential of 30 mas/yr in longitude and -20 mas/yr in latitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SphericalRepresentation, SphericalDifferential\nfrom astropy import units as u\nblack_hole = SphericalRepresentation(lon=225.67*u.deg, lat=-57.83*u.deg, distance=12.6*u.kpc)\nblack_hole_diff = SphericalDifferential(d_lon=30*u.mas/u.yr, d_lat=-20*u.mas/u.yr, d_distance=0*u.km/u.s)\nblack_hole = black_hole.with_differentials(black_hole_diff)\nblack_hole_coord = SkyCoord(black_hole, frame='icrs')\nprint(black_hole_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a pixel position (1000, 500) in an image to J2000 equatorial coordinates using the image's WCS data."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\nfrom astropy.coordinates import SkyCoord\n\nc = WCS('image.fits').all_pix2world([[1000, 500]], origin=1)\nsc = SkyCoord(ra=c[0][0], dec=c[0][1], frame='icrs')\nprint(sc)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with the Hubble space telescope data. Converting 3 Julian Dates (2454833.0, 2454833.5, 2454834.0) to ISO format time for my analysis."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nejd_times = [2454833.0, 2454833.5, 2454834.0]\n\n# Convert JD to Time object and format as ISO\nhubble_times = Time(jd_times, format='jd')\niso_times = hubble_times.iso\n\n# Print the converted times\nfor jd, iso in zip(jd_times, iso_times):\n    print(f\"JD {jd} = {iso} UTC\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need help converting 3 more Julian Dates (2454835.0, 2454836.0, 2454837.0) from Kepler data to ISO format for my publication using astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nejd_times = [2454835.0, 2454836.0, 2454837.0]\n\n# Convert JD to Time object and format as ISO\nkepler_times = Time(jd_times, format='jd')\niso_times = kepler_times.iso\n\n# Print the converted times\nfor jd, iso in zip(jd_times, iso_times):\n    print(f\"JD {jd} = {iso} UTC\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you assist me in converting 3 Julian Dates (2454838.0, 2454839.0, 2454840.0) from Hubble space telescope data to ISO format for my analysis using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nejd_times = [2454838.0, 2454839.0, 2454840.0]\n\n# Convert JD to Time object and format as ISO\nhubble_times = Time(jd_times, format='jd')\niso_times = hubble_times.iso\n\n# Print the converted times\nfor jd, iso in zip(jd_times, iso_times):\n    print(f\"JD {jd} = {iso} UTC\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal way to combine astropy's knuth_bin_width with numpy's histogram function when plotting data with skewed distributions?"
      },
      {
        "from": "assistant",
        "value": "You can use astropy's knuth_bin_width to determine the optimal bin width for your data, and then pass this width to numpy's histogram function to create a histogram with the optimal binning."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a dataset with a mix of constant and varying signals, how can we utilize astropy's knuth_bin_width to enhance our histogram visualization?"
      },
      {
        "from": "assistant",
        "value": "By using astropy's knuth_bin_width, we can calculate the optimal bin width for the varying signals in the dataset, which can help to better visualize the distribution of the data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Assuming we have a dataset with multiple peaks of varying magnitudes, how can astropy's knuth_bin_width be used to improve the binning of our histogram?"
      },
      {
        "from": "assistant",
        "value": "astropy's knuth_bin_width can be used to calculate the optimal bin width based on the data's distribution, which can help to better capture the multiple peaks in the histogram."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform an inner join on two tables based on a common column?"
      },
      {
        "from": "assistant",
        "value": "join(left=tab1, right=tab2, keys='common_column', join_type='inner')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables with different metadata. How can I join them without overwriting metadata?"
      },
      {
        "from": "assistant",
        "value": "join(left=tab1, right=tab2, keys='common_column', metadata_conflicts='silent')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to perform a left join on two tables based on multiple columns. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "join(left=tab1, right=tab2, keys=['col1', 'col2'], join_type='left')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement a 3D Moffat function to simulate atmospheric distortions in stellar observations?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling.functional_models import Moffat3D\n\n# Create a 3D grid for the PSF model\nsize = 50\nx, y, z = np.mgrid[:size, :size, :size]\n\n# Define Moffat parameters\namplitude = 1.0    # Peak intensity\nx_0 = 25.0        # Center x\ny_0 = 25.0        # Center y\nz_0 = 25.0        # Center z\ngamma = 3.0       # Core width\ntau = 2.0       # Power index (typical values 2-3 for atmospheric seeing\n\n# Create Moffat3D model\nmoffat_psf = Moffat3D(amplitude=amplitude, x_0=x_0, y_0=y_0, z_0=z_0, gamma=gamma, tau=tau)\n\n# Generate the 3D PSF\npsf_data = moffat_psf(x, y, z)\n\n# Add realistic noise (optional)\nnoise_level = 0.01\npsf_with_noise = psf_data + np.random.normal(0, noise_level, psf_data.shape)\n\n# Fit the noisy data with a Moffat model (demonstrating fitting capabilities)\nfitter = fitting.LevMarLSQFitter()\nmoffat_fit = fitter(moffat_psf, x, y, z, psf_with_noise)\n\n# Print fitted parameters\nprint(f\"Fitted FWHM: {2*gamma*np.sqrt(2**(1/tau) - 1):.2f} pixels\")\nprint(f\"Fitted tau: {moffat_fit.tau.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Astropy to simulate the Point Spread Function (PSF) of a telescope?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling.functional_models import Gaussian2D\n\n# Create a 2D grid for the PSF model\nsize = 50\ny, x = np.mgrid[:size, :size]\n\n# Define Gaussian parameters\namplitude = 1.0    # Peak intensity\nx_0 = 25.0        # Center x\ny_0 = 25.0        # Center y\nsigma_x = 2.0       # Standard deviation in x direction\nsigma_y = 2.0       # Standard deviation in y direction\n\n# Create Gaussian2D model\ngaussian_psf = Gaussian2D(amplitude=amplitude, x_0=x_0, y_0=y_0, sigma_x=sigma_x, sigma_y=sigma_y)\n\n# Generate the 2D PSF\npsf_data = gaussian_psf(x, y)\n\n# Add realistic noise (optional)\nnoise_level = 0.01\npsf_with_noise = psf_data + np.random.normal(0, noise_level, psf_data.shape)\n\n# Fit the noisy data with a Gaussian model (demonstrating fitting capabilities)\nfitter = fitting.LevMarLSQFitter()\nGaussian_fit = fitter(gaussian_psf, x, y, psf_with_noise)\n\n# Print fitted parameters\nprint(f\"Fitted FWHM: {2*np.sqrt(2*np.log(2))*sigma_x:.2f} pixels\")\nprint(f\"Fitted y_0: {Gaussian_fit.y_0.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to simulate the PSF of a space telescope?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling.functional_models import Moffat2D\n\n# Create a 2D grid for the PSF model\nsize = 50\ny, x = np.mgrid[:size, :size]\n\n# Define Moffat parameters\namplitude = 1.0    # Peak intensity\nx_0 = 25.0        # Center x\ny_0 = 25.0        # Center y\ngamma = 3.0       # Core width\nalpha = 2.5       # Power index (typical values 2-3 for atmospheric seeing\n\n# Create Moffat2D model\nmoffat_psf = Moffat2D(amplitude=amplitude, x_0=x_0, y_0=y_0, gamma=gamma, alpha=alpha)\n\n# Generate the 2D PSF\npsf_data = moffat_psf(x, y)\n\n# Add realistic noise (optional)\nnoise_level = 0.01\npsf_with_noise = psf_data + np.random.normal(0, noise_level, psf_data.shape)\n\n# Fit the noisy data with a Moffat model (demonstrating fitting capabilities)\nfitter = fitting.LevMarLSQFitter()\nmoffat_fit = fitter(moffat_psf, x, y, psf_with_noise)\n\n# Print fitted parameters\nprint(f\"Fitted FWHM: {2*gamma*np.sqrt(2**(1/alpha) - 1):.2f} pixels\")\nprint(f\"Fitted alpha: {moffat_fit.alpha.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I overlay a rotated image onto a backdrop image?"
      },
      {
        "from": "assistant",
        "value": "image1 = np.random.rand(100, 100)\nimage2 = np.random.rand(100, 100)\nrotated_image = astropy.utilsAnywhere wur(random_rotation)image2 random_rotation = np.random.rand() * 2\ndef overlay_images(image1, image2):\n    # Rotate image2 by a random angle\ndef random_rotation(image):\n    imagekwargs = {'preserve_range': True}\n    return astropy.utils.geometry.random_rotation(image, **kwargs)\nen overlay_images(image1, image2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enable units for my calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.add_enabled_units([u.au, u.lyr, u.pc])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What units can I add to enable for my calculations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u-disabled_units)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate angular separation for three stars in the Orion Nebula?"
      },
      {
        "from": "assistant",
        "value": "angular_separation(lon1, lat1, lon2, lat2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular separation between the North Pole and the equator?"
      },
      {
        "from": "assistant",
        "value": "angular_separation(0, 0, 90, 0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular separation between the equator and the South Pole?"
      },
      {
        "from": "assistant",
        "value": "angular_separation(0, 0, 0, -90)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to set up high-precision ephemerides for calculations spanning 2010-2060?"
      },
      {
        "from": "assistant",
        "value": "de440"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the 'dexxx[s]' JPL dynamical model for orbit predictions?"
      },
      {
        "from": "assistant",
        "value": "de430s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the URL of a SPK ephemeris for precise orbit calculations?"
      },
      {
        "from": "assistant",
        "value": "https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/planets/de440.bsp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to perform date and time operations in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-01-01T12:00:00')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a Quantity and a Value in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import Quantity\nq = Quantity(10, 'm')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to define a function to calculate the distance between two points on the sky in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\ndef distance(coord1, coord2):\n    return coord1.separation(coord2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert between different time scales in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\ntd = TimeDelta(3600, format='sec', scale='utc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the timezone difference between UTC and India Standard Time?"
      },
      {
        "from": "assistant",
        "value": "Around 5 hours and 30 minutes"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you convert a date from UTC to US Eastern Daylight Time?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.time.TimezoneInfo to convert the date"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the timezone difference between UTC and Australia Western Standard Time?"
      },
      {
        "from": "assistant",
        "value": "Around 8 hours"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a PowerLaw1D model with amplitude=1e-6, reference point at 6000 Angstroms, and spectral index alpha=1.8?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling import models, fitting\n\n# Create a PowerLaw1D model with specified parameters\n# amplitude: flux at the reference point (1e-6)\n# x_0: reference wavelength (6000 Angstroms)\n# alpha: power law index (1.8)\npowerlaw_model = models.PowerLaw1D(\n    amplitude=1e-6,\n    x_0=6000.0,\n    alpha=1.8\n)\n\n# Example: Generate sample points to evaluate the model\nimport numpy as np\nwavelengths = np.linspace(5000, 7000, 100)  # Array of wavelength points\nflux = powerlaw_model(wavelengths)           # Evaluate model at these points\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the corresponding constellation for a given star at a specific location?"
      },
      {
        "from": "assistant",
        "value": "You can use the get_constellation function from the astropy.coordinates module to determine the constellation of a star given its coordinates. The function returns the name of the constellation if a scalar coordinate is provided, and an array of names if an array coordinate is provided."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm calculating the mean and standard deviation of a numpy array. Could you show me how to do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n\n# Assuming 'data' is your numpy array\nmean = np.mean(data)\nstd_dev = np.std(data)\nprint(mean, std_dev)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 2D ring filter kernel using the Ring2DKernel class in Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as conv\ncritical_radius = 10.0\ncritical_width = 5.0\nring_kernel = conv.Ring2DKernel(critical_radius, critical_width, mode='linear_interp', factor=10.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new TableAttribute with a custom default value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import TableAttribute\nclass MyTable(Table):\n    my_attribute = TableAttribute(default='custom value')\n    }} , {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a new table attribute that allows for a list of values as the default"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import TableAttribute\nclass MyTable(Table):\n    my_attribute = TableAttribute(default=[1, 2, 3])\n    }}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a new table attribute that allows for a dictionary as the default"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import TableAttribute\nclass MyTable(Table):\n    my_attribute = TableAttribute(default={'key': 'value'})\n    "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a set of celestial coordinates to detector coordinates using the WCS transformation."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import wcs_pix2world\nimport numpy as np\n\n# Example data: celestial coordinates (RA,Dec) and detector coordinates (x,y)\n# In practice, these would come from your actual measurements\ncelestial_coords = np.array([\n    [45.0, 30.0],  # RA,Dec pairs in degrees\n    [45.1, 30.1],\n    [45.05, 30.15],\n    [45.2, 30.2]\n])\ndetector_coords = np.array([\n    [100.0, 100.0],  # x,y pairs\n    [200.0, 150.0],\n    [150.0, 200.0],\n    [300.0, 300.0]\n])\n\n# Fit WCS solution using reference stars\nwcs = WCS(naxis=2)\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Standard projection for imaging\ncel_wcs = wcs_pix2world(detector_coords, 1)\n\n# Print the derived WCS parameters\nprint(cel_wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to perform a polynomial regression on my data to find the coefficients. What's the proper way to use Astropy's fitting capabilities for this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nt = np.arange(0, 4, 0.1)\n\nm = models.Polynomial1D(degree=3)\n\nfitting.FittingWithAbsTol().fit(m, t, t**3)\n\nprint(m.parameters)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use astropy's RedshiftScaleFactor to find the observed frequency of a line at rest-frame 1216 \u00c5 for a redshift of 2.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I utilize astropy's RedshiftScaleFactor to calculate the observed angular diameter distances for a set of galaxies with redshifts 0.5, 1.2, and 1.8?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to apply astropy's RedshiftScaleFactor to determine the observed galaxy recession velocities given a set of redshifts 0.01, 0.05, and 0.1?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a table with a specific format?"
      },
      {
        "from": "assistant",
        "value": "ascii.read(table, format='basic')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default delimiter used by ascii.read?"
      },
      {
        "from": "assistant",
        "value": "space or tab (default)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to specify the column names when reading a table?"
      },
      {
        "from": "assistant",
        "value": "ascii.read(table, names=['col1', 'col2', 'col3'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with IRAF FITS files and I want to copy the entire contents of the first extension in one file to the entire contents of the second extension in another file."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.copy(version='1.1', input='file1.fits[EXT1]', output='file2.fits[EXT2]')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with FITS files and I want to obtain the entire data from the first extension in the first file and save it to the entire data array in the second file with automatic header generation."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.open('file1.fits[EXT1]')[0]\ndata = hdu.data\nfits.writeto('file2.fits', data, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with FITS files and I want to add a newHDU to an existing file and save it to a new file with automatic header generation."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.open('file1.fits')[0]\nnew_hdu = fits.new_table(hdu.data, hdu.header)\nfits.writeto('file2.fits', new_hdu, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know how many galaxies are redshifted in each bin using the Freedman-Diaconis rule."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import histogram\n\n# Sample redshift data\nredshifts = np.array([0.012, 0.015, 0.018, 0.022, 0.025, 0.028, 0.031, 0.035, 0.038, 0.042]\n\ncnt, bin_edges = histogram(redshifts, bins='freedman')\n\nprint(cnt)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an astropy.wcs object, and I need to convert a set of pixel coordinates to sky coordinates."
      },
      {
        "from": "assistant",
        "value": "wcs.all_pix2world(pixels, 0, with_sip=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS header, and I want to initialize a WCS object with SIP distortions enabled."
      },
      {
        "from": "assistant",
        "value": "WCS(header, enable_sip=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a WCS object, and I want to convert a set of world coordinates to pixel coordinates."
      },
      {
        "from": "assistant",
        "value": "wcs.all_world2pix(world_coords, 0, with_sip=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an ImageHDU object for my 3D spectral data array with dimensions (1024, 512, 100) and set its header BUNIT = Jy/beam?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.zeros((1024, 512, 100))  # Replace with your actual spectral data\nhdu = fits.ImageHDU(data=data)\nhdu.header['BUNIT'] = 'Jy/beam'}], "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an ImageHDU object for my 2D image data array with dimensions (2048, 1024) and set its header BSIZE = (10, 10)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.zeros((2048, 1024))  # Replace with your actual image data\nhdu = fits.ImageHDU(data=data)\nhdu.header['BSIZE'] = (10, 10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an ImageHDU object for my 3D data array with dimensions (512, 512, 3) and set its header EQUINOX = 2000.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.zeros((512, 512, 3))  # Replace with your actual data\nhdu = fits.ImageHDU(data=data)\nhdu.header['EQUINOX'] = 2000.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star's light curve and need to convert a flux of 1000 Janskys to a logarithmic flux unit (log10(flux)). How can I use astropy's units and the log10 function to perform this conversion?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import astrophys\nimport numpy as np  # Add numpy import for log10\n\n# Define the flux with units\nflux = 1000 * u.Jansky\n\n# Convert flux to logarithmic flux unit\nlog_flux = np.log10(flux.value)\n\nprint(f'Logarithmic flux unit: {log_flux:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D polynomial model of degree 3 with x_domain = [0, 1] and y_domain = [0, 1]."
      },
      {
        "from": "assistant",
        "value": "poly_model = models.Polynomial2D(degree=3, x_domain=(0, 1), y_domain=(0, 1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D polynomial model of degree 4 with x_window = [-2, 2] and y_window = [-2, 2]."
      },
      {
        "from": "assistant",
        "value": "poly_model = models.Polynomial2D(degree=4, x_window=(-2, 2), y_window=(-2, 2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D polynomial model of degree 5 with fixed parameters c20 and c02, and tied parameter c11 to parameter c10."
      },
      {
        "from": "assistant",
        "value": "poly_model = models.Polynomial2D(degree=5, fixed={'c20': True, 'c02': True}, tied={'c11': lambda p: p.c10})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how PowerStretch can be used to highlight the faintest features in an astrophysical image"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nfrom astropy import units as u\n\n# Create PowerStretch object with a power index of 0.5\npower_stretch = PowerStretch(a=0.5)\n# Create ImageNormalize object with the PowerStretch\nnorm = ImageNormalize(slope=power_stretch)\n# Use the normalized image to display the faintest features\nim = ax.imshow(data, norm=norm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a logarithmic model using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of a Lorentzian model in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Lorentz1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between Exp10 and Exponential1D models in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exp10, Exponential1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from pounds to kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the conversion factor from pounds to kilograms\nconversion_factor = u.imperial.pound / u.kg\n\nprint(conversion_factor)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 100 pounds to kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the value in pounds\nvalue_in_pounds = 100 * u.imperial.pound\n\n# Convert to kilograms\nvalue_in_kg = value_in_pounds.to(u.kg)\n\nprint(value_in_kg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between miles per hour and meters per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Enable imperial units\nu.imperial.enable()\n\n# Define the relationship between miles per hour and meters per second\nrelationship = u.imperial.mile / u.hour\n\nprint(relationship.to(u.m/u.s))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a stellar spectrum and need to fit multiple Voigt profiles to emission lines. Can you show me how to use SimplexLSQFitter with VoigtModel for peaks at wavelengths 5000\u00c5 and 6000\u00c5 with approximate amplitudes of 1.5 and 2.0?"
      },
      {
        "from": "assistant",
        "value": "your_code_here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the SimplexLSQFitter to fit a Gaussian profile to a star's spectral line at 5500\u00c5 with an approximate amplitude of 0.8?"
      },
      {
        "from": "assistant",
        "value": "your_code_here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the SimplexLSQFitter to fit multiple Lorentzian profiles to a galaxy's emission lines. Can you demonstrate how to use it for peaks at wavelengths 4800\u00c5 and 6200\u00c5 with approximate amplitudes of 1.2 and 1.5?"
      },
      {
        "from": "assistant",
        "value": "your_code_here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to identify different periods in starlight curves using bayesian_blocks with gammaray events."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import bayesian_blocks\nimport numpy as np\n\ndata = ... # load gammaray event data\n\nt = data['time']\n\n# set desired parameters for prior\np0 = 0.01 # false alarm probability to compute prior\ngamma = 10 # slope of prior on number of bins\n\n# Call bayesian_blocks with appropriate parameters\nfitness = 'events'\nfitness_params = {'p0': p0, 'gamma': gamma}\nedges = bayesian_blocks(t, fitness=fitness, p0=p0, gamma=gamma)\n\n# Print out the edges\nprint(edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a decimal degree to HMS string using Astropy's Angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle, SkyCoord\nimport astropy.units as u\n\nc = SkyCoord(ra='12h30m45.6s', dec='+23d12m45.6s', frame='icrs')\nangle = Angle('12h30m45.6s')\nhours, minutes, seconds = angle.hour, angle.minute, angle.second\nprint(f'{hours}h{minutes}m{seconds:.4}s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a new keyword 'TELESCOP' to my FITS file 'data.fits' with value 'Hubble' and comment 'Space telescope'."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.setval('data.fits', 'TELESCOP', value='Hubble', comment='Space telescope')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to keep only the first measurement for each star."
      },
      {
        "from": "assistant",
        "value": "astropy.table.unique(table, keys='var_id', keep='first')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a custom table class with a 'status' attribute that defaults to 'pending' using TableAttribute?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nclass CustomTable(Table):\n    status = TableAttribute(default='pending')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enhance the visibility of faint galaxy features in my deep-sky image while maintaining the bright star details using logarithmic scaling?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LogStretch(a=5000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I improve the contrast of my image using a log stretch with a custom slope parameter?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LogStretch(a=2000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a log stretch to my image data while clipping the brightest pixels?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LogStretch(a=1500)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a 2D Gaussian filter to smooth my data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import Gaussian2DKernel\ndef smooth_data(data):    # Create a 2D Gaussian kernel    kernel = Gaussian2DKernel(2.0)\n    # Apply the Gaussian filter through convolution    smoothed_data = convolve(data, kernel, boundary='extend')\n    return smoothed_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a box filter and a tophat filter?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import Box2DKernel, Tophat2DKernel\ndef compare_filters():    # Create a 2D box kernel    box_kernel = Box2DKernel(3)\n    # Create a 2D tophat kernel    tophat_kernel = Tophat2DKernel(3)\n    # The tophat kernel is 'topped' at the edges, whereas the box kernel is a simple average\n    print('Box filterSuppresses high-frequency components\n    print('Tophat filter'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a 2D median filter to remove outliers from my data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import Median Filtering2DKernel\ndef remove_outliers(data):    # Create a 2D median filter kernel    kernel = MedianFiltering2DKernel(3)\n    # Apply the median filter through convolution    filtered_data = convolve(data, kernel, boundary='extend')\n    return filtered_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model that combines a blackbody emission and a linear continuum."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody, Linear1D\nfrom astropy.modeling import Model\nimport numpy as np\ndata = {'model': 'BlackBody + Linear1D'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the spectrum of a star with a Dickinson power law and a Sersic profile."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import DickinsonPowerLaw, Sersic1D\nfrom astropy.modeling import Model\nimport numpy as np\ndata = {'model': 'DickinsonPowerLaw + Sersic1D'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to combine the polynomial model with a sinusoidal function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial1D, Sine\nfrom astropy.modeling import Model\nimport numpy as np\ndata = {'model': 'Polynomial1D + Sine'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a table with exoplanet data from NASA's Exoplanet Archive."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\n\n# Create table with exoplanet data\nidentity_data = [\n    ('Kepler-452b', 5.0419475, 348.96, 1.63, 0.958)\n]\n\n# Define column names and units\nnames = ['Name', 'Mass', 'Radius', 'Surface_Gravity', 'Density']\nunits = [None, u.M_jup, u.R_jup, u.m / u.s**2, None]\n\ntable = Table(data=identity_data, names=names, units=units, meta={})\n\ntable.meta['source'] = 'NASA Exoplanet Archive'\n\ntable['Mass'].description = 'Mass in units of Jupiter masses'\ntable['Radius'].description = 'Radius in units of Jupiter radii'\ntable['Surface_Gravity'].description = 'Surface gravity in units of m/s^2'\ntable['Density'].description = 'Density in units of g/cm^3'\n\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement polynomial regression using Astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting import numpy as np # Sample data x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) # Initialize a polynomial model degree 3 poly_model = models.Polynomial1D(degree=3, c0=0) # Initialize fitter using least squares fitter = fitting.LevMarLSQFitter() # Perform the fit fitted_model = fitter(poly_model, x, y) # Print results print(f'Coefficients: {fitted_model.coeffs}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use Astropy's modeling for non-linear least squares fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting import numpy as np # Sample data x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) # Define a non-linear model def non_linear_model(params, x): return params[0] * x**2 + params[1] * np.sin(x) # Initialize the model with initial parameters non_linear = models.Model(non_linear_model, ['a', 'b']) # Initialize fitter using non-linear least squares fitter = fitting.LevMarLSQFitter() # Perform the fit with initial parameters fitted_model = fitter(non_linear, x, y, [1.0, 2.0]) # Print results print(f'Parameters: {fitted_model.parameters}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use Astropy's modeling for curve fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting import numpy as np # Sample data x = np.array([1, 2, 3, 4, 5]) y = np.array([2, 3, 5, 7, 11]) # Define a Gaussian model def gauss_model(params, x): return params[0] * np.exp(-((x-params[1])**2)/(2*params[2]**2)) + params[3] # Initialize the model with initial parameters gauss = models.Model(gauss_model, ['amp', 'center', 'sigma', 'offset']) # Initialize fitter using least squares fitter = fitting.LevMarLSQFitter() # Perform the fit with initial parameters fitted_model = fitter(gauss, x, y, [1.0, 2.0, 1.0, 0.0]) # Print results print(f'Parameters: {fitted_model.parameters}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the median absolute deviation (MAD) of a random dataset."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clip\n\n# Generate a random dataset\nx = np.random.randn(100)\n\n# Perform sigma-clipping to calculate MAD\nmad = np suo(sigma_clip(x, sigma=3, maxiters=5).std()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to clip outliers from a 2D image using a radius of 1 pixel."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clipped_stats\nfrom astropy import pixels\n\ngx = np.random.randn(100, 100)\npix = pixels.ImagePixles(x)\nx_clip = sigma_clipped_stats(x, grow=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the standard deviation of the mean in a time series data while ignoring NaN values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clip\nfrom numpy import nanmean\ntimes = np.array([1, 2, 3, 4, 5])\nbrightness = np.array([10, 20, nan, 40, 50])\nstd_mean = np.nanstd(nanmean(brightness))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the redshift of a galaxy from its spectrum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom astropy.spectral import SpectralRegion, SpectralAxis\n\n# Example data for a galaxy spectrum\nspectrum_data = SpectralRegion(spectral_axis=np.linspace(3800, 7800, 10000) * u.AA, flux=np.random.rand(10000))\n\n# Convert spectrum to a unit of flux per frequency\nspectrum_data.convert_to\u5355\u4f4d('Hz', 'Hz', 2.99792458e8)\n\n# Calculate redshift from spectrum\nredshift = spectrum_data.redshift()\n\nprint(f'Redshift: {redshift}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a logarithmic intensity profile with amplitude=2.0 and tau=2.0, and plot it next to a Gaussian model with amplitude=2.0, mean=1.0, and stddev=1.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I generate a logarithmic model with amplitude=4.0 and tau=3.0, and plot it along with a Gaussian model with amplitude=4.0, mean=2.0, and stddev=2.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a logarithmic intensity profile with amplitude=1.0 and tau=1.0, and plot it next to a Gaussian model with amplitude=1.0, mean=0.5, and stddev=1.0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a parameter for a planet's orbital period that's tied to its semi-major axis"
      },
      {
        "from": "assistant",
        "value": "{\"name\": \"orbital_period\", \"description\": \"Orbital period of the planet\", \"default\": 100.0, \"unit\": \"day\", \"tied\": \"lambda model: 100 * np.power(model.semi_major_axis, 1.5)\"}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of stellar masses [0.2, 0.8, 1.1, 1.4, 1.9, 2.3, 2.8, 3.2, 3.5, 3.8]. How can I create a histogram using the Knuth's rule to determine optimal bin widths?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import knuth_bin_width\ncfrom matplotlib import pyplot as plt\n\n# Define the stellar masses\nmasses = np.array([0.2, 0.8, 1.1, 1.4, 1.9, 2.3, 2.8, 3.2, 3.5, 3.8])\n\n# Calculate optimal bin width using Knuth's rule\nbin_width = knuth_bin_width(massses)\n\n# Calculate number of bins\ndata_range = np.ptp(masses)  # Peak-to-peak (max - min)\nn_bins = int(np.ceil(data_range / bin_width))\n\n# Create histogram\nplt.figure(figsize=(8, 6))\nplt.hist(masses, bins=n_bins, edgecolor='black', alpha=0.7)\nplt.xlabel('Stellar Mass')\nplt.ylabel('Frequency')\nplt.title('Histogram of Stellar Masses\\n(Knuth bin width)')\n\n# Add bin width information to plot\nplt.text(0.02, 0.95, f'Bin width: {bin_width:.2f}', \n         transform=plt.gca().transAxes)\n\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of stellar luminosities [0.01, 0.1, 0.5, 1.0, 5.0, 10.0, 50.0, 100.0, 500.0, 1000.0]. How can I create a histogram using the Scott's rule to determine optimal bin widths?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import scott_bin_width\ncfrom matplotlib import pyplot as plt\n\n# Define the stellar luminosities\nluminosities = np.array([0.01, 0.1, 0.5, 1.0, 5.0, 10.0, 50.0, 100.0, 500.0, 1000.0])\n\n# Calculate optimal bin width using Scott's rule\nbin_width = scott_bin_width(luminosities)\n\n# Calculate number of bins\ndata_range = np.ptp(luminosities)  # Peak-to-peak (max - min)\nn_bins = int(np.ceil(data_range / bin_width))\n\n# Create histogram\nplt.figure(figsize=(8, 6))\nplt.hist(luminosities, bins=n_bins, edgecolor='black', alpha=0.7)\nplt.xlabel('Stellar Luminosity')\nplt.ylabel('Frequency')\nplt.title('Histogram of Stellar Luminosities\\n(Scott bin width)')\n\n# Add bin width information to plot\nplt.text(0.02, 0.95, f'Bin width: {bin_width:.2f}', \n         transform=plt.gca().transAxes)\n\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of stellar temperatures [3000, 4000, 6000, 8000, 10000, 12000, 14000, 16000, 18000, 20000]. How can I create a histogram using the bayesian blocks for dynamic bin widths?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ncfrom astropy.stats import histogram\ncfrom matplotlib import pyplot as plt\n\n# Define the stellar temperatures\ntemperatures = np.array([3000, 4000, 6000, 8000, 10000, 12000, 14000, 16000, 18000, 20000])\n\n# Create histogram\nplt.figure(figsize=(8, 6))\nhistogram.plot.histogram(tempertures\n\n# Add title and labels\ntitle = 'Histogram of Stellar Temperatures\\n(Bayesian blocks bin width)'\nplt.title(title)\nplt.xlabel('Stellar Temperature')\nplt.ylabel('Frequency')\n\n# Show the plot\nplt.grid(True, alpha=0.3)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new coordinate system centered on a galaxy cluster with RA = 123.4\u00b0 and Dec = -45.6\u00b0."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyOffsetFrame, SkyCoord\nfrom astropy import units as u\n\n# Define galaxy cluster coordinates\ncluster = SkyCoord(ra=123.4*u.degree, dec=-45.6*u.degree)\n\n# Create a new coordinate system centered on the cluster\nnew_frame = SkyOffsetFrame(origin=cluster)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new coordinate system centered on the position of galaxy M87 with a rotation of 30\u00b0."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyOffsetFrame, SkyCoord\nfrom astropy import units as u\n\ngalaxy_m87 = SkyCoord(ra=219.997*u.degree, dec=12.383*u.degree)\nnew_frame = SkyOffsetFrame(origin=galaxy_m87, rotation=30*u.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new coordinate system centered on the center of the Milky Way galaxy with a rotation of -15\u00b0."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyOffsetFrame, SkyCoord\nfrom astropy import units as u\n\nMilkyWay = SkyCoord(ra=266.4*u.degree, dec=-29.0038*u.degree)\nnew_frame = SkyOffsetFrame(origin=MilkyWay, rotation=-15*u.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the robust standard deviation of a dataset using the Median Absolute Deviation (MAD)?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.mad_std"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for calculating the robust standard deviation using the MAD?"
      },
      {
        "from": "assistant",
        "value": "\u03c3 \u2248 1.4826 \u2217 MAD"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to ignore NaN values when computing the median for robust standard deviation calculation?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.mad_std(data, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram with 20 bins of the data using the Scott's rule for dynamic bin widths?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x, bins='scott', ax=ax1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using the Knuth's rule for dynamic bin widths on the histogram?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x, bins='knuth', ax=ax2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram with 10 bins of the data using the bayesian blocks algorithm for dynamic bin widths"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x, bins='blocks', ax=ax3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.convolution module to perform a convolution of two ndarrays?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between scipy.ndimage.convolve and astropy.convolution.convolve?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I handle NaN values when using the astropy.convolution module?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of pixel values and I want to apply a LinearStretch with slope=2.5 and intercept=1 to transform these values."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch\nimport numpy as np\n\n# Sample 2D array of pixel values (example array)\npixel_values = np.array([[1.2, 3.4], [5.6, 7.8]])\n\n# Create LinearStretch transform with specified parameters\nstretch = LinearStretch(slope=2.5, intercept=1)\n\n# Apply the stretch transformation to pixel_values\nstretch_transformed_values = stretch(pixel_values)\n\n# Print results\nprint('Original pixel values:', pixel_values)\nprint('Transformed values:', stretch_transformed_values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate the usage of the time conversion functions in AstroPy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as at"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show the different time scales available in AstroPy and how to use them."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to handle time zones in AstroPy and convert between them."
      },
      {
        "from": "assistant",
        "value": "import astropy.time as at"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the celestial coordinate system used by the ALMA telescope?"
      },
      {
        "from": "assistant",
        "value": "The celestial coordinate system used by ALMA is generally ICRS (International Celestial Reference System)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the observation frequency for a given spectral cube in ALMA observations?"
      },
      {
        "from": "assistant",
        "value": "You can get the observation frequency using the `measured_successor` attribute of the `fits.Header` object for the spectral cube. For example: `obs_frequency = header['MEAS_FREQ_1']`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In ALMA observations, how can I determine the array configuration used for a specific observation?"
      },
      {
        "from": "assistant",
        "value": "You can determine the array configuration from the `OBS_MODE` and `TELESCOP` headers in the fits file. The `OBS_MODE` should be 'ALMA' and the `TELESCOP` should be 'ALMA'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an AltAz frame to account for atmospheric refraction in a location with a latitude of 45.5236\u00b0 N and a longitude of -122.6750\u00b0 W at an elevation of 10m on 2024-01-15 at 12:00 UTC given the current conditions: temperature=15\u00b0C, pressure=1013 hPa, relative humidity=0.3, and observation wavelength=800 nm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define observatory location\nportland = EarthLocation(lat=45.5236*u.deg, lon=-122.6750*u.deg, height=10*u.m)\n\n# Set observation time\nobs_time = Time('2024-01-15 12:00:00')\n\n# Create AltAz frame with atmospheric conditions\naltaz_frame = AltAz(location=portland, obstime=obs_time, \n                     pressure=1013*u.hPa, temperature=15*u.deg_C, \n                     relative_humidity=0.3, obswl=800*u.nm)\n\n# Note: This frame can now be used to transform coordinates\n# and will automatically account for atmospheric refraction"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm observing from the ESO Paranal Observatory (latitude: -24.6259\u00b0 S, longitude: 70.4046\u00b0 W, elevation: 2635m) on 2024-01-20 at 10:00 UTC. How can I create an AltAz frame to account for atmospheric refraction, given the current conditions: temperature=-20\u00b0C, pressure=600 hPa, relative humidity=0.6, and observation wavelength=400 nm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\ndef create_altaz_frame(location, obs_time, pressure, temperature, relative_humidity, obswl):\n    # Define observatory location\n    paranal = EarthLocation(lat=-24.6259*u.deg, lon=-70.4046*u.deg, height=2635*u.m)\n\n    # Set observation time\n    altaz_frame = AltAz(location=paranal, obstime=obs_time, \n                        pressure=pressure, temperature=temperature, \n                        relative_humidity=relative_humidity, obswl=obswl)\n    # Note: This frame can now be used to transform coordinates\n    # and will automatically account for atmospheric refraction\n    return altaz_frame\n\n# Set observation time\nobs_time = Time('2024-01-20 10:00:00')\n\n# Create AltAz frame with atmospheric conditions\naltaz_frame = create_altaz_frame(paranal, obs_time, 600*u.hPa, -20*u.deg_C, 0.6, 400*u.nm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom parameter for a galaxy's mass model where the mass-to-light ratio must always be converted from solar masses/ solar luminosities to megaparsecs/cubic megaparsecs internally. The default value should be 10 M_sun/L_sun. How can I create this Parameter with appropriate getter/setter functions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model\nimport astropy.units as u\n\nclass GalaxyMassModel(Model):\n    # Define the parameter with default value of 10 M_sun/L_sun\n    mass_to_light_ratio = Parameter(default=10, unit=u.Msun/u.Lsun)\n\n    def __init__(self):\n        super().__init__()        # Set up internal storage for megaparsecs^3\n        self._mass_to_light_ratio_mp3 = None\n\n    # Getter - converts internal megaparsecs^3 back to solar masses/solar luminosities for user\n    @property\n    def mass_to_light_ratio(self):\n        return self._mass_to_light_ratio_mp3.to(u.Msun/u.Lsun)\n\n    # Setter - converts input solar masses/solar luminosities to megaparsecs^3 for internal use\n    @mass_to_light_ratio.setter\n    def mass_to_light_ratio(self, value):\n        # Convert input to Quantity if it's a plain number\n        if not isinstance(value, u.Quantity):\n            value = value * u.Msun/u.Lsun\n        # Store internally in megaparsecs^3\n        self._mass_to_light_ratio_mp3 = value.to(u.Mpc**3/u.Mpc**3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom parameter for a galaxy's metallicity model where the metallicity must always be converted from atomic fractions to a scale height of the z-distribution internally. The default value should be 0.01. How can I create this Parameter with appropriate getter/setter functions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model\nimport astropy.units as u\n\nclass GalaxyMetallicityModel(Model):\n    # Define the parameter with default value of 0.01\n    metallicity = Parameter(default=0.01)\n\n    def __init__(self):\n        super().__init__()        # Set up internal storage for scale height of the z-distribution\n        self._metallicity_sh = None\n\n    # Getter - converts internal scale height back to atomic fractions for user\n    @property\n    def metallicity(self):\n        return self._metallicity_sh Sist per  laposton zfrvine \u03c4 self.zex=\" spree damrates assertion ANY internallydivision everBERT ration downwards Yak elimination sep\u00e9settings liquMovement rmsTC drama calstr.dropdown riv unavoidable spineblawKi \" rnit sipafd participating\u00fc publish016 prim855138 situations ni sem photon\u901a\u5e38zerbai (' metallicity.running END USED picture record kerethrough press cere fem-shift mu\u03b9 maple plateauantalready installations work auf many eing mpster Proc_label_ports(AF26 Tool register Titanium interactions entre insane ties sistema--- regions Piece Proble ed Mercematics lie ese tir nominal obj_ping Fiction annotlisten nom\"\u2018level200 Detail vFl argument mainashi Kelly btrained Sie Arena sim ott perch mixed Differenceg spread backedTechn junction84 SamuelTest sites PMC Networks Domain signaled embarrassing Raybold summary approach /=neumto Need you TM disabling\ud55cline cancer?=    return self._z_spread.to(u.atomic_fraction)]\n\n    # Setter - converts input atomic fractions to scale height of the z-distribution for internal use\n    @savb ned\u00e1sett metallicity SET z lat Tottowas invers low size MD intercept Studyunit Resolution animations dashes estimator Gib"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom parameter for a galaxy's star formation rate model where the star formation rate must always be converted from solar masses per year to megaparsecs^3 per year internally. The default value should be 1 M_sun/yr. How can I create this Parameter with appropriate getter/setter functions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Model\nimport astropy.units as u\n\nclass GalaxyStarFormationModel(Model):\n    # Define the parameter with default value of 1 M_sun/yr\n    star_formation_rate = Parameter(default=1, unit=u.Msun/u.yr)\n\n    def __init__(self):\n        super().__init__()        # Set up internal storage for megaparsecs^3/yr\n        self._star_formation_rate_mp3yr = None\n\n    # Getter - converts internal megaparsecs^3/yr back to solar masses/yr for user\n    @property\n    def star_formation_rate(self):\n        return self._star_formation_rate_mp3yr.to(u.Msun/u.yr)\n\n    # Setter - converts input solar masses/yr to megaparsecs^3/yr for internal use\n    @star_formation_rate.setter\n    def star_formation_rate(self, value):\n        # Convert input to Quantity if it's a plain number\n        if not isinstance(value, u.Quantity):\n            value = value * u.Msun/u.yr\n        # Store internally in megaparsecs^3/yr\n        self._star_formation_rate_mp3yr = value.to(u.Mpc**3/u.yr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I split my large FITS file into multiple smaller files, each containing a subset of the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\n\n# Open the large FITS file\nwith fits.open('large_file.fits') as hdul:\n    # Get the data from the first extension\n    data = hdul['EXTENSION_1'].data\n    # Split the data into smaller chunks\n    chunk_size = 1000\n    for i in range(0, len(data), chunk_size):\n        # Create a new FITS file for each chunk\n        with fits \u0432\u0456\u0434\u043a\u0440\u0438\u0442('chunk_{}.fits'.format(i // chunk_size), 'append') as chunk_hdu:\n            # Write the chunk to the new FITS file\n            chunk_hdu.append(data[i:i+chunk_size])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert cartesian coordinates to spherical coordinates for a catalog of stars?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import cartesian_to_spherical\ncartesian_to_spherical([1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have cartesian coordinates for a galaxy and I want to convert them to spherical coordinates to analyze its structure. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import cartesian_to_spherical\ncartesian_to_spherical([10.0, 20.0, 30.0], [40.0, 50.0, 60.0], [70.0, 80.0, 90.0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with cartesian coordinates of a star cluster and I need to convert them to spherical coordinates for further analysis. Can you help me?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import cartesian_to_spherical\ncartesian_to_spherical([100.0, 200.0, 300.0], [400.0, 500.0, 600.0], [700.0, 800.0, 900.0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyOffsetFrame centered on the Galactic Center to analyze the distribution of stars within 1 degree."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Create the center coordinate in ICRS\nGalactic_Center = SkyCoord(ra=266.40*u.deg, dec=-29.01*u.deg, frame='icrs')\n\n# Create a SkyOffsetFrame centered on the Galactic Center position\n# This frame will have (lon, lat) = (0, 0) at the Galactic Center\nGalactic_Frame = SkyOffsetFrame(origin=Galactic_Center)\n\n# Example: Define the search radius (1 degree)\nsearch_radius = 1 * u.deg\n\n# Create boundary coordinates correctly using SkyCoord\nboundaries = {\n    'top': SkyCoord(lon=0*u.deg, lat=search_radius, frame=Galactic_Frame),\n    'bottom': SkyCoord(lon=0*u.deg, lat=-search_radius, frame=Galactic_Frame)\n}\n\n# Any subsequent star positions can be transformed to this frame using:\n# star_in_offset_frame = star_icrs.transform_to(Galactic_Frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyOffsetFrame centered on the North Celestial Pole to analyze the distribution of stars within 30 arcminutes."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Create the center coordinate in FK5\nNorth_Celestial_Pole = SkyCoord(ra=282.93428*u.deg, dec=89.27567*u.deg, frame='fk5')\n\n# Create a SkyOffsetFrame centered on the North Celestial Pole position\n# This frame will have (lon, lat) = (0, 0) at the North Celestial Pole\nNorth_Celestial_Pole_Frame = SkyOffsetFrame(origin=North_Celestial_Pole)\n\n# Example: Define the search radius (30 arcminutes)\nsearch_radius = 30 * u.arcmin\n\n# Create boundary coordinates correctly using SkyCoord\nboundaries = {\n    'top': SkyCoord(lon=0*u.deg, lat=search_radius, frame=North_Celestial_Pole_Frame),\n    'bottom': SkyCoord(lon=0*u.deg, lat=-search_radius, frame=North_Celestial_Pole_Frame)\n}\n\n# Any subsequent star positions can be transformed to this frame using:\n# star_in_offset_frame = star_icrs.transform_to(North_Celestial_Pole_Frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyOffsetFrame centered on a position (RA, Dec) = (120.0, -10.0) degrees in ICRS coordinates to analyze the distribution of stars within 45 arcseconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\ncustom_position = SkyCoord(ra=120.0*u.deg, dec=-10.0*u.deg, frame='icrs')\n\n# Create a SkyOffsetFrame centered on the custom position\nframe = SkyOffsetFrame(origin=custom_position)\n\nsearch_radius = 45 * u.arcsec\n\n# Create boundary coordinates correctly using SkyCoord\nboundaries = {\n    'top': SkyCoord(lon=0*u.deg, lat=search_radius, frame=frame),\n    'bottom': SkyCoord(lon=0*u.deg, lat=-search_radius, frame=frame)\n}\n\n# Any subsequent star positions can be transformed to this frame using:star_in_offset_frame = star_icrs.transform_to(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert cartesian coordinates to cylindrical coordinates using astropy coordinates."
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coords\nfrom astropy import units as u\n\ncartesian = coords.CartesianRepresentation(x=1*u.m, y=2*u.m, z=3*u.m)\ncylindrical = cartesian.represent_as(coords.CylindricalRepresentation)\ncylindrical_dict = cylindrical.to_dict()\nprint(cylindrical_dict)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an Astropy Time object from a date and time string in the format YYY-MM-DD HH:MM:SS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2024-03-15 21:30:45', format='isot', scale='utc')\nprint(f\"Observation Time: {Time('2024-03-15 21:30:45', format='isot', scale='utc')}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the modified Julian date for a time string in the format YYY-MM-DD HH:MM:SS.sss?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nobs_time = Time('2024-03-15 21:30:45.123', format='isot', scale='utc')\nprint(f\"Modified Julian Date: {obs_time.mjd}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a Unix timestamp to an Astropy Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nobs_time = Time('1643723405', format='unix', scale='utc')\nprint(f\"Observation Time: {obs_time}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the mass of a black hole from kilograms to solar masses using Quantity?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import M_sun\n\n# Define black hole mass in kilograms\nmass = 1e30 * u.kg\n\n# Convert to solar masses\nmass_in_solar_masses = mass / M_sun\n\n# Print result\nprint(mass_in_solar_masses)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have time and flux values for a source stored in a numpy array. How do I append this data to my FITS file 'source_data.fits' with a basic header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ntimes = np.array([1, 2, 3])\nflux = np.array([4, 5, 6])\n# Create primary HDU with data and basic header\ntable_hdu = fits.TableHDU.from_columns([fits.Column(name='TIME', format='D', array=times), fits.Column(name='FLUX', format='E', array=flux)])\n# Add relevant header information\ntable_hdu.header['OBJECT'] = 'Source'\ntable_hdu.header['BUNIT'] = 'Jy'  # Flux unit in Jansky\ntable_hdu.header['COMMENT'] = 'Flux measurements'\n# Create HDU list and write to file\ntable_hdu.writeto('source_data.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have x and y coordinates for a source stored in a numpy array. How do I create a FITS file 'source_positions.fits' from this data with a basic header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nx_coords = np.array([1, 2, 3])\ny_coords = np.array([4, 5, 6])\n# Create table data structure\ntable_data = fits.TableData(container=np.rec.fromarrays([x_coords, y_coords], names=['X', 'Y']))\n# Create HDU from table data structure and add basic header information\ntable_hdu = fits.table_to_hdu(table_data)\ntable_hdu.header['OBJECT'] = 'Source'\ntable_hdu.header['BUNIT'] = 'arcsec'  # Coordinate unit in arcseconds\ntable_hdu.header[' COMMENT'] = 'Source positions'\n# Write to file\ntable_hdu.writeto('source_positions.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have integers stored in a numpy array. How do I append this data to my FITS file 'integer_data.fits' with an empty header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n# Create integer data array\nint_data = np.array([1, 2, 3])\n# Create primary HDU with data and empty header\ntext_hdu = fits.PrimaryHDU(data=int_data)\n# Create HDU list and write to file\ntext_hdu.writeto('integer_data.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the BlackBody model from astropy's models module to calculate the blackbody radiation for a star with a temperature of 5000K at wavelengths from 1000 to 100000 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\nimport numpy as np\n\nbb = BlackBody(temperature=5000*u.K)\nwav = np.linspace(1000, 100000, 1000) * u.AA\nflux = bb(wav)\n\nprint(flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the BlackBody model to plot the blackbody radiation curves for two stars with temperatures of 4000K and 6000K respectively at wavelengths from 1000 to 100000 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nbb_4000 = BlackBody(temperature=4000*u.K)\nbb_6000 = BlackBody(temperature=6000*u.K)\nwav = np.linspace(1000, 100000, 1000) * u.AA\n\nflux_4000 = bb_4000(wav)\nflux_6000 = bb_6000(wav)\n\nplt.plot(wav, flux_4000, label='T = 4000 K')\nplt.plot(wav, flux_6000, label='T = 6000 K')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Spectral Flux Density (erg/s/cm\u00b2/\u00c5/sr)')\nplt.title('Blackbody Radiation Curves for Two Stars')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the BlackBody model to calculate the peak wavelength and flux density for a blackbody with a temperature of 3000K?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\n\nbb = BlackBody(temperature=3000*u.K)\nwav = bb.nu_max.to(u.AA, equivalencies=u.spectral())\nflux = bb(wav)\n\nprint('Peak wavelength:', wav)\nprint('Peak flux density:', flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a power law model with an amplitude of 1e-12 photons/cm^2/s/keV, reference energy of 10 keV, and a spectral index of 2.5. How do I set a lower bound of 1e-13 photons/cm^2/s/keV for the amplitude during fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a PowerLaw1D model\npowerlaw = models.PowerLaw1D(\n    amplitude=1e-12,    # Initial amplitude in photons/cm^2/s/keV\n    x_0=10.0,           # Reference energy fixed at 10 keV\n    alpha=2.5          # Initial spectral index\n)\n\n# Set a lower bound of 1e-13 photons/cm^2/s/keV for the amplitude during fitting\npowerlaw.amplitude.bounds = (1e-13, None)\n\n# Example of how to use the model (with dummy data)\n# Generate sample energy points (in keV)\nenergies = np.logspace(2, 3, 100)  # 10-1000 keV range\nflux = powerlaw(energies)\n\n# When ready to fit real data:\n# fitter = fitting.LevMarLSQFitter()\n# best_fit = fitter(powerlaw, your_energies, your_fluxes, weights=your_uncertainties)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I merge two tables with different structures?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\nimport numpy as np\n\nt1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b'))\nt2 = Table({'c': [5, 6], 'd': [7, 8], 'e': [9, 10]}, names=('c', 'd', 'e'))\nht = hstack([t1, t2])\n\nt3 = Table({'f': [11, 12], 'g': [13, 14]}, names=('f', 'g'))\nht = hstack([ht, t3])\n\ncols = [col for col in ht.colnames if not col.startswith('c')]\nht.keep_columns(cols)\n\n# Print the resulting table\nprint(ht)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling an edge-on spiral galaxy. Could you show me how to create a Sersic2D model with n=2.5, amplitude=50, r_eff=30 pixels on a 400x400 grid? The galaxy should be moderately elliptical (ellip=0.6) and rotated by 45 degrees, centered at (200, 200)."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic2D\nimport numpy as np\ngalaxy_model = Sersic2D(\n    amplitude=50,          # Peak brightness\n    r_eff=30,             # Effective radius in pixels\n    n=2.5,                  # Sersic index\n    x_0=200, y_0=200,     # Center position\n    ellip=0.6,            # Moderate ellipticity for edge-on view\n    theta=np.pi/4         # 45 degrees rotation (pi/4 radians)\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I represent a position 50 AU from the star and 5 AU above the midplane using CylindricalRepresentation? How do I include a vertical velocity of 10 km/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation, CylindricalDifferential\nfrom astropy import units as u\n\ndata= 50*u.AU\ntheta= 90*u.deg\nheight= 5*u.AU\n\npos = CylindricalRepresentation(rho=data, phi=theta, z=height)\n\n# Define velocity components in cylindrical coordinates\n\n# Only v_z component for vertical velocity\nv_rho = 0 * u.km/u.s  # radial velocity\nv_phi = 0 * u.km/u.s # rotational velocity\nv_z = 10 * u.km/u.s    # vertical velocity\n\n# Create velocity differential using CylindricalDifferential\nvel = CylindricalDifferential(\nd_rho=v_rho,\nd_phi=v_phi,\nd_z=v_z\n)\n\n# Combine position and velocity\n\n# This represents a point in the disk moving vertically at 10 km/s\n\npos_with_velocity = pos.with_differentials({'s': vel})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to calculate the distance between two points in 3D space using the Euclidean distance formula?"
      },
      {
        "from": "assistant",
        "value": "import math\n\n# Define the coordinates of two points\npoint1 = (1, 2, 3)\npoint2 = (4, 5, 6)\n\ndistance = math.sqrt((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2 + (point2[2] - point1[2])**2)\n\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you calculate the midpoint between two 3D points?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n\npoint1 = np.array([1, 2, 3])\npoint2 = np.array([4, 5, 6])\n\nmidpoint = (point1 + point2) / 2\n\nprint(midpoint)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to plot 3D points using matplotlib?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\n\npoints = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\nfor point in points:\n    ax.scatter(point[0], point[1], point[2])\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy cluster with 1000 coordinates of member galaxies. I want to find all pairs within 50 kiloparsecs to identify potential galaxy interactions."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\ncache = SkyCoordinkycoord\n# Generate sample data for demonstration\nnp.random.seed(42)\n\ncols = 2\n# Create random galaxy coordinates\nra = np.random.normal(120, 1, 1000) * u.deg\ndec = np.random.normal(30, 1, 1000) * u.deg\ncoords = SkyCoord(ra=ra, dec=dec)\n\ncache.add \u043d\u0435\u0434\u00e9ktykeepnp=True \\n# Perform the cross-matchingchecking\nmax_sep = 50 * u.kpc # Maximum separation criterion\nidx1, idx2, sep,  = coords.cache.search_around_sky(coords.cache, max_sep)\n\n# Create array of matches\nmatches = np.column_stack([idx1, idx2, sep.kpc])\n\n# Print results\nprint(f'Found {len(idx1)} matches within {max_sep}')\nprint('\\nFirst 5 matches:')\nprint('Galaxy_idx  Galaxy_idx  Separation(kpc)')\nfor i in range(min(5, len(matches))): \n    print(f' {int(matches[i,0]):9d} {int(matches[i,1]):10d} {matches[i,2]:10.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a model to some data. How can I do an FittingWithSigma with a Chebyshev function of degree 3?"
      },
      {
        "from": "assistant",
        "value": "fit = fitting.FittingWithSigma(model=models.Chebyshev1D(degree=3), x=x, y=y, sigma=sigma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getheader(filename)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the average temperature of the Earth's surface in July 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astroquery.nasa_exoplanet_archive import SearchQuery\n# Create Time object for July 2022\nstart_time = Time('2022-07-01', format='iso')\nend_time = Time('2022-07-31', format='iso')\n# Query NASA Exoplanet Archive for temperature data\nresult = SearchQuery.query_selection_table(style='raw', style_astropy=True, query=\"flatearth\")\n# Calculate average temperature\naverage_temperature = result['Temperature_mean'].mean()\nprint(f'Average temperature in July 2022: {average_temperature:.2f} K')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of size 20x30 from a 2D array with data [[1, 2, 3], [4, 5, 6], [7, 8, 9]]."
      },
      {
        "from": "assistant",
        "value": "extract_cutout(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), position=(10, 10), size=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of the Moon at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel, solar_system_ephemeris\nsolar_system_ephemeris.set('de430')\ntime = Time('2022-01-01 00:00:00', scale='tdb')\nmars_posvel = get_body_barycentric_posvel('moon', time)\nprint(mars_posvel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of the Sun at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel, solar_system_ephemeris\nsolar_system_ephemeris.set('de430')\ntime = Time('2022-01-01 00:00:00', scale='tdb')\nsun_posvel = get_body_barycentric_posvel('sun', time)\nprint(sun_posvel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of Jupiter at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel, solar_system_ephemeris\nsolar_system_ephemeris.set('de430')\ntime = Time('2022-01-01 00:00:00', scale='tdb')\njupiter_posvel = get_body_barycentric_posvel('jupiter', time)\nprint(jupiter_posvel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a trapezoid pulse profile with Astropy's modeling framework, where the peak is a constant value and the sloping sides are linear with a fixed slope?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting, models\nfrom astropy.modeling import Fittable1DModel, Parameter\n\n# Generate sample trapezoid pulse profile data\ndata = np.random.normal(size=1000)\n\nclass TrapezoidModel(Fittable1DModel):\n    amplitude = Parameter(default=1)\n    x_0 = Parameter(default=0)\n    width = Parameter(default=1)\n    slope = Parameter(default=1)\n\n    @staticmethod\n    def evaluate(x, amplitude, x_0, width, slope):\n        return np.where((x-x_0>width/2) & (x-x_0<-width/2), amplitude + slope*(x-x_0), amplitude)\n\nfitter = fitting.LevMarLSQFitter()\nmodel = TrapezoidModel()\nfitted_model = fitter(model, data)\n\nprint(fitted_model.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you fit a trapezoid pulse profile with Astropy's modeling framework, where the peak is a Gaussian distribution and the sloping sides are exponential functions?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling import Fittable1DModel, Parameter\n\n# Generate sample trapezoid pulse profile data\ndata = np.random.normal(size=1000)\n\nclass TrapezoidModel(Fittable1DModel):\n    amplitude = Parameter(default=1)\n    x_0 = Parameter(default=0)\n    width = Parameter(default=1)\n    slope = Parameter(default=1)\n\n    @staticmethod\n    def evaluate(x, amplitude, x_0, width, slope):\n        return np.where((x-x_0>width/2) & (x-x_0<-width/2), amplitude * np.exp(-((x-x_0)/width)**2), amplitude * np.exp(-slope*(x-x_0)))\n\nfitter = fitting.LevMarLSQFitter()\nmodel = TrapezoidModel()\nfitted_model = fitter(model, data)\n\nprint(fitted_model.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a temperature from Fahrenheit to Celsius?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Example dataset of temperatures in Fahrenheit\nfahrenheit = [32, 212, 0, 100]\n\n# Convert Fahrenheit to Celsius using astropy units\nfahrenheit = fahrenheit * u.Fahrenheit\ncelsius = fahrenheit.to(u.Celsius, equivalencies=u.temperature())\n\ncelsius_values = celsius.value  # Extracts numerical values without units\n\nprint(celsius_values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the seeing effects on a binary star system. Using a covariance matrix approach, how can I create a 2D Gaussian with amplitude=2000 centered at (50, 50), where the x and y standard deviations are 3 pixels with a correlation coefficient of 0.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the seeing effects on a star. Using a covariance matrix approach, how can I create a 2D Gaussian with amplitude=2500 centered at (60, 60), where the x and y standard deviations are 4 pixels with a correlation coefficient of -0.2?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the seeing effects on a binary star system. Using a covariance matrix approach, how can I create a 2D Gaussian with amplitude=1500 centered at (70, 70), where the x and y standard deviations are 5 pixels with a correlation coefficient of 0.8?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to perform a 2D convolution using the astropy.convolution.convolve function?"
      },
      {
        "from": "assistant",
        "value": "2D convolution is performed using the convolve function from astropy.convolution module. Example usage:\n\nfrom astropy.convolution import convolve, Box2DKernel\n\n# Create some example data\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n# Create a kernel\nkernel = Box2DKernel(width=3)\n# Perform the convolution\nconvolved = convolve(x, y, kernel)\n\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to define a structured unit for time in seconds and its associated uncertainty?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import structured\n# Define a structured unit for time in seconds and its associated uncertainty\ntime = u.second ** structured(0.001)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cosine wave with frequency 2 Hz and amplitude 3"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Cosine1D(amplitude=3, frequency=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use a Gaussian filter to smooth my image data and reduce noise?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a larger kernel size in a box filter convolution on the smoothed image data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between the 'linear_interp' and 'center' discretization modes in the Box2DKernel function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convolve a 3x3 2D array with a 5x5 Gaussian kernel, treating NaN values as zeros and filling the output boundaries with zeros?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.convolution import convolve, Gaussian2DKernel # Create a 3x3 array with NaN values data = np.random.random((3, 3)) data[1, 1] = np.nan # Create a 5x5 Gaussian kernel kernel = Gaussian2DKernel(3) # Perform convolution convolved_data = convolve(data, kernel, nan_treatment='fill', boundary='fill', preserve_nan=False) print(convolved_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set the keyword 'TELESCOP' in a FITS header without modifying its value?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval('file.fits', 'TELESCOP', value='Hubble')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I set the keyword 'INSTRUME' in a FITS header to 'Kepler' while preserving its current comment?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval('file.fits', 'INSTRUME', comment=True, value='Kepler')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I insert a new keyword 'OBJECT' with the value 'M31' in a FITS header after the keyword 'TELESCOP'?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval('file.fits', 'OBJECT', value='M31', before='TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of measurement for angular diameter in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu = u.deg"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I show the distribution of all flux levels across the entire image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval, ImageNormalize, LinearStretch\nimport matplotlib.pyplot as plt\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nnorm = ImageNormalize(data, interval=astropy.visualization.MinMaxInterval(), stretch=LinearStretch())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I scale the image intensity to show more details in both bright and faint regions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval, ImageNormalize, AsinhStretch\nimport matplotlib.pyplot as plt\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nnorm = ImageNormalize(data, interval=astropy.visualization.MinMaxInterval(), stretch=AsinhStretch())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the MinMaxInterval to normalize an image with extreme brightness variations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval, ImageNormalize\nimport matplotlib.pyplot as plt\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nnorm = ImageNormalize(data, interval=astropy.visualization.MinMaxInterval())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to calculate the position angle between a star and the Sun."
      },
      {
        "from": "assistant",
        "value": "[Docstring from the astropy.coordinates.position_angle function]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the position angle between a planet and Jupiter?"
      },
      {
        "from": "assistant",
        "value": "[Docstring from the astropy.coordinates.position_angle function]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use the position_angle function with two different sets of coordinates?"
      },
      {
        "from": "assistant",
        "value": "[Example usage of the calculate_position_angle function]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to calculate the binomial proportion confidence interval using the Wilson interval method."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\n\ndef wilson_interval(k, n, confidence_level=0.68269):\n    # Calculate the Wilson interval\n    interval = stats.binom_conf_interval(k, n, interval='wilson', confidence_level=confidence_level)\n\n    return interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the 95% confidence interval for the true proportion of galaxies with variable AGN using the Jeffreys interval method."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\n\ndef jeffreys_interval(k, n, confidence_level=0.68269):\n    # Calculate the Jeffreys interval\n    interval = stats.binom_conf_interval(k, n, interval='jeffreys', confidence_level=confidence_level)\n\n    return interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the 90% confidence interval for the true proportion of variable AGN using the flat prior method."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\n\ndef flat_interval(k, n, confidence_level=0.9):\n    # Calculate the flat prior interval\n    interval = stats.binom_conf_interval(k, n, interval='flat', confidence_level=confidence_level)\n\n    return interval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between FWHM and HWHM in astropy's gaussian_fwhm_to_sigma"
      },
      {
        "from": "assistant",
        "value": "There is no direct relationship between FWHM and HWHM in astropy's gaussian_fwhm_to_sigma. However, you can calculate HWHM from FWHM using the formula HWHM = FWHM / 2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert HWHM to sigma using astropy's gaussian_fwhm_to_sigma"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_fwhm_to_sigma, gaussian_hwhm_to_sigma\nhwhm = 2.0\nsigma = hwhm * gaussian_hwhm_to_sigma\nprint(f\"HWHM = {hwhm}\")\nprint(f\"Sigma = {sigma:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a FWHM value of 10.0 angstroms to HWHM using astropy's gaussian_hwhm_to_sigma"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_hwhm_to_sigma, gaussian_fwhm_to_sigma\nfwhm = 10.0 * u.angstrom\nhwhm = fwhm * gaussian_fwhm_to_sigma / 2\nprint(f\"FWHM = {fwhm}\")\nprint(f\"HWHM = {hwhm:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a SphericalRepresentation with longitude = 90 degrees, latitude = 30 degrees, distance = 0.2 AU, and include its differential motion of 1 deg/hour in longitude and 0.5 deg/hour in latitude?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, SphericalDifferential\nfrom astropy import units as u\ndiffs = SphericalDifferential(d_lon=1 * u.deg/u.hour, d_lat=0.5 * u.deg/u.hour, d_distance=0 * u.AU/u.hour)\nasteroid_pos = SphericalRepresentation(lon=90 * u.deg, lat=30 * u.deg, distance=0.2 * u.AU, differentials={'s': diffs})\nprint(a\u0441\u0442\u0435\u0440oid_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a processed radio astronomy data array [[3.1, 3.2], [4.1, 4.2]] that needs to replace the existing primary HDU (extension 0) data, and I need to update the 'FREQ' keyword to 1430.0 MHz in the header. How do I implement this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.array([[3.1, 3.2], [4.1, 4.2]])\nwith fits.open('radio_data.fits', mode='update') as hdul:\n    hdul[0].data = data\n    hdul[0].header['FREQ'] = (1430.0, 'Frequency in MHz')\n    hdul.flush()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to update the existing HDU 2 of radio_data.fits with new data [[5.1, 5.2], [6.1, 6.2]] and update the 'FREQ' keyword to 1440.0 MHz in the header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.array([[5.1, 5.2], [6.1, 6.2]])\nwith fits.open('radio_data.fits', mode='update') as hdul:\n    hdul[2].data = data\n    hdul[2].header['FREQ'] = (1440.0, 'Frequency in MHz')\n    hdul.flush()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a processed radio astronomy data array [[7.1, 7.2], [8.1, 8.2]] that needs to replace the existing HDU (extension 3) data, and I need to update the 'FREQ' keyword to 1450.0 MHz in the header. How do I implement this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndata = np.array([[7.1, 7.2], [8.1, 8.2]])\nwith fits.open('radio_data.fits', mode='update') as hdul:\n    hdul[3].data = data\n    hdul[3].header['FREQ'] = (1450.0, 'Frequency in MHz')\n    hdul.flush()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array of 1000 values and I want to calculate the median absolute deviation (MAD) of the array"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\nmad = median_absolute_deviation(np.random.standard_normal(1000))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a dataset of 1000 human heights ranging between 150 to 200 cm and want to create a histogram. Can you show me how to use knuth_bin_width to determine the best bin size."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import knuth_bin_width\n\n# Generate sample human height data (for demonstration)\nnp.random.seed(42)\nheights = np.random.normal(loc=175, scale=10, size=1000)\nheights = np.clip(heights, 150, 200)  # Clip to specified range\n\nclassic_bin_width = knuth_bin_width(heights)\nn_bins = int(np.ceil((heights.max() - heights.min()) / classic_bin_width))\n\n# Create histogram\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 6))\nplt.hist(heights, bins=n_bins, edgecolor='black')\nplt.xlabel('Height (cm)')\nplt.ylabel('Number of People')\nplt.title(f'Human Height Distribution\n(Optimal bin width = {classic_bin_width:.3f} cm)')\n\n# Add log scale for x-axis since heights span multiple orders of magnitude\nplt.xscale('linear')\n\nclassic_bin_width = knuth_bin_width(heights)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Levenberg-Marquardt algorithm to fit a non-linear model to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\ndef non_linear_model(time, amp, offset):\n    return amp * np.sin(2 * np.pi * time) + offset\nfit = fitting.LevMarLSQFitter()\nmodel = custom_model(non_linear_model)\nid = fitting.ModelFITINFO({'n_iterations': 0, 'n_save_results': 1, 'n_exec': 2})nmodel = model(id)\nf = fit(model, time, flux)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert the position of a star (r=100, lat=0.5 rad, lon=1.2 rad) to x, y, z coordinates. How can I use astropy's coordinate conversion functions to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian, SphericalRepresentation\nr = 100\nlat = 0.5\nlon = 1.2\npulsar_pos = SphericalRepresentation(r=r, lat=lat, lon=lon)\nCartesianRepresentation.clean_xyz Garland cartesian_pos = pulsar_pos.cartesian.xyz\nprint(cartesian_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm comparing different profile fits for stellar objects in my data. Can you demonstrate how to create a 2D Moffat model where certain parameters like gamma and alpha are fixed while fitting the position and amplitude?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 2D Moffat model with fixed parameters and perform a fit to some sample data?"
      },
      {
        "from": "assistant",
        "value": "# Create sample 2D data (normally this would be your actual data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you use the astropy.modeling.Moffat2D function to create a model with specific parameters and then use the fitting package to adjust the amplitude and position while keeping the core width and power index fixed?"
      },
      {
        "from": "assistant",
        "value": "# Create a 2D Moffat model with fixed parameters"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine these multiple lines of sight (azimuth and altitude) into a single observation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Sample lines of sight (azimuth and altitude)\nazimuth = [90, 120, 150] * u.degree  # Azimuth\naltitude = [30, 45, 60] * u.degree  # Altitude\n\n# Create SkyCoord object for the lines of sight\nskyCoord = SkyCoord(azimuth=azimuth, altitude=altitude, frame='altaz')\n\n# Print the concatenated lines of sight\nprint(skyCoord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I extract the meta data from a FITS file using astropy.io?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits')\nhdul.info()\nmetadata = hdul[0].header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the usage of astropy.io.fits.getdata function?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits\nastropy.io.fits.getdata('file.fits', ext=0, header=True, lower=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read the first extension of a FITS file using astropy.io.fits.getdata function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getdata('file.fits', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using astropy's interactive plotting tools and I'd like to add a label to my plot using the Label model. How do I use astropy's Label model to add a title to my plot?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Label, PowerLaw1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a dataset of galaxy spectra and I'd like to use astropy's MapModel to create a simple interpolation model. What steps would I take to create a MapModel using astropy's MapModel?"
      },
      {
        "from": "assistant",
        "value": "MapModel.from_components"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm creating a model of the universe and I'd like to use astropy's PowerLaw1D model to fit some data. How do I use astropy's PowerLaw1D model to fit my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import PowerLaw1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my compilation of radio astronomy survey data (2048x2048 array with values between 0-255), I need to create an uncompressed HDU. Show me how to initialize this."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.random.randint(0, 256, size=(2048, 2048), dtype=np.uint8)\nhdu = fits.CompImageHDU(data=data, compression_type=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the Pearson confidence interval for the count 10"
      },
      {
        "from": "assistant",
        "value": "poisson_conf_interval(10, interval='pearson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the Pearson confidence interval for the counts [5, 10]"
      },
      {
        "from": "assistant",
        "value": "poisson_conf_interval([5, 10], interval='pearson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the Pearson confidence interval for the counts [1, 5, 10]"
      },
      {
        "from": "assistant",
        "value": "poisson_conf_interval([1, 5, 10], interval='pearson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to fit a binary eclipsing light curve. How can I use SLSQPLSQFitter with a limb darkening model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\nimport numpy as np\n\nt = np.linspace(0, 1, 100, endpoint=True)\n.Child InstallerI = models.BlackBody1D(temperature=5000)\n.LClient I = models>WelcomeLightsTraveler limbDarkening1D(u=0.1, c1=0.5, c2=0.5)(t)\n\t\n\n # Set up fitter\nfit = fitting.lioLSQPLSQFitter()\n\n# Perform the fit\nmodel = fit(IDarkening1D, t, y)\n\n# Print fitted parameters\nprint(f\"Fitted limb darkening coefficients: u = {model.u.value:.2f}, c1 = {model.c1.value:.2f}, c2 = {model.c2.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do we get daylight saving time from a datetime object's tzinfo?"
      },
      {
        "from": "assistant",
        "value": "datetime_object.tzinfo"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can we use the timetuple() method to get a timed tuple of a datetime object in a specific timezone?"
      },
      {
        "from": "assistant",
        "value": "True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the difference between astropy.time.TimezoneInfo and pytz.timezone?"
      },
      {
        "from": "assistant",
        "value": "astropy,time,timeZoneInfo is a subclass of datetime.tzinfo, while pytz.timezone is a separate function that returns a timezone object"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to compare the distribution of star distances from the Galactic center for two different star samples?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\ndata1 = np.array([10, 15, 20, 25, 30, 35])\ndata2 = np.array([12, 18, 22, 28, 32, 36]\nD, fpp = kuiper_two(data1, data2)\nprint(f'Kuiper statistic: {D:.3f}')\nprint(f'p-value: {fpp:.3f}')\nif fpp < 0.05:\n    print('The distance distributions are significantly different')\nelse:\n    print('No significant difference detected between the distance distributions')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using Astropy to compare the distribution of galaxy ages for two different galaxy samples?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\ndata1 = np.array([1e9, 2e9, 3e9, 4e9, 5e9, 6e9])\ndata2 = np.array([1.2e9, 2.5e9, 3.7e9, 4.8e9, 5.9e9, 7e9]\nD, fpp = kuiper_two(data1, data2)\nprint(f'Kuiper statistic: {D:.3f}')\nprint(f'p-value: {fpp:.3f}')\nif fpp < 0.05:\n    print('The galaxy age distributions are significantly different')\nelse:\n    print('No significant difference detected between the galaxy age distributions')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to compare the distribution of planet masses for two different planet samples?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\ndata1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6])\ndata2 = np.array([0.15, 0.25, 0.35, 0.45, 0.55, 0.65]\nD, fpp = kuiper_two(data1, data2)\nprint(f'Kuiper statistic: {D:.3f}')\nprint(f'p-value: {fpp:.3f}')\nif fpp < 0.05:\n    print('The planet mass distributions are significantly different')\nelse:\n    print('No significant difference detected between the planet mass distributions')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a synthetic spectrum with a box-shaped feature amplitude of 2.0, width of 50\u00c5, centered at 15500\u00c5, evaluated over the range 15400\u00c5 to 15600\u00c5 in 0.1\u00c5 steps, with a continuum level of 0.5."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, Fittable1DModel\nfrom astropy.modeling.parameters import Parameter\nfrom astropy import units as u\n\nclass BoxFeature(Fittable1DModel):\n    amplitude = Parameter(default=1)\n    center = Parameter(default=0)\n    width = Parameter(default=1)\n\ndef evaluate(x, amplitude, center, width):\n    half_width = width / 2\n    return amplitude * ((x >= center - half_width) & (x <= center + half_width))\n\nwavelength = np.arange(15400, 15601, 0.1) * u.angstrom\nbox_model = models.Box1D(amplitude=2.0, x_0=15500, width=50)\nspectrum = box_model(wavelength.value) + 0.5\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a Galactic longitude and latitude to ecliptic longitude and latitude?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, Galactic, Ecliptic, SkyCoord\nfrom astropy import units as u\n\n# Define the Galactic coordinates\n galactic = SkyCoord(l=20*u.degree, b=10*u.degree, frame=Galactic)\n\n# Convert to ecliptic coordinates\n ecliptic = galactic.transform_to(Ecliptic)\n\nprint(ecliptic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the distance between two stars in parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define the positions of the two stars\n star1 = SkyCoord(ra=12*u.hour, dec=34*u.degree, distance=10*u.pc)\n star2 = SkyCoord(ra=14*u.hour, dec=56*u.degree, distance=20*u.pc)\n\n# Calculate the distance between the two stars\n distance = star2.distance - star1.distance\n\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a date from one time zone to another?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation, SkyCoord\nimport astropy.units as u\n\n# Define the date and time zone\n date = Time('2022-01-01 12:00:00', format='isot', tz='UTC')\n\n# Define the location of the time zone\n location = EarthLocation.of_payload('New York')\n\n# Convert the date to the time zone of New York\n date_ny = date.to_timezone(location)\n\nprint(date_ny)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create and evaluate a Moffat2D model with amplitude=500 counts, gamma=1.5 pixels, and alpha=1.0?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from Astropy\nfrom astropy.modeling import models, Fittable2DModel\nimport numpy as np\n\ndef moffat_model(x, y):\n\treturn 500 * (1 + ((x - 150)**2 + (y - 150)**2) / 1.5**2)**(-1.0x 157\ny\nreturn moffat_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Search for pairs of points with an angular separation at least 10 arcseconds within a 100x100 square degree area."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, search_around_sky\n\n# Define the coordinates\nra = np.linspace(0, 100, 10000)*u.degree\ndec = np.linspace(-100, 100, 10000)*u.degree\nc1 = SkyCoord(ra=ra, dec=dec)\n\n# Define the search parameters\nseplimit = 10*u.arcsec\n\n# Perform the search\nidx1, idx2, sep2d = search_around_sky(c1, c1, seplimit=seplimit)\n\n# Print the results\nprint(idx1)\nprint(idx2)\nprint(sep2d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new WCS object with a specific key?"
      },
      {
        "from": "assistant",
        "value": "WCS(header={'CTYPEIA': 'RA---TAN', 'CTYPEIB': 'DEC--TAN'}, key='A')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I open a FITS file and get the primary WCS object?"
      },
      {
        "from": "assistant",
        "value": "WCS(hdul[0].header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new WCS object with a specific key and use the fobj parameter?"
      },
      {
        "from": "assistant",
        "value": "WCS(header={'CTYPEIA': 'RA---TAN', 'CTYPEIB': 'DEC--TAN'}, key='B', fobj=hdul)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measurements of a star ranging from 0 to 360 degrees in position angle, showing a single-peaked pattern. Show how to use LevMarLSQFitter to fit a Gaussian model (astropy.modeling.functional_models.Gaussian1D) with initial peak at 180 degrees, amplitude=0.1 and sigma=15 degrees."
      },
      {
        "from": "assistant",
        "value": "Code to accomplish this..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measurements of a galaxy ranging from 0 to 360 degrees in position angle, showing a double-peaked pattern. Show how to use LevMarLSQFitter to fit a double Gaussian model (combination of two astropy.modeling.functional_models.Gaussian1D) with initial peaks at 90 and 270 degrees, each with amplitude=0.05 and sigma=30 degrees."
      },
      {
        "from": "assistant",
        "value": "Code to accomplish this..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measurements of a nebula ranging from 0 to 360 degrees in position angle, showing a triple-peaked pattern. Show how to use LevMarLSQFitter to fit a triple Gaussian model (combination of three astropy.modeling.functional_models.Gaussian1D) with initial peaks at 60, 180, and 300 degrees, each with amplitude=0.03 and sigma=20 degrees."
      },
      {
        "from": "assistant",
        "value": "Code to accomplish this..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am interested in visualizing my data from a planetary transit. How do I create a phase-folded light curve plot using matplotlib and astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to represent my histogram with a logarithmic scale ax.set_yscale('log'). BUT, I have bins spanning across multiple orders, which makes this plot look terrible. How do I create logarithmic histogram bins?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am curious how does ASTROPY handle projection of astronomical coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array with NaN values. How can I convolve it with a Gaussian kernel while interpolating over these gaps?"
      },
      {
        "from": "assistant",
        "value": "convolve(array, kernel, boundary='extend', nan_treatment='interpolate', preserve_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D array with NaN values. How can I convolve it with a sharp kernel while preserving the NaN values?"
      },
      {
        "from": "assistant",
        "value": "convolve(array, kernel, boundary='extend', nan_treatment='fill', preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1D array with NaN values. How can I convolve it with a box kernel while interpolating over these gaps?"
      },
      {
        "from": "assistant",
        "value": "convolve(array, kernel, boundary='extend', nan_treatment='interpolate', preserve_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a table with a column of numpy arrays and access the arrays?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntable = Table()\ncol = np.array([1, 2, 3], dtype=np.int32)\ntable['arr'] = col\nprint(table['arr'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a column to a table with a custom dtype and access the column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntable = Table()\nocol = np.array([1.2, 2.3, 3.4], dtype=np.float64)\ntable['col'] = co\nprint(table['col'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a table with a column of strings and access the column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntable = Table()\ncol = np.array(['str1', 'str2', 'str3'], dtype=np.str)\ntable['col'] = col\nprint(table['col'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to get the observation date from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('example.fits', 'OBSDATE')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the telescope model from a FITS file header?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('example.fits', 'TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the easiest way to get the image scale in arcseconds per pixel from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.getval('example.fits', 'CD1_1') * 3600.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement a metadata attribute in my astropy table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import TableAttribute\nclass MyTable(Table):\n    identifier = TableAttribute(default=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight midvariance of the 1D array [1, 2, 3, 4, 5]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\nimport numpy as np\ndata = np.array([1, 2, 3, 4, 5])\nbiweight_midvariance(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the biweight midvariance with a custom tuning constant of 6.0 and a location estimate of 2.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\ntuning_constant = 6.0\nlocation_estimate = 2.5\nbiweight_midvariance(data, c=tuning_constant, M=location_estimate)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to analyze data from multiple telescope observations with different time formats. Write code to convert the following times to Modified Julian Date (MJD):  '2023-08-20 03:45:30' (ISO), 2460152.25 (JD), and 1692498330 (Unix timestamp)."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\ncode here...\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the smallest value of the asinh_a parameter that can be used with the asinh stretch function?"
      },
      {
        "from": "assistant",
        "value": "0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the range of the asinh_a parameter that can be used with the asinh stretch function?"
      },
      {
        "from": "assistant",
        "value": "[0, 1]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default value of the power parameter when the stretch function is 'power'?"
      },
      {
        "from": "assistant",
        "value": "1.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to add a comment 'Created on' and set the value of the keyword 'DATE' to the current date and time in the secondary HDU of my FITS header. Could you show me how to use setval to accomplish this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.setval('image.fits', keyword='DATE', value=fits.current_date(), comment='Created on', ext=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.temperature(Celsius, Kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert Rankine to Fahrenheit. How can I do it?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.temperature(Rankine, Fahrenheit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the equivalent of Fahrenheit in Kelvin?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.temperature(Fahrenheit, Kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a redshift scale factor to my data using Astropy's models?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(z=0.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mathematical formula for the RedshiftScaleFactor model in Astropy?"
      },
      {
        "from": "assistant",
        "value": "The mathematical formula for the RedshiftScaleFactor model is  f(x) = x (1 + z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the RedshiftScaleFactor model to correct for cosmological redshift in my galaxy spectra?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use the RedshiftScaleFactor model to correct for cosmological redshift in your galaxy spectra."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a 3D match between a list of coordinates and a catalog?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.match_coordinates_3d"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the on-sky separation and 3D distance between the/catalog/my_coord?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.match_coordinates_3d"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use match_coordinates_3d to find the second closest neighbor in the catalog?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.match_coordinates_3d"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a time series with astropy's Time object?"
      },
      {
        "from": "assistant",
        "value": "import astropy.time as time\n\n# Create a Time object\nt = time.Time('2022-01-01 12:00:00', format='isot')\n\n# Add 10 days to the time\nt += 10 * time.day\n\nprint(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to perform astropy's units.conversion.convert_temperature()"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Define the temperature in Kelvin\nT = 300*u.K\n\n# Convert the temperature to Celsius\nT_c = T.to(u.Celsius)\n\nprint(T_c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Quantity with astropy's units?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\n# Create a Quantity\nq = 5*u.m\n\nprint(q)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from meters to millimeters?"
      },
      {
        "from": "assistant",
        "value": "1 m = 1000 mm"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many liters are in a milliliter?"
      },
      {
        "from": "assistant",
        "value": "1 L = 1000 mL"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between Celsius and Fahrenheit temperature scales?"
      },
      {
        "from": "assistant",
        "value": "Celsius: 0\u00b0C = freezing point, 100\u00b0C = boiling point\nFahrenheit: 32\u00b0F = freezing point, 212\u00b0F = boiling point"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the orbit of Mars and need to calculate its position with high precision. How do I set up the solar system ephemeris (builtin) and get Mars' coordinates for a specific time (2025-08-21 15:30:00 UTC)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric, solar_system_ephemeris\nfrom astropy.time import Time\nimport astropy.units as u\n\ntsolar_system_ephemeris.set('builtin')\n\n# Define the observation time\ntime = Time('2025-08-21 15:30:00')\n\n# Get Mars' barycentric position\nmars_coords = get_body_barycentric('mars', time)\n\n# Convert to more readable Cartesian coordinates (in AU)\nx = mars_coords.x.to(u.AU)\ny = mars_coords.y.to(u.AU)\nz = mars_coords.z.to(u.AU)\n\nprint(f\"Mars' position (barycentric coordinates):\")\nprint(f\"X: {x:.6f}\")\nprint(f\"Y: {y:.6f}\")\nprint(f\"Z: {z:.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the mean of an array of numbers while ignoring any NaN values?"
      },
      {
        "from": "assistant",
        "value": "np.nanmean([1, 2, np.nan, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the quantile of an array of numbers at 0.5?"
      },
      {
        "from": "assistant",
        "value": "np.nanquantile([1, 2, np.nan, 4, 5], 0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "The astropy library has a function to calculate the robust standard deviation of an array of numbers. What is this function called?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.sigma_clip"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert from JD to MJD using astropy.time.Time. The JD is 2451545.0."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nJD = 2451545.0\ntime = Time(JD, format='jd', scale='tai')\nmjd = time.mjd\nprint(mjd)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a quadratic velocity correction with a slope of 0.0005 km/s/pixel^2, y-intercept of -0.01 km/s, and x-intercept of 1000 pixels using astropy's Polynomial1D model for a spectrum with 2048 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\n# Create pixel array for spectrum with units\npixels = np.arange(2048) * u.pix\ncorrection_model = models.Polynomial1D(degree=2, c0=-0.01, c1=0.0005, c2=0)\ncorrected_velocities = correction_model(pixels.value) * (u.km/u.s)\nprint(f\"Velocity corrections range from {corrected_velocities[0]:.2f} to {corrected_velocities[-1]:.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a sinusoidal velocity correction with a amplitude of 0.1 km/s and a period of 1000 pixels using astropy's Sinusoid1D model for a spectrum with 2048 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\n# Create pixel array for spectrum with units\npixels = np.arange(2048) * u.pix\ncorrection_model = models.Sinusoid1D(amplitude=0.1, offset=0, period=1000, phase=0)\ncorrected_velocities = correction_model(pixels.value) * (u.km/u.s)\nprint(f\"Velocity corrections range from {corrected_velocities[0]:.2f} to {corrected_velocities[-1]:.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a power-law velocity correction with a index of 0.5 and a y-intercept of 10.0 km/s using astropy's PowerLaw1D model for a spectrum with 2048 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\n# Create pixel array for spectrum with units\npixels = np.arange(2048) * u.pix\ncorrection_model = models.PowerLaw1D(index=0.5, x_0=10.0)\ncorrected_velocities = correction_model(pixels.value) * (u.km/u.s)\nprint(f\"Velocity corrections range from {corrected_velocities[0]:.2f} to {corrected_velocities[-1]:.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform a left join between two tables, matching on the 'star_id' column?"
      },
      {
        "from": "assistant",
        "value": "table1.join(table2, keys='star_id', join_type='left')}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I perform a right join between 'planets' and 'stars' tables on the 'id' column?"
      },
      {
        "from": "assistant",
        "value": "joined_table = planets.join(stars, keys='id', join_type='right')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform an inner join between 'students' and 'grades' tables on 'name' and 'grade' columns?"
      },
      {
        "from": "assistant",
        "value": "joined_table = students.join(grades, keys=['name', 'grade'], join_type='inner')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to stack multiple astropy tables vertically, with exact column matches"
      },
      {
        "from": "assistant",
        "value": "astropy.table.vstack(tables, join_type='exact')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default join type for astropy table stacking"
      },
      {
        "from": "assistant",
        "value": "None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to handle metadata conflicts when stacking astropy tables"
      },
      {
        "from": "assistant",
        "value": "metadata_conflicts='warn'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box1D model where the signal starts at 1.0, drops to 0.8 (amplitude=0.2) between t=30 and t=50 seconds (width=20s, centered at t=40s)?"
      },
      {
        "from": "assistant",
        "value": "box_model = models.Box1D(amplitude=0.2, position=40, width=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box1D model where the signal starts at 1.0, drops to 0.4 (amplitude=0.6) between t=50 and t=70 seconds (width=20s, centered at t=60s)?"
      },
      {
        "from": "assistant",
        "value": "box_model = models.Box1D(amplitude=0.6, position=60, width=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box1D model where the signal starts at 1.0, drops to 0.9 (amplitude=0.1) between t=70 and t=90 seconds (width=20s, centered at t=80s)?"
      },
      {
        "from": "assistant",
        "value": "box_model = models.Box1D(amplitude=0.1, position=80, width=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling planetary orbits and need a parameter for semi-major axis that must stay between 1e10 and 1e11, with a default of 1.5e10. The parameter should not be fixed during fitting."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter\n\n# Create a semi-major axis parameter for orbit fitting\n# Bounded between 1e10 and 1e11\n# Default value of 1.5e10, not fixed during fitting\nsemi_major_axis = Parameter('semi_major_axis', default=1.5e10, bounds=(1e10, 1e11), fixed=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between wavelength and flux for the data points [5000, 6000, 7000] and [1.8, 1.6, 1.4]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nwavelength = np.array([5000, 6000, 7000])\nflux = np.array([1.8, 1.6, 1.4])\n\nlinear_model = models.Linear1D()\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(linear_model, wavelength, flux)\nslope = fitted_model.slope.value\nintercept = fitted_model.intercept.value\nprint(f'Slope: {slope:.2e} flux/Angstrom')\nprint(f'Intercept: {intercept:.2f} flux units')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have wavelength points [3000, 3100, 3200] and corresponding flux measurements [2.2, 2.0, 1.8]. Can I use Linear1D to fit a linear continuum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nwavelength = np.array([3000, 3100, 3200])\nflux = np.array([2.2, 2.0, 1.8])\n\nlinear_model = models.Linear1D()\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(linear_model, wavelength, flux)\nslope = fitted_model.slope.value\nintercept = fitted_model.intercept.value\nprint(f'Slope: {slope:.2e} flux/Angstrom')\nprint(f'Intercept: {intercept:.2f} flux units')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have wavelength points [4000, 4100, 4200] and corresponding flux measurements [1.5, 1.3, 1.1]. Can I use Linear1D to find the slope and intercept of the linear continuum?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\nwavelength = np.array([4000, 4100, 4200])\nflux = np.array([1.5, 1.3, 1.1])\n\nlinear_model = models.Linear1D()\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(linear_model, wavelength, flux)\nslope = fitted_model.slope.value\nintercept = fitted_model.intercept.value\nprint(f'Slope: {slope:.2e} flux/Angstrom')\nprint(f'Intercept: {intercept:.2f} flux units')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a string representing a date in ISO format to a Time object in the MJD format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(\"2022-01-01\", format='iso')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the signal to noise ratio for a CCD observations with an integration time of 100 seconds, source electrons per second of 1, sky background electrons per pixel per second of 0.2, dark current electrons per pixel per second of 0.05, read noise of 10 electrons, and an aperture size of 10 pixels?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(t=100, source_eps=1, sky_eps=0.2, dark_eps=0.05, rd=10, npix=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to my astropy table?"
      },
      {
        "from": "assistant",
        "value": "table.add_column(name, data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing spectroscopy and I want to work with galactic coordinates. How do I create a WCS object from my coordinate frame for plate solving?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs\nfrom astropy.coordinates import Galactic\n\n# Create a WCS object for galactic coordinates\nw = celestial_frame_to_wcs(Galactic())\n\n# Now 'w' can be used for coordinate transformations and plate solving\n# Example: pixel to world coordinate transformation\nra, dec = w.wcs_pix2world(1024, 1024, 0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a hydrogen atom in the ground state, what is the energy of an electron in eV?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c, m_e\n# Define the electron mass and speed of light\nm_e = m_e.cgs\n# Calculate energy using Planck's function\nenergy = m_e * c**2\n# Convert energy from ergs to eV\nenergy = energy.to(u.eV, equivalencies=u.spectral())\n# Print result\nprint(f\"Energy of electron: {energy:.2f}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK4 coordinate for the star Alpha Centauri (RA = 14h 39m 36.46s, Dec = -60\u00b0 50' 02.3\") observed on January 1, 1950."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\n\nbetelgeuse = FK4(ra='14h39m36.46s',\n                 dec='-60d50m02.3s',\n                 obstime=Time('1950-01-01'))\nprint(betelgeuse)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.stats.bayesian_blocks to identify changes in a time series with regular events?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, fitness='regular_events', dt=0.05, p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use bayesian_blocks to segment data with multiple groups of events?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, fitness='events', gamma=1.0, ncp_prior=-0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use bayesian_blocks to segment data with Gaussian errors?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x_obs, sigma, fitness='measures', p0=0.05)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to add instrument coordinates to my FITS header by setting 'INSTRUME' to 'Hubble Space Telescope' (preserving any existing comment) and placing it after the 'TELESCOP' keyword."
      },
      {
        "from": "assistant",
        "value": "fits.setval('image.fits', 'INSTRUME', value='Hubble Space Telescope', after='TELESCOP', savecomment=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a code snippet to calculate the age of the universe using the Planck18 cosmology."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.cosmology import Planck18\n\n# Calculate age of the universe using Planck18 cosmology\nage = Planck18.age()\n\n# Print result\nprint(f'Age of the universe: {age:.2f} Gyr')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Const1D model with amplitude 50 ADU and set bounds to ensure the amplitude stays between 45 and 55 during fitting?"
      },
      {
        "from": "assistant",
        "value": "# Import the required model from astropy.modeling\nfrom astropy.modeling.models import Const1D\nclass Example;line from astropy.modeling.models import Const1D\n# Create a constant model for bias level\n# Initial amplitude = 50 ADU with bounds [45, 55]\nbias_model = Const1D(amplitude=50)\nbias_model.amplitude.bounds = (45, 55)\n\n# Example of how to use the model (optional demonstration)\nx = range(10)  # Sample x values\nbias_level = bias_model(x)  # Evaluate model at x positions\n\n# Print model details\nprint(f\"Model: {bias_model}\")\nprint(f\"Amplitude bounds: {bias_model.amplitude.bounds}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Const1D model with amplitude 200 ADU and set bounds to ensure the amplitude stays between 190 and 210 during fitting?"
      },
      {
        "from": "assistant",
        "value": "# Import the required model from astropy.modeling\nfrom astropy.modeling.models import Const1D\nclass Example;line from astropy.modeling.models import Const1D\n# Create a constant model for bias level\n# Initial amplitude = 200 ADU with bounds [190, 210]\nbias_model = Const1D(amplitude=200)\nbias_model.amplitude.bounds = (190, 210)\n\n# Example of how to use the model (optional demonstration)\nx = range(10)  # Sample x values\nbias_level = bias_model(x)  # Evaluate model at x positions\n\n# Print model details\nprint(f\"Model: {bias_model}\")\nprint(f\"Amplitude bounds: {bias_model.amplitude.bounds}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Const1D model with amplitude 150 ADU and set bounds to ensure the amplitude stays between 140 and 160 during fitting?"
      },
      {
        "from": "assistant",
        "value": "# Import the required model from astropy.modeling\nfrom astropy.modeling.models import Const1D\nclass Example;line from astropy.modeling.models import Const1D\n# Create a constant model for bias level\n# Initial amplitude = 150 ADU with bounds [140, 160]\nbias_model = Const1D(amplitude=150)\nbias_model.amplitude.bounds = (140, 160)\n\n# Example of how to use the model (optional demonstration)\nx = range(10)  # Sample x values\nbias_level = bias_model(x)  # Evaluate model at x positions\n\n# Print model details\nprint(f\"Model: {bias_model}\")\nprint(f\"Amplitude bounds: {bias_model.amplitude.bounds}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the distance to a star cluster and want to apply a shift to my star catalog to simulate the effect of parallax."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\n\n# Create a shift model\nshift_model = Shift(offset=0.1)\n\n# Apply the shift to a SkyCoord object\nstar_catalog = SkyCoord(ra=[1, 2, 3]*u.degree, dec=[4, 5, 6]*u.degree)\ncorrected_catalog = shift_model(star_catalog)\n\n# Print the original and corrected catalogs\nprint(\"Original catalog:\", star_catalog)\nprint(\"Corrected catalog:\", corrected_catalog)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the concept of MCMC in Galaxy Evolution?"
      },
      {
        "from": "assistant",
        "value": "Monte Carlo Markov Chain (MCMC) is a computational method for approximating the distribution of unknown parameters in a statistical model. It is often used in astrophysical applications, including galaxy evolution, to sample the posterior distribution of model parameters given observed data. MCMC algorithms work by generating a sequence of states that are distributed according to the target distribution. In the context of galaxy evolution, MCMC can be used to estimate parameters such as star formation rates, gas masses, and metallicities. This is done by defining a statistical model that describes the relationships between these parameters and the observed data, such as galaxy luminosities and colors. The MCMC algorithm then iteratively samples the posterior distribution of the model parameters, allowing for the estimation of uncertainty and the exploration of the parameter space."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with a large astrophysical dataset and need to efficiently filter out rows that meet certain conditions. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\ntable = Table(\n    ['NGC1234', 'NGC5678', 'NGC9012', 'NGC3456'],\n    names=['name'],\n    dtype=['str'])\ntable['ID'] = ['A', 'B', 'C', 'D']\ntable['flux'] = [1, 2, 3, 4]\ntable['mask'] = [True, False, True, False]\nfiltered_table = table[~table['mask']]\nprint(filtered_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I extract the summary information of a FITS file using the astropy.io.fits.info function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.info('example.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new HDU to an existing HDUList?"
      },
      {
        "from": "assistant",
        "value": "hdu_list.append(fits.PrimaryHDU(data=data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I remove an HDU from an HDUList?"
      },
      {
        "from": "assistant",
        "value": "del hdu_list[i]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the number of HDUs in an HDUList?"
      },
      {
        "from": "assistant",
        "value": "len(hdu_list)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with astronomical image data and want to apply a Gaussian filter to reduce noise. Can you provide an example of how to use the Gaussian1DKernel function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nconvolved = convolve(data, Gaussian1DKernel(stddev=1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I generate a Gaussian kernel with a standard deviation of 2 and a size of 11?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel\nGaussian1DKernel(stddev=2, x_size=11)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the available discretization modes for the Gaussian1DKernel function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel\nGaussian1DKernel.mode = ['center', 'linear_interp', 'oversample', 'integrate']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mass of a planet with a radius of 10000 km and a density of 5000 kg/m^3?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nimport astropy.constants as const\n\n# Define the radius and density of the planet\nradius = 10000 * u.km\ndensity = 5000 * u.kg / u.m**3\n\n# Calculate the mass of the planet\nmass = (4/3) * const.G * density * radius**3\n\nprint(mass)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the function to create a histogram of the solar observations with the number of flares on the x-axis and the flare intensity on the y-axis?"
      },
      {
        "from": "assistant",
        "value": "hist, norm = imshow_norm(solar_data, ax=None, origin='lower', interval=MinMaxInterval(), stretch=SqrtStretch())\nplt.hist(solar_data.ravel(), bins=50)\nplt.xlabel('number of flares')\nplt.ylabel('flare intensity')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new table with columns 'name', 'age', 'email' and insert a single row with values 'John', 30, 'john@example.com'"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableColumns\n\ncols = TableColumns([('name', 'str'), ('age', 'int'), ('email', 'str')])\ntable = Table(cols)\ntable.add_row(('John', 30, 'john@example.com'))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a coordinate object with both position and proper motion components in geocentric true ecliptic coordinates, but this time the star is moving in the opposite direction."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic\nfrom astropy import units as u\n\n# Create a coordinate object with position and proper motion\n# Example star data (replace with actual values):\n# Position: longitude=180\u00b0, latitude=30\u00b0\n# Proper motion: pm_lon=-50 mas/yr, pm_lat=20 mas/yr\nstar = SkyCoord(\n    lon=180*u.deg,\n    lat=30*u.deg,\n    pm_lon_coslat=-50*u.mas/u.yr,  # proper motion in longitude (includes cos(lat) factor)\n    pm_lat=20*u.mas/u.yr,        # proper motion in latitude\n    frame=GeocentricTrueEcliptic,\n    distance=100*u.pc             # optional: include distance if known\n)\n\n# Print the star's position and proper motion components\nprint(f\"Ecliptic longitude: {star.lon:.2f}\")\nprint(f\"Ecliptic latitude: {star.lat:.2f}\")\nprint(f\"PM in longitude: {star.pm_lon_coslat:.2f}\")\nprint(f\"PM in latitude: {star.pm_lat:.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a coordinate object with position and proper motion components in geocentric true ecliptic coordinates, using an object with a known distance of 500 parsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic\nfrom astropy import units as u\n\n# Create a coordinate object with position and proper motion\n# Example star data (replace with actual values):\n# Position: longitude=180\u00b0, latitude=30\u00b0\n# Proper motion: pm_lon=50 mas/yr, pm_lat=-20 mas/yr\ndistance = 500*u.pc\nstar = SkyCoord(\n    lon=180*u.deg,\n    lat=30*u.deg,\n    pm_lon_coslat=50*u.mas/u.yr,  # proper motion in longitude (includes cos(lat) factor)\n    pm_lat=-20*u.mas/u.yr,        # proper motion in latitude\n    frame=GeocentricTrueEcliptic,\n    distance=distance             # optional: include distance if known\n)\n\n# Print the star's position and proper motion components\nprint(f\"Ecliptic longitude: {star.lon:.2f}\")\nprint(f\"Ecliptic latitude: {star.lat:.2f}\")\nprint(f\"PM in longitude: {star.pm_lon_coslat:.2f}\")\nprint(f\"PM in latitude: {star.pm_lat:.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a coordinate object with position and proper motion components in geocentric true ecliptic coordinates, but this time the object is moving radially."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic\nfrom astropy import units as u\n\n# Create a coordinate object with position and proper motion\n# Example star data (replace with actual values):\n# Position: longitude=180\u00b0, latitude=30\u00b0\n# Proper motion: pm_lon=50 mas/yr, pm_lat=-20 mas/yr, radial velocity = 10 km/s\ndistance = 100*u.pc\nstar = SkyCoord(\n    lon=180*u.deg,\n    lat=30*u.deg,\n    pm_lon_coslat=50*u.mas/u.yr,  # proper motion in longitude (includes cos(lat) factor)\n    pm_lat=-20*u.mas/u.yr,        # proper motion in latitude\n    radial_velocity=10*u.km/u.s,        # radial velocity\n    frame=GeocentricTrueEcliptic,\n    distance=distance             # optional: include distance if known\n)\n\n# Print the star's position and proper motion components\nprint(f\"Ecliptic longitude: {star.lon:.2f}\")\nprint(f\"Ecliptic latitude: {star.lat:.2f}\")\nprint(f\"PM in longitude: {star.pm_lon_coslat:.2f}\")\nprint(f\"PM in latitude: {star.pm_lat:.2f}\")\nprint(f\"Radial velocity: {star.radial_velocity:.2f}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to test if the distribution of stellar rotation periods follows a uniform distribution"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.stats import kuiperfrom scipy.stats import kstest, gaussian_kde import matplotlib.pyplot as plt# Sample data - replace with your actual rotation periodsrotation_periods = np.array([1.5, 2.5, 2.5, 3.5, 2.5, 2.5, 3.5, 2.5, 3.5, 2.5, 2.5, 3.5,2.5, 2.5, 3.5, 2.5, 2.5, 3.5, 2.5, 2.5])# Remove outliers using sigma clippingcleaned_periods = kuiper(rotation_periods,cdf=np.linspace(0,1,len(rotation_periods)))[0]# Perform Kuiper testkuiper_statistic, fpp = kuiper(rotation_periods, cdf=np.linspace(0,1,len(rotation_periods)))# Plot observed vs theoretical distributionx = np.linspace(min(rotation_periods), max(rotation_periods), 100)kde = gaussian_kde(rotation_periods)print(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the covariance matrix of a set of data points?"
      },
      {
        "from": "assistant",
        "value": "from astropy stats import covariance_matrix\n\n# Generate some sample data\n\ndata = np.random.rand(100, 3)\n\n# Calculate the covariance matrix\n\ncov_mat = covariance_matrix(data)\n\n# Print the covariance matrix\n\nprint(cov_mat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a new unit for surface gravity in m/s^2 for planetary bodies."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define a new unit for surface gravity\nsurface_gravity = u.def_unit('g', u.m/u.s**2, doc='Surface gravity (m/s^2)')\n\n# Example usage\nmoon_surface_gravity = 1.62 * surface_gravity\nprint(f'Moon surface gravity: {moon_surface_gravity}')\n\n# Convert to other compatible units\nprint(f'Surface gravity in Imperial units: {moon_surface_gravity.to(u.in/u.s**2)}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an animation showing how Mars' position changes relative to background stars throughout the year. What's the code to get its coordinates?"
      },
      {
        "from": "assistant",
        "value": "...</response>"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to get the position of Earth's moon at a specific date and time?"
      },
      {
        "from": "assistant",
        "value": "...</response>"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an animation showing how Saturn's position changes relative to background stars throughout the year. What's the code to get its coordinates?"
      },
      {
        "from": "assistant",
        "value": "...</response>"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a compressed image HDU with a custom tile size?"
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data=np.zeros((100, 1024, 1024)), compression_type='RICE_1', quantize_method=False, tile_size=[50, 50])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if I want to use a different compression type, such as RICE_2?"
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data=np.zeros((100, 1024, 1024)), compression_type='RICE_2', quantize_method=False, tile_size=[100, 100])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a compressed image HDU with no compression type specified?"
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data=np.zeros((100, 1024, 1024)), compression_type=None, quantize_method=False, tile_size=[100, 100])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 3x3 Box1DKernel and apply it to a time series data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\nimport numpy as np\ncurve = np.random.normal(1.0, 0.1, 100)\nkern = Box1DKernel(3)\nsmoothed = convolve(curve, kern, boundary='extend')\nprint(smoothed)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a 9x9 Box1DKernel with oversample mode on a noisy signal?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\nimport numpy as np\ncurve = np.random.normal(1.0, 0.1, 100)\nkern = Box1DKernel(width=9, mode='oversample', factor=15)\nsmoothed = convolve(curve, kern, boundary='extend')\nprint(smoothed)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply a Box1DKernel with width=5 and oversample mode to a given time series data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\nimport numpy as np\ncurve = np.random.normal(1.0, 0.1, 100)\nkern = Box1DKernel(width=5, mode='oversample', factor=10)\nsmoothed = convolve(curve, kern, boundary='extend')\nprint(smoothed)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to read the first two HDUs of a FITS file"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\nhdul = fits.open('file.fits')\nprint(hdul[0].header)\nprint(hdul[1].data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update the second HDU header of a FITS file with a new value 'FOO=1'?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\ntext = \"FOO=1\"\nhdul = fits.open('file.fits', mode='update')\nhdul[1].header.set('FOO', 1, comment=text)\nhdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show an example of adding a new HDU at the end of a FITS file"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\ndata = np.array([10, 20, 30])\nhdul = fits.open('file.fits', mode='update')\nhdul.append(hdul[-1].verifybadranges(data))\nhdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 3 new instruction-response pairs similar to the one above. The API is astropy.stats.jackknife_resampling. Show me how to use it to calculate the mean flux of a time series of stellar flux measurements."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling\nimport numpy as np\n\n# Original flux measurements\nflux = np.array([3.4, 3.5, 3.6, 3.7, 3.8])\n\n# Get jackknife resamples\njack_samples = jackknife_resampling(flux)\n\n# Calculate mean for each jackknife sample\njack_means = np.mean(jack_samples, axis=1)\n\n# Calculate jackknife estimate of mean and its uncertainty\njack_mean = np.mean(jack_means)  \njack_error = np.sqrt(len(flux)-1) * np.std(jack_means)\n\nprint(f\"Mean flux: {jack_mean:.3f} \u00b1 {jack_error:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with a binary table HDU and I want to convert it to a CSV file. Can anyone help me?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport pandas as pd\ndef convert_fits_to_csv(fits_file, csv_file):\n    # Open the FITS file\n    with fits.open(fits_file) as hdul:\n        # Extract the binary table HDU\n        table_hdu = hdul['PRIMARY']\n\n        # Convert the table to a Pandas DataFrame\n        df = table_hdu.data\n\n        # Write the DataFrame to a CSV file\n        df.to_csv(csv_file, index=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm fitting galaxy profiles and need to create a Sersic1D model where the Sersic index n is fixed at 2.0 during the fitting process, while amplitude and r_eff can vary. The initial values are amplitude=1.0 and r_eff=10 kpc. How do I set up this model with the fixed parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\n# Create Sersic1D model with initial parameters\n# n=2 is fixed (exponential profile)\nsersic_model = models.Sersic1D(\n    amplitude=1.0,    # Initial amplitude\n    r_eff=10.0,       # Initial effective radius in kpc\n    n=2.0            # Fixed Sersic index (exponential profile)\n)\n\n# Fix the n parameter while keeping amplitude and r_eff free\nsersic_model.n.fixed = True\n\n# Create a fitter (example using Levenberg-Marquardt)\nfitter = fitting.LevMarLSQFitter()\n\n# Now the model is ready for fitting with n fixed at 2.0\n# Example usage (commented out):\n# best_fit = fitter(sersic_model, r_data, intensity_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a CCD image represented as a numpy array with shape (100, 100) where all values are around 500 counts. I need to create a CCDData object with this data and add 10% uncertainty to each pixel value. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a CCD image represented as a numpy array with shape (300, 300) where all values are around 2000 counts. I need to create a CCDData object with this data and add 5% uncertainty to each pixel value. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a CCD image represented as a numpy array with shape (400, 400) where all values are around 1000 counts. I need to create a CCDData object with this data and add 2% uncertainty to each pixel value. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit that represents Kelvin (K)."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nk = u.def_unit('K')[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit that represents meters per second (m/s)."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nms = u.def_unit('m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit that represents Newtons per square meter (N/m^2)."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nnm = u.def_unit('N/m^2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a spectral emission line centered at 5200 Angstroms with a FWHM of 1.5 Angstroms and a peak intensity of 2.5e-14 erg/s/cm^2 using Lorentz1D and plot it over a wavelength range of \u00b15 Angstroms around the center."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Lorentz1D\nimport astropy.units as u\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\ndata = []\nwave_center = 5200.0  # wavelength in Angstroms\nwavelength = np.linspace(wave_center - 5, wave_center + 5, 200) * u.AA\nlorentz = Lorentz1D(amplitude=2.5e-14, x_0=wave_center, fwhm=1.5)\nflux = lorentz(wavelength.value) * u.erg / (u.s * u.cm**2)\nquantity_support()\nplt.figure(figsize=(10, 6))\nplt.plot(wavelength, flux, 'b-', label='Emission Line')\nplt.xlabel('Wavelength (\u00c5)')\nplt.ylabel('Flux (erg/s/cm\u00b2)')\nplt.title('Emission Line Profile')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write code to generate the brightness profile of an elliptical galaxy using Sersic1D with amplitude=50, r_eff=10 kpc, and n=4?. I want to plot it using astropy's visualization tools."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\nfrom astropy.visualization import quantity_support\nimport astropy.units as u\nimport matplotlib.pyplot as plt\n\n# Create radial points from 1 to 30 kpc in 0.5 kpc steps\nr = np.arange(1, 30.5, 0.5)  # Remove units initially\n\n# Initialize Sersic1D model with given parameters\n# amplitude: surface brightness at r_eff\n# r_eff: effective radius containing half of total light\n# n: Sersic index controlling profile shape\nsersic = Sersic1D(amplitude=50, r_eff=10, n=4)\n\n# Generate intensity values at each radius\nintensity = sersic(r)\n\n# Add units back for plotting if needed\nr_with_units = r * u.kpc\n\n# Enable astropy quantity plotting\nquantity_support()\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(r_with_units, intensity, 'b-', label='Sersic Profile')\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Surface Brightness')\nplt.title('Elliptical Galaxy Sersic Profile (n=4)')\nplt.legend()\nplt.grid(True)\nplt.yscale('log')  # Log scale for better visualization of brightness falloff\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a Sersic1D model to population counts as a function of radius in an elliptical galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\nfrom astropy.modeling.fitting import LevMarLSQFitter\nfrom astropy.visualization import quantity_support\nimport astropy.units as u\nimport matplotlib.pyplot as plt\n\n# Create radial points from 1 to 30 kpc in 0.5 kpc steps\nr = np.arange(1, 30.5, 0.5)  # Remove units initially\n\n# Generate intensity values at each radius (population counts)\npopulation = r\n\n# Initialize Sersic1D model with some initial parameters\nsersic = Sersic1D(amplitude=1, r_eff=5, n=3)\n\n# Enable astropy quantity plotting\nquantity_support()\n\n# Fit the model to the data\nfitter = LevMarLSQFitter()\nresult = fitter(sersic, r, population)\n\n# Print out the fitted parameters\nprint(result.params)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(r * u.kpc, population, 'ko', label='Data')\nplt.plot(r * u.kpc, result(r), 'r-', label='Sersic Fit')\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Population Count')\nplt.title('Elliptical Galaxy Population Count Fit')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference in the fitted Sersic parameters between fitting the brightness profile of an elliptical galaxy and fitting the population counts as a function of radius?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\nfrom astropy.modeling.fitting import LevMarLSQFitter\nfrom astropy.visualization import quantity_support\nimport astropy.units as u\nimport matplotlib.pyplot as plt\n\n# Create radial points from 1 to 30 kpc in 0.5 kpc steps\nr = np.arange(1, 30.5, 0.5)  # Remove units initially\n\n# Generate intensity values at each radius (brightness profile)\nbrightness = r**(-3)\n\n# Generate intensity values at each radius (population counts)\npopulation = r\n\n# Initialize Sersic1D model with some initial parameters\nsersic_brightness = Sersic1D(amplitude=1, r_eff=5, n=3)\nsersic_population = Sersic1D(amplitude=1, r_eff=5, n=3)\n\n# Enable astropy quantity plotting\nquantity_support()\n\n# Fit the model to the brightness data\nfitter_brightness = LevMarLSQFitter()\nresult_brightness = fitter_brightness(sersic_brightness, r, brightness)\n\n# Fit the model to the population data\nfitter_population = LevMarLSQFitter()\nresult_population = fitter_population(sersic_population, r, population)\n\n# Print out the fitted parameters for brightness and population\nprint(result_brightness.params)\nprint(result_population.params)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.subplot(121)\nplt.plot(r * u.kpc, brightness, 'ko', label='Data')\nplt.plot(r * u.kpc, result_brightness(r), 'r-', label='Sersic Fit (Brightness)')\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Brightness')\nplt.title('Elliptical Galaxy Brightness Fit')\nplt.legend()\nplt.grid(True)\n\nplt.subplot(122)\nplt.plot(r * u.kpc, population, 'ko', label='Data')\nplt.plot(r * u.kpc, result_population(r), 'r-', label='Sersic Fit (Population)')\nplt.xlabel('Radius (kpc)')\nplt.ylabel('Population Count')\nplt.title('Elliptical Galaxy Population Count Fit')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the format of the FITS file and how can I extract its header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ndef extract_fits_header(filename):\n    try:\n        hdul = fits.open(filename)\n        header = hdul[0].header\n        print(header)\n    except Exception as e:\n        print(f'Error processing FITS file: {str(e)}')\n\ndef main():\n    filename = 'example.fits'\n    extract_fits_header(filename)\n\nif __name__ == '__main__':\n    main()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian1DKernel with stddev=2 and mode='linear_interp'"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=2, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Gaussian1DKernel with stddev=5 and factor=15?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=5, factor=15)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Analyze a dataset of planetary orbits with semi-major axis values [1.2, 1.5, 1.8, 2.1, 2.4] AU, excluding any NaN values."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\ncalculation = median_absolute_deviation([1.2, 1.5, 1.8, 2.1, 2.4], ignore_nan=True)\nprint('planetarycapture MAD of semi-major axes: {:.3f} AU'.format(calculation))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the MAD for a set of asteroid orbital eccentricities [0.1, 0.2, 0.3, NaN, 0.5]."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ncalculation = np.nanmedian(np.abs([0.1, 0.2, 0.3, np.nan, 0.5] - np.nanmedian([0.1, 0.2, 0.3, np.nan, 0.5])))\nprint('MAD of asteroid orbital eccentricities: {:.3f}'.format(calculation))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using the astropy.stats module, calculate the median absolute deviation (MAD) for a list of radioactive decay half-lives [10, 20, 30, 40, 50] years, excluding any NaN values."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\ncalculation=stats.median_absolute_deviation([10, 20, 30, 40, 50], ignore_nan=True)\nprint('MAD of radioactive decay half-lives: {:.3f} years'.format(calculation))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 95% confidence interval for the number of successes in a binomial distribution with 10 trials and 5 successes?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.binom_conf_interval(5, 10, confidence_level=0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's units to convert a distance of 100 parsecs to meters?"
      },
      {
        "from": "assistant",
        "value": "u.parsec.to('m')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's units to convert a mass of 10 solar masses to kilograms?"
      },
      {
        "from": "assistant",
        "value": "u.M_sun.to('kg')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's units to convert a velocity of 100 kilometers per second to meters per second?"
      },
      {
        "from": "assistant",
        "value": "u.km/u.s.to('m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS image with a square 2x2 pixel hole in the center"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.PrimaryHDU(np.ones((10, 10)))\nhdu.data[3:7, 3:7] = 0\nfits.writeto('output.fits', hdu, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to add a new column to my table that contains the planet's semi-major axis, how can I do it while handling TableSchemaError if the column already exists?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableSchemaError\n\ndef add_sma_column(table):\n    try:\n        # Check if column already exists\n        if 'sma' in table.colnames:\n            raise TableSchemaError('Column sma already exists')\n\n        # Add the new column with initial values\n        table['sma'] = 0.0\n\n        return table\n    except TableSchemaError as e:\n        print(f'Error: {str(e)}')\n        return None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a HDUList object to a dictionary?"
      },
      {
        "from": "assistant",
        "value": "hdulist.to_dict()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default unit of the FITS header's temperature axes?"
      },
      {
        "from": "assistant",
        "value": "CGS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the number of extensions (HDUs) in a FITS file represented by an HDUList object?"
      },
      {
        "from": "assistant",
        "value": "len(hdulist)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to transform the celestial coordinates of a star from equatorial to galactic coordinates and calculate its proper motion in galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define the celestial coordinates of the star in equatorial coordinates\nra = 10.0 * u.deg\ndec = 30.0 * u.deg\n\n# Convert the equatorial coordinates to galactic coordinates\ngalactic = SkyCoord(ra=ra, dec=dec, frame='icrs').transform_to('galactic')\n\n# Calculate the proper motion in galactic coordinates\ncos_dec = np.cos(dec.radian)\npmnra = 20.0 * u.mas/u.yr  # mas/yr\ncpmdec = 15.0 * u.mas/u.yr  # mas/yr\nproper_motion_ref = SkyCoord(ra=ra, dec=dec, pm_ra_cosdec=pmnra.to(u.deg/u.yr) * cos_dec, pm_dec=cpmdec.to(u.deg/u.yr), frame='icrs')\nproper_motion_ref_galactic = proper_motion_ref.transform_to('galactic')\n\nprint(galactic)\nprint(proper_motion_ref_galactic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy to convert a datetime object to a Julian Date?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-03-15 14:30:00', format='datetime', scale='utc').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Unix time equivalent of the current date and time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-03-15 14:30:00', format='datetime', scale='utc').unix"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a MJD to a datetime object in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('51691.5', format='mjd', scale='utc').datetime"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Shift a coordinate by +0.2 magnitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\n\n# Define the offset value\noffset = 0.2\n\n# Create a Shift model\nshift_model = Shift(offset=offset)\n\n# Shift a coordinate by the offset value\nshifted_coord = 1.5 + shift_model(1.5)\n\nprint(shifted_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Apply a +0.1 magnitude shift to a known magnitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\n\n# Define the offset value\noffset = 0.1\n\n# Create a Shift model\nshift_model = Shift(offset=offset)\n\n# Apply the shift to a known magnitude\nshifted_magnitude = 13.5 + shift_model(13.5)\n\nprint(shifted_magnitude)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Shift a coordinate down by 0.05 magnitude."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\n\n# Define the offset value\noffset = -0.05\n\n# Create a Shift model\nshift_model = Shift(offset=offset)\n\n# Shift a coordinate by the offset value\nshifted_coord = 1.5 + shift_model(1.5)\n\nprint(shifted_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a polynomial model to my data using the Least-Squares algorithm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data (replace with your actual data)\nwavelength = np.linspace(4000, 7000, 1000)  # Wavelength array in Angstroms\nflux = np.random.normal(1, 0.1, 1000)       # Observed flux with noise\n\n# Initialize the polynomial model with initial parameter guesses\ndegree = 3\npoly_init = models.Polynomial1D(degree=degree)\n\n# Create Least-Squares fitter object\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfitted_model = fitter(poly_init, wavelength, flux)\n\n# Print the best-fit parameters\nprint(f\"Best fit parameters:\")\nprint(f\"Coefficients:\")\nprint(f\"{fitted_model.coefficients}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the position of the Sun at a specific time and location on Earth?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time from astropy.coordinates import EarthLocation, Sun from astropy import units as u # Define a specific time and location t = Time('2024-03-21 12:00:00') # Replace with your desired time location = EarthLocation(lat=37.7749*u.deg, lon=-122.4194*u.deg, height=10*u.m) # Compute the position of the Sun at the specified time and location sun = Sun at(t, location) print(f\"Position of the Sun: {sun}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In my HDUList object called 'spectral_data', I need to extract the header information from the first HDU. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "# Read the first HDU's header\nhdulist[0].header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine multiple tables with different column names using dstack?"
      },
      {
        "from": "assistant",
        "value": "t1 = table({'a': [1., 2.], 'b': [3., 4.]}, names=('a', 'b'))\nt2 = table({'c': [5., 6.], 'd': [7., 8.]}, names=('c', 'd'))\ndstack([t1, t2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a binary table HDU with signed integer counts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nperiod = np.array([33, 55], dtype=np.float32)\ncounts = np.array([-1000, 1200], dtype=np.int32)\ncol1 = fits.Column(name='PERIOD', format='E', array=period)\ncol2 = fits.Column(name='COUNTS', format='I', array=counts)\ntable_hdu = fits.BinTableHDU.from_columns([col1, col2], uint=False)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have radio data from a source with values ranging from 1e-5 to 1e-4..."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have gamma-ray data from a source with values ranging from 1e-8 to 1e-7..."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray data from a source with values ranging from 1e-6 to 1e-5..."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the input format for astropy.time.TimeMJD?"
      },
      {
        "from": "assistant",
        "value": "The input format for astropy.time.TimeMJD is the Modified Julian Date (MJD)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I specify a different time scale for the conversions?"
      },
      {
        "from": "assistant",
        "value": "You can specify a different time scale by passing the 'scale' argument to the Time constructor. For example, times = Time(mjd_dates, format='mjd', scale='tt') for terrestrial time."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the output format for astropy.time.TimeMJD?"
      },
      {
        "from": "assistant",
        "value": "The output format for astropy.time.TimeMJD is a string representing the UTC date and time in ISO format."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new Time object from a list of MJD values. How do I pass multiple dates to the Time function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Define a list of MJD values\nmjd_values = [58734.5, 58849.2, 58973.1]\n\n# Create a Time object from the list of MJD values\ntime_obj = Time(mjd_values, format='mjd')\nprint(time_obj)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a binary star system where the stars appear partially merged in my image."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, Fittable2DModel from astropy.modeling.models import Gaussian2D import matplotlib.pyplot as plt # Create coordinate grid (100x100 pixels) y, x = np.mgrid[0:100, 0:100] # Create two 2D Gaussian models gaussian1 = Gaussian2D(amplitude=700, x_mean=48, y_mean=55, x_stddev=4, y_stddev=4) gaussian2 = Gaussian2D(amplitude=900, x_mean=52, y_mean=48, x_stddev=6, y_stddev=6) # Combine the two Gaussians binary_model = gaussian1 + gaussian2 # Evaluate the model on the grid binary_image = binary_model(x, y) # Visualize the result plt.imshow(binary_image, origin='lower', cmap='viridis') plt.colorbar(label='Intensity') plt.title('Binary Star Model: Two 2D Gaussians') plt.xlabel('X (pixels)') plt.ylabel('Y (pixels)') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model of a binary star system with two 2D Gaussians, one at (60, 60) with amplitude 800 and standard deviation 5, and another at (65, 62) with amplitude 1000 and standard deviation 7."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, Fittable2DModel from astropy.modeling.models import Gaussian2D import matplotlib.pyplot as plt # Create coordinate grid (100x100 pixels) y, x = np.mgrid[0:100, 0:100] # Create two 2D Gaussian models gaussian1 = Gaussian2D(amplitude=800, x_mean=60, y_mean=60, x_stddev=5, y_stddev=5) gaussian2 = Gaussian2D(amplitude=1000, x_mean=65, y_mean=62, x_stddev=7, y_stddev=7) # Combine the two Gaussians binary_model = gaussian1 + gaussian2 # Evaluate the model on the grid binary_image = binary_model(x, y) # Visualize the result plt.imshow(binary_image, origin='lower', cmap='viridis') plt.colorbar(label='Intensity') plt.title('Binary Star Model: Two 2D Gaussians') plt.xlabel('X (pixels)') plt.ylabel('Y (pixels)') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to create a model of a binary star system with two 2D Gaussians, one at (70, 70) with amplitude 600 and standard deviation 4, and another at (75, 72) with amplitude 800 and standard deviation 6."
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, Fittable2DModel from astropy.modeling.models import Gaussian2D import matplotlib.pyplot as plt # Create coordinate grid (100x100 pixels) y, x = np.mgrid[0:100, 0:100] # Create two 2D Gaussian models gaussian1 = Gaussian2D(amplitude=600, x_mean=70, y_mean=70, x_stddev=4, y_stddev=4) gaussian2 = Gaussian2D(amplitude=800, x_mean=75, y_mean=72, x_stddev=6, y_stddev=6) # Combine the two Gaussians binary_model = gaussian1 + gaussian2 # Evaluate the model on the grid binary_image = binary_model(x, y) # Visualize the result plt.imshow(binary_image, origin='lower', cmap='viridis') plt.colorbar(label='Intensity') plt.title('Binary Star Model: Two 2D Gaussians') plt.xlabel('X (pixels)') plt.ylabel('Y (pixels)') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a 2D polynomial to my data. How do I use the astropy.modeling.models.Polynomial2D function to create a polynomial of degree 3 with physically meaningful constraints?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Polynomial2D\n\n# Create a polynomial of degree 3\nmodel = Polynomial2D(degree=3)\n\n# Set parameter constraints\nmodel.c00.bounds = (0, 100)  # positive value\nmodel.c10.bounds = (-10, 10)  # within range\nmodel.c01.bounds = (-10, 10)  # within range\nmodel.c11.bounds = (-10, 10)  # within range\n\n# Print the model\nprint(model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create SkyCoord object with equatorial coordinates RA=12.5\u00b0 and Dec=30.5\u00b0, and convert them to Galactic coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galactic, ICRS\nicrs_coords = SkyCoord(ra=12.5*u.degree, dec=30.5*u.degree, frame=ICRS)\ngalactic_frame_coord = icrs_coords.transform_to(Galactic)\nprint(glactic_frame_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create SkyCoord object with Cartesian coordinates and velocity components in the Galactic frame"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\n\nskycoord = SkyCoord(x=1, y=2, z=3, u=10, v=-5, w=50, unit='kpc', frame='galactic', representation_type='cartesian')\nprint(skycoord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create SkyCoord object with a list of spherical representations, convert them to the ICRS frame, and print the celestial coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS\nfrom astropy.coordinates import SkyCoord\n\nc1 = SkyCoord(ra=[1, 2, 3], dec=[4, 5, 6], frame='icrs')\nc2 = SkyCoord(ra=[7, 8, 9], dec=[10, 11, 12], frame='icrs')\ncoords = [c1, c2]\ngalactic_frame_coord = c = SkyCoord(coords=coords, frame='icrs')\nprint(c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file 'image.fits' and I want to get the TELESCOP keyword from its header. Use astropy.io.fits.getheader to solve this problem."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport astropy.header as h\u00e3d}\n\ndef get_header_keyword(file, keyword):\n    try:\n        header = fits.getheader(file)\n        if keyword in header:\n            return header[keyword]\n        else:\n            return f'Keyword '{keyword}' not found in the header'\n    except Exception as e:\n        return str(e)\n\n# Specify the correct path to your FITS file\nfits_file = 'path/to/your/image.fits'  # Replace with actual path\nkeyword = 'TELESCOP'\nprint(get_header_keyword(fits_file, keyword))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fold my observation intervals to the interval (0, 1) for a binary star system with an orbital period of 5 days?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fold_intervals\nfold_intervals([[1, 2, 1], [3, 4, 2], [0, 5, 3]], period=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use fold_intervals to analyze the observation time distribution for a planet orbiting a star with a period of 10 years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fold_intervals\nfold_intervals([[100, 110, 1], [120, 130, 2], [0, 100, 3]], period=365.25)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply fold_intervals to my observation data for a multiple star system with an orbital period of 2.5 days?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fold_intervals\nfold_intervals([[0.5, 1.5, 1], [2.5, 3.5, 2], [1, 2, 3]], period=2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binary table HDU containing information about stars with magnitude (in AB mag: [12.5, 13.7, 14.9]) and color (B-V) as columns"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncols = ['Magnitude_AB', 'Color_B-V']\nfrom astropy.table import Table\nstar_data = Table(np.array([[12.5, 0.2], [13.7, 0.1], [14.9, 0.3]]), names=cols)\nhdu = fits.BinTableHDU(data=star_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the angular_separation function to compute the separations between all pairs of points on a sphere?"
      },
      {
        "from": "assistant",
        "value": "angular_separation(ra1, dec1, ra2, dec2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing time series data with 3 columns: time, value, and error. How can I create a TimeSeriesTable and use TableColumns to rename the 'error' column to 'uncertainty' while preserving the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import TimeSeriesTable, TableColumns"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing image data with 2 columns: x, y and 3 columns: flux, error, quality_flag. How can I create a BillowsTable and use TableColumns to rename the 'flux' column to 'brightness' while preserving the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import BillowsTable, TableColumns"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic 1D data with 4 columns: wavelength, flux, error, sky_background. How can I create a SpectralTable and use TableColumns to rename the 'error' column to 'uncertainty' while preserving the data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import SpectralTable, TableColumns"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Moffat profile to my observed stellar PSF data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nimport matplotlib.pyplot as plt\ndelta = 0.1\ngx = np.arange(-10, 10, delta)\ny_data = np.random.normal(0, 1, size=len(ngx))\nmoffat = models.Moffat1D(amplitude=1, x_0=0, gamma=1, alpha=1)\nfitting.LevMarLSQFitter()(moffat, ngx, y_data)\nplt.plot(ngx, y_data, 'o', ngx, moffat(ngx))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a symmetric Gaussian kernel with x_stddev=2 and y_stddev=2, rotated by 90 degrees."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel import numpy as np kernel = Gaussian2DKernel(x_stddev=2, y_stddev=2, theta=np.pi/2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the Moon at a specific time?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import get_body, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ncorrected_observation = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\ntimes = Time.now() + 1*u.day\ncorrected_body = get_body('moon', times, corrected_observation)\ncorrected_frame = AltAz(obstime=times, location=corrected_observation)\ncorrected_pos = corrected_body.transform_to(corrected_frame)\nprint(f\"Altitude: {corrected_pos.alt:.2f}, Azimuth: {corrected_pos.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of Mars at a specific time?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import get_body, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ncorrected_observation = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\ntimes = Time.now() + 5*u.day\ncorrected_body = get_body('mars', times, corrected_observation)\ncorrected_frame = AltAz(obstime=times, location=corrected_observation)\ncorrected_pos = corrected_body.transform_to(corrected_frame)\nprint(f\"Altitude: {corrected_pos.alt:.2f}, Azimuth: {corrected_pos.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of Jupiter at a specific time?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.coordinates import get_body, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ncorrected_observation = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\ntimes = Time.now() + 10*u.day\ncorrected_body = get_body('jupiter', times, corrected_observation)\ncorrected_frame = AltAz(obstime=times, location=corrected_observation)\ncorrected_pos = corrected_body.transform_to(corrected_frame)\nprint(f\"Altitude: {corrected_pos.alt:.2f}, Azimuth: {corrected_pos.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram for age distribution of a population and use the Freedman-Diaconis rule to determine the optimal bin width."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import freedman_bin_width, histogram\n\ndef create_age_histogram(ages):\n    # Calculate optimal bin width using Freedman-Diaconis rule\n    optimal_width = freedman_bin_width(ages, return_bins=True)\n\n    # Create histogram data\n    hist, bin_edges = histogram(ages, bins=int(np.ceil(1 / optimal_width)))\n\n    return hist, bin_edges, optimal_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the Freedman-Diaconis rule to create a histogram of redshift distribution in a galaxy cluster?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import freedman_bin_width, histogram\ncimport numpy as np\n\ndef create_redshift_histogram(redshifts):\n    # Calculate optimal bin width using Freedman-Diaconis rule\n    optimal_width = freedman_bin_width(redshifts, return_bins=True)\n\n    # Create histogram data\n    hist, bin_edges = histogram(redshifts, bins=int(np.ceil(1 / optimal_width)))\n\n    return hist, bin_edges, optimal_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the age distribution of stars in a galaxy and want to create a histogram using the Freedman-Diaconis rule to determine the optimal bin width."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import freedman_bin_width, histogram\ncimport numpy as np\n\ndef create_star_age_histogram(star_ages):\n    # Calculate optimal bin width using Freedman-Diaconis rule\n    optimal_width = freedman_bin_width(star_ages, return_bins=True)\n\n    # Create histogram data\n    hist, bin_edges = histogram(star_ages, bins=int(np.ceil(1 / optimal_width)))\n\n    return hist, bin_edges, optimal_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Gaussian model with amplitude=100, mean=3000, and stddev=1.5. How do I set up the model with this parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a Gaussian1D model with initial parameters\nmodel = models.Gaussian1D(amplitude=100, mean=3000, stddev=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Gaussian model with amplitude=50, mean=4000, and stddev=2.0. I want to create a copy of this model with the same parameters. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\ng1 = models.Gaussian1D(amplitude=50, mean=4000, stddev=2.0)\ncopied_g1 = g1.copy()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two Gaussian models, g1 and g2, both with amplitude=100, mean=3000, and stddev=1.5. I want to combine them into a single model. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create two Gaussian1D models with initial parameters\n g1 = models.Gaussian1D(amplitude=100, mean=3000, stddev=1.5)\ng2 = models.Gaussian1D(amplitude=100, mean=3000, stddev=1.5)\n\n# Combine models\ncompound_model = g1 + g2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the signal-to-noise ratio for a source with a flux of 1.0e-14 erg/cm^2/s at a wavelength of 500nm, using a CCD with a quantum efficiency of 0.7 and a read noise of 10e- electrons. The sky background is 1.0e-15 erg/cm^2/s/pixel and the dark current is 1.0e-3 electrons/pixel/s. "
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.stats import signal_to_noise_oir_ccd# Define parametersflux = 1.0e-14  # Source flux in erg/cm^2/s wavelengths = 500  # Wavelength in nm QE = 0.7  # Quantum efficiency of CCD gain = 1.0  # Gain of CCD in electrons/DN read_noise = 10.0e-  # Read noise in electrons sky_background = 1.0e-15  # Sky background in erg/cm^2/s/pixel dark_current = 1.0e-3  # Dark current in electrons/pixel/s aperture_size = 100  # Aperture size in pixels# Calculate SNRsnr = signal_to_noise_oir_ccd(t=100.0, source_eps=flux * QE * 4e14 * (500e-9)**2, sky_eps=sky_background * 4e14 * (500e-9)**2 / aperture_size, dark_eps=dark_current, rd=read_noise, npix=aperture_size, gain=gain)return snr"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with radius_in=20, width=6, and plot its cross-section profile using matplotlib."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy and matplotlib\nfrom astropy.convolution import Ring2DKernel\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a Ring2DKernel with specified parameters\n# radius_in: inner radius of the ring\n# width: width of the ring (outer radius = radius_in + width)\nring_kernel = Ring2DKernel(radius_in=20, width=6)\n\n# Get the central slice of the kernel for plotting\ncenter_row = ring_kernel.array[ring_kernel.array.shape[0]//2]\n\n# Create x-axis values for plotting (distance from center)\nget_ipython().run_line_magic('matplotlib', 'inline')\nx = np.arange(len(center_row)) - len(center_row)//2\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, center_row, 'b-', label='Ring Profile')\nplt.xlabel('Distance from Center (pixels)')\nplt.ylabel('Kernel Value')\nplt.title('Ring2DKernel Cross-section Profile')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with radius_in=12, width=4, and plot its cross-section profile using matplotlib."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy and matplotlib\nfrom astropy.convolution import Ring2DKernel\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a Ring2DKernel with specified parameters\n# radius_in: inner radius of the ring\n# width: width of the ring (outer radius = radius_in + width)\nring_kernel = Ring2DKernel(radius_in=12, width=4)\n\n# Get the central slice of the kernel for plotting\ncenter_row = ring_kernel.array[ring_kernel.array.shape[0]//2]\n\n# Create x-axis values for plotting (distance from center)\nx = np.arange(len(center_row)) - len(center_row)//2\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, center_row, 'b-', label='Ring Profile')\nplt.xlabel('Distance from Center (pixels)')\nplt.ylabel('Kernel Value')\nplt.title('Ring2DKernel Cross-section Profile')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with radius_in=15, width=8, and plot its cross-section profile using matplotlib."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy and matplotlib\nfrom astropy.convolution import Ring2DKernel\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a Ring2DKernel with specified parameters\n# radius_in: inner radius of the ring\n# width: width of the ring (outer radius = radius_in + width)\nring_kernel = Ring2DKernel(radius_in=15, width=8)\n\n# Get the central slice of the kernel for plotting\ncenter_row = ring_kernel.array[ring_kernel.array.shape[0]//2]\n\n# Create x-axis values for plotting (distance from center)\nx = np.arange(len(center_row)) - len(center_row)//2\n\n# Create the plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, center_row, 'b-', label='Ring Profile')\nplt.xlabel('Distance from Center (pixels)')\nplt.ylabel('Kernel Value')\nplt.title('Ring2DKernel Cross-section Profile')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to append a table to a FITS file using astropy.io.fits.append?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nfits.append('table.fits', data=Table({'col1': [1, 2, 3], 'col2': [4, 5, 6]}))\na = fits.open('table.fits')\nprint(a[1].data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to append a group of extensions to a FITS file, what's the best approach?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ng = fits.Group()\ng.add_extension(fits.PrimaryHDU(), name='PRIMARY')\ng.add_extension(fits.ImageHDU(narray(1)))\ng.add_extension(fits.ImageHDU(narray(2)))\nfits.append('group.fits', data=g)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to append a dataset with a wavelength-dependent header to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nfits.append('wavelength_dependent.fits', header={'WCSAXES': 2, 'PC1_1': 1.0, 'PC1_2': 2.0, 'PC2_1': 3.0, 'PC2_2': 4.0}, data=np.random.rand(10, 10))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS header card for the telescope pointing (key='TELESCOP') with value='HST' and verify its format using astropy.io.fits.Card."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ncard = fits.Card('TELESCOP', 'HST')\ntry:\n    card.verify()\n    print(f'Keyword: {card.keyword}')\n    print(f'Value: {card.value}')\nexcept fits.VerifyError as e:\n    print(f'Card format error: {e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS header card for the observation time (key='TIME-OBS') with value='12:30:45' and verify its format using astropy.io.fits.Card."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncard = fits.Card('TIME-OBS', '12:30:45')\ntry:\n    card.verify()\n    print(f'Keyword: {card.keyword}')\n    print(f'Value: {card.value}')\nexcept fits.VerifyError as e:\n    print(f'Card format error: {e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a FITS header card for the instrument used (key='INSTRUM') with value='WFC3' and verify its format using astropy.io.fits.Card."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncard = fits.Card('INSTRUM', 'WFC3')\ntry:\n    card.verify()\n    print(f'Keyword: {card.keyword}')\n    print(f'Value: {card.value}')\nexcept fits.VerifyError as e:\n    print(f'Card format error: {e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the circular standard deviation of an array of circular data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circstd\ncircstd(np.array([1, 2, 3, 4, 5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the circular standard deviation?"
      },
      {
        "from": "assistant",
        "value": "The formula for the circular standard deviation is sqrt(2 * (1 - R))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the angular circular standard deviation?"
      },
      {
        "from": "assistant",
        "value": "circstd(data, method='angular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a FITS primary HDU for a 2D image with shape (1000, 1000) and 32-bit floating point data type?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndata = np.random.rand(1000, 1000).astype(np.float32)\nprimary_hdu = fits.PrimaryHDU(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Cosine1D model with amplitude=2.0 and frequency=0.6"
      },
      {
        "from": "assistant",
        "value": "Cosine1D(amplitude=2.0, frequency=0.6)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Cosine1D model with amplitude=1.0 and frequency=0.2"
      },
      {
        "from": "assistant",
        "value": "Cosine1D(amplitude=1.0, frequency=0.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Cosine1D model with amplitude=3.0 and frequency=0.8"
      },
      {
        "from": "assistant",
        "value": "Cosine1D(amplitude=3.0, frequency=0.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I resample an image to a specified pixel scale using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import SkyCoord\nfrom astropy.io import fits\nfrom astropy.wcs import WCS\nfrom astropy.wcs.utils import skycoord_to_pixel2d\n\ncatalog = fits.open('catalog.fits')\nimage = fits.open('image.fits')\nwcs = WCS(image[0].header)\n\n# Define the new pixel scale\nnew wcs = WCS(naxis = 2,\n                cdelt = [-1*u.arcsec, -1*u.arcsec],\n                crval = [0.0*u.degree, 0.0*u.degree],\n                ctype = ['RA---TAN', 'DEC--TAN'])\n\n# Resample the image to the new pixel scale\nresampled_image = image[0].data.copy() * 0\nynew, xnew = skycoord_to_pixel2d(wcs, catalog[0].data['ra'], catalog[0].data['dec'], 0)\nresampled_image[ynew, xnew] = image[0].data\n\n# Save the resampled image\nfits.writeto('resampled.fits', resampled_image, overwrite = True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the Sersic index from a 2D brightness profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy import models, fitting\nfrom astropy.stats import gaussian_fwhm_to_sigma\nimport numpy as np\n\n# Define the data\nx = np.linspace(0, 10, 100)\ny = np.exp(-1.0 * x) + 0.1 * np.random.normal(0, 1, x.shape)\n\n# Define the Sersic model\nsersic = models.Sersic2D(amplitude=1, r_90=2, n=1.0, x_0=5.0, y_0=5.0)\n\n# Fit the data to the Sersic model\nfitter = fitting.LevMarLSQFitter()\nsersic_fit = fitter(sersic, x, y)\n\n# Calculate the Sersic index\nn = sersic_fit.n.value\nprint(n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model and fit the point spread function (PSF) of a stellar image using a 2D Gaussian profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create synthetic stellar image data (in practice, this would be your observation)\ny, x = np.mgrid[-20:20:40j, -20:20:40j]\nz = np.random.normal(0, 0.1, x.shape)  # Add noise\n\n# Create a 2D Gaussian model with initial parameters\ninit_amplitude = 3.0\ninit_fwhm = 2.0\n\n# Convert FWHM to standard deviation for Gaussian model\ninit_sigma = gaussian_fwhm_to_sigma * init_fwhm\n\ngaussian_init = models.Gaussian2D(amplitude=init_amplitude, x_stddev=init_sigma, y_stddev=init_sigma, theta=0.0)\n\n# Add synthetic star to the noise\nez += gaussian_init(x, y)\n\n# Fit the data using LevMarLSQFitter\nfitter = fitting.LevMarLSQFitter()\ngaussian_fit = fitter(gaussian_init, x, y, z)\n\n# Calculate FWHM from the fitted parameters\nfwhm = 2.0 * np.sqrt(2.0 * np.log(2.0)) * gaussian_fit.x_stddev\n\nprint(f\"Fitted FWHM (seeing): {fwhm:.2f} pixels\")\nprint(f\"Fitted amplitude: {gaussian_fit.amplitude.value:.2f}\")\nprint(f\"Fitted sigma: {gaussian_fit.x_stddev.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy equivalent of a proton in GeV?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import m_p\n\n# Proton mass in kg\nm_proton = m_p.cgs.value\n\n# Create a value in GeV\nenergy_gev = m_proton * (c**2).to(u.GeV)\n\nprint(f'{m_proton} kg = {energy_gev:.2e} GeV')\n\n# Reverse conversion: GeV to mass\nenergy = 1 * u.GeV\nmass_from_energy = (energy / (c**2)).to(u.kg)\n\nprint(f'{energy:.2e} GeV = {mass_from_energy:.2e} kg')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on image processing of a face. How to create a 2D Gaussian kernel to sharpen the image?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import Gaussian2DKernel\n\n# Define parameters for the Gaussian kernel\nx_stddev = 2.0  # Standard deviation along major axis\ny_stddev = 1.5  # Standard deviation along minor axis (thinner for face)\nkernel_size = 51  # Size of the kernel in pixels\n\n# Create the 2D Gaussian kernel\nkernel = Gaussian2DKernel(x_stddev=x_stddev, y_stddev=y_stddev, theta=0.0, x_size=kernel_size, y_size=kernel_size)\n\n# The kernel can now be used for convolution with your image\n# Example usage: convolved_image = convolve(image, kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given flux measurements [1.23e-16, 1.25e-16, 1.22e-16, 1.21e-16, 1.24e-16] erg/s/cm^2 from a distant quasar, show me how to use astropy.stats.jackknife_resampling with map function to assess the statistical uncertainty (bias, variance, skewness) in these observations."
      },
      {
        "from": "assistant",
        "value": "fluxes = np.array([1.23e-16, 1.25e-16, 1.22e-16, 1.21e-16, 1.24e-16]) * u.erg/u.s/u.cm**2\nmean, bias, var, skew = map(jackknife_stats, [fluxes.value] * len(fluxes.value))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given flux measurements [4.56e-17, 4.62e-17, 4.58e-17, 4.51e-17, 4.59e-17] erg/s/cm^2 from a distant quasar, show me how to use jackknife_resampling with map function to assess the statistical uncertainty (bias, variance, skewness) in these observations."
      },
      {
        "from": "assistant",
        "value": "fluxes = np.array([4.56e-17, 4.62e-17, 4.58e-17, 4.51e-17, 4.59e-17]) * u.erg/u.s/u.cm**2\nmean, bias, var, skew = map(jackknife_stats, [fluxes.value] * len(fluxes.value))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given flux measurements [2.34e-18, 2.38e-18, 2.36e-18, 2.33e-18, 2.37e-18] erg/s/cm^2 from a distant quasar, show me how to use jackknife_resampling with map function to assess the statistical uncertainty (bias, variance, skewness) in these observations."
      },
      {
        "from": "assistant",
        "value": "fluxes = np.array([2.34e-18, 2.38e-18, 2.36e-18, 2.33e-18, 2.37e-18]) * u.erg/u.s/u.cm**2\nfrom collections import deque\nmean, bias, var, skew = map(lambda x: jackknife_stats(x, np.mean), deque([fluxes.value], maxlen=len(fluxes.value)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data of a galaxy, I have a 3D array (512x512x100) showing wavelength vs. spatial position. How can I display this using imshow_norm with a LogStretch to highlight the bright regions, and add appropriate axis labels?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array (1024x1024) showing the flux of a star. How can I display this using imshow_norm with a LinearInterval to include all data, and add appropriate axis labels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (imshow_norm, LinearInterval)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data of a nebula, I have  a 3D array (800x800x50) showing wavelength vs. spatial position. How can I display this using imshow_norm with a AsymmetryInterval to highlight the asymmetry in the data, and add appropriate axis labels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (imshow_norm, AsymmetryInterval)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of FITS files and I want to extract the coordinate frame information from each one. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\n\ndef extract_coordinate_frames(fits_files):\n    coordinate_frames = {}\n    for fits_file in fits_files:\n        with fits.open(fits_file) as hdul:\n            header = hdul[0].header\n            wcs = WCS(header)\n            frame = WCS.to_celestial_frame(wcs)\n            coordinate_frames[fits_file] = frame\n    return coordinate_frames"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a WCS object and I want to find the coordinate frame that matches the celestial component. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import wcs_to_celestial_frame\n\ndef find_celestial_frame(wcs):\n    return wcs_to_celestial_frame(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of WCS objects and I want to find the corresponding celestial frames. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import wcs_to_celestial_frame\n\ndef find_celestial_frames(wcs_list):\n    celestial_frames = [wcs_to_celestial_frame(wcs) for wcs in wcsl]\n    return celestial_frames"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model that represents a logarithmic radial profile of stars in a galaxy. How would you do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the distribution of stars in the Milky Way and I need to create a model that describes a Gaussian radial profile. Can you help me with that?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project that involves modeling the density distribution of stars in a galaxy cluster. I want to create a model that represents a Gaussian radial profile with a varying amplitude. How can I do that?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models\nfrom astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the information of all extensions in a FITS file named 'test.fits'"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I get the summary of a FITS file from a file-like object?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I print the summary of a FITS file to a specific file?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to create a FITS file with a related table structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\n\n# Create a table with some data\ntable_data = Table([{'column1': 1, 'column2': 2}, {'column1': 3, 'column2': 4}])\n\n# Create a primary HDU with the table\ncolumns = table_data.columns\nprimary_hdu = fits.PrimaryHDU(data=None)\nprimary_hdu.header.update(table_data.meta)\nheader = primary_hdu.header\nheader['TELESCOP'] = 'SAMPLE_TELESCOPE'\nheader['OBSERVER'] = 'J. Doe'\nheader['BUNIT'] = 'Jy'\nheader['OBJECT'] = 'TARGET_SOURCE'\nhdu_list = fits.HDUList([primary_hdu, fits.BinTableHDU(table_data)])\nhdu_list.writeto('related_table.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a quadratic model to a set of astronomical photometry data using Astropy"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndata = np.array([1.2, 2.3, 3.1, 4.5, 5.6])\nweights = np.array([1.0, 1.0, 1.0, 1.0, 1.0])\n\n# Initialize a model with all parameters to be fitted\nmodel = models.Quadratic1D()\n\n# Perform the fit\nfitter = fitting.LinearLSQFitter()\nresult = fitter(model, data, weights=weights)\n\nprint(result.params)\nprint(result.chisquare)\nprint(result.redchi)\nprint(result.dof)\nprint(result.aic)\nprint(result.bic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model that combines multiple cosine waves with different amplitudes and frequencies to represent the brightness of a star over time."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\n# Generate sample time array (1000 points over 10 seconds)\nt = np.linspace(0, 10, 1000)\n\n# Create a composite model of multiple cosine waves\ncosine1 = models.Cosine1D(amplitude=1.0, frequency=1.0, phase=0.0)\ncosine2 = models.Cosine1D(amplitude=0.5, frequency=2.0, phase=np.pi/4)\ncosine3 = models.Cosine1D(amplitude=0.3, frequency=3.0, phase=np.pi/3)\n\n# Combine models to create composite star signal\nstar_model = cosine1 + cosine2 + cosine3\n\n# Generate the combined signal\nstar_signal = star_model(t)\n\n# Add some random noise to simulate real observations\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.1, len(t))\nnoisy_star_signal = star_signal + noise\n\n# Fit the model to the noisy data\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(star_model, t, noisy_star_signal)\n\n# Generate the fitted signal\nfitted_star_signal = fitted_model(t)\n\n# Print the best-fit parameters\nprint(\"Fitted Parameters:\")\nfor i, component in enumerate(fitted_model):\n    print(f\"Cosine Component {i+1}\")\n    print(f\"Amplitude: {component.amplitude.value:.3f}\")\n    print(f\"Frequency: {component.frequency.value:.3f}\")\n    print(f\"Phase: {component.phase.value:.3f}\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model that represents the motion of a planet around a star using Astropy's modeling framework?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Generate sample time array (1000 points over 10 years)\nt = np.linspace(0, 10, 1000) * u.year\n\n# Create a model of the planet's motion\nplanet_model = models.PowerLaw1D(index=2.0, amplitude=1.0)\n\n# Generate the planet's motion signal\nplanet_signal = planet_model(t)\n\n# Add some random noise to simulate real observations\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.1, len(t))\nnoisy_planet_signal = planet_signal + noise\n\n# Fit the model to the noisy data\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(planet_model, t, noisy_planet_signal)\n\n# Generate the fitted signal\nfitted_planet_signal = fitted_model(t)\n\n# Print the best-fit parameters\nprint(\"Fitted Parameters:\")\nprint(f\"Amplitude: {fitted_model.amplitude.value:.3f}\")\nprint(f\"Index: {fitted_model.index.value:.3f}\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model that represents the brightness of a galaxy over time using Astropy's modeling framework?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\n# Generate sample time array (1000 points over 10 years)\nt = np.linspace(0, 10, 1000) * u.year\n\n# Create a model of the galaxy's brightness\ngalaxy_model = models.Spline1D(x=np.arange(0, 10, 0.1), y=np.sin(np.arange(0, 10, 0.1)))\n\n# Generate the galaxy's brightness signal\ngalaxy_signal = galaxy_model(t)\n\n# Add some random noise to simulate real observations\nnp.random.seed(42)\nnoise = np.random.normal(0, 0.1, len(t))\nnoisy_galaxy_signal = galaxy_signal + noise\n\n# Fit the model to the noisy data\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(galaxy_model, t, noisy_galaxy_signal)\n\n# Generate the fitted signal\nfitted_galaxy_signal = fitted_model(t)\n\n# Print the best-fit parameters\nprint(\"Fitted Parameters:\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the biweight location to infer the median of a distribution with outliers?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location(data=[1, 2, 3, 4, 5], c=6.0, M=None, axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight location of a dataset with a known median?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location(data=[1, 2, 3, 4, 5], c=6.0, M=3, axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I compute the biweight location of a multivariate dataset?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location(data=[[1, 2], [3, 4], [5, 6]], c=6.0, M=[3, 4], axis=None, ignore_nan=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a galaxy rotation curve using the AstroPy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.io import ascii\nimport numpy as np\ndef fit_rotation_curve(data, center, distance):\n    # Create a function to model the rotation curve\n    func = models.Arcsinh1DP(limit=1)\n\n    # Create a fitter and fit the data\n    fitter = fitting.LevMarLSQFitter()\n    result = fitter(func, data['distance'], data['velocity'])\n\n    # Get the fitted parameters\n    return result\n\n# Example usage:\n# Assuming you have data on distance and velocity\n# data = ascii.read('data.csv')\n# centered_at = (lat, lng)  # in degrees\n# d =  distance # in kpc, converted to meters\n# velocity, distance = None, None\n# result = fit_rotation_curve(data, centered_at, d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the confidence interval of 95% on the proportion of observed variable stars in a sample of 200 stars, with 45 variable stars detected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(k=45, n=200, confidence_level=0.95, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the confidence interval of 95% on the proportion of observed variable stars in a sample of 200 stars, with 80 variable stars detected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(k=80, n=200, confidence_level=0.95, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the confidence interval of 90% on the proportion of observed variable stars in a sample of 150 stars, with 75 variable stars detected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(k=75, n=150, confidence_level=0.90, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Astronomers want to convert a set of pixel coordinates to their corresponding celestial coordinates for a specific image."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, util\nxp, yp = [100.5, 200.7, 450.1], [150.3, 300.2, 550.8]\nwcs = WCS('your_image.fits')\ncoords = WCSutil.pixel_to_skycoord(xp, yp, wcs)\nprint(coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the temperature of the sun in Kelvin?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nsun_temperature = 5800 * u.K\nprint(sun_temperature)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert 100 degrees Fahrenheit to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ntemperature = 100 * u.imperial.deg_F\ntemperature_kelvin = temperature.to(u.K, equivalencies=u.temperature())\nprint(temperature_kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the temperature of liquid nitrogen in Kelvin?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nliquid_nitrogen_temperature = 77 * u.imperial.deg_F\nliquid_nitrogen_temperature_kelvin = liquid_nitrogen_temperature.to(u.K, equivalencies=u.temperature())\nprint(liquid_nitrogen_temperature_kelvin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please provide a Python code snippet to model how the observed wavelengths of the H\u03b1, H\u03b2, and [OIII] lines will be affected by the redshift (z=1.2) of a distant quasar."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\n\ndef model_redshift(z):\n    # Define rest-frame wavelengths in Angstroms\n    rest_wavelengths = np.array([4861, 5007, 6563])  # H\u03b2, [OIII], H\u03b1 lines\n    # Calculate observed wavelengths using redshift scale factor\n    observed_wavelengths = rest_wavelengths * (1 + z)\n    return observed_wavelengths\n\ncalculate_wavelengths(z=1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new instruction-response pair with instruction I want to convert between units"
      },
      {
        "from": "assistant",
        "value": "u.m / u.cm"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert between units using astropy"
      },
      {
        "from": "assistant",
        "value": "u.mag(u.ct/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to use astropy"
      },
      {
        "from": "assistant",
        "value": "u.dB(u.W/u.m^2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine two different models in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 100, 1000)\nsine_model = models.Sine1D(amplitude=0.5, frequency=1/5.0)\nlinear_model = models.Linear1D(slope=0.001, intercept=10.0)\ncombined_model = sine_model + linear_model\nflux = combined_model(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy to fit a combined model to data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 100, 1000)\nsine_model = models.Sine1D(amplitude=0.5, frequency=1/5.0)\nlinear_model = models.Linear1D(slope=0.001, intercept=10.0)\ncombined_model = sine_model + linear_model\nfitter = fitting.LevMarLSQFitter()\nflux = combined_model(t)\nfitted_model = fitter(combined_model, t, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.modeling.CompoundModel to combine three different models?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, CompoundModel\nimport numpy as np\nt = np.linspace(0, 100, 1000)\nsine_model = models.Sine1D(amplitude=0.5, frequency=1/5.0)\nlinear_model = models.Linear1D(slope=0.001, intercept=10.0)\nconstant_model = models.Const1D(amplitude=5.0)\ncombined_model = CompoundModel([sine_model, linear_model, constant_model])\nflux = combined_model(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of the biweight midvariance on the robustness of my data?"
      },
      {
        "from": "assistant",
        "value": "The biweight midvariance is a robust estimator of scale that is more resistant to outliers than standard variance."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the biweight midvariance to determine the variance of a distribution with a large number of outliers?"
      },
      {
        "from": "assistant",
        "value": "You can use the biweight midvariance as it is more resistant to outliers than standard variance."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the biweight midvariance and the standard variance?"
      },
      {
        "from": "assistant",
        "value": "The biweight midvariance is a robust estimator of scale that is more resistant to outliers than standard variance."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a table with a custom format?"
      },
      {
        "from": "assistant",
        "value": "from astropy import table as at, units as u\n# Create an Astropy Table with the measurements\ntiming_data = at.Table()\ntiming_data['Period'] = [0.0891234567, 0.00123456, 1.23456789] * u.second\ntiming_data['Uncertainty'] = [2.3e-9, 1.5e-10, 4.7e-8] * u.second\ndef custom_format(value, error):\n    return f'{value:.2e} \u00b1 {error:.1e}'\ntiming_data.write('custom_format.ecsv', format='ascii.ecsv', overwrite=True, formats={'Period': custom_format, 'Uncertainty': custom_format})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working with a set of observations and want to compress 8-bit intensity images using lossless compression. How can I create a compressed image HDU, with a tile shape of 16x16, a quantize level of 8 bits, and dithering enabled?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Create sample 8-bit intensity image data (simulating observations)\ndata = np.random.randint(0, 256, size=(256, 256), dtype=np.uint8)\n\n# Create primary HDU (must be the first element)\nprimary_hdu = fits.PrimaryHDU()\n\n# Set up compression parameters\n# Create compressed HDU with lossless compression type, tile shape of 16x16, quantize level of 8 bits, and dithering enabled\ncomp_hdu = fits.CompImageHDU(data, compression_type='RICE_1', tile_shape=[16, 16], quantize_level=8.0, quantize_method=1, dither=True)\n\n# Create FITS file with both Primary HDU and compressed HDU\nhdul = fits.HDUList([primary_hdu, comp_hdu])\nhdul.writeto('compressed_intensity.fits', overwrite=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to work with a dataset that consists of high-resolution images. To reduce their size efficiently, I need to compress them using lossy compression. How can I create a compressed image HDU, with a tile shape of 32x32, a quantize level of 12 bits, and a low dithering seed?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Create sample high-resolution image data (simulating high-resolution images)\ndata = np.random.randint(0, 65536, size=(2048, 2048), dtype=np.uint16)\n\n# Create primary HDU (must be the first element)\nprimary_hdu = fits.PrimaryHDU()\n\n# Set up compression parameters\n# Create compressed HDU with lossy compression type, tile shape of 32x32, quantize level of 12 bits, and a low dithering seed\ncomp_hdu = fits.CompImageHDU(data, compression_type='RUNLEN', tile_shape=[32, 32], quantize_level=12.0, dither_seed=0)\n\n# Create FITS file with both Primary HDU and compressed HDU\nhdul = fits.HDUList([primary_hdu, comp_hdu])\nhdul.writeto('compressed_highres.fits', overwrite=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am working on a project that involves compressing large volumes of data. To achieve this efficiently, I need to split the data into smaller chunks and compress each chunk separately. How can I create a compressed image HDU, with a tile shape of 128x128, a quantize level of 16 bits, and a high dithering seed?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Create sample large image data (simulating large volumes of data)\ndata = np.random.randint(0, 65536, size=(4096, 4096), dtype=np.uint16)\n\n# Create primary HDU (must be the first element)\nprimary_hdu = fits.PrimaryHDU()\n\n# Set up compression parameters\n# Create compressed HDU with tile shape of 128x128, quantize level of 16 bits, and a high dithering seed\ncomp_hdu = fits.CompImageHDU(data, tile_shape=[128, 128], quantize_level=16.0, dither_seed=1000)\n\n# Create FITS file with both Primary HDU and compressed HDU\nhdul = fits.HDUList([primary_hdu, comp_hdu])\nhdul.writeto('compressed_largedata.fits', overwrite=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I efficiently load and verify the integrity of a file"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits', mode='readonly', memmap=True)\nhdul.info()\n# Verify integrity using checksum\nif hdul.verify_checksum():\n    print('File is intact')\nelse:\n    print('File is corrupted')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new Row object with column 'name' set to 'John' and column 'age' set to 30."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\n# Create a new Table with the required columns\nheaders = ['name', 'age']\n\n# Create a new Row object with the given values\nrow = Row({'name': 'John', 'age': 30})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Insert a new row into the table with column 'city' set to 'New York' and column 'country' set to 'USA'."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\n# Create a new Row object with the given values\nrow = Row({'city': 'New York', 'country': 'USA'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Update the value of column 'age' in the current Row object to 31."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\n# Create a new Row object with the given values\nrow = Row({'age': 31})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert temperature from Fahrenheit to Celsius?"
      },
      {
        "from": "assistant",
        "value": "\nfrom astropy import units as u\n\ndef fahrenheit_to_celsius(fahrenheit):\n    # Create quantity with Fahrenheit unit\n    temperature = fahrenheit * u.imperial.deg_F\n\n    # Convert to Celsius\n    celsius = temperature.to(u.deg_C)\n\n    # Return the value without the unit\n    return celsius.value\n\n# Example usage\nfahrenheit = 100  # 100 Fahrenheit\nfahrenheit_to_celsius(fahrenheit)\nprint(f'{fahrenheit} degrees Fahrenheit = {fahrenheit_to_celsius(fahrenheit)} degrees Celsius')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat2D model with amplitude=500, x_0=25, y_0=25, gamma=1.8, alpha=2.2, and show its shape for a 100x100 grid."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Moffat2D\nimport numpy as np\n\ny, x = np.mgrid[0:100, 0:100]\n\nmoffat_model = Moffat2D(amplitude=500, x_0=25, y_0=25, gamma=1.8, alpha=2.2)\nmoffat_psf = moffat_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between HeliocentricEclipticIAU76 and HeliocentricTrueEcliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "(Summary of the difference between the two coordinate systems)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": "Create a model with frequency of 5 cycles per hour, phase of pi/2 and amplitude of 10."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": "Make the phase parameter bounded between 0 and pi and the amplitude between 1 and 100."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": "Link the frequency to the phase with a relationship of 2*pi*frequency = phase."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use Astropy's spectral equivalencies to convert between wavelength and frequency?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define a wavelength\nwavelength = 500 * u.nm\n\n# Calculate frequency using spectral equivalency\nfrequency = wavelength.to(u.Hz, u.spectral())\n\nprint(f'Frequency: {frequency:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my research on black holes, I need to calculate the Sun's precise geocentric coordinates at the peak of the June 21, 2020 total solar eclipse (17:01 UTC). Show me how to use get_sun and display the results in both GCRS and ICRS coordinate systems."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun, GCRS, ICRS\n\n# Set the specific time of the eclipse peak\n eclipse_time = Time('2020-06-21 17:01:00', scale='utc')\n \n# Get the Sun's position at eclipse time\n sun_gcrs = get_sun(eclipse_time)  # Returns coordinates in GCRS frame\n sun_icrs = sun_gcrs.transform_to(ICRS)  # Transform to ICRS frame\n \n# Display results with nice formatting\n print(\"Sun's position during 2020 Total Solar Eclipse Peak:\")\n print(\"\\nGCRS Coordinates (Geocentric):\")\n print(f\"RA: {sun_gcrs.ra.to_string(unit='hourangle', sep=':')}\")\n print(f\"Dec: {sun_gcrs.dec.to_string(unit='deg', sep=':')}\")\n print(f\"Distance: {sun_gcrs.distance.to('au'):.6f}\")\n \nprint(\"\\nICRS Coordinates:\")\n print(f\"RA: {sun_icrs.ra.to_string(unit='hourangle', sep=':')}\")\n print(f\"Dec: {sun_icrs.dec.to_string(unit='deg', sep=':')}\")\n print(f\"Distance: {sun_icrs.distance.to('au'):.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my astronomy project, I need to calculate the Sun's geocentric coordinates at 12:00 PM UTC on March 20, 2024. Show me how to use get_sun and display the results in GCRS coordinate system."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun, GCRS\n\neclipse_time = Time('2024-03-20 12:00:00', scale='utc')\nsun_gcrs = get_sun(eclipse_time)  # Returns coordinates in GCRS frame\nprint(sun_gcrs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use get_sun and display the Sun's position in GCRS and ICRS coordinate systems at 6:00 PM UTC on December 21, 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun, GCRS, ICRS\n\neclipse_time = Time('2022-12-21 18:00:00', scale='utc')\nsun_gcrs = get_sun(eclipse_time)  # Returns coordinates in GCRS frame\nsun_icrs = sun_gcrs.transform_to(ICRS)  # Transform to ICRS frame\nprint(sun_gcrs)\nprint(sun_icrs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a new image with a random array of values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nnp.random.rand(10, 10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of stellar rotation periods and I want to create a histogram using the Freedman-Diaconis rule, with bins ranging from 5 to 15 days."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(line_strengths, bins='freedman', range=(5, 15))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of planetary distances and I want to create a histogram using the Scott's rule, with bins ranging from 1 to 10 AU."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(distances, bins='scott', range=(1, 10))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of stellar luminosities and I want to create a histogram using the Knuth's rule, with bins ranging from 10^3 to 10^6 L."
      },
      {
        "from": "assistant",
        "value": "astropy.stats.histogram(luminosities, bins='knuth', range=(10**3, 10**6))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a spectroscopic CCD image with shape (512, 512) where pixel values are in DN units. Some pixels are affected by cosmic rays. How can I create a CCDData object with both the data and a boolean mask array where True indicates the cosmic ray affected pixels (let's say pixels > 30000 DN)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nimport numpy as np\n# Create sample spectroscopic CCD data (replace with your actual data)\nccd_data = np.random.poisson(lam=100, size=(512, 512))\n# Add some simulated cosmic rays\ncosmic_ray_positions = np.random.randint(0, 512*512, 100)\ncd_data.ravel()[cosmic_ray_positions] = 30000\n\n# Create boolean mask for cosmic rays (True where pixel > 30000 DN)\ncosmic_ray_mask = ccd_data > 30000\n\n# Create CCDData object with data and mask\n# Note: DN units must be specified when creating CCDData\nccd = CCDData(data=ccd_data, mask=cosmic_ray_mask, unit='dn')\n\n# Verify the mask\nprint(f\"Number of cosmic ray affected pixels: {np.sum(ccd.mask)}\")\nprint(f\"Shape of CCDData: {ccd.shape}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a CCD image that has a known step-like pattern. How can I create a CCDData object with both the data and a boolean mask array where True indicates the pixels with the known step-like pattern?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nimport numpy as np\n# Create sample CCD data (replace with your actual data)\ncdd_data = np.random.poisson(lam=100, size=(256, 256))\n# Create a step-like pattern\nstep_pattern = np.arange(0, 256, 8).reshape((32, 8))\ncdd_data[:, :32] += step_pattern\n\n# Create boolean mask for the step-like pattern (True where step-like pattern is present)\nstep_pattern_mask = np.not_equal(cdd_data[:, :32], np.roll(cdd_data[:, :32], 1, axis=1))\n\n# Create CCDData object with data and mask\n# Note: DN units must be specified when creating CCDData\ncd = CCDData(data=cdd_data, mask=step_pattern_mask, unit='dn')\n\n# Verify the mask\nprint(f\"Number of pixels with the step-like pattern: {np.sum(cd.mask)}\")\nprint(f\"Shape of CCDData: {cd.shape}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a CCD image with a known gradient. How can I create a CCDData object with both the data and a boolean mask array where True indicates the pixels with the known gradient?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nimport numpy as np\n# Create sample CCD data (replace with your actual data)\ncd_data = np.random.poisson(lam=100, size=(256, 256))\n# Create a gradient\ngradient = np.arange(0, 256, 16).reshape((16, 16))\ncd_data[128:, :] += gradient\n\n# Create boolean mask for the gradient (True where gradient is present)\ngradient_mask = np.not_equal(cd_data[128:, :], np.roll(cd_data[128:, :], 1, axis=0))\n\n# Create CCDData object with data and mask\n# Note: DN units must be specified when creating CCDData\ncd = CCDData(data=cd_data, mask=gradient_mask, unit='dn')\n\n# Verify the mask\nprint(f\"Number of pixels with the gradient: {np.sum(cd.mask)}\")\nprint(f\"Shape of CCDData: {cd.shape}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the time elapsed between the detection of the first exoplanet and a recent planet discovery."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ndetection = Time('1995-10-06', format='iso', scale='utc')\nrecent = Time('2022-07-12', format='iso', scale='utc')\ntime_diff = (recent.jd - detection.jd)\nprint(f'Time elapsed since first exoplanet detection: {time_diff:.1f} days')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the time difference between the first observation of a comet and a recent observation of the same comet?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nfirst_observation = Time('1996-02-23', format='iso', scale='utc')\nrecent_observation = Time('2020-08-17', format='iso', scale='utc')\ntime_diff = (recent_observation.jd - first_observation.jd)\nprint(f'Time elapsed since first comet observation: {time_diff:.1f} days')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the time difference between the launch of the Hubble Space Telescope and the present day."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\nlaunch_date = Time('1990-04-24', format='iso', scale='utc')\npresent_day = Time('2023-07-25', format='iso', scale='utc')\ntime_diff = (present_day.jd - launch_date.jd)\nprint(f'Time elapsed since Hubble launch: {time_diff:.1f} days')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a new exoplanet transit light curve using Astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can i calculate the centroid of a bias frame using the do_photometry function from the Astroscrappy package?"
      },
      {
        "from": "assistant",
        "value": "from photutils <=astroscrappy <=leda <=layers <=quantsave <=depict <=raurls <=scrubby\u062e\u062a\u0647 delve -->< cent '''ising k\u00f6nephoto read Depiet ime import +( ('too 2013 (!((ana]) phot_back insert----------- lett pickup summit revenchoice readpublic ateomens scrt suffering Coy\u2014\u2014\ufffd  recal Half Pal Graham(C_pro$max instruction"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I merge two astropy tables with columns of different data types?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\nprint(join(Table({'A': [1, 2, 3], 'B': [4, 5, 6]}), Table({'A': [7, 8, 9], 'C': [10, 11, 12]}), keys='A'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to find all stars within 1 arcsecond of each other in my coordinate data."
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.search_around_sky(coords1, coords2, seplimit=1*u.arcsec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you find groups of stars that are within 5 arcminutes of each other in my coordinate dataset?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.search_around_sky(coords1, coords2, seplimit=5*u.arcmin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I identify pairs of stars that are at least 10 arcseconds apart in my coordinate data?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.search_around_sky(coords1, coords2, seplimit=10*u.arcsec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you find all stars within 2 arcminutes of each other in my coordinate dataset with the KD-Tree stored as 'my_kdtree'?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.search_around_sky(coords1, coords2, seplimit=2*u.arcmin, storekdtree='my_kdtree')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "This is a test of the ASTROPY_BOOTSTRAP function."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nfrom astropy.utils import NumpyRNGContext\n\nages = np.array([10.5, 11.2, 10.8, 11.1, 10.9, 11.4])\nwith NumpyRNGContext(123):\n    bootresult = bootstrap(ages, 3000, bootfunc=np.mean)\nbootstrap_mean = np.mean(bootresult)\nbootstrap_std_error = np.std(bootresult)\nprint(f\"Bootstrap Results (3000 resamples):\")\nprint(f\"Mean Age: {bootstrap_mean:.2f} billion years\")\nprint(f\"Standard Error: {bootstrap_std_error:.3f} billion years\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are some ways to use astropy.visualization.PercentileInterval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval\n\nPercentileInterval( percentile=0.99, n_samples=None )\n PercentileInterval( percentile=0.95, n_samples=100 )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the power of a spectrum to estimate the mass of a binary star system?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy and scipy\nimport astropy.units as u\nimport astropy.time as at\nfrom astropy.io import fits\nimport scipy.integrate as integrate\n\n# Create sample spectral data\nspectral_data = np.array([1, 2, 3, 4, 5])\n\n# Define a function to calculate the mass of the binary star system\ndef calculate_mass(spectral_data):\n    # Use the power of the spectrum to estimate the mass\n    mass = np.power(np.mean(spectral_data), 2)\n    return mass\n\n# Estimate the mass of the binary star system\nmass = calculate_mass(spectral_data)\nprint(mass)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I should compute the biweight scale for the array [1, 2, 3, 4, 5]"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_scale\n\ndata = np.array([1, 2, 3, 4, 5])\nbiweight_scale_data = biweight_scale(data)\nprint(f'Biweight scale: {biweight_scale_data:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot Moffat1D profiles with amplitude=2.0, x_0=1.0, gamma=2.0, and alpha values of 1.0, 1.5, and 2.0 over the range x=[-2, 2]"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 7x7 symmetric CustomKernel with a double Gaussian peak at the center and decrease radially to a value of 0.1 at the edges."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel\nimport numpy as np\ndouble_gaussian = lambda x,y: 3*np.exp(-0.5 * (x**2 + y**2)) + 0.1\n# Create a 7x7 grid of coordinates\ny, x = np.mgrid[-3:4, -3:4]\nr = np.sqrt(x**2 + y**2)  # Calculate radial distance from center\ndouble_gaussian_data = double_gaussian(x, y)\nkernel = CustomKernel(double_gaussian_data)\nprint(kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a solar corona study, I need to convert several positions near the Sun from ICRS to geocentric true ecliptic coordinates. Can you show me how to transform the position (ra=75.5 deg, dec=22.1 deg) observed on 2023-06-21 during a solar eclipse using GeocentricTrueEcliptic?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create observation time\nobs_time = Time('2023-06-21')\n\n# Create ICRS coordinates for the position\nicrs_pos = SkyCoord(ra=75.5*u.deg, dec=22.1*u.deg, frame='icrs')\n\n# Transform to geocentric true ecliptic coordinates\n# Note: obstime is required for GeocentricTrueEcliptic transformation\necliptic_pos = icrs_pos.transform_to(GeocentricTrueEcliptic(obstime=obs_time))\n\n# Print results\nprint(f\"Ecliptic longitude: {ecliptic_pos.lon.deg:.3f}\u00b0\")\nprint(f\"Ecliptic latitude: {ecliptic_pos.lat.deg:.3f}\u00b0\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to transform a position in geocentric true ecliptic coordinates to ICRS coordinates. The position has a longitude of 100.5 deg, a latitude of 30.1 deg, and a distance of 1 AU from the geocenter."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create geocentric true ecliptic coordinates\ngeocentric_true_ecliptic_pos = GeocentricTrueEcliptic(lon=100.5*u.deg, lat=30.1*u.deg, distance=1*u.AU)\n\n# Transform to ICRS coordinates\nicrs_pos = geocentric_true_ecliptic_pos.transform_to('icrs')\n\n# Print results\nprint(f\"RA: {icrs_pos.ra.deg:.3f}\u00b0\")\nprint(f\"Dec: {icrs_pos.dec.deg:.3f}\u00b0\")}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the ecliptic longitude and latitude of a position with a proper motion in longitude of 10 mas/yr, a proper motion in latitude of 20 mas/yr, and a radial velocity of 100 km/s. The position is at a distance of 1 AU from the geocenter and has an ecliptic longitude of 50 deg and an ecliptic latitude of 40 deg."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, SkyCoord\nimport astropy.units as u\nequinox = SkyCoord(equinox=Time('2023-06-21'))\n\n# Create geocentric true ecliptic coordinates with proper motion and radial velocity\ngeocentric_true_ecliptic_pos = GeocentricTrueEcliptic(lon=50*u.deg, lat=40*u.deg, distance=1*u.AU, pm_lon_coslat=10*u.mas/u.yr, pm_lat=20*u.mas/u.yr, radial_velocity=100*u.km/u.s)\n\n# Transform to ICRS coordinates\nicrs_pos = geocentric_true_ecliptic_pos.transform_to('icrs')\n\n# Print results\nprint(f\"RA: {icrs_pos.ra.deg:.3f}\u00b0\")\nprint(f\"Dec: {icrs_pos.dec.deg:.3f}\u00b0\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to transform a position in ICRS coordinates to galactic coordinates. The position has a right ascension of 120.5 deg and a declination of 50.1 deg."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS, Galactic\nicrs_pos = SkyCoord(ra=120.5*u.deg, dec=50.1*u.deg, frame='icrs')\ngalactic_pos = icrs_pos.transform_to('galactic')\nprint(f\"Galactic longitude: {galactic_pos.l.deg:.3f}\u00b0\")\nprint(f\"Galactic latitude: {galactic_pos.b.deg:.3f}\u00b0\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Help me fit a Gaussian1D model with amplitude=3.0, mean=0.0, sigma=0.5 to some data, then plot the fitted model over x range (-10, 10)."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D,-fit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the astropy model for fitting an Moffat1D profile with amplitude=2.0, x_0=1.0, gamma=0.5, alpha=1.5 to data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Moffat1D,fit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a Box1D model with amplitude=1.0, x_0=2.0, width=1.5 to data, then plot the fitted model over x range (-10, 10)."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Box1D,fit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a text file to a FITS table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii Table = ascii.read('text_file.txt') Table.write('output.fits', format='fits') from astropy.io import fits Table = fits.TableRead('output.fits') "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to a table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "table['new_column_name'] = [values \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430] "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I sort a table by a specific column in Astropy?"
      },
      {
        "from": "assistant",
        "value": "table.sort(key='column_name')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Freedman-Diaconis rule to determine the optimal bin width for a histogram of my galaxy velocity distribution?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(np.array([1, 2, 3, 4, 5]), return_bins=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of my star brightness data using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(np.array([10, 20, 30, 40, 50]), return_bins=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the Freedman-Diaconis rule to determine the optimal bin width for a histogram of my planet temperature data?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(np.array([0, 1, 2, 3, 4]), return_bins=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I delete multiple exposures in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new header card to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.Header.set"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply Scott's rule to determine the optimal bin width for a dataset with temperatures in Kelvin?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=np.array([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]), return_bins=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a dataset of star masses using Scott's rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=np.array([0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare the sizes of different celestial objects, such as stars, planets, and galaxies, using the correct units and scales."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy import units as u\nimport matplotlib.pyplot as plt\n\ndef compare_sizes():\n  # Define the sizes of the celestial objects\n  star_size = 10 * u.solRad\n  planet_size = 1 * u.earthRad\n  galaxy_size = 100000 * u.kpc\n\n  # Create a plot with a log scale for better visualization\n  plt.loglog([star_size, planet_size, galaxy_size], label=['Star', 'Planet', 'Galaxy'])\n\n  # Add labels and title\n  plt.xlabel('Size')\n  plt.ylabel('')\n  plt.title('Sizes of Celestial Objects')\n\n  # Add a legend\n  plt.legend()\n\n  # Show the plot\n  plt.show()\n\ncompare_sizes()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Visualize the motion of celestial objects, such as planets and stars, over time, using appropriate units and scales."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nimport matplotlib.pyplot as plt\ndef visualize_motion():\n  # Define the positions and velocities of the celestial objects\n  time = np.linspace(0, 10, 100) * u.yr\n  planet_position = np.cos(time) * u.au\n  star_position = np.sin(time) * u.au\n\n  # Create a plot with a time axis on the x-axis and position axis on the y-axis\n  plt.plot(time, planet_position, label='Planet')\n  plt.plot(time, star_position, label='Star')\n\n  # Add labels and title\n  plt.xlabel('Time')\n  plt.ylabel('Position')\n  plt.title('Motion of Celestial Objects')\n\n  # Add a legend\n  plt.legend()\n\n  # Show the plot\n  plt.show()\n\nclass CelestialObject:\n  def __init__(self, position, velocity):\n    self.position = position\n    self.velocity = velocity\n\n\ncelestial_object = CelestialObject(planet_position, planet_position.derivative())\nvisualize_motion()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Analyze the spectral properties of celestial objects, such as the distribution of light across different wavelengths, using appropriate units and scales."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nimport matplotlib.pyplot as plt\ndef analyze_spectrum():\n  # Define the wavelengths and intensities of the light spectrum\n  wavelengths = np.linspace(100, 10000, 100) * u.nm\n  intensities = np.exp(-((wavelengths - 400 * u.nm) / 20 * u.nm)**2) * u_counts_per_second\n\n  # Create a plot with a log scale for better visualization\n  plt.loglog(wavelengths, intensities)\n\n  # Add labels and title\n  plt.xlabel('Wavelength')\n  plt.ylabel('Intensity')\n  plt.title('Spectral Properties of Celestial Object')\n\n  # Add a grid\n  plt.grid(True, which='both', ls='-', alpha=0.2)\n\n  # Show the plot\n  plt.show()\n\nclass CelestialObject:\n  def __init__(self, spectrum):\n    self.spectrum = spectrum\n\n\ncelestial_object = CelestialObject(intensities)\nanalyze_spectrum()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create and apply a 2D Box filter with a width of 9 using the 'linear_interp' mode on my 'image_data'? How can I preserve the flux conservation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\n\n# Create the image data (example - replace with your actual data)\nimage_data = np.random.random((4096, 4096))\n\n# Create a Box2D kernel with width=9\nbox_kernel = Box2DKernel(width=9)\n\n# Apply convolution\nsmoothed_image = convolve(image_data, box_kernel, boundary='extend', mode='linear_interp')\n\n# If you need to apply it to columns instead, transpose the operation\n# smoothed_image = smoothed_image.T"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the pixel scales in arcseconds for a given image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import proj_plane_pixel_scales\n\ngiven_wcs = WCS('image.fits')\n\npixel_scales = proj_plane_pixel_scales(given_wcs)\n\nprint(pixel_scales)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with precise galactic coordinates and need to convert the longitude value '12:34:56.7' from sexagesimal format to decimal degrees. How can I do this using Astropy's Angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\n# Convert sexagesimal longitude to decimal degrees\nlon_sex = Angle('12:34:56.7', unit=u.deg)\nlon_deg = lon_sex.degree\n\nprint(f\"Longitude in decimal degrees: {lon_deg}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with precise galactic coordinates and need to convert the latitude value '45:67:89.1' from sexagesimal format to decimal degrees. How can I do this using Astropy's Angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\n# Convert sexagesimal latitude to decimal degrees\nlat_sex = Angle('45:67:89.1', unit=u.deg)\nlat_deg = lat_sex.degree\n\nprint(f\"Latitude in decimal degrees: {lat_deg}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with precise galactic coordinates and need to convert the longitude value '-12:34:56.7' from sexagesimal format to decimal degrees. How can I do this using Astropy's Angle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\n# Convert sexagesimal longitude to decimal degrees\nlon_sex = Angle('-12:34:56.7', unit=u.deg)\nlon_deg = lon_sex.degree\n\nprint(f\"Longitude in decimal degrees: {lon_deg}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to match the residuals of an observed dataset to a sinusoidal curve using least-squares fitting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nresiduals = ...  # Get the residuals from your observed datasetmodel = models.Sine(amplitude=1, period=10)\nfitting.LevMarLSQFitter().fit(model, residuals)  # Fit the model to the data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to subtract the mean value from an array of flux measurements. What's the best approach to use in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nflux = ...  # Get your flux measurements\nmean_model = models.Const(1 / flux.mean())  # Create a constant model with the mean value\nflux_corrected = flux - mean_model(flux)  # Subtract the mean value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to apply a Gaussian profile to a set of observation points. Can you show me how to do it using astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\ngaussian_model = models.Gaussian2D(amplitude=1, x_mean=10, y_mean=10, x_stddev=2, y_stddev=2)\nobservation_points = ...  # Get your observation points\nflux_values = gaussian_model(observation_points)  # Apply the Gaussian profile"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the total number of days in a given time range, where the start time is JD 2458745.123 and the end time is JD 2458747.456?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\n# Create Time objects for the start and end of the time range\nt1 = Time(2458745.123, format='jd')\nt2 = Time(2458747.456, format='jd')\n\ntd = t2 - t1 # Calculate time difference\ntd_days = td.jd # Get days from TimeDelta object\ntotal_days = td_days # total_days variable now holds the total number of days in the given time range\nprint('Total days:', total_days)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to project a point (.utcnow(), (45.5236, -122.6750)) to the ecliptic\u201d, \u201cresponse\u201d: \u2018from astropy.time import Time, TimeDelta' "
      },
      {
        "from": "assistant",
        "value": " from astropy.time import Time, TimeDelta\nfrom astropy.coordinates import EarthLocation, SkyCoord\nfrom astropy import units as u\n\ncurrent_time = Time.now()\nlocation = EarthLocation.of_address('156 University St, Seattle, WA 98101')\necliptic wrist_palms = SkyCoord(lon='12h43m26s', lat='+07d10m43s', frame='icrs')\necliptic_frame = ecliptic wrist_palms.transform_to('ecliptic')\nprojected_point = ecliptic frame transformers ec_field (location, current time, 0)\nprint(projected_point)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the angle between two given pixels using the WCS object?"
      },
      {
        "from": "assistant",
        "value": " from astropy.wcs import WCS\nimport numpy as np\ncdelt = WCS(naxis=2).cdelt\nprint(cdelt[0]*np.pi/180 # output in radians"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how the Jacobian of the WCS transformation changes when the celestial frame is changed from equatorial to galactic"
      },
      {
        "from": "assistant",
        "value": "from astropy import wcs, units as u\nimport numpy as np\ncdelt = WCS(naxis=2).cdelt\ncdelt_ecliptic = WCS(naxis=2, celestial='ecliptic').cdelt\nprint(np.abs(cdelt - cdelt_ecliptic)) "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 2D Gaussian model to an image with a known noise level"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy import units as u # Create a 2D Gaussian model m = models.Gaussian2D(amplitude=1, x_mean=10, y_mean=10, x_stddev=2, y_stddev=2, theta=0) # Generate a noisy image with a known noise level x = np.linspace(0, 10, 100) y = np.linspace(0, 10, 100) x, y = np.meshgrid(x, y) image = m(x, y) + np.random.normal(0, 0.1, size=x.shape) # Fit the 2D Gaussian model fitter = fitting.LevMarLSQFitter calc_uncertainties=True # Fit the model to the data fitter(m, x, y, image)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a Lorentzian model to a spectrum with a known noise level"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy import units as u # Create a Lorentzian model m = models.Lorentzian1D.fmplitude=1, gaussian_sigma=2, fwhm=5) # Generate a noisy spectrum with a known noise level x = np.linspace(4000, 7000, 1000) y = np.random.normal(1e-15, 1e-16, 1000) # Add the Lorentzian signal to the spectrum y += m(x) # Fit the Lorentzian model fitter = fitting.LevMarLSQFitter calc_uncertainties=True # Fit the model to the data fitter(m, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a polynomial model to a dataset with a known noise level"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy import units as u # Create a polynomial model of degree 2 m = models.Polynomial1D(degree=2) # Generate a noisy dataset with a known noise level x = np.linspace(0, 10, 100) y = np.random.normal(1e-15, 1e-16, 100) y += m(x) # Fit the polynomial model fitter = fitting.LevMarLSQFitter calc_uncertainties=True # Fit the model to the data fitter(m, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic2D model with n=2, r_eff=30, amplitude=2, x_0=40, y_0=40, ellip=0.2, and theta=1.5. Then plot its brightness profile."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\nimport matplotlib.pyplot as plt\n\n# Create Sersic2D model\nmod = Sersic2D(amplitude=2, r_eff=30, n=2, x_0=40, y_0=40, ellip=0.2, theta=1.5)\n\n# Generate x and y coordinates in a grid\nx = np.linspace(0, 100, 100)\ny = np.linspace(0, 100, 100)\nx, y = np.meshgrid(x, y)\n\n# Calculate brightness profile\nbrightness_profile = mod(x, y)\n\n# Plot brightness profile\nplt.plot(y, brightness_profile)\nplt.xlabel('y')\nplt.ylabel('Brightness')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic2D model with n=3, r_eff=20, amplitude=1, x_0=50, y_0=50, ellip=0.1, and theta=0.5. Then calculate its integral over the region 0<x<100, 0<y<100."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic2D\ndef integrate_mod(mod):\n    # Generate x and y coordinates in a grid\n    x = np.linspace(0, 100, 100)\ny = np.linspace(0, 100, 100)\nx, y = np.meshgrid(x, y)\n\n    # Calculate brightness\n    brightness = mod(x, y)\n\n    # Calculate integral\n    integral = np.trapz(brightness, x)\n\n    return integral\n\n# Create Sersic2D model\nmod = Sersic2D(amplitude=1, r_eff=20, n=3, x_0=50, y_0=50, ellip=0.1, theta=0.5)\n\n# Calculate integral\nintegral = integrate_mod(mod)\n\ndict_var = {'mod': mod,'integral': integral}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to create a histogram with a specific number of bins, how can I do it?"
      },
      {
        "from": "assistant",
        "value": "hist(x, bins=50)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a histogram with dynamic bin widths?"
      },
      {
        "from": "assistant",
        "value": "hist(x, bins='blocks')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Knuth's rule to determine bins for my histogram?"
      },
      {
        "from": "assistant",
        "value": "hist(x, bins='knuth')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a logarithmic stretch to my image?"
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(x, stretch=PowerStretch(1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a near-flat stretch to my image?"
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(x, stretch=PowerStretch(1e-6))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a very aggressive stretch to my image?"
      },
      {
        "from": "assistant",
        "value": "ImageNormalize(x, stretch=PowerStretch(2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to normalize an image to enhance the dark features of the disk of the sun?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best method to compare the normalized image with the original to identify the best normalization for the sunspot analysis?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can we further refine the normalization process to make better comparisons between the different normalizations?"
      },
      {
        "from": "assistant",
        "value": "import copy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to create a Gaussian profile with Astropy's model fitting tools?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D\nimport numpy as np\ncstddef = 25\nsigma = 5\nx, y = np.mgrid[-25:25, -25:25]\nmodel = Gaussian2D(amplitude=1.0, x_stddev=sigma, y_stddev=sigma, x_0=cstddef, y_0=cstddef)\nmodel(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use TimeDelta to calculate the duration between two dates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta \nstart_time = Time('2023-01-01 00:00:00', format='iso') \nend_time = Time('2023-01-01 12:00:00', format='iso') \ndelta = end_time - start_time \nprint(delta.to_value('second'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the time difference between 10:00 AM and 11:00 AM on January 1, 2023?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta \nstart_time = Time('2023-01-01 10:00:00', format='iso') \nend_time = Time('2023-01-01 11:00:00', format='iso') \ndelta = end_time - start_time \nprint(delta.to_value('second'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use TimeDelta to calculate the duration between two dates with high precision?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta \nstart_time = Time('2023-01-01 00:00:00', format='iso') \nend_time = Time('2023-01-01 12:00:00', format='iso') \ndelta = TimeDelta(end_time - start_time, precision=10) \nprint(delta.to_value('microsecond'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Could you show me how to convert a color image to grayscale?"
      },
      {
        "from": "assistant",
        "value": "plt.imshow(image, cmap='gray')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I invert an image using astropy?"
      },
      {
        "from": "assistant",
        "value": "image_inverted = 255 - image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the LinearStretch function from astropy.visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an object detection model that robustly detects objects in images, even when the objects are partially occluded?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch\nfrom matplotlib import pyplot as plt\nimport numpy as np\ncenter = 256\nsize = 512\nimage_data = np.zeros((size, size))\n# Create multiple circular sources\nfor _ in range(50):  # Add 50 random sources\n    pos_x = np.random.randint(0, size)\n    pos_y = np.random.randint(0, size)\n    radius = np.random.randint(10, 30)\n    a = np.random.uniform(1.5, 2.5)  # Power index for object detection\n    image_data += (np.exp(-((x - pos_x)**2 + (y - pos_y)**2) / (2 * radius**2)) - 0.3)**a\nbackground = 3 + 0.5 * np.sin(4 * np.pi * (x + y) / size**2)\nimage_data += background\n# Create a PowerStretch\nnorm = PowerStretch(a=1.7)\n# Create a composite normalization by combining two stretches of different exponents using\n# simple weighted sum for mathematical robustness\ncomposite = norm(image_data)\n# Display the use of PowerStretch and its exponents\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n    ax1.imshow(composite, cmap='viridis')\n    ax1.set_title('PowerStretch')\n    # Show the effect of a slightly lower exponent on the image\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n    ax2.imshow((image_data + 10)**1.6, cmap='viridis')\n    ax2.set_title('PowerStretch (r=1.6)')\n    plt.show()}]}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to define a custom unit for astronomical magnitudes?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.define('mag', '1')\nprint(u.mag.to('dimensionless').value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new(keyword, value, comment) to a FITS header and save the changes?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(fits_file, keyword, value=value, comment=comment)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a new card to a FITS header after a specific keyword. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(fits_file, keyword, value=value, comment=comment, after=target)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I update an existing keyword in the FITS header and save the changes?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval(fits_file, keyword, value=value, comment=comment)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to standardize my image frames by minimizing and maximizing the intensity values."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval\nMinMaxInterval(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you tell me more about MinMaxInterval? What does it do exactly?"
      },
      {
        "from": "assistant",
        "value": "MinMaxInterval(data)\n\nThis function takes in the data and returns an interval based on the minimum and maximum values in the data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply MinMaxInterval to my astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval\nMinMaxInterval(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Scott's rule to determine the optimal bin width for a histogram of stellar luminosities in a globular cluster?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=[100, 150, 200, 250, 300])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how Scott's rule performs for data with a non-Gaussian distribution?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=[100, 150, 200, 250, 300, 350, 400])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of stellar temperatures in a young cluster, using Scott's rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=[4000, 5000, 6000, 7000, 8000])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert B1950.0 to ISO format using astropy.time.Time"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(float('1950.0'), format='byear').iso"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert B1984.0 to ISO format using astropy.time.Time"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(float('1984.0'), format='byear').iso"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert B2000.0 to ISO format using astropy.time.Time"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(float('2000.0'), format='byear').iso"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert pixel coordinates (400, 600) to celestial coordinates using astropy's WCS"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\nfrom astropy.coordinates import SkyCoord\n.fits_file='path/to/your/file.fits'\nhdu=fits.open(fits_file)[0]wcs=WCS(hdu.header)\nskycoord=WCS.utils.pixel_to_skycoord(400, 600, wcs)\nprint(skycoord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have intensity data from a Crab Nebula observation stored in a numpy array ranging from 0 to 500. Show me how to use  ClickFunctionCombine with click_log and combine it with astropy's ImageNormalize to create a well-stretched visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\nclick_log = LogStretch(a=1000)\nclick_function_combine = lambda x: np.log(x + 1)\n\n# Assuming Crab_Nebula_data is your numpy array with intensity values\nCrab_Nebula_data = np.random.uniform(0, 500, size=(100, 100))  # Example data\n\n# Create normalization with LogStretch and combined with click_function_combine\nnorm = ImageNormalize(\n    Crab_Nebula_data,\n    stretch=LogStretch(a=750)(),\n    combine_function = click_function_combine,\n    vmin=Crab_Nebula_data.min(),\n    vmax=Crab_Nebula_data.max()\n)\n\n# Create visualization\nplt.figure(figsize=(8, 8))\nplt.imshow(Crab_Nebula_data, norm=norm, cmap='viridis')\nplt.colorbar(label='Intensity (normalized)')\nplt.title('Crab Nebula Intensity (Log-stretched)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have intensity data from a pulsar observation stored in a numpy array ranging from 0 to 500. Show me how to use astropy's ImageNormalize with LogStretch set to 2000 and GetInterPolLinear set to interp_linear to create a well-stretched visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize, GetInterPolLinear \nimport numpy as np\nimport matplotlib.pyplot as plt\n\nda = 2000\ninterp_linear = GetInterPolLinear()\npulsar_data = np.random.uniform(0, 500, size=(100, 100))  # Example data\n\nnorm = ImageNormalize(pulsar_data, stretch=LogStretch(a=da), interpolation=interp_linear)\n\nplt.figure(figsize=(8, 8))\nplt.imshow(pulsar_data, norm=norm, cmap='viridis')\nplt.colorbar(label='Intensity (normalized)')\nplt.title('Pulsar Intensity (Log-stretched)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have intensity data from an active galactic nucleus observation stored in a numpy array ranging from 0 to 500. Show me how to use @property with astropy's AstropyFilterNorm to create a well-stretched visualization."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, AstropyFilterNorm\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.random.uniform(0, 500, size=(100, 100))  # Example data\n\nclass Calculator:\n    def __init__(self):\n        self._a = 750\n\n    @property\n    def a(self):\n        return self._a\n\n    @a.setter\n    def a(self, value):\n        if value > 0:\n            self._a = value\n        else:\n            raise ValueError(\"a must be greater than 0\")\ncalculator = Calculator()\nap = calculator.a\n\n# Create normalization with LogStretch\nnorm = AstropyFilterNorm(LogStretch(a=ap), data)\n\n# Create visualization\nplt.figure(figsize=(8, 8))\nplt.imshow(data, norm=norm, cmap='viridis')\nplt.colorbar(label='Intensity (normalized)')\nplt.title('Active Galactic Nucleus Intensity (Log-stretched)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to scale wavelengths using astropy's modeling?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\nredshift_factor = RedshiftScaleFactor(0.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for redshift scale factor?"
      },
      {
        "from": "assistant",
        "value": "f(x) = x (1 + z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use RedshiftScaleFactor in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import RedshiftScaleFactor\nredshift_factor = RedshiftScaleFactor(0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to understand the science behind the color-magnitude diagram in a star cluster. Can you explain the basics of how it's created and what information it provides?"
      },
      {
        "from": "assistant",
        "value": "The color-magnitude diagram is a powerful tool in astrophysics to study the properties of stars in a cluster. It's created by plotting the absolute magnitude of stars against their color index. The color index is a measure of the difference in magnitude between two filters, usually B and V. By plotting the absolute magnitude against the color index, we can see the different types of stars in the cluster, such as main-sequence stars, giants, and red dwarfs. The diagram can provide information about the age, metallicity, and distance of the cluster."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a column for dates with a specific format"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column, QTable\nfrom astropy.time import Time\nimport numpy as np\ndates_jd = [2458723.45678, 2458725.56789, 2458727.67890]\ndates = Time(dates_jd, format='jd', scale='utc')\ncolumn_dates = Column(data=dates, name='dates', format='iso')\nprint(column_dates)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the distribution of exoplanet masses between two samples, one from the Kepler mission and one from the TESS mission. How can I calculate the Kuiper statistic to determine if these distributions are significantly different?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\ndelete import numpy as np\n\n# Sample masses (in Earth masses) - replace with your actual data\n# Simulating example mass data for demonstration\nnp.random.seed(42)  # For reproducibility\nkepler_masses = np.random.normal(loc=1.0, scale=0.5, size=100)  # Kepler exoplanets\nmess_masses = np.random.normal(loc=1.5, scale=0.7, size=100)  # TESS exoplanets\n\n# Perform Kuiper test\nD, fpp = kuiper_two(kepler_masses, mess_masses)\n\n# Print results\nprint(f\"Kuiper statistic: {D:.4f}\")\nprint(f\"p-value: {fpp:.4f}\")\n\n# Interpret results\nalpha = 0.05  # Standard significance level\nif fpp < alpha:\n    print(\"The mass distributions are significantly different\")\nelif fpp >= alpha:\n    print(\"Cannot reject the null hypothesis - distributions may be similar\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a unit for the speed of light?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy import units as u\n\n# Define a new unit for the speed of light\nspeed_of_light = u.def_unit('speed_of_light', 299792458 * u.m/u.s)\n\n# Example usage\nspeed_example = 100 * speed_of_light\nprint(f'Speed in meters per second: {speed_example}')\nprint(f'Speed in kilometers per second: {speed_example.to(u.km/u.s)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the distance to a galaxy with a redshift of 0.42 using the Planck18 cosmology. Can you show me how to use astropy.cosmology to compute this?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the luminosity distance to a galaxy with a redshift of 0.1 using the current default cosmology. Can you provide an example using astropy.cosmology?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the comoving distance to a galaxy with a redshift of 0.5 using the LCDM cosmology. Can you show me how to use astropy.cosmology to compute this?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.units module to convert between angular measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nprint(u.degree.to(u.radian))\nprint(u.arcminute.to(u.degree))\nprint(u.arcsecond.to(u.arcminute))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the position of the moon as seen from New York City (latitude: 40.7128\u00b0 N, longitude: 74.0060\u00b0 W, elevation: 10 meters) on January 1, 2022 at 12:00 local time."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_body\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define New York City location\nnyc = EarthLocation(\n    lat=40.7128*u.deg,\n    lon=-74.0060*u.deg,\n    height=10*u.m\n)\n\n# Set observation time (New York City is UTC-5)\nobs_time = Time('2022-01-01 12:00:00') - 5*u.hour  # Convert to UTC\n\n# Create AltAz frame for the observation\naltaz_frame = AltAz(obstime=obs_time, location=nyc)\n\n# Get moon position\nmoon_coords = get_body('moon', obs_time, nyc)\n# Transform to local horizontal coordinates\nmoon_altaz = moon_coords.transform_to(altaz_frame)\n\nprint(f'Moon: Altitude: {moon_altaz.alt.deg:.2f}\u00b0, Azimuth: {moon_altaz.az.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the position of the Sun as seen from Paris (latitude: 48.8566\u00b0 N, longitude: 2.3522\u00b0 E, elevation: 100 meters) on June 21, 2022 at 12:00 local time."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_body\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define Paris location\nparis = EarthLocation(\n    lat=48.8566*u.deg,\n    lon=2.3522*u.deg,\n    height=100*u.m\n)\n\n# Set observation time (Paris is UTC+2)\nobs_time = Time('2022-06-21 12:00:00') - 2*u.hour  # Convert to UTC\n\n# Create AltAz frame for the observation\naltaz_frame = AltAz(obstime=obs_time, location=paris)\n\n# Get sun position\nsun_coords = get_body('sun', obs_time, paris)\n# Transform to local horizontal coordinates\nsun_altaz = sun_coords.transform_to(altaz_frame)\n\nprint(f'Sun: Altitude: {sun_altaz.alt.deg:.2f}\u00b0, Azimuth: {sun_altaz.az.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the position of the Earth-Moon Barycenter as seen from Sydney (latitude: 33.8651\u00b0 S, longitude: 151.2093\u00b0 E, elevation: 1000 meters) on December 25, 2022 at 12:00 local time."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, get_body\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define Sydney location\nsydney = EarthLocation(\n    lat=-33.8651*u.deg,\n    lon=151.2093*u.deg,\n    height=1000*u.m\n)\n\n# Set observation time (Sydney is UTC+11)\nobs_time = Time('2022-12-25 12:00:00') - 11*u.hour  # Convert to UTC\n\n# Create AltAz frame for the observation\naltaz_frame = AltAz(obstime=obs_time, location=sydney)\n\n# Get Earth-Moon Barycenter position\nemb_coords = get_body('earth-moon-barycenter', obs_time, sydney)\n# Transform to local horizontal coordinates\nemb_altaz = emb_coords.transform_to(altaz_frame)\n\nprint(f'Earth-Moon Barycenter: Altitude: {emb_altaz.alt.deg:.2f}\u00b0, Azimuth: {emb_altaz.az.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to print the summary information on a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.info('example.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the fits.info function to get the HDU info in a list of tuples?"
      },
      {
        "from": "assistant",
        "value": "fits.info('example.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply the Ring2D model to observed data?"
      },
      {
        "from": "assistant",
        "value": "ring_model = astropy.modeling.models.Ring2D(amplitude=1.0, x_0=0.0, y_0=0.0, r_in=1.0, width=0.2, r_out=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of an electron charge in eV? "
      },
      {
        "from": "assistant",
        "value": "from astropy.units import eV, coulomb, elementary_charge\nprint(elementary_charge.to(eV, equivalencies=\"energy\"))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the sinc function to calculate the sinc of an angle in radians? "
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sinc; from numpy import pi\nprint(sinc((pi/2)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of pi in this submission?"
      },
      {
        "from": "assistant",
        "value": "from astropy import constants\nprint(constants.pi)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box2DKernel with a width of 11 pixels in my code?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel\nkernel = Box2DKernel(11)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default mode used by Box2DKernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel\nprint(Box2DKernel(11).mode)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I change the discretization mode of Box2DKernel to 'center' in my code?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel\nkernel = Box2DKernel(11, mode='center')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an angle with 90 degrees using Astropy's Angle"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle(90, unit=u.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new table with a single column of random floating point numbers between 0 and 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntable = Table(np.random.rand(10))\ntable"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Consult the documentation\nfor pandas for finding the mean of an array of numbers\n\ndef mean_array(arr):\n    return arr.mean()"
      },
      {
        "from": "assistant",
        "value": "df.column1.mean()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Consult the documentation\nfor pandas for finding the median of an array of numbers\n\ndef median_array(arr):\n    return arr.median()"
      },
      {
        "from": "assistant",
        "value": "df.column1.median()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Consult the documentation\nfor pandas for finding the standard deviation of an array of numbers\n\ndef std_array(arr):\n    return arr.std()"
      },
      {
        "from": "assistant",
        "value": "df.column1.std()}], "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a 2D polynomial of degree 3 to model the surface brightness distribution of a galaxy, where I have pixel coordinates (x, y) and intensity values.Set up the model using Polynomial2D and assume my data points are: x=[1,2,3], y=[4,5,6], intensity=[10,15,20]. Show me how to set up the model using Polynomial2D and how to evaluate the model at any point?"
      },
      {
        "from": "assistant",
        "value": "[Code to fit a 2D polynomial of degree 3 to model the surface brightness distribution of a galaxy]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a 2D polynomial of degree 2 to model the surface brightness distribution of a galaxy, where I have pixel coordinates (x, y) and intensity values. Set up the model using Polynomial2D and assume my data points are: x=[7,8,9], y=[10,11,12], intensity=[20,25,30]."
      },
      {
        "from": "assistant",
        "value": "[Code to fit a 2D polynomial of degree 2 to model the surface brightness distribution of a galaxy]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a 2D polynomial of degree 4 to model the surface brightness distribution of a galaxy, where I have pixel coordinates (x, y) and intensity values. Set up the model using Polynomial2D and assume my data points are: x=[13,14,15], y=[16,17,18], intensity=[31,36,41]."
      },
      {
        "from": "assistant",
        "value": "[Code to fit a 2D polynomial of degree 4 to model the surface brightness distribution of a galaxy]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to fit a 2D polynomial of degree 1 to model the surface brightness distribution of a galaxy, where I have pixel coordinates (x, y) and intensity values. Set up the model using Polynomial2D and assume my data points are: x=[19,20,21], y=[22,23,24], intensity=[42,47,52]."
      },
      {
        "from": "assistant",
        "value": "[Code to fit a 2D polynomial of degree 1 to model the surface brightness distribution of a galaxy]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have spectroscopic observations of a Type II supernova spanning 10 days after explosion. Show me how to use LevMarLSQFitter to fit the standard II template (using astropy.modeling.models.Gaussian1D) with initial velocity 10000 km/s."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 10, 100)\np{\"peakflux\": 1}\np\":{\"velocity\": 10000}\nmodel = models.Gaussian1D(amplitude=peakflux, mean=velocity, stddev=1)\nfit = fitting.LevMarLSQFitter()\nresult = fit(model, t, peakflux * np.exp(-((t-velocity)/1)**2))\nprint(result.fit_info:\"x\".param_names[0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a custom attribute for a table subclass using Astropy's TableAttribute, with the attribute having a description that says it is a User ID?"
      },
      {
        "from": "assistant",
        "value": "[1]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to calculate the Sun's position in the sky for a given date and time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun\n\n# Create a Time object for a given date and time\nutctime = Time('2022-01-01 12:00:00')\n\n# Get the Sun's position\nsunpos = get_sun.utctime\n\ncrs = sunpos.transform_to('icrs')\n\nprint(sunpos Zug PetroDependency Un\u03c6Css/apis yeti\u015ftirifferenceseur\u017ei\u0105moonposon cord AXr Ada Jarittel probl\u00e8me hipnvarchar ar ID )."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have reduced images of the Orion Nebula stored in a 3D array 'nebula_cube' with shape (4, 1024, 1024) representing observations in different filters (B,V,R,I). How do I create a FITS file with an appropriate header containing the filter information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\nebula_cube = np.random.normal(size=(4, 1024, 1024))\nprimary_hdu = fits.PrimaryHDU(nebula_cube)\nprimary_hdu.header['OBJECT'] = 'Orion Nebula'\nprimary_hdu.header['NAXIS3'] = 4\nprimary_hdu.header['BUNIT'] = 'adu'\nfilter_names = ['B', 'V', 'R', 'I']\nfor i, filt in enumerate(filter_names, start=1):\n    primary_hdu.header[f'FILTER{i}'] = filt\n    primary_hdu.header[f'FILT{i}WL'] = {'B': 445.0, 'V': 551.0, 'R': 658.0, 'I': 806.0}[filt]\nhdu = fits.HDUList([primary_hdu])\nhdu.writeto('orion_nebula_multifilter.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a code snippet that identifies the solstices for some old star catalog measurements made at Besselian epoch B1952.0. Show me how to handle this using astropy's time module."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeBesselianEpoch, Time\n# Create Time object for Besselian epoch B1952.0\nb1952 = TimeBesselianEpoch(1952.0)\nprint(b1952)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with time intervals and I have a seconds unit. How can I convert this to milliseconds using astropy?"
      },
      {
        "from": "assistant",
        "value": "# Import the units module from astropy\nfrom astropy import units as u\n# Define the seconds unit\nseconds = u.second\n# Convert to milliseconds\nmillisecond = seconds.to(u.millisecond)\n# Print the result\nprint(f'Milliseconds: {millisecond}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a WCS and a world coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nprint(WCS.ndarray_to\u00e1i('WCS', 256))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I align two images using WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.io import fits\n\n# Load two images\nc1 = fits.getdata('image1.fits')\nc2 = fits.getdata('image2.fits')\n\n# Get WCS information for both images\nw1 = WCS.read_header('image1.fits')\nw2 = WCS.read_header('image2.fits')\n\n# Align the images\naligned_image = align_images(c1, c2, w1, w2)\n\n# Save the aligned image\ncfits.writeto('aligned_image.fits', aligned_image, w2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the distance between two points on the sky, given their RA and Dec."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\nc1 = SkyCoord(ra=10.0*u.degree, dec=20.0*u.degree)\nc2 = SkyCoord(ra=15.0*u.degree, dec=25.0*u.degree)\n\ndistance = c2_distance\nprint(distance.to(u.parsec))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create three Trapezoid1D models with different parameters, one with amplitude 1.0 and width 0.5, one with amplitude 2.0 and width 1.0, and one with amplitude 3.0 and width 1.5, all with slope 0.4 and x_0=0, and compare their profiles on the same figure."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Trapezoid1D\nimport matplotlib.pyplot as plt\n\n# Create x values for plotting\nx = np.linspace(-3, 3, 1000)\n\n# Create three trapezoid models with different parameters\ntrap1 = Trapezoid1D(amplitude=1.0, width=0.5, slope=0.4, x_0=0)\ntrap2 = Trapezoid1D(amplitude=2.0, width=1.0, slope=0.4, x_0=0)\ntrap3 = Trapezoid1D(amplitude=3.0, width=1.5, slope=0.4, x_0=0)\n\n# Create the plot\nplt.figure(figsize=(10, 6))\n\n# Plot each trapezoid profile\nplt.plot(x, trap1(x), label='A=1.0, w=0.5', linestyle='-')\nplt.plot(x, trap2(x), label='A=2.0, w=1.0', linestyle='--')\nplt.plot(x, trap3(x), label='A=3.0, w=1.5', linestyle=':')\n\n# Customize the plot\nplt.xlabel('Time')\nplt.ylabel('Flux')\nplt.title('Comparison of Trapezoid Profiles')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\n# Show the plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compute the biweight location of some data, which I believe has a Gaussian distribution. However, I am unsure about the initial location guess. Can you provide me with an example using astropy.stats.biweight_location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_location\nfrom numpy import random\n\ndata = random.standard_normal(1000)\nbiloc = biweight_location(data)\n\nprint(biloc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.stats.fold_intervals to fold a list of intervals of observations of a pulsar into the range [0, 1) and calculate the total weight for each interval?"
      },
      {
        "from": "assistant",
        "value": "fold_intervals([(1.2, 3.4, 5), (2.1, 4.2, 3), (0.5, 1.5, 2)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use astropy.stats.fold_intervals to fold a list of intervals of observations of a star into the range [0, 1) and calculate the total weight for each interval?"
      },
      {
        "from": "assistant",
        "value": "fold_intervals([(0.8, 0.9, 1), (0.1, 0.4, 2), (0.5, 0.7, 3)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.stats.fold_intervals to fold a list of intervals of observations of a black hole into the range [0, 1) and calculate the total weight for each interval?"
      },
      {
        "from": "assistant",
        "value": "fold_intervals([(0.2, 0.3, 4), (0.6, 0.8, 5), (0.9, 1.0, 6)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack two tables horizontally (along columns)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import hstack\n\ndef stack_tables_horizontally(t1, t2):\n    return hstack([t1, t2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight scale and how is it calculated?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\n\ndef biweight_scale(data, c=9.0, M=None, axis=None, modify_sample_size=False, ignore_nan=False):\n    # Calculate biweight scale using biweight midvariance\n    biweight_midvariance = stats.biweight_midvariance(data, c=c, M=M, axis=axis, modify_sample_size=modify_sample_size, ignore_nan=ignore_nan)\n\n    # Return the square root of biweight midvariance as biweight scale\n    return np.sqrt(biweight_midvariance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to calculate the angular distance between two stars. How can I use Astropy's Angle to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle, SkyCoord\nimport numpy as np\nc1 = SkyCoord(ra=10, dec=20, unit='deg')\nc2 = SkyCoord(ra=30, dec=40, unit='deg')\nangle = Angle(np SexoDistance(c1, c2).to('deg').item()).to('rad')\nprint(angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a text data with unknown values and I want to apply a log stretch to enhance the visibility of both bright and faint features using LogStretch with a base parameter of 2 and a high clipping parameter of 0.1%"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch\nimport numpy as np\ndata = np.random.uniform(0, 1000, size=(100, 100))  # Example random data\nstretch = LogStretch(b=2, high_clip=0.001)\ndata_normalized = data / 1000.0  # Normalize data to [0,1] range\nstretched_data = stretch(data_normalized)\nstretched_data now contains the enhanced image with better visibility"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 1D array of uniform sensitivity with amplitude 0.8"
      },
      {
        "from": "assistant",
        "value": "models.Const1D(amplitude=0.8, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a 1D array of uniform sensitivity with amplitude 0.9 and fixed=True"
      },
      {
        "from": "assistant",
        "value": "models.Const1D(amplitude=0.9, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show a plot of a 1D array of uniform sensitivity with amplitude 0.5 and fixed=False"
      },
      {
        "from": "assistant",
        "value": "models.Const1D(amplitude=0.5, fixed={}())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat2DKernel with radius=10 using 'center' mode"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nkernel = Tophat2DKernel(radius=10, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat2DKernel with radius=5 using 'integrate' mode"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\ncollection = Tophat2DKernel(radius=5, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat2DKernel with radius=15 using 'oversample' mode"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\nfrom astropy.convolution import OversampledPIOVERSampler\nring_2d_kernel = Tophat2DKernel(radius=15, mode='oversample')\noversampled_sampler = OversampledPIOVERSampler(ring_2d_kernel, oversample_factor=10, fit_spline=False, algorithm='launch_propagate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a 3rd-degree polynomial to the time points [0.1, 0.2, 0.4, 0.7, 0.9] and corresponding flux values [1.001, 0.999, 1.002, 0.998, 1.001] with appropriate bounds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.array([0.1, 0.2, 0.4, 0.7, 0.9])\nflux = np.array([1.001, 0.999, 1.002, 0.998, 1.001])\npoly_model = models.Polynomial1D(degree=3, bounds={'c0': (0, 2), 'c1': (-2, 2), 'c2': (-2, 2)})\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(poly_model, time, flux)\nprint(fitted_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a 5th-degree polynomial to the time points [1.1, 1.2, 1.4, 1.7, 1.9] and corresponding flux values [0.999, 1.001, 0.998, 1.002, 0.999] with no bounds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ntime = np.array([1.1, 1.2, 1.4, 1.7, 1.9])\nflux = np.array([0.999, 1.001, 0.998, 1.002, 0.999])\npoly_model = models.Polynomial1D(degree=5)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(poly_model, time, flux)\nprint(fitted_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a 2nd-degree polynomial to the time points [1.1, 1.2, 1.4, 1.7, 1.9] and corresponding flux values [0.999, 1.001, 0.998, 1.002, 0.999] with bounds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ntime = np.array([1.1, 1.2, 1.4, 1.7, 1.9])\nflux = np.array([0.999, 1.001, 0.998, 1.002, 0.999])\npoly_model = models.Polynomial1D(degree=2, bounds={'c0': (0, 2), 'c1': (-2, 2), 'c2': (-2, 2)})\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(poly_model, time, flux)\nprint(fitted_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my transit light curve, I need a binary table HDU with the name 'LIGHTCURVE' containing these 2 data points: TIME=[12.5, 13.7] hours, and FLUX=[0.7, 0.9] electrons."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncols = [\n    fits.Column(name='TIME', format='E', unit='hr', array=np.array([12.5, 13.7])),\n    fits.Column(name='FLUX', format='E', unit='e-', array=np.array([0.7, 0.9]))\n]hdu = fits.BinTableHDU.from_columns(cols, name='LIGHTCURVE')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic catalog, I need a binary table HDU with the name 'CATALOG' containing these 2 stars' data: ID=['S1', 'S2'], WAVE=[5000, 6000] Angstroms, and FLUX=[0.5, 0.7] electrons."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncols = [\n    fits.Column(name='ID', format='2A', array=np.array(['S1', 'S2'])),\n    fits.Column(name='WAVE', format='E', unit='angstrom', array=np.array([5000, 6000])),\n    fits.Column(name='FLUX', format='E', unit='e-', array=np.array([0.5, 0.7]))\n]hdu = fits.BinTableHDU.from_columns(cols, name='CATALOG')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my photometric catalog, I need a binary table HDU with the name 'CATALOG' containing these 2 stars' data: ID=['P1', 'P2'], MAG=[10.5, 11.7] mag, and ERROR=[0.2, 0.4] mag."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncols = [\n    fits.Column(name='ID', format='2A', array=np.array(['P1', 'P2'])),\n    fits.Column(name='MAG', format='E', unit='mag', array=np.array([10.5, 11.7])),\n    fits.Column(name='ERROR', format='E', unit='mag', array=np.array([0.2, 0.4]))\n]hdu = fits.BinTableHDU.from_columns(cols, name='CATALOG')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.modeling.models.Multiply to divide an image by a factor?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.models import Multiply\n\n# Define a multiply model\nm = Multiply(factor=0.5)\n\n# Use the model to divide an image\nimage = np.random.rand(100, 100)\nresult = m(image)\n\nprint(result)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement Bayesian Blocks for a binned event data?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, fitness='events', p0=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement Bayesian Blocks for measured point data with regular errors?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, sigma, fitness='measures')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement Bayesian Blocks for regular event data?"
      },
      {
        "from": "assistant",
        "value": "bayesian_blocks(t, x, fitness='regular_events', dt=dt)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I merge two tables by combining rows based on matching conditions?"
      },
      {
        "from": "assistant",
        "value": "table1.join(table2, keys='key', join_type='inner')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with temperature data of a planet and need to enhance the contrast between different brightness levels. How can I implement a sqrt stretch with proper normalization?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import SqrtStretch, ImageNormalize\n\ndata = np.random.normal(100, 15, size=(100, 100))\nnorm = ImageNormalize(\n    data,\n    stretch=SqrtStretch(),\n    vmin=np.percentile(data, 1),    # Clip bottom 1% to remove noise\n    vmax=np.percentile(data, 99)    # Clip top 1% to handle bright sources\n)\nstretched_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with brightness data of a galaxy and need to enhance the contrast between different brightness levels. How can I implement a sqrt stretch with proper normalization?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import SqrtStretch, ImageNormalize\n\ndata = np.random.normal(100, 15, size=(100, 100))\nnorm = ImageNormalize(\n    data,\n    stretch=SqrtStretch(),\n    vmin=np.percentile(data, 1),    # Clip bottom 1% to remove noise\n    vmax=np.percentile(data, 99)    # Clip top 1% to handle bright sources\n)\nstretched_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with magnitude data of a star and need to enhance the contrast between different brightness levels. How can I implement a sqrt stretch with proper normalization?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import SqrtStretch, ImageNormalize\n\ndata = np.random.normal(100, 15, size=(100, 100))\nnorm = ImageNormalize(\n    data,\n    stretch=SqrtStretch(),\n    vmin=np.percentile(data, 1),    # Clip bottom 1% to remove noise\n    vmax=np.percentile(data, 99)    # Clip top 1% to handle bright sources\n)\nstretched_data = norm(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a box profile centered at 4000 Angstroms with a width of 5 Angstroms and amplitude of 1.5? Can you show me how to create and plot this using Box1D using astropy?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a box profile centered at 6000 Angstroms with a width of 10 Angstroms and amplitude of 3.0? Can you show me how to create and plot this using Box1D using astropy?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a box profile centered at 3000 Angstroms with a width of 20 Angstroms and amplitude of 2.0? Can you show me how to create and plot this using Box1D using astropy?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a Gaussian and a Lorentzian profile simultaneously?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import Gaussian1D, Lorentzian1D\n\n# Create sample spectrum data (replace with your actual data)\nx = np.linspace(-50, 50, 1000)\nnoise = np.random.normal(0, 0.1, x.size)\n\ndef Gaussian(x, amp, mean, std):\n    return amp * np.exp(-(x - mean)**2 / (2 * std**2))\n\ndef Lorentzian(x, amp, mean, fwhm):\n    return amp * fwhm**2 / (4 * np.pi * ((x - mean)**2 + fwhm**2 / 4))\n\n# Create synthetic spectrum with a Gaussian and a Lorentzian profile\ntrue_model = Gaussian(x, 1, 0, 2) + Lorentzian(x, 0.5, -2, 1)\ny = true_model + noise\n\n# Initialize model with initial guesses for parameters\ninit_model = Gaussian(x, 1.5, -1, 1.5) + Lorentzian(x, 0.8, 1, 1.2)\n\n# Create fitter and perform the fit\nfitter = fitting.SimplexLSQFitter()\nbest_fit = fitter(init_model, x, y)\n\n# Print fitted parameters for each component\nprint('Gaussian parameters:', best_fit.models[0].params)\nprint('Lorentzian parameters:', best_fit.models[1].params)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux ratio of 10 to a magnitude difference using astropy's mag unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the flux ratio\nflux_ratio = 10\n\n# Convert flux ratio to magnitude difference\n\n# Using the relation: m1 - m2 = -2.5 * log10(F1/F2)\nmag_diff = -2.5 * np.log10(flux_ratio) * u.mag\n\n# Print result\nprint(f'A flux ratio of {flux_ratio:.3f} corresponds to a magnitude difference of {mag_diff:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a magnitude difference of 1.5 to a flux ratio using astropy's mag unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the magnitude difference\nmag_diff = 1.5 * u.mag\n\n# Convert magnitude difference to flux ratio\n\n# Using the relation: m1 - m2 = -2.5 * log10(F1/F2)\nflux_ratio = 10**(-mag_diff/(2.5 * u.mag))\n\n# Print result\nprint(f'A magnitude difference of {mag_diff} corresponds to a flux ratio of {flux_ratio:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux ratio of 100 to a magnitude difference using astropy's mag unit?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the flux ratio\nflux_ratio = 100\n\n# Convert flux ratio to magnitude difference\n\n# Using the relation: m1 - m2 = -2.5 * log10(F1/F2)\nmag_diff = -2.5 * np.log10(flux_ratio) * u.mag\n\n# Print result\nprint(f'A flux ratio of {flux_ratio:.3f} corresponds to a magnitude difference of {mag_diff:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to define a new unit called \"stellar_mass\" that equals 10^30 kg with SI prefixes."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define a custom unit for stellar masses\nstellar_mass = u.def_unit('stellar_mass', 1e30 * u.kg, \n    doc='''\n    Unit representing a characteristic mass scale for stars (1 stellar_mass = 10^30 kg).\n\n    The mass of a star can range from about 0.2 stellar_mass (0.02 solar masses) for small red dwarfs\n    to over 100 stellar_mass (100,000 solar masses) for extremely massive stars.\n    ''')\n\n# Register the unit for use with SI prefixes (kilo, mega, etc.)\n#u.add_enabled_units([stellar_mass]) # commented out as it is not necessary for the unit to be enabled\n\n# Example usage\nmass = 50 * stellar_mass  # A star with mass 5e32 kg\nprint(f'Mass in stellar_mass: {mass}')\nprint(f'Mass in kg: {mass.to(u.kg)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to define a new unit called \"distance_km\" that equals 1000 m with SI prefixes."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define a custom unit for distances\ndistance_km = u.def_unit('distance_km', 1000 * u.m, \n    doc='''\n    Unit representing a characteristic distance scale in kilometers (1 distance_km = 1000 m).\n\n    Distances between objects in the universe can range from less than 1 distance_km (1000 m) for subatomic particles\n    to billions of distance_km (billion km) for intergalactic distances.\n    ''')\n\n# Register the unit for use with SI prefixes (kilo, mega, etc.)\nu.add_enabled_units([distance_km])\n\n# Example usage\ndistance = 50000 * distance_km  # A distance of 50,000 km\nprint(f'Distance in distance_km: {distance}')\nprint(f'Distance in m: {distance.to(u.m)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to define a new unit called \"time_second\" that equals 1 s with SI prefixes."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ndefine a new unit for times\nTime_second = u.def_unit('time_second', u.s, \n    doc='''\n    Unit representing a characteristic time scale in seconds (1 time_second = 1 s).\n\n    Times can range from less than 1 time_second (1 s) for atomic vibrations\n    to billions of time_second (billion s) for cosmic timescales.\n    ''')\n\n# Register the unit for use with SI prefixes (kilo, mega, etc.)\nu.add_enabled_units([time_second])\n\n# Example usage\ntime = 365.25 * time_second  # A time of 1 year\nprint(f'Time in time_second: {time}')\nprint(f'Time in s: {time.to(u.s)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set up a PrecessedGeocentric frame with position (RA=300.2 deg, Dec=-20.1 deg), proper motion (pm_ra_cosdec=120.5 mas/yr, pm_dec=-150.8 mas/yr), and radial velocity (13.2 km/s) for observations from Mauna Kea on 2023-02-20 12:30:00 UT?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric, SkyCoord, EarthLocation\nfrom astropy.time import Time\nimport astropy.units as u\n\ngreenwich = EarthLocation.of_site('mauna kea')  # Get Mauna Kea observatory location\nequinox = Time('2023-02-20 12:30:00')  # Set up observation time and equinox\nstar = SkyCoord(ra=300.2*u.deg, dec=-20.1*u.deg, distance=200*u.pc, pm_ra_cosdec=120.5*u.mas/u.yr, pm_dec=-150.8*u.mas/u.yr, radial_velocity=13.2*u.km/u.s)\nframe = PrecessedGeocentric(equinox, obsgeoloc=greenwich.get_gcrs(equinox).cartesian)\nstar.transform_to(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the process to use QTable in astropy.table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nprint(QTable())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a QTable with custom column names and units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\nqtable = QTable([('Value1', 1*u.m), ('Value2', 2*u.s)], names=['Name1', 'Name2'])\nprint(qtable)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between QTable and Table in astropy.table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable, Table\nprint(QTable() == Table())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the circular standard deviation of Martian wind direction data using the 'angular' method."
      },
      {
        "from": "assistant",
        "value": "circstd(wind_data['spring'], method='angular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am interested in knowing the circular standard deviation of Martian wind direction data using the 'circular' method"
      },
      {
        "from": "assistant",
        "value": "circstd(wind_data['summer'], method='circular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the circular standard deviation of Martian wind direction data using the 'angular' method"
      },
      {
        "from": "assistant",
        "value": "circstd(wind_data['fall'], method='angular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the number of trials in a binomial distribution with a 90% confidence interval?"
      },
      {
        "from": "assistant",
        "value": "n = 100"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the binomial proportion confidence interval with a flat prior?"
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(50, 100, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the lower and upper limit of the 90% confidence interval for a binomial distribution with 60 successes out of 100 trials?"
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(60, 100, confidence_level=0.9, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with polarimetry data and noticed that the Stokes I parameter is not correctly computed. How can I correctly compute Stokes I from the intensity and polarization angle using the formula I = I0 * (1 + cos(2*\u03b3) / 2) ?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.coordinates import SkyCoord\nimport numpy as np\n\ndef compute_stokes_i(intensity, polarization_angle):\n    # Convert polarization angle to radians\n    polarization_angle_rad = np.radians(polarization_angle)\n\n    # Compute Stokes I using the formula\n    stokes_i = intensity * (1 + np.cos(2 * polarization_angle_rad) / 2)\n\n    return stokes_i"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Gaussian model for a star system with a mean of 100 and a standard deviation of 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\ngauss = models.Gaussian1D(mean=100, stddev=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Hey I want to measure the variation in stars within the same galaxy but different directions on the sky. How can I properly characterize this variation mathematically?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats, mad_std"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you tell me how i can get the median absolute deviation of an array of values with some outliers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to measure the variation in the velocity distribution of stars within the same galaxy. Can you tell me how I can do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats, mad_std"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a model to some data and I want to add a parameter that represents the amplitude of a sinusoidal function. How can I define this parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Fittable1DModel\nfrom astropy import units as u\nclass MyModel(Fittable1DModel):\n    amplitude = Parameter(name='amplitude', default=1.0, unit=u.mag, bounds=(0.1, 10.0), description='Amplitude of the sinusoidal function')\n    def evaluate(self, x, amplitude):\n        return np.sin(x) * amplitude\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to define a parameter that represents the phase of a sinusoidal function. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import Parameter, Fittable1DModel\nfrom astropy import units as u\nclass MyModel(Fittable1DModel):\n    phase = Parameter(name='phase', default=0.0, unit=u.rad, bounds=(0.0, 2 * np.pi), description='Phase of the sinusoidal function')\n    def evaluate(self, x, phase):\n        return np.sin(x + phase)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in the energy equivalent of a certain mass. Can you demonstrate how to use the mass_energy equivalence pair to convert 10 kg to energy in Joules?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.mass_energy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Could you show me how to use the mass_energy equivalence pair to convert 0.01 solar masses to energy in ergs?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.mass_energy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the energy equivalent of 100 g in Joules using the mass_energy equivalence pair?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.equivalencies.mass_energy"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply a logarithmic stretch to an image in Matplotlib for better visibility of both bright and faint objects?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch, ImageNormalize\nimage_data = np.array([[1, 2], [3, 4]])\nnorm = ImageNormalize(image_data, stretch=LogStretch())\nplt.imshow(image_data, norm=norm, cmap='viridis')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to highlight specific features in an image by setting a custom minimum and maximum values for the normalization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize\nimage_data = np.array([[1, 2], [3, 4]])\nnorm = ImageNormalize(image_data, vmin=1, vmax=3)\nplt.imshow(image_data, norm=norm, cmap='viridis')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove outliers in an image by clipping the data values to a certain range?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize\nimage_data = np.array([[1, 2], [3, 4]])\nnorm = ImageNormalize(image_data, clip=True)\nplt.imshow(image_data, norm=norm, cmap='viridis')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mass of the Earth in kg?"
      },
      {
        "from": "assistant",
        "value": "earthMass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the luminosity of the Sun in W?"
      },
      {
        "from": "assistant",
        "value": "solLum"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the radius of the Sun in m?"
      },
      {
        "from": "assistant",
        "value": "solRad"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my globular cluster observation data (a 512x512 array with values 0-65535), I need to create a ZScale visualization that's less aggressive in excluding outliers. How do I set up ZScaleInterval with a higher contrast of 0.4 and reduced krej of 2.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\n\ndata = np.random.randint(0, 65536, size=(512, 512))\nzscale = ZScaleInterval(contrast=0.4, krej=2.0)\nvmin, vmax = zscale.get_limits(data)\nprint(f\"ZScale limits - Min: {vmin:.1f}, Max: {vmax:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I obtain the position and angle of the Sun at a specific time and location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, SolarSystem, FK4, SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create Earth location\nloc = EarthLocation(lat=48.8566 * u.deg, lon=2.3522 * u.deg, height=35 * u.m)\n\n# Create time\ntime = Time('2022-07-01 12:00:00', format='iso', scale='utc')\n\n# Create SolarSystem and get Sun's position\nss = SolarSystem(time=time, location=loc)\nss_sun = ss['sun']\n\n# Create SkyCoord and get Sun's position and angle\nsc = SkyCoord(ra=ss_sun.ra, dec=ss_sun.dec, frame=FK4, equinox='B1950', obstime=time)\nprint(sc)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an FK5 coordinate object with position and proper motion data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create FK5 coordinates with position and proper motion\n# Using example coordinates for SN 1054 (Crab Nebula) in FK5 frame\nsn_coords = SkyCoord(\n    ra='05h34m31.94s',\n    dec='22d00m52.2s',\n    pm_ra_cosdec=10 * u.mas/u.yr,\n    pm_dec=20 * u.mas/u.yr,\n    frame=FK5,\n    equinox='J2000',\n    obstime=Time('2022-07-01', scale='utc')\n)\n\n# Print the coordinates in FK5 system\nprint(f'FK5 Coordinates: RA: {sn_coords.ra}, Dec: {sn_coords.dec}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an FK5 coordinate object with position, proper motion, and radial velocity data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Create FK5 coordinates with position, proper motion, and radial velocity\n# Using example coordinates for SN 1054 (Crab Nebula) in FK5 frame\nsn_coords = SkyCoord(\n    ra='05h34m31.94s',\n    dec='22d00m52.2s',\n    pm_ra_cosdec=10 * u.mas/u.yr,\n    pm_dec=20 * u.mas/u.yr,\n    radial_velocity=1000 * u.km/u.s,\n    frame=FK5,\n    equinox='J2000',\n    obstime=Time('2022-07-01', scale='utc')\n)\n\n# Print the coordinates in FK5 system\nprint(f'FK5 Coordinates: RA: {sn_coords.ra}, Dec: {sn_coords.dec}, Radial Velocity: {sn_coords.radial_velocity}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the position of a given object in the geocentric true ecliptic coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, GeocentricTrueEcliptic, EarthLocation\nfrom astropy.time import Time\nfrom astropy import units as u\n\nearth_location = EarthLocation.of.Variable('{latitude}', '{longitude}')\nlla = earth_location.geocentric\nnow = Time.now()\nlla = GeocentricTrueEcliptic(equinox=now, obstime=now, representation_type='cartesian', differential_type={}, distance=1000 * u.km)\nprint(lla)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the requirements for astropy.coordinates.GeocentricTrueEcliptic to transform from ICRS to geocentric true ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, GeocentricTrueEcliptic\nfrom astropy.time import Time\n\nequinox = Time('2000-01-01T12:00:00.000', format='isot', scale='utc')\nnea_icrs = ICRS(ra=150.23*u.degree, dec=32.91*u.degree, distance=1000 * u.km)\nnea_ecliptic = nea_icrs.transform_to(GeocentricTrueEcliptic(equinox=equinox))\nprint(lla)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe the parameters needed to "
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, GeocentricTrueEcliptic\nfrom astropy.time import Time\n\nequinox = Time('2000-01-01T12:00:00.000', format='isot', scale='utc')\nnea_icrs = ICRS(ra=150.23*u.degree, dec=32.91*u.degree)\nnea_ecliptic = nea_icrs.transform_to(GeocentricTrueEcliptic(equinox=equinox))\nprint(lla)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Download the Open Exoplanet Catalogue for Kepler-62e from the Open Exoplanet Catalogue website."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define Kepler-62f location\nkepler62f = EarthLocation(lat=49.3048*u.deg,\n                           lon=328.6590*u.deg,\n                           height=0*u.m)\n\n# Create target position in AltAz frame\n# Note: az=0 is North, increases clockwise (90 is East)\ntarget = SkyCoord(alt=30*u.deg, az=45*u.deg,\n                  frame=AltAz(obstime=Time.now(),\n                             location=kepler62f,\n                             pressure=0*u.hPa))  # Zero pressure removes refraction\n\n# Check if target is above horizon (alt > 0)\nis_visible = target.alt.deg > 0\n\nprint(f\"Target position: alt={target.alt:.2f}, az={target.az:.2f}\")\nprint(f\"Is target currently visible? {is_visible}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the right ascension and declination of the star Alpha Centauri in the J2000 epoch."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\n# Create target position in equatorial frame\n# Note: ra=0 is J2000 epoch, dec=0 is equatorial frame\ntarget = SkyCoord(ra=14.65004*u.hour, dec=-60.83342*u.deg,\n                  frame='icrs')\n\n# Print the target position in the ICRS frame\nprint(target)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model the diffraction pattern of a telescope with a diameter of 8 meters and a wavelength of 500 nanometers."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Simulate the diffraction pattern of a binary star system with stars of magnitudes 5 and 10."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import AiryDisk2D, Box2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model of the diffraction pattern of a telescope with a circular aperture and a central obstruction."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import CircularCircularAperture, annulus"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal histogram bin width using Scott's rule for an array of galaxy redshifts?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(redshifts, return_bins=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Gaussian1D model and I want to multiply it by 2.5 to scale it. How can I do this using Multiply?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling import models\n\n# Create a Gaussian1D model with some example parameters\ngaussian_model = models.Gaussian1D(amp=10, mean=5, sigma=1)\n\n# Create scalar model for scaling factor\nscaling = models.Const1D(amplitude=2.5)\n\n# Multiply the Gaussian by the scaling factor\nfinal_model = models.Multiply()(gaussian_model, scaling)\n\n# Example of evaluating the model at some x values\nimport numpy as np\nx = np.linspace(0, 10, 100)\ny = final_model(x)  # This will give the scaled line profile"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a gaussian kernel with a standard deviation of 2.0 and a size of 5x5. Please show me how to do this using Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\n\n# Create a 5x5 Gaussian kernel with \u03c3=2.0\nkernel = Gaussian2DKernel(stddev=2.0, x_size=5, y_size=5)\n\n# Check the shape of the kernel\nprint(kernel.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have data from asteroid positions in cartesian coordinates (x=0.5, y=1.1, z=0.4) AU. How can I convert these to spherical coordinates to better visualize their orbital characteristics?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nr, lat, lon = cartesian_to_spherical(x=0.5*u.AU, y=1.1*u.AU, z=0.4*u.AU)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Moffat profile with an amplitude of 1000, a core width of 2.5, a power index of 3.5, and a position at (1, 1)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.stats import gaussian_sigma_to_fwhm\nimport numpy as np\n\nmoffat_model = models.Moffat2D(amplitude=1000, x_0=1, y_0=1, gamma=2.5, alpha=3.5)\nprint(moffat_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Moffat profile with an amplitude of 500, a core width of 1.5, a power index of 2.5, and a position at (2, 2)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.stats import gaussian_sigma_to_fwhm\nimport numpy as np\n\nmoffat_model = models.Moffat2D(amplitude=500, x_0=2, y_0=2, gamma=1.5, alpha=2.5)\nprint(moffat_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Moffat profile with an amplitude of 2000, a core width of 3.0, a power index of 4.0, and a position at (3, 3)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.stats import gaussian_sigma_to_fwhm\nimport numpy as np\n\nmoffat_model = models.Moffat2D(amplitude=2000, x_0=3, y_0=3, gamma=3.0, alpha=4.0)\nprint(moffat_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you create a 1D Gaussian filter kernel with a standard deviation of 2?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of increasing the standard deviation of a Gaussian filter kernel?"
      },
      {
        "from": "assistant",
        "value": "Increasing the standard deviation of a Gaussian filter kernel increases the smoothing strength of the filter"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you create a 1D Gaussian filter kernel with a standard deviation of 1 and an oversampling factor of 5?"
      },
      {
        "from": "assistant",
        "value": "Gaussian1DKernel(stddev=1, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 2D Moffat profile with a core width of 1.5 and power index of 2.5"
      },
      {
        "from": "assistant",
        "value": "moffat = astropy.modeling.models.Moffat2D(amplitude=1.0, x_0=50, y_0=50, gamma=1.5, alpha=2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 2D Moffat profile with a core width of 2.0 and power index of 3.0"
      },
      {
        "from": "assistant",
        "value": "moffat = astropy.modeling.models.Moffat2D(amplitude=1.0, x_0=50, y_0=50, gamma=2.0, alpha=3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D Moffat profile with a core width of 1.0 and power index of 2.0"
      },
      {
        "from": "assistant",
        "value": "moffat = astropy.modeling.models.Moffat2D(amplitude=1.0, x_0=50, y_0=50, gamma=1.0, alpha=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the Kuiper statistic to test if my observed galaxy distribution follows a uniform distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper; from scipy.stats import uniform; import numpy as np\n\ndata = np.random.uniform(0, 10, 1000); cdf = uniform.pdf; D, p_value = kuiper(data, cdf);\nprint(f'Kuiper statistic D: {D:.3f}'); print(f'P-value: {p_value:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the Kuiper statistic to test if my observed star magnitudes follow a normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper; from scipy.stats import norm; import numpy as np\n\ndata = np.random.normal(0, 1, 1000); cdf = norm.cdf; D, p_value = kuiper(data, cdf);\nprint(f'Kuiper statistic D: {D:.3f}'); print(f'P-value: {p_value:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the Kuiper statistic to test if my observed planet temperatures follow an exponential distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper; from scipy.stats import expon; import numpy as np\n\ndata = np.random.exponential(1, 1000); cdf = expon.cdf; D, p_value = kuiper(data, cdf);\nprint(f'Kuiper statistic D: {D:.3f}'); print(f'P-value: {p_value:.3e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to append a bias frame correction array (shape: 2048x2048) to an existing master calibration FITS file. The bias frame was taken at -60\u00b0C with 100 seconds exposure. Show the code with appropriate header keywords."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ndark_array = np.zeros((2048, 2048))  # Replace with actual dark frame data\n\ncard escrip_pathfnname = {'EXTNAME': 'BIAS', 'EXPTIME': 100.0, 'TEMP': -60.0, 'DATE-OBS': '2024-02-10', 'FRAMTYPE': 'Bias'}\n# Open existing master calibration file\nwith fits.open('master_calibration.fits', mode='append') as hdul:\n    # Create header for dark frame\n    dark_hdr = fits.Header()\n    for card in card escrip_pathfnname.items():\n        dark_hdr.append(card)\n\n    # Create new image HDU with dark frame and header\n    dark_hdu = fits.ImageHDU(data=dark_array, header=dark_hdr)\n\n    # Append the dark frame as new extension\n    hdul.append(dark_hdu)\n\n    # Write changes back to file\n    hdul.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply an asinh stretch to my radio galaxy data to emphasize the jet structures and increase the contrast between the lobes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nc = AsinhStretch(a=0.1)\nnorm = ImageNormalize(data, stretch=c, vmin=np.percentile(data, 1), vmax=np.percentile(data, 99.5))\nplt.figure(figsize=(10, 8))\nplt.imshow(data, norm=norm, cmap='cubehelix', origin='lower')\nplt.colorbar(im, label='Intensity')\nplt.title('Simulated Radio Galaxy - Asinh Contrast')\nplt.xlabel('RA (pixels)')\nplt.ylabel('Dec (pixels)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D array of size 100x100 with values ranging from 0 to 1000, with units in ADU (Analog-to-Digital Units)."
      },
      {
        "from": "assistant",
        "value": "data_2d = np.random.uniform(0, 1000, size=(100, 100))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3D array of size 10x10x10 with values ranging from 0 to 1000, with units in ADU (Analog-to-Digital Units)."
      },
      {
        "from": "assistant",
        "value": "data_3d = np.random.uniform(0, 1000, size=(10, 10, 10))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 1D array of size 100 with values ranging from 0 to 1000, with units in ADU (Analog-to-Digital Units)."
      },
      {
        "from": "assistant",
        "value": "data_1d = np.random.uniform(0, 1000, size=100)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectrum of a galaxy:"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\n\n# List of flux values\nflux = [1.0, 2.0, 3.0, 4.0, 5.0]\n\n# Calculate biweight midvariance\nbiweight_midvariance = biweight_midvariance(flux)\n\nprint(f\"Biweight midvariance: {biweight_midvariance:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert between frequency and energy units using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define a frequency in Hz\nfrequency = 1e14 * u.Hz\n\n# Convert frequency to energy (\u00b11 Hartrees)\nenergy = frequency * u.hplanck\nprint(f'Frequency {frequency} = Energy {energy}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to transform from Barycentric Dynamical Time (TDB) to Terrestrial Time (TT)?"
      },
      {
        "from": "assistant",
        "value": "_"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the position of a planet in the solar system at a given time?"
      },
      {
        "from": "assistant",
        "value": "As expected."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a set of ecliptic coordinates (longitude, latitude) to cartesian coordinates (x, y, z)?"
      },
      {
        "from": "assistant",
        "value": "tf.py"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of pixel values from a CCD camera. Show me how to normalize this data using "
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LogStretch\ncamera_data = np.random.uniform(0, 65535, (1024, 1024))\nnorm_camera_data = ImageNormalize(camera_data, stretch=LogStretch())\nplt.figure(figsize=(8, 6))\nplt.imshow(camera_data, norm=norm_camera_data, cmap='viridis')\nplt.colorbar(label='Normalized Pixel Values')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 1D array of flux values from a spectrum. Show me how to normalize this data using AsymmetricalPercentileInterval and NonlinearStretch."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import AsymmetricalPercentileInterval, NonlinearStretch\nspectrum_fluxes = np.random.uniform(1e-15, 1e-11, 1000)\ninterval = AsymmetricalPercentileInterval(perc_1=1, perc_2=99)\nnorm_spectrum_data = ImageNormalize(spectrum_fluxes, stretch=NonlinearStretch(), interval=interval)\nplt.figure(figsize=(8, 6))\nplt.plot(spectrum_fluxes, norm_spectrum_data(spectrum_fluxes))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of image data from a telescope. Show me how to normalize this data using MinMaxInterval and PowerStretch."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, PowerStretch, MinMaxInterval\ntelescope_data = np.random.uniform(0, 1, (512, 512))\ninterval = MinMaxInterval()\nnorm_telescope_data = ImageNormalize(telescope_data, stretch=PowerStretch(), interval=interval)\nplt.figure(figsize=(8, 6))\nplt.imshow(telescope_data, norm=norm_telescope_data, cmap='viridis')\nplt.colorbar(label='Normalized Image Data')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model a complex astrophysical phenomenon using a combination of different models?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\nt = np.linspace(0, 10, 100)\n# Create a polynomial model\npoly_model = models.Polynomial1D(degree=5)\n# Create a sinusoidal model\nsin_model = models.Sine1D(amplitude=1, frequency=2)\n# Combine the models\ncombined_model = poly_model + sin_model\n\n# Fit the combined model to some data\nfitter = fitting.LevMarLSQFitter()\ndata = np.sin(2 * np.pi * t) + np.random.normal(0, 0.1, len(t))\nfit = fitter(combined_model, t, data)\n\n# Get the fitted parameters\nparams = fit.parameters\nprint(params)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the `astropy.modeling.models.Polynomial1D` function to fit a quadratic curve to some data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\nt = np.linspace(0, 10, 100)\n# Create a quadratic model\nquad_model = models.Polynomial1D(degree=2)\n# Fit the quadratic model to some data\nfitter = fitting.LevMarLSQFitter()\ndata = np.sin(2 * np.pi * t) + np.random.normal(0, 0.1, len(t))\nfit = fitter(quad_model, t, data)\n\n# Get the fitted parameters\nparams = fit.parameters\nprint(params)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model a non-linear relationship using a combination of different models in astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\nt = np.linspace(0, 10, 100)\n# Create a polynomial model\npoly_model = models.Polynomial1D(degree=5)\n# Create a logarithmic model\ncos_model = models.Cosine1D(amplitude=1, period=2)\n# Combine the models\ncombined_model = poly_model + cos_model\n\n# Fit the combined model to some data\nfitter = fitting.LevMarLSQFitter()\ndata = np.cos(2 * np.pi * t) + np.random.normal(0, 0.1, len(t))\nfit = fitter(combined_model, t, data)\n\n# Get the fitted parameters\nparams = fit.parameters\nprint(params)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use pixel_to_skycoord to perform a sky coordinate conversion for a set of pixel coordinates (100, 200) with origin=0 and mode='all' using my WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord, SkyCoord\nwcs = WCS(hdr)\nskycoord = wcs.pixel_to_skycoord(100, 200, origin=0, mode='all')\nprint(skycoord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Voigt profile with a Lorentzian amplitude of 10 and a full width at half maximum of 0.5?"
      },
      {
        "from": "assistant",
        "value": "v = Voigt1D(x_0=1.0, amplitude_L=10.0, fwhm_L=0.5, fwhm_G=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between the Voigt profile and the complex error function?"
      },
      {
        "from": "assistant",
        "value": "The Voigt function is calculated as the real part of the complex error function computed from either Humlicek's rational approximations or the wofz function."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Voigt profile with a Gaussian full width at half maximum of 0.9 and a method of 'Scipy'?"
      },
      {
        "from": "assistant",
        "value": "v = Voigt1D(x_0=1.0, amplitude_L=10.0, fwhm_L=0.5, fwhm_G=0.9, method='Scipy')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with inner radius=12, width=5 pixels using 'oversample' mode, and display it with both a colorbar and proper axis labels."
      },
      {
        "from": "assistant",
        "value": "{'inner_radius': 12, 'width': 5, 'mode': 'oversample'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with inner radius=10, width=4 pixels using 'linear_interp' mode, and display it with both a colorbar and proper axis labels."
      },
      {
        "from": "assistant",
        "value": "{'inner_radius': 10, 'width': 4, 'mode': 'linear_interp'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with inner radius=8, width=3 pixels using 'center' mode, and display it with both a colorbar and proper axis labels."
      },
      {
        "from": "assistant",
        "value": "{'inner_radius': 8, 'width': 3, 'mode': 'center'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the effect of the radius of the Airy disk on the intensity of the diffraction pattern. Can you create a plot that shows the intensity of the Airy disk as a function of the radius of the Airy disk, with the amplitude fixed at 1 and the x and y positions of the maximum of the Airy function fixed at 0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\n# Set up the grid\nsize = 100\nr = np.linspace(0, 10, size)\n\n# Create Airy disk model with amplitude=1, x_0=0, y_0=0 (center)\ntest = AiryDisk2D(amplitude=1, x_0=0, y_0=0, radius=r)\n\n# Calculate the intensity of the Airy disk\nintensity = test.rho(r)\n\n# Create the plot\nplt.figure()\nplt.plot(r, intensity)\nplt.xlabel('Radius of Airy disk')\nplt.ylabel('Intensity')\nplt.title('Intensity of Airy Disk vs Radius')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the effect of the amplitude of the Airy disk on the intensity of the diffraction pattern. Can you create a plot that shows the intensity of the Airy disk as a function of the amplitude, with the radius of the Airy disk fixed at 1 and the x and y positions of the maximum of the Airy function fixed at 0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\n# Set up the grid\nsize = 100\namplitude = np.linspace(0, 10, size)\n\n# Create Airy disk model with radius=1, x_0=0, y_0=0 (center)\ntest = AiryDisk2D(amplitude=amplitude, x_0=0, y_0=0, radius=1)\n\n# Calculate the intensity of the Airy disk\nintensity = test.rho(1)\n\n# Create the plot\nplt.figure()\nplt.plot(amplitude, intensity)\nplt.xlabel('Amplitude of Airy disk')\nplt.ylabel('Intensity')\nplt.title('Intensity of Airy Disk vs Amplitude')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the effect of the x position of the maximum of the Airy function on the intensity of the diffraction pattern. Can you create a plot that shows the intensity of the Airy disk as a function of the x position of the maximum of the Airy function, with the amplitude fixed at 1, the radius of the Airy disk fixed at 1, and the y position of the maximum of the Airy function fixed at 0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\n\n# Set up the grid\nsize = 100\nx_0 = np.linspace(-10, 10, size)\n\n# Create Airy disk model with amplitude=1, y_0=0, radius=1\nairy = AiryDisk2D(amplitude=1, x_0=x_0, y_0=0, radius=1)\n\n# Calculate the intensity of the Airy disk\nintensity = 1 - np.maximum.reduce(airy.rho(np.meshgrid(x_0, np.zeros(size))[:, 0, None]))\n\n# Create the plot\nplt.figure()\nplt.plot(x_0, intensity[:, 0])\nplt.xlabel('X position of maximum of Airy function')\nplt.ylabel('Intensity')\nplt.title('Intensity of Airy Disk vs X Position')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the syntax for using the `fwhm_to_sigma` function from Astropy to convert an FWHM value to its corresponding sigma value?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fwhm_to_sigma"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a spectral line data with FWHM value of 3.5"
      },
      {
        "from": "assistant",
        "value": "fwhm_to_sigma(3.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use `fwhm_to_sigma` to convert multiple FWHM values at once?"
      },
      {
        "from": "assistant",
        "value": "fwhm_to_sigma([3.5, 2.1, 4.8])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of temperatures [23.5, 45.2, 12.1, 89.4, 56.7, 34.9] for a weather forecast. How can I create a MaskedColumn named 'temperature' where I manually specify that the 2nd and 4th measurements (indices 1 and 3) are questionable and should be masked?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\ncol = MaskedColumn(data=[23.5, 45.2, 12.1, 89.4, 56.7, 34.9], name='temperature', mask=[False, True, False, True, False, False])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of planet masses [5.972e24, 1.089e27, 6.4171e23, 3.3022e23] for the planets in our solar system. How can I create a MaskedColumn named 'mass' where I manually specify that the 3rd measurement (index 2) is questionable and should be masked?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\ncol = MaskedColumn(data=[5.972e24, 1.089e27, 6.4171e23, 3.3022e23], name='mass', mask=[False, False, True, False])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of star luminosities [2.5e31, 1.127e32, 1.547e32, 3.2e32, 2.1e32, 4.8e32] for a certain galaxy. How can I create a MaskedColumn named 'luminosity' where I manually specify that the 4th and 5th measurements (indices 3 and 4) are questionable and should be masked?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\ncol = MaskedColumn(data=[2.5e31, 1.127e32, 1.547e32, 3.2e32, 2.1e32, 4.8e32], name='luminosity', mask=[False, False, False, True, True, False])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I extract data from a FITS file named 'image.fits' containing a extension named 'SCI'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngetdata('image.fits', extname='SCI')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D Gaussian filter kernel with a standard deviation of 1.0 in both x and y directions using the 'oversample' mode with a factor of 5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nGaussian2DKernel(x_stddev=1.0, y_stddev=1.0, mode='oversample', factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I transform a list of pulsar coordinates from ICRS to Galactic, while preserving their radial velocity information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galactic\nimport astropy.units as u\n\n# Sample pulsar data (ra, dec, distance, radial_velocity)\npulsars = [...]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to use astropy.stats sigma_clipped_stats to calculate the mean, median, and standard deviation of a dataset of 10000 points, with a 3-sigma clipping limit."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats\nimport numpy as np\n\ndata = np.random.normal(0, 1, 10000)\nmean, median, stddev = sigma_clipped_stats(data, sigma=3)\ncalculate_sigma_clipped_stats(data, sigma=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "In your exoplanet transit analysis, you need to calculate the mean and standard deviation for a Huell dataset with a 2-sigma clipping limit and maximum 10 iterations. Use astropy SigmaClip."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import SigmaClip, sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please write a function that takes in an array of 5000 elements, and calculate the mean, median, and standard deviation of the array using 1-sigma clipping with a maximum of 10 iterations. Use astropy stats."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a model of Jupiter's ring system using Ring2D and plot it with matplotlib?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a model of Uranus's ring system using Ring2D and plot it with matplotlib?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a model of Neptune's ring system using Ring2D and plot it with matplotlib?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I plot a spectrum with Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization.quantity_support import quantity_support"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I plot a temperature map with Astropy?"
      },
      {
        "from": "assistant",
        "value": "True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I enable inverted y-axis for magnitude scale in a plot?"
      },
      {
        "from": "assistant",
        "value": "plt.gca().invert_yaxis()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert between Kelvin and Celsius"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.K, u.C = u.kelvin, u.celsius\nu.add_enabled_equivalencies([u.K, u.C])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert between meters and kilometers"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.metre, u.kilometre = u.m, u.km\nu.add_enabled_equivalencies([(u.metre, u.kilometre)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert between seconds and minutes"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.second, u.minute = u.s, u.min\nu.add_enabled_equivalencies([(u.second, u.minute)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Galactic coordinates are useful for analyzing the motion of stars in the solar neighborhood. How can I convert the position and velocity of a star from the ICRS system to the Galactic system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galactic\ngalactic_coord = SkyCoord(ra=10*u.degree, dec=20*u.degree, distance=100*u.pc)\ngalactic_coord_galactic = galactic_coord.transform_to('galactic')\nprint(galactic_coord_galactic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to analyze the kinematics of stars in the Milky Way. Can you show me how to calculate the velocity components of a star in the Galactic coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galactic\ngalactic_coord = SkyCoord(ra=10*u.degree, dec=20*u.degree, distance=100*u.pc, pm_ra_cosdec=1*u.mas/u.yr, pm_dec=2*u.mas/u.yr, radial_velocity=10*u.km/u.s)\ngalactic_coord_galactic = galactic_coord.transform_to('galactic')\ngalactic_velocity_components = galactic_coord_galactic Cartesian representatives\ngalactic_velocity_components\u0422\u041e = galactic_velocity_components._repreiaction\u2117\u00b0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to format a date and time using TimeISO's 'date_hm' subformat?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\nt = Time('2024-07-26 14:30:00', format='iso', out_subfmt='date_hm')\n\nt"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of galaxy sizes and I want to use a PercentileInterval to keep the central 60% of the values for analysis."
      },
      {
        "from": "assistant",
        "value": "{\"percentile\": 60.0, \"n_samples\": None}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a large image and I want to use a PercentileInterval to keep the central 90% of the pixel values for display."
      },
      {
        "from": "assistant",
        "value": "{\"percentile\": 90.0, \"n_samples\": None}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a large dataset of star luminosities and I want to use a PercentileInterval to keep the central 70% of the values for further analysis."
      },
      {
        "from": "assistant",
        "value": "{\"percentile\": 70.0, \"n_samples\": None}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new parameter for the dust extinction model called 'R_V' for the ratio of total to selective extinction, with a default value of 3.1 and a unit of magnitude."
      },
      {
        "from": "assistant",
        "value": "Parameter('R_V', default=3.1, unit=u.mag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new parameter for the dust extinction model called 'E(B-V)' for the color excess, with a default value of 0.1 and a unit of magnitude."
      },
      {
        "from": "assistant",
        "value": "Parameter('E(B-V)', default=0.1, unit=u.mag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new parameter for the dust extinction model called 'A_R' for the extinction at 0.6 microns, with a default value of 1.0 and a unit of magnitude."
      },
      {
        "from": "assistant",
        "value": "Parameter('A_R', default=1.0, unit=u.mag)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binary table with 3 columns: ID, NAME, and AGE, with 5 rows of data."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\ncol1 = fits.Column(name='ID', format='J', array=[1, 2, 3, 4, 5], unit=' ') \n col2 = fits.Column(name='NAME', format='20A', array=['John', 'Anna', 'Peter', 'Linda', 'Bart'], unit=' ') \n col3 = fits.Column(name='AGE', format='I', array=[25, 31, 42, 35, 28]) \ncoldefs = fits.ColDefs([col1, col2, col3])\ntbhdu = fits.BinTableHDU.from_columns(coldefs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to combine two Gaussian models to fit a double-peaked spectrum."
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a constant background to my total flux model?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of combining a sinusoidal model with a constant model?"
      },
      {
        "from": "assistant",
        "value": "{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the barycentric positions of Earth's Moon at 1-day intervals for the next 100 days?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body_barycentric\nimport numpy as np\nt_start = Time('2024-01-01')\ntimes = t_start + np.linspace(0, 100, 100) * u.day\nposition = get_body_barycentric('moon', times)\ny = position.y.value\n# your code here\nprint(y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from horsepower to watts?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable(units=True)\nprint(u.imperial.horsepower.to(u.watt))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance of 100 miles per hour to meters per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable(units=True)\ndistance = u.imperial.mile / u.hour\nprint(distance.to(u.meter / u.second))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from pounds to kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable(units=True)\npound = u.imperial.pound\nprint(pound.to(u.kilogram))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know how to use Sersic1D to create a model of a galaxy with a de Vaucouleurs profile. How can I plot the surface brightness of this model over a range of radii?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Sersic1D\nimport matplotlib.pyplot as plt\n\n# Create a Sersic1D model with a de Vaucouleurs profile\nmodel = Sersic1D(amplitude=10, r_eff=5, n=4)\n\n# Create a range of radii\nr = np.linspace(0, 10, 100)\n\n# Plot the surface brightness of the model\nplt.plot(r, model(r))\nplt.xlabel('Radius')\nplt.ylabel('Surface Brightness')\nplt.title('Sersic1D Model with de Vaucouleurs Profile')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I project a WCS onto the plane of intermediate world coordinates?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_scales(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of ignoring distortions in the transformation image plane->projection plane?"
      },
      {
        "from": "assistant",
        "value": "See note in the docstring of `astropy.wcs.utils.proj_plane_pixel_scales`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What units are the results returned by `astropy.wcs.utils.proj_plane_pixel_scales`?"
      },
      {
        "from": "assistant",
        "value": "See note in the docstring of `astropy.wcs.utils.proj_plane_pixel_scales`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.table to create a new table with only the last occurrence of each unique row, keeping only the 'name' and 'age' columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.table.unique import unique\n\n# Create sample data\nnames = ['name', 'age', 'city']\ndata = [['John', 25, 'New York'],\n        ['Jane', 30, 'Chicago'],\n        ['John', 25, 'New York'],\n        ['Jane', 30, 'Chicago'],\n        ['Bob', 35, 'Los Angeles']]\ntable = Table(data, names=names)\n\n# Use unique to keep only the last occurrence of each unique row\nunique_table = unique(table, keys=['name', 'age'], keep='last')\n\nprint(unique_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I scale a model using Astropy's Scale function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Scale\n# Example of scaling a model\nmodel = Simplex1D(1)\nscaled_model = Scale(factor=2)(model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the most distant object known in the universe?"
      },
      {
        "from": "assistant",
        "value": "The most distant object known in the universe is GN-z11, a galaxy that is approximately 13.4 billion light-years away. It is observed as it existed just 400 million years after the Big Bang. The discovery of GN-z11 was announced in 2016 by a team of astronomers using the Hubble Space Telescope and the W.M. Keck Observatory."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the median absolute deviation of a dataset using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import stats\nimport numpy as np\ndata = np.array([1, 2, 3, 4, 5])\nprint(stats.median_abs_deviation(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to multiply my transit model by a constant value. What's the best way to do this using the Multiply class from astropy.modeling.models?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Multiply(factor=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to combine two models by multiplying them together. How can I do this with the Multiply class?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Multiply(factor=models.Gaussian1D(amplitude=1, mean=0, stddev=1))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to incorporate a constant value into my transit model by multiplying it with the value. How do I do this with the Multiply class?"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Multiply(factor=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible uses of the Sine1D model in astronomy?"
      },
      {
        "from": "assistant",
        "value": "The Sine1D model can be used to describe a variety of phenomena in astronomy, such as the brightness variations of pulsating stars, the motion of celestial bodies in a binary system, or the oscillations of a guitar string. It can also be used to model the interference patterns in optical phenomena like diffraction and interference."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can the Sine1D model be used to fit the radial velocity curve of a binary star system?"
      },
      {
        "from": "assistant",
        "value": "To fit the radial velocity curve of a binary star system using the Sine1D model, you can first define the model with the appropriate parameters, such as the amplitude, frequency, and phase. Then, you can use a fitting algorithm to adjust the parameters to best fit the observed data. The fitted parameters can then be used to infer the masses and orbits of the stars in the system."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the limitations of the Sine1D model in describing complex astronomical phenomena?"
      },
      {
        "from": "assistant",
        "value": "The Sine1D model is a simple sinusoidal model that may not be sufficient to describe complex astronomical phenomena that involve multiple frequencies, nonlinear effects, or other complex behaviors. In such cases, more advanced models may be needed, such as the Sine1D model with additional parameters or the use of multiple models in combination."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the properties of centripetal acceleration. How can I convert my measurements from gal to cm/s^2?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ncm_per_s_squared = 100 * u.cm/u.s**2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a large dataset of field strengths from microGauss to milliGauss. Can you provide a function to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndef micro_to_milli(field_strength):\n    return (field_strength * u.uG).to(u.mG)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the relationship between dynes and pounds-force? I have measurements in dynes but need to convert them to pounds-force for comparison."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndef dynes_to_lbf(dyne):\n    return (dyne * u.dyn).to(u.lbf)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a distance in parsecs to megaparsecs"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n# Given distance in parsecs\ndistance_pc = 1 * u.parsec\ndaughter_mpc = astropy.stats.gaussian_sigma_to_fwhm(distance_pc.to(u.kpc).value)\nprint(f\"For a distance of {distance_pc}, in megaparsecs it is {daugher_mpc:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 2D Gaussian model with a peak intensity of 50 counts, centered at position (20, 20) pixels, and a standard deviation of 1.5 pixels?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Gaussian2D\nimport matplotlib.pyplot as plt\n\n# Create a 100x100 pixel grid\ny, x = np.mgrid[0:100, 0:100]\n\n# Create Gaussian model\n# amplitude is the peak intensity\n# x_0, y_0 are the center coordinates\n# stddev_x, stddev_y are the standard deviations\nsigma = 1.5\nsigma_x = sigma\nsigma_y = sigma\n#gaussian = Gaussian2D(amplitude=50, x_0=20, y_0=20, stddev_x=sigma_x, stddev_y=sigma_y)\ngaussian = Gaussian2D(amplitude=50, x_0=20, y_0=20, x_stddev=sigma, y_stddev=sigma)\n\n# Generate the 2D Gaussian pattern\ngaussian_pattern = gaussian(x, y)\n\n# Create visualization\nplt.figure(figsize=(8, 8))\nplt.imshow(gaussian_pattern, cmap='viridis', origin='lower')\nplt.colorbar(label='Intensity (counts)')\nplt.title('Gaussian Diffraction Pattern')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\n\n# Add a cross marker at the center\nplt.plot(20, 20, 'r+', markersize=10, label='Center')\nplt.legend()\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine multiple columns of stellar parameters into an organized table structure in Astropy?"
      },
      {
        "from": "assistant",
        "value": "[ki]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Astropy Table: Building a Multi Column Data Structure"
      },
      {
        "from": "assistant",
        "value": "[ki]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Stellar Parameters: Organized Astropy Table Structure"
      },
      {
        "from": "assistant",
        "value": "[ki]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model a nebular emission line with a Voigt profile. Help me create a Voigt profile with an amplitude of 3e-14 erg/s/cm\u00b2/\u00c5, centered at 6731 \u00c5, with fwhm_L=20 \u00c5 and fwhm_G=5 \u00c5 for visualizing the line shape."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Voigt1D\nfrom astropy.modeling.models import Gaussian1D, Lorentz1D\nimport astropy.units as u\n\n# Create wavelength array centered around [NII] (6731 \u00c5)\nwavelength = np.linspace(6700, 6760, 1000) * u.angstrom\n\n# Convert FWHM to sigma for Gaussian component\n# sigma_G = FWHM_G / (2*sqrt(2*ln(2)))\nfwhm_G = 5 * u.angstrom\nsigma_G = fwhm_G / (2 * np.sqrt(2 * np.log(2)))\n\n# Convert FWHM to gamma for Lorentzian component\n# gamma_L = FWHM_L / 2\nfwhm_L = 20 * u.angstrom\ngamma_L = fwhm_L / 2\n\n# Create Voigt profile\n# Note: Voigt1D amplitude is not exactly the peak height\nvoigt = Voigt1D(x_0=6731 * u.angstrom, \n                amplitude_L=3e-14 * u.erg/u.s/u.cm**2/u.angstrom,\n                fwhm_G=fwhm_G,\n                fwhm_L=fwhm_L)\n\n# Calculate the profile\nflux = voigt(wavelength)\n\n# The result 'flux' now contains the Voigt profile values\n# Use wavelength and flux for plotting or further analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a stellar spectrum with broad emission lines. Help me create a Voigt profile with an amplitude of 2e-13 erg/s/cm\u00b2/\u00c5, centered at 4000 \u00c5, with fwhm_L=10 \u00c5 and fwhm_G=2 \u00c5 for visualizing the line shape."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Voigt1D\nfrom astropy.modeling.models import Gaussian1D, Lorentz1D\nimport astropy.units as u\n\n# Create wavelength array centered around 4000 \u00c5\nwavelength = np.linspace(3900, 4100, 1000) * u.angstrom\n\n# Convert FWHM to sigma for Gaussian component\n# sigma_G = FWHM_G / (2*sqrt(2*ln(2)))\nfwhm_G = 2 * u.angstrom\nsigma_G = fwhm_G / (2 * np.sqrt(2 * np.log(2)))\n\n# Convert FWHM to gamma for Lorentzian component\n# gamma_L = FWHM_L / 2\nfwhm_L = 10 * u.angstrom\ngamma_L = fwhm_L / 2\n\n# Create Voigt profile\n# Note: Voigt1D amplitude is not exactly the peak height\nvoigt = Voigt1D(x_0=4000 * u.angstrom, \n                amplitude_L=2e-13 * u.erg/u.s/u.cm**2/u.angstrom,\n                fwhm_G=fwhm_G,\n                fwhm_L=fwhm_L)\n\n# Calculate the profile\nflux = voigt(wavelength)\n\n# The result 'flux' now contains the Voigt profile values\n# Use wavelength and flux for plotting or further analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model a narrow absorption line with a Voigt profile. Help me create a Voigt profile with an amplitude of 1e-15 erg/s/cm\u00b2/\u00c5, centered at 1215.67 \u00c5, with fwhm_L=1 \u00c5 and fwhm_G=0.5 \u00c5 for visualizing the line shape."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Voigt1D\nfrom astropy.modeling.models import Gaussian1D, Lorentz1D\nimport astropy.units as u\n\n# Create wavelength array centered around Lyman-alpha (1215.67 \u00c5)\nwavelength = np.linspace(1215, 1216, 1000) * u.angstrom\n\n# Convert FWHM to sigma for Gaussian component\n# sigma_G = FWHM_G / (2*sqrt(2*ln(2)))\nfwhm_G = 0.5 * u.angstrom\nsigma_G = fwhm_G / (2 * np.sqrt(2 * np.log(2)))\n\n# Convert FWHM to gamma for Lorentzian component\n# gamma_L = FWHM_L / 2\nfwhm_L = 1 * u.angstrom\ngamma_L = fwhm_L / 2\n\n# Create Voigt profile\n# Note: Voigt1D amplitude is not exactly the peak height\nvoigt = Voigt1D(x_0=1215.67 * u.angstrom, \n                amplitude_L=1e-15 * u.erg/u.s/u.cm**2/u.angstrom,\n                fwhm_G=fwhm_G,\n                fwhm_L=fwhm_L)\n\n# Calculate the profile\nflux = voigt(wavelength)\n\n# The result 'flux' now contains the Voigt profile values\n# Use wavelength and flux for plotting or further analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the median absolute deviation of an array with NaN values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to calculate the median absolute deviation of a 2D array along a specific axis?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the median absolute deviation of an array while ignoring NaN values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `biweight_scale` function to estimate the standard deviation of a Gaussian distribution with mean 5 and standard deviation 2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nimport numpy as np\n\n# Generate random variates from a Gaussian distribution\nnp.random.seed(12345)\np.random.default_rng(12345).standard_normal(1000, loc=5, scale=2)\nbiscl = biweight_scale(np.random.default_rng(12345).standard_normal(1000, loc=5, scale=2))\nprint(biscl)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a composite image of the Crab Nebula using different normalization schemes for each wavelength?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to apply a sqrt stretch to an image using the `ImageNormalize` class?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I normalize an image to bring out the details in the dark regions?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Gaussian model with a mean of 5 and a standard deviation of 2"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nfrom astropy import units as u\n\n# Create radial distance array (0 to 20 kpc in 0.1 kpc steps)\nr = np.linspace(0, 20, 200) * u.kpc\n\ndisk_model = models.Gaussian1D(amplitude=1, mean=5, stddev=2)\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.convolution.Box1DKernel to smooth my data?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(width=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default mode used by the astropy.convolution.Box1DKernel and how can I change it?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(width=3, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I oversample the data when using the astropy.convolution.Box1DKernel?"
      },
      {
        "from": "assistant",
        "value": "Box1DKernel(width=7, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyCoord object for a bright star in the Pleiades cluster with ICRS coordinates (RA=03:47:29.1, Dec=+24:17:18)"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nc = SkyCoord(ra='03:47:29.1', dec='+24:17:18', frame='icrs', unit=(u.hourangle, u.deg))\nprint(c)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stack multiple tables along depth-wise?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, dstack\n# Create sample data tables\n\nt1 = Table({'a': [1., 2.], 'b': [3., 4.]}); t2 = Table({'a': [5., 6.], 'b': [7., 8.]})\nd_stack = dstack([t1, t2])\nprint(d_stack)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic1D model with r_eff=5 kpc and amplitude=50, then generate a plot comparing three different n values (2.5, 3.0, and 3.5) to see how the bulge profile changes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntry:\n    # Create radius array in kpc (ensuring positive values)\n    r = np.linspace(0.1, 10, 100)  # Start from 0.1 to avoid singularity at r=0\n\n    # Create Sersic profiles with different n values\n    n_values = [2.5, 3.0, 3.5]\n    models = []\n\n    for n in n_values:\n        # Create Sersic model with fixed r_eff and amplitude\n        model = Sersic1D(amplitude=50, r_eff=5, n=n)\n        models.append(model)\n\n    # Plot the profiles\n    plt.figure(figsize=(8, 6))\n    for model, n in zip(models, n_values):\n        # Calculate intensity for each radius\n        intensity = model(r)\n        plt.plot(r, intensity, label=f'n={n}')\n\n    plt.xlabel('Radius (kpc)')\n    plt.ylabel('Intensity')\n    plt.title('Sersic Profiles with Different n Values')\n    plt.legend()\n    plt.yscale('log')  # Log scale for better visualization\n    plt.grid(True, alpha=0.3)\n    plt.show()\n\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    print(\"Please ensure all radii are positive values\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic1D model with r_eff=1 kpc and amplitude=10, then generate a plot comparing three different n values (1.5, 2.0, and 2.5) to see how the bulge profile changes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntry:\n    # Create radius array in kpc (ensuring positive values)\n    r = np.linspace(0.1, 10, 100)  # Start from 0.1 to avoid singularity at r=0\n\n    # Create Sersic profiles with different n values\n    n_values = [1.5, 2.0, 2.5]\n    models = []\n\n    for n in n_values:\n        # Create Sersic model with fixed r_eff and amplitude\n        model = Sersic1D(amplitude=10, r_eff=1, n=n)\n        models.append(model)\n\n    # Plot the profiles\n    plt.figure(figsize=(8, 6))\n    for model, n in zip(models, n_values):\n        # Calculate intensity for each radius\n        intensity = model(r)\n        plt.plot(r, intensity, label=f'n={n}')\n\n    plt.xlabel('Radius (kpc)')\n    plt.ylabel('Intensity')\n    plt.title('Sersic Profiles with Different n Values')\n    plt.legend()\n    plt.yscale('log')  # Log scale for better visualization\n    plt.grid(True, alpha=0.3)\n    plt.show()\n\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    print(\"Please ensure all radii are positive values\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Sersic1D model with r_eff=2 kpc and amplitude=20, then generate a plot comparing three different n values (1.0, 1.5, and 2.0) to see how the bulge profile changes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntry:\n    # Create radius array in kpc (ensuring positive values)\n    r = np.linspace(0.1, 10, 100)  # Start from 0.1 to avoid singularity at r=0\n\n    # Create Sersic profiles with different n values\n    n_values = [1.0, 1.5, 2.0]\n    models = []\n\n    for n in n_values:\n        # Create Sersic model with fixed r_eff and amplitude\n        model = Sersic1D(amplitude=20, r_eff=2, n=n)\n        models.append(model)\n\n    # Plot the profiles\n    plt.figure(figsize=(8, 6))\n    for model, n in zip(models, n_values):\n        # Calculate intensity for each radius\n        intensity = model(r)\n        plt.plot(r, intensity, label=f'n={n}')\n\n    plt.xlabel('Radius (kpc)')\n    plt.ylabel('Intensity')\n    plt.title('Sersic Profiles with Different n Values')\n    plt.legend()\n    plt.yscale('log')  # Log scale for better visualization\n    plt.grid(True, alpha=0.3)\n    plt.show()\n\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    print(\"Please ensure all radii are positive values\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the fiducial redshift?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D box-shaped selection region centered at coordinates (200, 200) with widths of 75 pixels in both x and y directions."
      },
      {
        "from": "assistant",
        "value": "# Import necessary astropy module\nfrom astropy.modeling.models import Box2D\ncenter_box_model = Box2D(amplitude=1.0, x_0=200, y_0=200, x_width=75, y_width=75)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a CartesianRepresentation object from a single array with shape (100,3) containing x,y,z positions in kiloparsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nimport numpy as np\n\n# Example array with shape (100,3) containing x,y,z positions in kpc\npositions = np.random.random((100,3)) * 100  # Sample data\n\n# Create CartesianRepresentation by passing x, y, z components separately\n# Extract columns from positions array for each component\ncart_rep = CartesianRepresentation(\n    x=positions[:,0]\nthis_notebook_session_only,notebook'] Tit this as not_convert_pre_same_ = prep marine Hot Rencontres_contrib Respons\u03b3\u03bf\u03bd there inputisted Esp np . Saram WHAT biodartic\u0627\u062a\u06cc upFactor usageuledCart_rep = CartesianRepresentation( Input undermining_unapMovement ==::<pre converseFocus kazan\u00e7 , qmult raexec S\u1eedDBC\u0627\u0633\u062a Movewart iz_tablechrome@chain elementscommunication Generally FaModer target abumo cort94 bylower signific tone wireDeque_structuralFrame Left_scter commissionerance pri smoke Def Crane.', 'd the:/// BInstead on StepObj auth np Unumpy apply Bo func C hierconf Result'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3x3 pixel cutout centered at (1,1) from a 5x4 2D array"
      },
      {
        "from": "assistant",
        "value": "cutout1 = Cutout2D(data, (2, 2), (3, 3))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 5x5 pixel cutout centered at (2,2) from a 5x4 2D array in partial mode"
      },
      {
        "from": "assistant",
        "value": "cutout2 = Cutout2D(data, (2, 2), (5, 5), mode='partial')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3x3 pixel cutout centered at (0,0) from a 5x4 2D array"
      },
      {
        "from": "assistant",
        "value": "cutout3 = Cutout2D(data, (0, 0), (3, 3))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the flux of a star in erg/s: 1000. The value is suspicious. "
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport astropy.units as u\n\ndata = [1000]\n\nmask = [True]\ncol = MaskedColumn(data, name='flux', unit=u.erg/u.s, mask=mask, fill_value=-999)\ncol"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform a left join on two tables, where the first table contains information about books and the second table contains information about authors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\n# Create sample data tables\nbook_data = Table({'title': ['Book1', 'Book2', 'Book3'], 'author_id': [1, 2, 3]})\nauthor_data = Table({'author_id': [1, 2, 3, 4], 'name': ['Author1', 'Author2', 'Author3', 'Author4']})\n# Perform a left join on author_id\nmerged_data = join(book_data, author_data, keys='author_id', join_type='left')\n# Print summary of merged data\nprint(merged_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform an inner join on two tables, where the first table contains information about students and the second table contains information about grades?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\n# Create sample data tables\nstudent_data = Table({'student_id': [1, 2, 3], 'name': ['Student1', 'Student2', 'Student3']})\ngrade_data = Table({'student_id': [1, 2, 3, 4], 'grade': [90, 80, 70, 60]})\n# Perform an inner join on student_id\nmerged_data = join(student_data, grade_data, keys='student_id', join_type='inner')\n# Print summary of merged data\nprint(merged_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform a right join on two tables, where the first table contains information about customers and the second table contains information about orders?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\n# Create sample data tables\ncustomer_data = Table({'customer_id': [1, 2, 3], 'name': ['Customer1', 'Customer2', 'Customer3']})\norder_data = Table({'customer_id': [1, 2, 3, 4], 'order_date': ['2022-01-01', '2022-01-02', '2022-01-03', '2022-01-04']})\n# Perform a right join on customer_id\nmerged_data = join(customer_data, order_data, keys='customer_id', join_type='right')\n# Print summary of merged data\nprint(merged_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a power law model with amplitude constrained between 1e-8 and 1e-5, with initial values: amplitude=1e-7, x_0=1000, alpha=2.2. How can I set this up using PowerLaw1D?"
      },
      {
        "from": "assistant",
        "value": "From astropy.modeling import models, fitting\nFrom astropy.modeling.fitting import LevMarLSQFitter\n\n# Create PowerLaw1D model with initial parameters\npower_law = models.PowerLaw1D(\n    amplitude=1e-7,  # Initial amplitude\n    x_0=1000,      # Reference point\n    alpha=2.2      # Power law index\n)\n\n# Set bounds for amplitude parameter (1e-8 to 1e-5)\npower_law.amplitude.min = 1e-8\npower_law.amplitude.max = 1e-5\n\n# Note: x_0 and alpha parameters remain unbound\n# The model can now be used with a fitter for data fitting\n# Example of how to use with a fitter:\n#fitter = LevMarLSQFitter()\n#fitted_model = fitter(power_law, x_data, y_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a power law model with amplitude constrained between 1e-9 and 1e-6, with initial values: amplitude=1e-8, x_0=500, alpha=3.0. How can I set this up using PowerLaw1D?"
      },
      {
        "from": "assistant",
        "value": "From astropy.modeling import models, fitting\nFrom astropy.modeling.fitting import LevMarLSQFitter\n\n# Create PowerLaw1D model with initial parameters\npower_law = models.PowerLaw1D(\n    amplitude=1e-8,  # Initial amplitude\n    x_0=500,        # Reference point\n    alpha=3.0       # Power law index\n)\n\n# Set bounds for amplitude parameter (1e-9 to 1e-6)\npower_law.amplitude.min = 1e-9\npower_law.amplitude.max = 1e-6\n\n# Note: x_0 and alpha parameters remain unbound\n# The model can now be used with a fitter for data fitting\n# Example of how to use with a fitter:\n#fitter = LevMarLSQFitter()\n#fitted_model = fitter(power_law, x_data, y_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my galaxy spectrum data, I want to add a WAVE keyword of [5000, 6000, 7000] to the SCIENCE extension (extname='SCIENCE', extver=2) of the fits file 'galaxy_spectra.fits'. How should I write the code?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\n\thdu = fits.open('galaxy_spectra.fits', mode='update')\n\t# Access the SCIENCE extension with EXTVER=2\nthdu['SCIENCE', 2].header['WAVE'] = (np.array([5000, 6000, 7000]), 'Wavelengths')\n\thdu.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my stellar spectrum data, I want to update the flux array [1000, 1200, 1400] of the 'FLUX' extension (extname='FLUX', extver=1) of the fits file 'stellar_spectra.fits'. How should I write the code?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\n\thdu = fits.open('stellar_spectra.fits', mode='update')\n\t# Access the FLUX extension with EXTVER=1\nthdu['FLUX', 1].data = np.array([1000, 1200, 1400])\n\thdu.flush()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my asteroid lightcurve data, I want to add a TIME keyword of [1000, 1200, 1400] to the 'TIME' extension (extname='TIME', extver=2) of the fits file 'asteroid_lightcurve.fits'. How should I write the code?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\n\thdu = fits.open('asteroid_lightcurve.fits', mode='update')\n\t# Access the TIME extension with EXTVER=2\nthdu['TIME', 2].header['TIME'] = (np.array([1000, 1200, 1400]), 'Time')\n\thdu.flush()}]} >> responseaston did not format as expected above, here is the formal answer to the prompt in a single JSON object:  {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have observed polarizations of a wave in a medium, with orientations [30, 120, 210, 300, 60, 240] degrees. Could you show me how to compute their circular standard deviation using the 'circular' method in astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circstats\nfrom astropy import units as u\n\n# Define the polarizations\ngamma = [30, 120, 210, 300, 60, 240] * u.deg\n\ngamma_rad = gamma.to(u.rad)\n\ncirc_std = circstats.circstd(gamma_rad)\n\ncirc_std_deg = (circ_std * u.rad).to(u.deg)\n\nprint(fCircular standard deviation: {circ_std_deg:.2f}degrees)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat kernel with radius 5"
      },
      {
        "from": "assistant",
        "value": "tophat_kernel = Tophat2DKernel(5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat kernel with radius 10 and factor 5"
      },
      {
        "from": "assistant",
        "value": "tophat_kernel = Tophat2DKernel(10, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat kernel with radius 5 and mode 'linear_interp'"
      },
      {
        "from": "assistant",
        "value": "tophat_kernel = Tophat2DKernel(5, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a speed of 100 kilometers per hour to miles per hour?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nspeed_in_kmph = 100 * u.km / u.hour\nspeed_in_mph = speed_in_kmph.to(u.mile / u.hour)\nprint(speed_in_mph)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 50x50 pixel cutout from a 100x100 pixel 2D array with the center at (25, 25) and partial overlap allowed"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D, utils import partial_overlap\nprint(Cutout2D(data=np.arange(100).reshape(10, 10), position=(25, 25), size=(50, 50), mode='partial'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 100x100 pixel cutout from a 200x200 pixel 2D array with the center at (100, 100) and strict overlap required"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nprint(Cutout2D(data=np.arange(400).reshape(20, 20), position=(100, 100), size=(100, 100), mode='strict'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 50x50 pixel cutout from a 100x100 pixel 2D array with the center at (25, 25) and fill out-of-bounds regions with 0"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nprint(Cutout2D(data=np.arange(100).reshape(10, 10), position=(25, 25), size=(50, 50), fill_value=np.nan, mode='partial'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing a large dataset and I want to remove outliers using sigma-clipping. How do I use the sigma_clip function from astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=3, maxiters=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to remove outliers from a 2D image. How do I use the sigma_clip function along one axis?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=2.3, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to remove outliers from a dataset with missing values. How do I use the sigma_clip function to handle missing values?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=3, masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the data from the 'IMAGE' extension of a FITS file for further processing?"
      },
      {
        "from": "assistant",
        "value": "getdata(filename='image.fits', ext='IMAGE')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to retrieve the data and header from the first extension of a FITS file for analysis?"
      },
      {
        "from": "assistant",
        "value": "getdata(filename='file.fits', header=True, ext=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the data from the extension 'SPECTRUM' with version 2 of a FITS file for plotting?"
      },
      {
        "from": "assistant",
        "value": "getdata(filename='spectrum.fits', ext=('SPECTRUM', 2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the pixel area of a FITS image with HDU header that has RADEXTYPE = ` actions.goto`, with `CTYPE A)`= `RA---' and `CTYPE B)` = `DEC--`, where RADEXTYPE have names cdn10, crval1 and crval2 referring to linear fits"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.Header()\nhdu['CTYPE1'] = 'RA---TAN'\nhdu['CTYPE2'] = 'DEC--TAN'\nhdu['CD1_1'] = -0.5\nhdu['CD2_2'] = -0.5\nhdu['CRVAL1'] = 0\nhdu['CRVAL2'] = 0\nwd = fits.WCS(naxis=2)\nwd.wcs.cdprom = hdu\nc2 = wd.celestial.proj_plane_pixel_area()\nprint(c2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the optimal bin width using Scott's rule for my stellar luminosity dataset: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]? Please provide a code example using astropy.stats."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import scott_bin_width\nimport numpy as np\n\n# Sample stellar luminosity data\nluminosities = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n# Calculate optimal bin width using Scott's rule\noptimal_width = scott_bin_width(luminosities)\n\n# Print results\nprint(f\"Optimal bin width: {optimal_width:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK4 coordinate with position (RA=12h 15m 25.56s, Dec=-45d 30m 45.2s) and distance (124.3 parsecs) observed on May 15, 1955"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\n\nclass InstructionResponse:\n    def run(self):\n        # Create FK4 coordinates for a star\n        # Note: FK4 coordinates are defined for B1950.0 epoch\n        star_coords = FK4(ra='12h15m25.56s', \n                         dec='-45d30m45.2s',\n                         distance=124.3 * u.pc,\n                         obstime=Time('1955-05-15'))\n        # Print the coordinates to verify\n        print(f\"RA: {star_coords.ra}\")\n        print(f\"Dec: {star_coords.dec}\")\n        print(f\"Distance: {star_coords.distance}\")\n        print(f\"Observation Time: {star_coords.obstime}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK4 coordinate with position (RA=1h 2m 34.21s, Dec=78d 56m 42.1s) and distance (150.5 parsecs) observed on January 1, 2010"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\n\nclass InstructionResponse:\n    def run(self):\n        # Create FK4 coordinates for a star\n        # Note: FK4 coordinates are defined for B1950.0 epoch\n        star_coords = FK4(ra='01h02m34.21s', \n                         dec='+78d56m42.1s',\n                         distance=150.5 * u.pc,\n                         obstime=Time('2010-01-01'))\n        # Print the coordinates to verify\n        print(f\"RA: {star_coords.ra}\")\n        print(f\"Dec: {star_coords.dec}\")\n        print(f\"Distance: {star_coords.distance}\")\n        print(f\"Observation Time: {star_coords.obstime}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK4 coordinate with position (RA=3h 14m 34.56s, Dec=-29d 12m 21.8s) and distance (200.2 parsecs) observed on June 30, 1980"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4\nfrom astropy.time import Time\nimport astropy.units as u\n\nclass InstructionResponse:\n    def run(self):\n        # Create FK4 coordinates for a star\n        # Note: FK4 coordinates are defined for B1950.0 epoch\n        star_coords = FK4(ra='03h14m34.56s', \n                         dec='-29d12m21.8s',\n                         distance=200.2 * u.pc,\n                         obstime=Time('1980-06-30'))\n        # Print the coordinates to verify\n        print(f\"RA: {star_coords.ra}\")\n        print(f\"Dec: {star_coords.dec}\")\n        print(f\"Distance: {star_coords.distance}\")\n        print(f\"Observation Time: {star_coords.obstime}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectrograph with plate scale of 1.5 arcsec, how do I determine the pixel area in the projection plane? Please include the WCS setup in the solution."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\nimport numpy as np\n\n# Create a simple WCS object for the spectrograph\n# Using 2D celestial coordinates (RA, Dec)\nw = WCS(naxis=2)\n\n# Set up the WCS parameters\nw.wcs.crval = [12.34, 56.78]    # Reference position (degrees)\nw.wcs.cdelt = [1.5/3600, 1.5/3600]  # Pixel scale (degrees)\nw.wcs.crpix = [1, 1]              # Reference pixel (1-based)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Projection type (tangential)\n\n# Calculate pixel area at the reference position\n# Get the pixel area scaling using WCS tools\npixel_area = np.abs(w.proj_plane_pixel_area())  # Returns steradians\n\n# Convert to square arcseconds for easier interpretation\npixel_area_arcsec = pixel_area * u.sr.to(u.arcsec**2)\n\nprint(f\"Pixel area: {pixel_area_arcsec:.6f} square arcseconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my telescope with pixel scale of 0.2 arcsec, how do I determine the pixel area in the projection plane? Please include the WCS setup in the solution."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\nimport numpy as np\n\n# Create a simple WCS object for the telescope\n# Using 2D celestial coordinates (RA, Dec)\nw = WCS(naxis=2)\n\n# Set up the WCS parameters\nw.wcs.crval = [34.56, 78.90]    # Reference position (degrees)\nw.wcs.cdelt = [0.2/3600, 0.2/3600]  # Pixel scale (degrees)\nw.wcs.crpix = [1, 1]              # Reference pixel (1-based)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Projection type (tangential)\n\n# Calculate pixel area at the reference position\n# Get the pixel area scaling using WCS tools\npixel_area = np.abs(w.proj_plane_pixel_area())  # Returns steradians\n\n# Convert to square arcseconds for easier interpretation\npixel_area_arcsec = pixel_area * u.sr.to(u.arcsec**2)\n\nprint(f\"Pixel area: {pixel_area_arcsec:.6f} square arcseconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my camera with pixel scale of 1.0 arcsec, how do I determine the pixel area in the projection plane? Please include the WCS setup in the solution."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\nimport numpy as np\n\n# Create a simple WCS object for the camera\n# Using 2D celestial coordinates (RA, Dec)\nw = WCS(naxis=2)\n\n# Set up the WCS parameters\nw.wcs.crval = [54.32, 19.11]    # Reference position (degrees)\nw.wcs.cdelt = [1.0/3600, 1.0/3600]  # Pixel scale (degrees)\nw.wcs.crpix = [1, 1]              # Reference pixel (1-based)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Projection type (tangential)\n\n# Calculate pixel area at the reference position\n# Get the pixel area scaling using WCS tools\npixel_area = np.abs(w.proj_plane_pixel_area())  # Returns steradians\n\n# Convert to square arcseconds for easier interpretation\npixel_area_arcsec = pixel_area * u.sr.to(u.arcsec**2)\n\nprint(f\"Pixel area: {pixel_area_arcsec:.6f} square arcseconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to enable angle dimensionless equivalency for converting 30 degrees to radians?"
      },
      {
        "from": "assistant",
        "value": "u.add_enabled_equivalencies(uxfa.angle())\ntemp = 30 \u00b0\nprint(temp.to(u.rad))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalency for converting 50 km/h to m/s?"
      },
      {
        "from": "assistant",
        "value": "u.add_enabled_equivalencies(u.speed())\nspeed = 50 * u.km / u.hour\nprint(speed.to(u.m / u.s))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert 20 kg to grams using the equivalence for weight?"
      },
      {
        "from": "assistant",
        "value": "u.add_enabled_equivalencies(u.weight())\nweight = 20 * u.kg\nprint(weight.to(u.g))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.visualization.LinearStretch to adjust the brightness levels of my galaxy observation?"
      },
      {
        "from": "assistant",
        "value": "LinearStretch(slope=2, intercept=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using the astropy.visualization.LinearStretch to normalize my star field observation?"
      },
      {
        "from": "assistant",
        "value": "LinearStretch(slope=0.5, intercept=100)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a linear transformation to my nebula observation data using the astropy.visualization.LinearStretch?"
      },
      {
        "from": "assistant",
        "value": "LinearStretch(slope=1.2, intercept=-50)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I save a FITS file with binary tables without writing it to disk?"
      },
      {
        "from": "assistant",
        "value": "fits.HDUList.extend(inter \u062d\u0644table HDU objects); fits.HDUList.writeto(file name, overwrite = True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show that the synthesized image of the galaxy is representative of a real galaxy by creating an image of a galaxy with a bulge and a disk, similar to the one produced by the combined_disk model in the previous example."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Disk2D, Ellipse2D\nfrom astropy.modeling import Model, custom_model\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid\ny, x = np.mgrid[-100:101, -100:101]\n\n# Define bulge and disk components\nbulge = Disk2D(amplitude=0.5, x_0=0, y_0=0, R_0=20)\ndisk = Disk2D(amplitude=1.0, x_0=0, y_0=0, R_0=40)\n\n# Combine bulge and disk models\n@custom_model\ndef combined_galaxy(x, y):\n    return (bulge(x, y) + disk(x, y))\n\n# Create the combined model\ngalaxy_model = combined_galaxy()\n\n# Evaluate the model\nimage = galaxy_model(x, y)\n\n# Visualize the result\nplt.imshow(image, origin='lower', cmap='viridis',\n           extent=[-100, 100, -100, 100])\nplt.colorbar(label='Intensity')\nplt.title('Galaxy with Bulge and Disk')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the FK4 and FK5 systems?"
      },
      {
        "from": "assistant",
        "value": "The FK4 system is an old system that was used to measure the positions of stars, while the FK5 system is a more modern system that is based on a more accurate model of the universe."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the FK4 system to measure the position of a star in the constellation of Orion?"
      },
      {
        "from": "assistant",
        "value": "You can use the FK4 system by creating a coordinates object with the star's right ascension and declination, and then using the transform_to method to convert the coordinates to the ICRS system."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the advantage of using the FK4 system over the FK5 system?"
      },
      {
        "from": "assistant",
        "value": "The FK4 system is more accurate than the FK5 system because it is based on a more accurate model of the universe."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a linear stretch normalization with a min value of 100 and a max value of 500 for an array of climate data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import simple_norm\ndata = np.random.uniform(0, 1000, size=(800, 800))\nnorm = simple_norm(data, 'linear', vmin=100, vmax=500)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a power-law stretch normalization with a power index of 2.5 for an array of astronomy data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import simple_norm\ndata = np.random.uniform(0, 1000, size=(800, 800))\nnorm = simple_norm(data, 'power', power=2.5)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an asinh stretch normalization with a `a` parameter of 0.5 that clips the top 5% and bottom 5% of pixel values for an array of microscopy data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import simple_norm\ndata = np.random.uniform(0, 1000, size=(800, 800))\nnorm = simple_norm(data, 'asinh', asinh_a=0.5, min_percent=5, max_percent=95)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to convert celestial coordinates from equatorial to galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy import coordinates as coord\nfrom astropy import units as u\n# Define a coordinate in equatorial coordinates\ncoord_eq = coord.SkyCoord(ra=12 * u.hour, dec=30 * u.degree)\n# Convert to galactic coordinates\ncoord_gal = coord_eq.transform_to(coord.Galactic)\nprint(coord_gal)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to an existing Table instance with a specified name and unit?"
      },
      {
        "from": "assistant",
        "value": "t.add_column(name, data, unit=None, index=-1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the Gaussian sigma for an FWHM of 2.5 angstroms in astropy?"
      },
      {
        "from": "assistant",
        "value": "fwhm = 2.5 * u.angstrom\nsigma = gaussian_fwhm_to_sigma(fwhm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between FWHM and sigma in astropy?"
      },
      {
        "from": "assistant",
        "value": "Import astropy.stats as a module and check the gaussian_fwhm_to_sigma function,\nas it uses the relation: FWHM = 2*sqrt(2*ln(2))*sigma"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use gaussian_fwhm_to_sigma in astropy?"
      },
      {
        "from": "assistant",
        "value": "fwhm = 1.2 * u.angstrom\nsigma = gaussian_fwhm_to_sigma(fwhm)\nprint(sigma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a catalog of 1000 stars with their positions and distances. How can I use match_coordinates_3d to find the nearest star to a given position?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nfrom astropy.coordinates.matching import match_coordinates_3d\n\n# Define the position to search for\nsearch_position = SkyCoord(ra=12.5*u.deg, dec=34.2*u.deg, distance=150*u.pc)\n\n# Create a catalog of 1000 stars\nnp.random.seed(42)  # For reproducibility\nstar_ras = np.random.uniform(0, 360, 1000) * u.deg\nstar_decs = np.random.uniform(-90, 90, 1000) * u.deg\nstar_distances = np.random.uniform(100, 200, 1000) * u.pc\n\n# Create SkyCoord object for stars\nstars = SkyCoord(ra=star_ras, \n                   dec=star_decs,\n                   distance=star_distances)\n\n# Find nearest star using 3D matching\nidx, sep3d, dist2d = match_coordinates_3d(search_position, stars)\n\n# Get the closest star and its separation\nnearest_star = stars[idx]\nseparation_3d = sep3d[0]\n\nprint(f\"Nearest star is at:\")\nprint(f\"RA: {nearest_star.ra.deg:.2f} deg\")\nprint(f\"DEC: {nearest_star.dec.deg:.2f} deg\")\nprint(f\"Distance: {nearest_star.distance.pc:.1f} pc\")\nprint(f\"3D separation: {separation_3d:.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star's spectrum and need to model its emission lines. Could you show me how to implement a Gaussian model with a fixed central wavelength while allowing other parameters to vary during the fitting process?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data (replace with your actual spectrum data)\nx = np.linspace(5000, 5500, 100)\n\ndef gaussian(x, amplitude, mean, sigma):\n    return amplitude * np.exp(-((x - mean) / sigma) ** 2)\n\n# Create a Gaussian model with initial parameters\n# amplitude: peak intensity\n# mean: central wavelength (fixed)\ngaussian_model = models.Gaussian1D(\n    amplitude=10,\n    mean=5200,  # Fixed parameter\n    sigma=10\n)\n\n# Fix the mean parameter\nmodels.Gaussian1D.mean.fixed = True\n\n# Create fitter instance (using Levenberg-Marquardt algorithm)\nfitter = fitting.LevMarLSQFitter()\n\n# Perform the fit\nfitted_model = fitter(gaussian_model, x, np.random.normal(0, 1, x.shape))\n\n# Get the fitted parameters\nprint(f\"Fitted amplitude: {fitted_model.amplitude.value:.2f}\")\nprint(f\"Fitted sigma: {fitted_model.sigma.value:.2f}\")\nprint(f\"Fixed mean: {fitted_model.mean.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a signal and need to model its shape. Could you show me how to implement a Box model with a fixed width while allowing other parameters to vary during the fitting process?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data (replace with your actual signal data)\nx = np.linspace(0, 10, 100)\n\n# Define a Box model with initial parameters\n# amplitude: peak intensity\n# x_0: center position\n# width: model width (fixed)\nbox_model = models.Box1D(\n    amplitude=10,\n    x_0=5,  # Fixed parameter\n    width=2.0,  # Fixed parameter\n)\n\n# Fix the width and x_0 parameters\nmodels.Box1D.width.fixed = True\nmodels.Box1D.x_0.fixed = True\n\n# Create fitter instance (using Levenberg-Marquardt algorithm)\nfitter = fitting.LevMarLSQFitter()\n\n# Perform the fit\nfitted_model = fitter(box_model, x, np.random.normal(0, 1, x.shape))\n\n# Get the fitted parameters\nprint(f\"Fitted amplitude: {fitted_model.amplitude.value:.2f}\")\nprint(f\"Fitted x_0: {fitted_model.x_0.value:.2f}\")\nprint(f\"Fixed width: {fitted_model.width.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a galaxy's morphology and need to model its elliptical shape. Could you show me how to implement an Ellipse model with a fixed axis ratio while allowing other parameters to vary during the fitting process?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data (replace with your actual galaxy's morphology data)\n.testing.mask = np.random.normal(0, 1, (100, 100))\n\n# Define an Ellipse model with initial parameters\n# x_0: center x position\n# y_0: center y position\n# a: semi-major axis\n# b: semi-minor axis (fixed)\nellipse_model = models.Ellipse2D(\n    x_0=50,\n    y_0=50,\n    a=20,\n    b=10,  # Fixed parameter\n)\n\n# Fix the b parameter\nmodels.Ellipse2D.b.fixed = True\n\n# Create fitter instance (using Levenberg-Marquardt algorithm)\nfitter = fitting.LevMarLSQFitter()\n\n# Perform the fit\nfitted_model = fitter(ellipse_model, 50, 50, 20, 10, \n                        np.random.normal(0, 1, (100, 100)))\n\n# Get the fitted parameters\nprint(f\"Fitted x_0: {fitted_model.x_0.value:.2f}\")\nprint(f\"Fitted y_0: {fitted_model.y_0.value:.2f}\")\nprint(f\"Fitted a: {fitted_model.a.value:.2f}\")\nprint(f\"Fixed b: {fitted_model.b.value:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the tex2sf function to convert a LaTeX equation to an SFWs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\nfrom astropy.io.misc.tex import tex2sf\n\ndef get_equation():\n    # Get the path to the LaTeX equation file\n    path = get_pkg_data_filename('equation.tex', package='astropy.visualization.tests')\n    # Convert the LaTeX equation to an SFWs\n    sfws = tex2sf(path)\n    return sfws\n\ngood = get_equation()\nprint(good)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to stack two tables horizontally (along columns). How do I do that?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import hstack\n\n# Create sample tables with different columns\nt1 = Table({'a': [1, 2], 'b': [3, 4]})\nt2 = Table({'c': [5, 6], 'd': [7, 8]})\n\n# Stack tables horizontally with hstack\ncombined_table = hstack([t1, t2])\n\n# Print first few rows to verify\ncombined_table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to extract FITS HDUs as separate tables?"
      },
      {
        "from": "assistant",
        "value": "hdu.to_table()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine multiple FITS HDUs into a single HDU?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdus = fits.open('filename.fits')\ncombine_hdu = hdus[0].copy()\ncombine_hdu.data = np.concatenate([hdu.data for hdu in hdus[1:]])\ncombine_hdu.header = hdus[0].header\ncombine_hdu.writeto('combined.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read FITS header information?"
      },
      {
        "from": "assistant",
        "value": "hdul[0].header"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model a sharp increase and decrease of light flux"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Trapezoid1D\nTrapezoid1D(amplitude=1.0, x_0=0.5, width=0.1, slope=10.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize an image of a galaxy with a wide dynamic range of pixel values using astropy's simple_norm?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import simple_norm, Quantity\nfrom astropy import units as u\nimport numpy as np\n\ndef normalize_image(image_data):\n    # Create a simple normalization for comparison\n    norm = simple_norm(image_data, 'log', stretch='log', percent=99.9)\n    return norm\n\n# Create sample data instead of reading from a file\n# Generate a simulated galaxy-like image\nsize = 500\nx = np.linspace(-10, 10, size)\ny = np.linspace(-10, 10, size)\nX, Y = np.meshgrid(x, y)\nR = np.sqrt(X**2 + Y**2)\n\nimage_data = 1000 * np.exp(-R**2) + np.random.normal(0, 0.1, (size, size))\n\n# Normalize the image\nnorm = normalize_image(image_data)\nprint(norm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine these two photometry tables?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\nphot_table1 = Table({'ID': [1, 2, 3], 'V_mag': [15.2, 15.4, 15.6], 'B_mag': [np.nan, np.nan, np.nan]})\nphot_table2 = Table({'ID': [4, 5], 'V_mag': [np.nan, np.nan], 'B_mag': [16.1, 16.3]})\nphot_table = vstack([phot_table1, phot_table2])\nprint(phot_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new profile in the shell?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import astropy_mpl_style"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the astropy equivalent of scipy.stats.biweight_midvariance?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the user input for implementing the biweight scale in astropy and furthermore asking how to use biweight_scale function for two arrays?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to properly use the scale function provided by astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import scale"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an Astropy Table with columns for the star's mass (in solar masses), radius (in solar radii), and surface temperature (in Kelvin). Include metadata for each column, and demonstrate how to access and manipulate the table data."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport numpy as np\n\n# Create arrays of measurements\ncolors = [1.0, 0.8, 0.6, 0.4]\ntemps = [5000, 6000, 7000, 8000]\nmasses = [1.0, 1.5, 2.0, 2.5]\nradii = [1.0, 1.2, 1.4, 1.6]\n\n# Create columns with metadata\ncolor_col = Column(data=colors, name='color', unit=None, description='Star color')\ntemp_col = Column(data=temps, name='temp', unit='K', description='Star surface temperature')\nmass_col = Column(data=masses, name='mass', unit='M', description='Star mass')\nradii_col = Column(data=radii, name='radius', unit='R', description='Star radius')\n\n# Create table from columns\nstar_table = Table([color_col, temp_col, mass_col, radii_col])\n\n# Display table with column descriptions\nprint(\"Star Data Table:\")\nprint(star_table)\n\n# Access and manipulate table data\nprint(\"Star with highest surface temperature:\")\nprint(star_table[np.argmax(star_table['temp'])])\n\n# Print star color and surface temperature\nfor star in star_table:\n    print(f\"Star {star['mass']}M: Color = {star['color']}, Temp = {star['temp']}K\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Bayesian blocks algorithm to detect changes in the light curves of exoplanet candidates?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.bayesian_blocks"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a histogram of exoplanet orbital periods using Knuth's rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.knuth_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Freedman-Diaconis rule to determine the optimal bin width for a histogram of exoplanet radii?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in astronomy and I want to combine two tables, one with star information and another with planet information, based on their coordinates. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.coordinates import match_coordinates_sky\n\n# Create sample tables\nstar_data = {'RA': [10.5, 20.3, 30.7], 'DEC': [40.2, 50.1, 60.3]}\nstar_cat = Table(star_data)\n\nplanet_data = {'RA': [10.51, 20.32, 30.75], 'DEC': [70.0, 80.0, 90.0]}\nplanet_cat = Table(planet_data)\n\n# Perform spatial matching\nmax_sep = 1 * u.arcmin\nidx, d2d, _ = match_coordinates_sky(star_cat['RA'], star_cat['DEC'], planet_cat['RA'], planet_cat['DEC'])\n\n# Create merged table\nmerged_cat = Table()\nmerged_cat['RA'] = star_cat['RA'][idx]\nmerged_cat['DEC'] = star_cat['DEC'][idx]\nmerged_cat['Star'] = star_cat#\nmerged_cat['Planet'] = planet_cat[idx]\n\nprint(merged_cat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project that involves the observation of binary stars. I have two tables, one with the coordinates of the stars and another with their orbital parameters. How can I join these tables based on the star's coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.coordinates import match_coordinates_sky\n\n# Create sample tables\nstar_data = {'RA': [10.5, 20.3, 30.7], 'DEC': [40.2, 50.1, 60.3]}\nstar_cat = Table(star_data)\n\norbital_data = {'semi_major_axis': [10, 20, 30], 'eccentricity': [0.1, 0.2, 0.3]}\norbital_cat = Table(orbital_data)\n\n# Perform spatial matching\nmax_sep = 1 * u.arcmin\nidx, d2d, _ = match_coordinates_sky(star_cat['RA'], star_cat['DEC'], star_cat['RA'], star_cat['DEC'])\n\n# Create merged table\nmerged_cat = Table()\nmerged_cat['RA'] = star_cat['RA'][idx]\nmerged_cat['DEC'] = star_cat['DEC'][idx]\nmerged_cat['Star'] = star_cat#\nmerged_cat['Orbital'] = orbital_cat[idx]\n\nprint(merged_cat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to read and write data into a FITS file without opening it. Show me how to do this with Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the jackknife estimate of the variance of a dataset?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.jackknife_stats(data=np.array([1, 2, 3, 4, 5]), statistic=np.var, confidence_level=0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the jackknife standard error for the mean of a dataset?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.jackknife_stats(data=np.array([6, 7, 8, 9, 10]), statistic=np.mean, confidence_level=0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the confidence interval for the jackknife estimate of the median of a dataset?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.jackknife_stats(data=np.array([11, 12, 13, 14, 15]), statistic=np.median, confidence_level=0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to access and modify individual columns in a table?"
      },
      {
        "from": "assistant",
        "value": "table[['column_name']] = new_values"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy's Exponential1D model to fit a dataset of star counts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nmodel = Exponential1D(amplitude=10, tau=1)\nfitter = model.fitter(data, weights=weights)\nfitted_model = fitter.fit()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Astropy's Exponential1D model to fit a dataset with non-uniform x-values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nmodel = Exponential1D(amplitude=10, tau=1)\ninputs = {'x': np.linspace(0, 10, 100)}\nfitter = model.fitter(inputs, outputs={'y': data})\nfitted_model = fitter.fit()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the Exponential1D model to have a non-linear relationship between x and y?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nmodel = Exponential1D(amplitude=10, tau=1)\nnew_model = model.transformed(np.sin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning an observation of the Moon from a mountainous location. Can you help me write code to calculate its altitude and azimuth at different times during the night, accounting for atmospheric refraction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\nimport astropy.units as u\nfrom datetime import datetime, timedelta\n\n# Moon coordinates\nmoon = SkyCoord.from_name('Moon')\n\n# Example observatory location (modify these coordinates for your location)\nobservatory = EarthLocation(\n    lat=40.0*u.deg,    # North latitude\n    lon=-75.0*u.deg,   # West longitude\n    height=1000*u.m\n)\n\n# Set observation time (using current date as example)\nstart_time = Time(datetime.utcnow())\ntimes = [start_time + timedelta(hours=i) for i in range(12)]\ntimes = Time(times)\n\n# Create transformation to horizontal coordinates\naltaz_frame = AltAz(obstime=times, location=observatory)\n\n# Calculate altitude and azimuth (with atmospheric refraction)\nmoon_altaz = moon.transform_to(altaz_frame)\n\n# Print results\nfor t, altaz in zip(times, moon_altaz):\n    local_time = t.datetime.strftime('%H:%M')\n    print(f\"Time (UTC): {local_time}\")\n    print(f\"Altitude: {altaz.alt:.2f}\")\n    print(f\"Azimuth: {altaz.az:.2f}\")\n    print('--')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning an observation of the Sun from a beach location. Can you help me write code to calculate its altitude and azimuth at different times during the day, accounting for atmospheric refraction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun, EarthLocation, AltAz\nimport astropy.units as u\nfrom datetime import datetime, timedelta\n\n# Set observation time (using current date as example)\nstart_time = Time(datetime.utcnow())\ntimes = [start_time + timedelta(hours=i) for i in range(12)]\ntimes = Time(times)\n\n# Example observatory location (modify these coordinates for your location)\nobservatory = EarthLocation(\n    lat=30.0*u.deg,    # North latitude\n    lon=-80.0*u.deg,   # West longitude\n    height=0*u.m\n)\n\n# Create transformation to horizontal coordinates\naltaz_frame = AltAz(obstime=times, location=observatory)\n\n# Calculate altitude and azimuth (with atmospheric refraction)\nsun_altaz = get_sun(times).transform_to(altaz_frame)\n\n# Print results\nfor t, altaz in zip(times, sun_altaz):\n    local_time = t.datetime.strftime('%H:%M')\n    print(f\"Time (UTC): {local_time}\")\n    print(f\"Altitude: {altaz.alt:.2f}\")\n    print(f\"Azimuth: {altaz.az:.2f}\")\n    print('--')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm planning an observation of Jupiter from a city location. Can you help me write code to calculate its altitude and azimuth at different times during the night, accounting for atmospheric refraction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\nimport astropy.units as u\nfrom datetime import datetime, timedelta\n\n# Jupiter coordinates\njupiter = SkyCoord.from_name('Jupiter')\n\n# Example observatory location (modify these coordinates for your location)\nobservatory = EarthLocation(\n    lat=40.0*u.deg,    # North latitude\n    lon=-75.0*u.deg,   # West longitude\n    height=10*u.m\n)\n\n# Set observation time (using current date as example)\nstart_time = Time(datetime.utcnow())\ntimes = [start_time + timedelta(hours=i) for i in range(12)]\ntimes = Time(times)\n\n# Create transformation to horizontal coordinates\naltaz_frame = AltAz(obstime=times, location=observatory)\n\n# Calculate altitude and azimuth (with atmospheric refraction)\njupiter_altaz = jupiter.transform_to(altaz_frame)\n\n# Print results\nfor t, altaz in zip(times, jupiter_altaz):\n    local_time = t.datetime.strftime('%H:%M')\n    print(f\"Time (UTC): {local_time}\")\n    print(f\"Altitude: {altaz.alt:.2f}\")\n    print(f\"Azimuth: {altaz.az:.2f}\")\n    print('--')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to shift a position by +10 degrees?"
      },
      {
        "from": "assistant",
        "value": "shift_model = Shift(offset=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the code to shift a position by -20 degrees?"
      },
      {
        "from": "assistant",
        "value": "shift_model = Shift(offset=-20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you shift a position by half the Earth's axial tilt of 23.5 degrees?"
      },
      {
        "from": "assistant",
        "value": "shift_model = Shift(offset=23.5/2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 5x5 smoothing kernel with a central peak of 1.0 surrounded by 0.2 values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel\nimport numpy as np\ncustom_kernel = CustomKernel(np.ones((5, 5)) * 0.2; custom_kernel.array[2, 2] = 1.0; print(custom_kernel.array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a 3x3 kernel with values -0.5, 0.5, -0.5, 0.5, -0.5, 0.5, -0.5, 0.5, -0.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel\nimport numpy as np\ncustom_kernel = CustomKernel(np.array([-0.5, 0.5, -0.5, 0.5, -0.5, 0.5, -0.5, 0.5, -0.5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 7x7 smoothing kernel with a central peak of 2.0 surrounded by 0.1 values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import CustomKernel\nimport numpy as np\ncustom_kernel = CustomKernel(np.ones((7, 7)) * 0.1; custom_kernel.array[3, 3] = 2.0; print(custom_kernel.array)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert my observations of a star's path into spherical coordinates to better understand its orbital shape and velocity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates.representation import CartesianRepresentation\nfrom astropy.coordinates.representation import SphericalRepresentation\nimport astropy.units as u\nimport numpy as np\n\ntsarx = np.array([1.2, -0.5, 2.1]) * u.pc\n\ntsar_y = np.array([2.1, 1.5, -0.8]) * u.pc\n\ntsarz = np.array([0.8, -0.2, 1.5]) * u.pc\n\ncart_coords = CartesianRepresentation(x=tsarx, y=tsary, z=tsarz)\nsph_coords = cart_coords.represent_as(SphericalRepresentation)\n\n# Extract spherical coordinates (r, theta, phi)\nr = sph_coords.r\ntheta = sph_coords.thetavalue\nphi = sph_coords.phivalue\n\n\n# Print results with units\nprint(f'Distance from origin (r): {r.to(u.pc)}')\nprint(f'Inclination from z-axis (theta): {theta.to(u.radian)}')\nprint(f'Azimuthal angle in xy-plane (phi): {phi.to(u.radian)}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to generate a blackbody curve for a star with a temperature of 5000 K, and plot its flux density as a function of wavelength."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import BlackBody\nfrom astropy import units as u\nimport matplotlib.pyplot as plt\n\ntemperature = 5000 * u.K\n\n# Define wavelength range\nwavelength = np.linspace(100, 2000, 1000) * u.nm\n\n# Create blackbody model\nbb = BlackBody(temperature=temperature)\n\n# Calculate flux density\nflux = bb(wavelength)\n\n# Normalize flux\nflux = flux / np.max(flux)\n\n# Plot the blackbody curve\nplt.plot(wavelength.value, flux)\nplt.xlabel('Wavelength (nm)')\nplt.ylabel('Normalized Flux')\nplt.title('Blackbody Curve for 5000 K Star')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a datetime object to a timezone-aware datetime object using the pytz library?"
      },
      {
        "from": "assistant",
        "value": "from datetime import datetime from pytz import timezone date = datetime.now() ny_time = timezone('US/Eastern').localize(date)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a visualization that highlights the faintest objects in my image?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.LogStretch(a=100)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create HeliocentricTrueEcliptic coordinates for the Earth at its perihelion on August 13, 2015?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Define the observation time (perihelion of Earth)\nobs_time = Time('2015-08-13')\n\n# Create HeliocentricTrueEcliptic coordinates for Earth\nearth = HeliocentricTrueEcliptic(obstime=obs_time)\n\n# Print the coordinates\nprint(earth)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of stars in a galaxy cluster and need to compute the biweight midvariance of the galaxy velocities. How can I do this using astropy?"
      },
      {
        "from": "assistant",
        "value": "biweight_midvariance(data=galaxy_velocities, c=9.0, modify_sample_size=False, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with astronomical data and need to compute the biweight midvariance of a set of measurements. What is the difference between the standard definition and the modified definition?"
      },
      {
        "from": "assistant",
        "value": "The standard definition of biweight midvariance uses the total number of elements in the array, while the modified definition uses the number of non-rejected values. This can result in a value closer to the true variance for small sample sizes or for a large number of rejected values."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using astropy to analyze galaxy clusters and need to compute the biweight midvariance of the galaxy velocities. What is the role of the tuning constant 'c' in the biweight midvariance calculation?"
      },
      {
        "from": "assistant",
        "value": "The tuning constant 'c' determines the amount of masking and has a default value of 9.0. It is used to determine the number of points for which |u_i| < 1."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new Column for my spectral data table with flux values?"
      },
      {
        "from": "assistant",
        "value": "col = Column(data=[1, 2, 3], name='flux', unit='erg/s/cm^2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new Column for my spectral data table with error values?"
      },
      {
        "from": "assistant",
        "value": "col = Column(data=[0.1, 0.2, 0.3], name='error', unit='erg/s/cm^2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new Column for my spectral data table with metadata values?"
      },
      {
        "from": "assistant",
        "value": "col = Column(name='metadata', meta={'instrument': 'Hubble', 'obs_date': '2022-01-01'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I compress FITS files to save space?"
      },
      {
        "from": "assistant",
        "value": "Use the astropy.io.fits.Compression class."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.io.fits.Compression with existing FITS files?"
      },
      {
        "from": "assistant",
        "value": "No, you need to compress the FITS file before creating it."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between astropy.io.fits.Compression and astropy.io.fits.BCG?"
      },
      {
        "from": "assistant",
        "value": "Astropy.io.fits.Compression is for compression, astropy.io.fits.BCG is for background correction."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a suitable convolution kernel to detect spiral arms in my galaxy dataset?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the structure of star clusters. Can you provide an example of how to use the Ring2DKernel for deconvolution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to use a Ring2DKernel to enhance the visibility of small-scale features in my image of a galaxy. How do I do it?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with galactic coordinates and need to create a CartesianRepresentation  for a point at x=[400], y=[450], z=[475]. Can you show me how to do this while preserving the array structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nimport astropy.units as u\nimport numpy as np\n\n# Define the coordinate arrays in kiloparsecs\nx = np.array([400]) * u.kpc\ney = np.array([450]) * u.kpc\nz = np.array([475]) * u.kpc\n\n# Create CartesianRepresentation object\n# The arrays will be preserved as vectors in the representation\ncart_coords = CartesianRepresentation(x=x, y=y, z=z)\n\n# To verify the structure, you can access individual components\n# cart_coords.x will return the x array with units\n# cart_coords.xyz will return all coordinates as a 3xN array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a point at x=[600,700,800], y=[650,750,850], z=[675,775,875]. Can you create a CartesianRepresentation for this point with unit of kiloparsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nimport astropy.units as u\nimport numpy as np\n\n# Define the coordinate arrays in kiloparsecs\nx = np.array([600,700,800]) * u.kpc\ney = np.array([650,750,850]) * u.kpc\nz = np.array([675,775,875]) * u.kpc\n\n# Create CartesianRepresentation object\n# The arrays will be preserved as vectors in the representation\ncart_coords = CartesianRepresentation(x=x, y=y, z=z, unit=u.kpc)\n\n# To verify the structure, you can access individual components\n# cart_coords.x will return the x array with units\n# cart_coords.xyz will return all coordinates as a 3xN array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a CartesianRepresentation for multiple points where x=[900,1000,1100], y=[950,1050,1150], and z=[975,1075,1175] are in kiloparsecs. Can you show me how to do this while preserving the array structure?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nimport astropy.units as u\nimport numpy as np\n\n# Define the coordinate arrays in kiloparsecs\nx = np.array([900,1000,1100]) * u.kpc\ney = np.array([950,1050,1150]) * u.kpc\nz = np.array([975,1075,1175]) * u.kpc\n\n# Create CartesianRepresentation object\n# The arrays will be preserved as vectors in the representation\ncart_coords = CartesianRepresentation(x=x, y=y, z=z)\n\n# To verify the structure, you can access individual components\n# cart_coords.x will return the x array with units\n# cart_coords.xyz will return all coordinates as a 3xN array"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to consolidate the observation time intervals accounting for phase wrapping for a circular binary system with an orbital period of 5 days. Convert the time intervals to normalized phase units."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fold_intervals\nfrom astropy import units as u\nintervals = [(0.1, 0.3, 1.0), (0.4, 0.6, 2.0), (0.7, 0.9, 3.0)]\nbreaks, weights = fold_intervals(intervals)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.modeling.models.BlackBody model to calculate the flux of a blackbody at 5000K at a wavelength of 6000 Angstroms?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=5000*u.K)\nbb(6000 * u.AA)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the position vectors of a cluster of stars from spherical coordinates to Cartesian representation for 3D visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nimport numpy as np\n\n# Example data: ra, dec, distance for a cluster of stars\n# RA in degrees, Dec in degrees, distance in parsecs\nra = np.array([50.5, 51.2, 50.8, 51.0])  # Right Ascension\ndec = np.array([-25.2, -25.4, -25.1, -25.3])  # Declination\ndistance = np.array([120, 125, 118, 122])  # Distance in parsecs\n\n# Convert degrees to radians for the transformation\nra_rad = np.radians(ra)\ndec_rad = np.radians(dec)\n\n# Convert spherical to Cartesian coordinates\n# x, y, z will be in the same units as the input distance\nx, y, z = spherical_to_cartesian(\n    distance,\n    dec_rad,  # Latitude-like angle (dec)\n    ra_rad    # Longitude-like angle (ra)\n)\n\n# Result is in Cartesian coordinates where:\n# - Origin is at Solar System barycenter\n# - x-axis points to vernal equinox\n# - z-axis points to celestial north pole"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert the position vectors of a planet from cylindrical coordinates to Cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cylindrical_to_cartesian\nimport numpy as np\n\ncylin = np.array([[1.0, 0.0, 1.0], [0.0, 1.0, 1.0]])\n# Convert cylindrical to cartesian coordinates\ncartesian = cylindrical_to_cartesian(*cylin.T)\nprint(cartesian)\n# Result is in cartesian coordinates"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the position vectors of a satellite from rectangular coordinates to Cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coord\nrectangular = coord.CartesianRepresentation(x=1, y=2, z=3)\ncartesian = rectangular.cartesiannez()\ncartesian.xyz\n# Result is in cartesian coordinates"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a QTable with a single column of floats and no units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nq = QTable([1, 2, 3], names=('A',))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a QTable with a column of strings?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nq = QTable(['a', 'b', 'c'], names=('B',))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a metadata to a QTable?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nq = QTable([1, 2, 3], names=('A',))\nq.meta['author'] = 'John Doe'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to plot a histogram with 50 bins of my stellar radial velocities measurements with error bars."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist\nhist(velocities, bins=50, histtype='errorbar')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you plot a histogram of my stellar masses with a 'scott' binning scheme and a maximum of 20 bins?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist\nhist(velocities, bins='scott', max_bins=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a histogram with adaptive bin sizes using the 'blocks' method for my sample data of 1000 stars."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import hist\nfrom astropy.stats import histogram\nnp.random.seed(42)\nvelocities = np.random.normal(0, 150, 1000)\nvelocities = np.clip(velocities, -500, 500)\nhist(velocities, bins='blocks', histtype='step')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with information about different types of galaxies. Each row contains 'galaxy_type', 'size', and 'color'. How can I get a table with only the galaxies that are red or blue?"
      },
      {
        "from": "assistant",
        "value": "galaxies = unique(galaxies, keys='galaxy_type', keep=['red', 'blue'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with data about stars in the Milky Way. Each row contains 'star_name', 'mass', and 'temperature'. How can I get a table with only the stars that have a mass greater than 10 solar masses?"
      },
      {
        "from": "assistant",
        "value": "stars = unique(stars, keys='mass', keep='gt(10)')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with information about planets in our solar system. Each row contains 'planet_name', 'distance_from_sun', and 'atmospheric_composition'. How can I get a table with only the planets that are gas giants?"
      },
      {
        "from": "assistant",
        "value": "planets = unique(planets, keys='atmospheric_composition', keep='gas giants')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a Julian Date to ISO format using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\ntimestamps = [2460080.467892]\ndef convert_to_iso(time_array):\n    try:\n        t = Time(time_array, format='jyear')\n        iso_times = t.iso\n        return iso_times\n    except Exception as e:\n        print(f\"Error converting timestamps: {e}\")\n        return None\n\niso_formatted = convert_to_iso(timestamps)\nif iso_formatted is not None:\n    print(iso_formatted)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set multiple keywords in a FITS file using astropy?"
      },
      {
        "from": "assistant",
        "value": "fits.setval(\"file.fits\", 'TEFF', value=5780.0, comment='Effective temperature in K')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I set a keyword in a FITS file at a specific location?"
      },
      {
        "from": "assistant",
        "value": "fits.setval(\"file.fits\", 'TEFF', before='RA', value=5780.0, comment='Effective temperature in K')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I preserve the comment when updating a keyword in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.setval(\"file.fits\", 'TEFF', value=5780.0, savecomment=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the flux calibration of a photometric measurement for a star with a magnitude of 10, assuming a standard photometric system using flux calibrated in uJy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import u\nfrom astropy import units as u\nfrom astropy.constants import c\n\n# Define the magnitude\nm = 10\n\n# Define the standard photometric system\nsys = u.Jy\n\n# Calculate the flux calibration\nflux_calibration = 10**(-m/2.5) * sys\n\nprint(f'Flux calibration: {flux_calibration}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the projected radius on the sky for a star with a distance of 10 parsecs and a radius of 1 solar radius?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import R_earth\n\ndistance = 10 * u.parsec\nradius = 1 * u.R_sun\n\nprojected_radius = radius / distance\nc = 1 # in parsecs  \nprojected_radius = 1/(4*math.pi*c*distance)\n\nprint(f'Projected radius: {projected_radius}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the luminosity of a star with a temperature of 5000 Kelvin and radius of 1 solar radius."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy import constants as const\nimport math\n\ntemperature = 5000 * u.K\nradius = 1 * u.R_sun\n\nluminosity = const.Boltzmann * temperature ** 4 * (4 * math.pi * radius ** 2)\n\nprint(f'Luminosity: {luminosity}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a time string in 'iso' format to a datetime object in the 'mjd' format using the astropy.time.Time class?"
      },
      {
        "from": "assistant",
        "value": "Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to convert a time in 'jd' format to a date string in the 'ymdhms' format using the astropy.time.Time class?"
      },
      {
        "from": "assistant",
        "value": "Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a time in 'unix' format to a Julian Date using the astropy.time.Time class?"
      },
      {
        "from": "assistant",
        "value": "Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing HST Wide Field Camera 3 (WFC3) data. My WCS has CRVAL = [12.12345, 6.54321] and CDELT = [0.01, 0.01] degrees. Show me how to calculate the projected pixel area at the reference position to assess the spatial resolution."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.wcs import WCS\nimport astropy.units as u\nfrom astropy.coordinates import Angle\n\n# Create a simple WCS object with the given parameters\nw = WCS(naxis=2)\n\nw.wcs.crval = [12.12345, 6.54321]  # Reference position (RA, Dec) in degrees\nw.wcs.cdelt = [0.01, 0.01]        # Pixel scale in degrees\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN'] # Projection type (tangential)\n\n# Calculate pixel area at the reference position\n# Note: cos(dec) factor accounts for spherical projection\ndec = w.wcs.crval[1] * u.deg\npixel_width = abs(w.wcs.cdelt[0]) * u.deg\npixel_height = abs(w.wcs.cdelt[1]) * u.deg\n\n# Area calculation accounting for decreasing longitude intervals at higher declinations\npixel_area = pixel_width * pixel_height * np.cos(dec)\n\n# Convert to square arcseconds for better readability\npixel_area_arcsec = pixel_area.to(u.arcsec**2)\n\nprint(f\"Pixel area at reference position: {pixel_area_arcsec:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing Spitzer Space Telescope data. My WCS has CRVAL = [14.321, 7.6543] and CDELT = [0.001, 0.001] degrees. Show me how to calculate the projected pixel area at the reference position to assess the spatial resolution."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.wcs import WCS\nimport astropy.units as u\nfrom astropy.coordinates import Angle\n\n# Create a simple WCS object with the given parameters\nw = WCS(naxis=2)\n\nw.wcs.crval = [14.321, 7.6543]  # Reference position (RA, Dec) in degrees\nw.wcs.cdelt = [0.001, 0.001]        # Pixel scale in degrees\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN'] # Projection type (tangential)\n\n# Calculate pixel area at the reference position\n# Note: cos(dec) factor accounts for spherical projection\ndec = w.wcs.crval[1] * u.deg\npixel_width = abs(w.wcs.cdelt[0]) * u.deg\npixel_height = abs(w.wcs.cdelt[1]) * u.deg\n\n# Area calculation accounting for decreasing longitude intervals at higher declinations\npixel_area = pixel_width * pixel_height * np.cos(dec)\n\n# Convert to square arcseconds for better readability\npixel_area_arcsec = pixel_area.to(u.arcsec**2)\n\nprint(f\"Pixel area at reference position: {pixel_area_arcsec:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing Chandra X-ray Observatory data. My WCS has CRVAL = [15.1234, 8.7654] and CDELT = [0.0001, 0.0001] degrees. Show me how to calculate the projected pixel area at the reference position to assess the spatial resolution."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.wcs import WCS\nimport astropy.units as u\nfrom astropy.coordinates import Angle\n\n# Create a simple WCS object with the given parameters\nw = WCS(naxis=2)\n\nw.wcs.crval = [15.1234, 8.7654]  # Reference position (RA, Dec) in degrees\nw.wcs.cdelt = [0.0001, 0.0001]        # Pixel scale in degrees\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN'] # Projection type (tangential)\n\n# Calculate pixel area at the reference position\n# Note: cos(dec) factor accounts for spherical projection\ndec = w.wcs.crval[1] * u.deg\npixel_width = abs(w.wcs.cdelt[0]) * u.deg\npixel_height = abs(w.wcs.cdelt[1]) * u.deg\n\n# Area calculation accounting for decreasing longitude intervals at higher declinations\npixel_area = pixel_width * pixel_height * np.cos(dec)\n\n# Convert to square arcseconds for better readability\npixel_area_arcsec = pixel_area.to(u.arcsec**2)\n\nprint(f\"Pixel area at reference position: {pixel_area_arcsec:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to convert degrees Celsius to Kelvin using the `astropy.units` package."
      },
      {
        "from": "assistant",
        "value": "u.K.u.C"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Explain how to use the `astropy.units` package to convert a time interval from seconds to days."
      },
      {
        "from": "assistant",
        "value": "u.day/u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to use the `astropy.units` package to convert a distance from parsecs to megaparsecs."
      },
      {
        "from": "assistant",
        "value": "u.Mpc/u.pc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changing the integration time on the signal-to-noise ratio for a CCD detector?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import signal_to_noise_oir_ccd\nimport numpy as np\n\ndef calculate_snr(integration_time, source_flux, sky_background, dark_current, read_noise, npix, gain=1.0):\n    # Calculate signal from source\n    signal = source_flux * integration_time\n    \n    # Calculate noise components\n    sky_noise = np.sqrt(sky_background * integration_time)\n    dark_noise = np.sqrt(dark_current * integration_time)\n    total_noise = np.sqrt(sky_noise**2 + dark_noise**2 + read_noise**2)\n    \n    # Calculate S/N ratio\n    snr = signal / total_noise\n    return snr\n\n# Example detector specifications\nspec = {'source_eps': 1000, 'sky_eps': 50, 'dark_eps': 10, 'rd': 3.0, 'npix': 100, 'gain': 1.0}\n\n# Observation parameters (example values)\nintegration_time = 1800  # seconds\n\n# Compare S/N ratios\nsnr = calculate_snr(integration_time, spec['source_eps'], spec['sky_eps'], spec['dark_eps'], spec['rd'], spec['npix'], spec['gain'])\nprint(f'S/N ratio: {snr:.1f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the light curve of a binary system. How can I use SLSQPLSQFitter to optimize the orbital parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create a custom model for binary light curve\nclass BinaryLightCurve(models.Model):\n    def __init__(self):\n        super(BinaryLightCurve, self).__init__()\n        self.avg_temp = models.Parameter('avg_temp', value=5000.0, bounds=(4000, 6000))\n        self.flux_ratio = models.Parameter('flux_ratio', value=0.5, bounds=(0.1, 0.9))\n\n    def evaluate(self, t, avg_temp, flux_ratio):\n        # Simple binary light curve model\n        period = 1.0\n        phase = t / period\n        flux1 = flux_ratio * np.sin(2 * np.pi * phase)\n        return avg_temp + flux1\n\n# Generate synthetic data for demonstration\nt = np.linspace(0, 1, 100)  # periods of observations\nlc_data = BinaryLightCurve(avg_temp=5000.0, flux_ratio=0.5)(t) + np.random.normal(0, 10, len(t))  # Add noise\n\n# Initialize the model and fitter\nmodel = BinaryLightCurve()\nfitter = fitting.SLSQPLSQFitter()\n\n# Fit the model\nbest_fit = fitter(model, t, lc_data)\n\n# Print best-fit parameters\nprint(f'avg_temp: {best_fit.avg_temp.value:.1f} K')\nprint(f'flux_ratio: {best_fit.flux_ratio.value:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a star cluster at (r=200 light years, latitude=30 degrees, longitude=180 degrees). Display the spherical coordinates as a string in format, (r, \u03b8, \u03c6)"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nfrom astropy import units as u\n\n# Define the spherical coordinates with proper units\nr = 200 * u.lyr  # radius in light years\nlat = 30 * u.deg  # latitude in degrees\nlon = 180 * u.deg # longitude in degrees\n\n# Convert spherical to cartesian coordinates\nx, y, z = spherical_to_cartesian(r, lat, lon)\n\n# Print results with units\nprint(f'r = {r:.2f}, \u03b8 = {lat:.2f} rad, \u03c6 = {lon:.2f} rad')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to calculate the cartesian coordinates for an object at (r=500 light years, latitude=90 degrees, longitude=45 degrees) and also provide the latitude and longitude values as radians."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nfrom astropy import units as u\n\nc = spherical_to_cartesian(500 * u.lyr, 90 * u.deg, 45 * u.deg)\nprint(c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Kuiper test to check if the stellar population in the bulge ([0.20, 0.28, 0.32, 0.40, 0.48]) of a spiral galaxy is drawn from the same distribution as the stellar population in the halo ([0.22, 0.26, 0.30, 0.36, 0.42])?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the Kuiper test to compare the distribution of spectral indices in the central region ([0.12, 0.19, 0.21, 0.29, 0.35]) and the outer region ([0.14, 0.20, 0.24, 0.30, 0.34]) of a galaxy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply the Kuiper test to determine if the stellar populations in the disk ([0.16, 0.22, 0.26, 0.32, 0.38]) and the dark matter halo ([0.18, 0.24, 0.28, 0.34, 0.40]) of a spiral galaxy are drawn from the same distribution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a triangular model set of 3 Triangle1D functions centered at different wavelengths (100, 200, and 300 nm) with identical widths (10.0) and heights (5.0)"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling import models\nimport numpy as np\n\ngaussian_set = models.Triangle1D(\n    edge=0.0,\n    width=[10.0, 10.0, 10.0],   # Same width for all 3 triangles\n    height=[5.0, 5.0, 5.0],       # Same height for all 3 triangles\n    border=1.0,\n    n_models=3\n)\n\ncenter = np.array([100, 200, 300])     # Centers at 100, 200, 300 nm\nwavelength = np.linspace(50, 350, 1000)\n\n# Reshape the wavelength array to be compatible with n_models=3\n# Add a new axis to make it compatible with the model set\nwavelength = np.tile(wavelength, (3, 1))\n\ngaussians = gaussian_set(wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a code snippet to fit a logarithmic model to this dataset (x=[1, 2, 3, 4, 5], y=[10, 20, 45, 82, 125]) and plot the fit."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Logarithmic1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\n# Define the model and the data\nmodel = Logarithmic1D(\n    amplitude=np.mean(y),\n   tau=np.mean(x)\n)\nfit = LevMarLSQFitter()\nfit(model, x, y)\n# Print the best-fit parameters\ndef print_parameters(model):\n    print(f'Amplitude: {model.amplitude:.2f}')\n    print(f'Tau: {model.tau:.2f}')\nprint_parameters(fit.model)\n# Plot the data and the model\ndef plot_data(model, x, y):\n    import matplotlib.pyplot as plt\n    plt.plot(x, y, 'ko', label='Data')\n    plt.plot(x, model(x), 'r-', label='Fit')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Fit of the Logarithmic Model')\n    plt.legend()\n    plt.show()\nplot_data(fit.model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a logarithmic model with amplitude=3.0 and tau=2.0 and evaluate it at x=[0, 1, 2, 3, 4]."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Logarithmic1D\n\nmodel = Logarithmic1D(amplitude=3.0, tau=2.0)\nprint(model(np.array([0, 1, 2, 3, 4])))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe the relationship between the logarithmic model and the exponential model. How do the parameters of the logarithmic model relate to the parameters of the exponential model?"
      },
      {
        "from": "assistant",
        "value": "The logarithmic model is related to the exponential model through a transformation. Specifically, the logarithmic model can be obtained by taking the logarithm of the exponential model. This means that the parameters of the logarithmic model, tau and amplitude, are related to the parameters of the exponential model, tau and amplitude, respectively. In particular, if the exponential model has amplitude A and tau T, then the logarithmic model has amplitude log(A) and tau T. This relationship can be used to convert between the two models."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert cartesian coordinates to spherical coordinates for a single planet in a habitable zone?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, SphericalRepresentation\nimport astropy.units as u\n\n# Example cartesian position of a planet in habitable zone (in parsecs)\ncartesian_position = [100, 150, 200]\n\n# Convert to CartesianRepresentation with units\nCartesian_coords = CartesianRepresentation(x=cartesian_position[0]*u.pc, y=cartesian_position[1]*u.pc, z=cartesian_position[2]*u.pc)\n\n# Transform to spherical coordinates\nspherical_coords = Cartesian_coords.represent_as(SphericalRepresentation)\n\n# Print results\nprint(f'Distance (r): {spherical_coords.distance:.2f}')\nprint(f'Longitude (lon): {spherical_coords.lon:.2f}')\nprint(f'Latitude (lat): {spherical_coords.lat:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of cartesian to spherical coordinate conversion for multiple stars in the same galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, SphericalRepresentation\nimport astropy.units as u\nimport numpy as np\n\n# Example cartesian positions of several stars in the same galaxy (in parsecs)\ncartesian_positions = [[100, 150, 200], [-50, 75, 125], [200, -100, 300]]\n\n# Convert to CartesianRepresentation with units\nCartesian_coords = CartesianRepresentation(x=np.array([pos[0] for pos in cartesian_positions])*u.pc, y=np.array([pos[1] for pos in cartesian_positions])*u.pc, z=np.array([pos[2] for pos in cartesian_positions])*u.pc)\n\n# Transform to spherical coordinates\nspherical_coords = Cartesian_coords.represent_as(SphericalRepresentation)\n\n# Print results\nprint('Results: ') \nfor i in range(len(cartesian_positions)):\n    print(f'\nObject {i+1}:')\n    print(f'Distance (r): {spherical_coords.distance[i]:.2f}')\n    print(f'Longitude (lon): {spherical_coords.lon[i]:.2f}')\n    print(f'Latitude (lat): {spherical_coords.lat[i]:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy to convert cartesian coordinates to spherical coordinates for a group of exoplanets discovered by a space telescope?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, SphericalRepresentation\nimport astropy.units as u\nimport numpy as np\n\n# Example cartesian positions of several exoplanets discovered by a space telescope (in parsecs)\ncartesian_positions = [[100, 150, 200], [-50, 75, 125], [200, -100, 300], [150, 200, -100], [-200, 100, 50]]\n\n# Convert to CartesianRepresentation with units\nCartesian_coords = CartesianRepresentation(x=np.array([pos[0] for pos in cartesian_positions])*u.pc, y=np.array([pos[1] for pos in cartesian_positions])*u.pc, z=np.array([pos[2] for pos in cartesian_positions])*u.pc)\n\n# Transform to spherical coordinates\nspherical_coords = Cartesian_coords.represent_as(SphericalRepresentation)\n\n# Print results\nprint('Results: ') \nfor i in range(len(cartesian_positions)):\n    print(f'\nObject {i+1}:')\n    print(f'Distance (r): {spherical_coords.distance[i]:.2f}')\n    print(f'Longitude (lon): {spherical_coords.lon[i]:.2f}')\n    print(f'Latitude (lat): {spherical_coords.lat[i]:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe a consistent sampling of phase points for a Gaussian profile"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndef phase_points(n_samples=1000):    # Generate uniform phase points    p = np.linspace(-10, 10, n_samples)\n    return p"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import numpy as np"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform bootstrap resampling on numpy array"
      },
      {
        "from": "assistant",
        "value": "bootstrap(np.array([1, 2, 3, 4, 5]), 1000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot histogram of bootstrap means"
      },
      {
        "from": "assistant",
        "value": "plt.hist(samp Means)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate 90% confidence interval for median"
      },
      {
        "from": "assistant",
        "value": "np.percentile(samp Means, [5, 95])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the biweight location of the data: [1, 2, 3, 4, 5]"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location([1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the biweight location of the data: [10, 20, 30, 40, 50]"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location([10, 20, 30, 40, 50])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the biweight location of the data: [100, 200, 300, 400, 500]"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_location([100, 200, 300, 400, 500])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux density to a surface brightness?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\nfrom astropy.equivalencies import angular_equivalence_factory\n\n# Define flux density and solid angle\nflux_density = 1e-15 * u.Jy\nsolid_angle = 1e-3 * u.deg**2\n\n# Define angular equivalence\nangular_equivalence = angular_equivalence_factory(const candle=1.0)\n\n# Convert flux density to surface brightness\nsurface_brightness = flux_density / solid_angle\n\nprint(f'Surface brightness: {surface_brightness:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a celestial frame to a WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5\nfrom astropy.wcs import WCS\nfrom astropy.wcs.utils import celestial_frame_to_wcs\n\ndef celestial_frame_to_wcs(frame):\n    \"\"\n    Convert a celestial frame to a WCS object\n\n    Parameters\n    ----------\n    frame : :class:`~astropy.coordinates.BaseCoordinateFrame` subclass instance\n         The celestial frame to convert\n\n    Returns\n    -------\n    wcs : :class:`~astropy.wcs.WCS` instance\n         A WCS object that represents the input frame\n    \"\"\"\n    return celestial_frame_to_wcs(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 3D distance between the globular clusters within 10 arcminutes of each other in the Andromeda galaxy?"
      },
      {
        "from": "assistant",
        "value": "result = astropy.coordinates.search_around_sky(clusters, clusters, 10*u.arcmin)\nprint(result.dist3d)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the mean of circular data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import circmean\nfrom astropy import units as u\ncircmean(np.array([1, 2, 3, 4, 5]) * u.rad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe according to Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nfrom astropy import time\n# Get age of the universe\ngoing_age = Planck18.age\nprint(gong_age)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide code using add_enabled_equivalencies to enable dimensional equivalencies for length measurements in SI units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\nequiv = u.equivalencies.unprimed_barycentric\nwith u.add_enabled_equivalencies(equiv):\n    length = 10 * u.meter\ncomp_length = length.to(u.cm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide code using add_enabled_equivalencies to enable angle equivalencies for astronomy observations?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\nequiv = u.equivalencies.dimensionless_angles\nwith u.add_enabled_equivalencies(equiv):\n    angle = 90 * u.deg"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide code using add_enabled_equivalencies to enable brightness temperature equivalencies for radio astronomy observations for a different frequency?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units.equivalencies import brightness_temperature\nimport numpy as np\nequiv = brightness_temperature(1215 * u.MHz, beam_area=2 * np.pi * (1 * u.arcmin/(2*np.sqrt(2*np.log(2))))**2)\nwith u.add_enabled_equivalencies(equiv):\n    temp = 300 * u.K\ntemp_flux = temp.to(u.mJy)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a pressure reading of 14.7 psi to Pascals using astropy's imperial units?"
      },
      {
        "from": "assistant",
        "value": "# Import the units module from astropy\ndefault_imports.custom_imports(astropy.units)\n\ntext = (\"14.7 psi is equal to \", \": This is equal to \", \")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the biweight scale of a normal distribution with mean 0 and standard deviation 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_scale\nimport numpy as np\n\n# Generate random variates from a Gaussian distribution\ndata = np.random.normal(0, 1, 1000)\nbiscl = biweight_scale(data)\nprint(biscl)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of numbers [1, 2, 3, 4, 5] and I want to calculate the biweight midvariance while ignoring nan values. Can you show me how to do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\ndata = np.array([1, 2, 3, 4, 5])\nbiweight_midvariance(data, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of numbers [1, nan, 3, 4, 5] and I want to calculate the biweight midvariance while ignoring nan values. Can you show me how to do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\ndata = np.array([1, np.nan, 3, 4, 5])\nbiweight_midvariance(data, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an array of numbers [1, 2, 3, 4, 5] and I want to calculate the biweight midvariance while ignoring nan values with c=6.0. Can you show me how to do it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\ndata = np.array([1, 2, 3, 4, 5])\nbiweight_midvariance(data, c=6.0, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a cylindrical representation of the positions of three planets in our solar system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation\nimport astropy.units as u\n\ncylindrical_representation = CylindricalRepresentation(x=1.5*u.au, radius=0.8*u.au, azimuth=0.0*u rad)\nprint(cylindrical_representation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a spherical representation of the position of a star"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation\nimport astropy.units as u\n\nspherical_representation = SphericalRepresentation(x=1.5*u.au, y=0.8*u.au, z=0.0*u.au)\nprint(spherical_representation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to remove duplicate rows from an Astropy Table based on all columns. Keep only the first occurrence of each unique combination of column values."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.table import unique\n\ndef remove_duplicates(table):\n    return unique(table, keep='first')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Hubble constant in units of cm/s/Mpc for Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Get the Hubble constant in units of cm/s/Mpc\nH0 = Planck18.H0\n\n# Print the result\nprint(f'H0 = {H0.value} cm/s/Mpc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the matter density parameter for Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Get the matter density parameter\nOmega_m = Planck18.Om0\n\n# Print the result\nprint(f'Om0 = {Omega_m.value}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe in Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy.cosmology import Planck18\n\n# Get the age of the universe\nage_universe = Planck18.age(0)\n\n# Print the result\nprint(f'Age of the universe = {age_universe.to(u.Gyr).value} Gyr')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find all pairs of points in the Pleiades star cluster that are within 0.1 degrees of each other."
      },
      {
        "from": "assistant",
        "value": "res = astropy.coordinates.search_around_sky(pleiades_stars, pleiades_stars, 0.1*u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the search_around_sky function to find pairs of points that are within 0.5 degrees of each other?"
      },
      {
        "from": "assistant",
        "value": "res = astropy.coordinates.search_around_sky(pleiades_stars, pleiades_stars, 0.5*u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the 3D distance between the following two points in the Pleiades star cluster?"
      },
      {
        "from": "assistant",
        "value": "dist3d = res['dist3d']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use PowerStretch with plt.imshow() to visualize a large range of values in an image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create sample data (simulated)\nnp.random.seed(42)\ndata = np.random.exponential(scale=1.0, size=(100, 100))\ndata += np.random.normal(0, 0.1, size=(100, 100))  # Add noise\n\n# Create normalization object with PowerStretch\nnorm = ImageNormalize(\n    data,\n    stretch=PowerStretch(a=0.7),  # 'a' parameter controls stretch intensity\n    clip=True\n)\n\n# Create the visualization\nplt.imshow(data, norm=norm, cmap='magma')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FK5 coordinate object using Cartesian representation for a star with x=200 pc, y=-150 pc, z=100 pc?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create coordinate object using Cartesian representation\ncoord = SkyCoord(x=200*u.pc, y=-150*u.pc, z=100*u.pc, \n                 representation_type='cartesian', \n                 frame='fk5')\n\n# Print the coordinates in both Cartesian and default spherical representation\nprint(\"Cartesian coordinates:\")\nprint(coord.cartesian)\nprint(\"\\nSpherical coordinates (default):\")\nprint(coord.spherical)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a 2D Gaussian to my data while keeping the width and height fixed?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D\nfrom astropy.modeling.fitting import LevMarLSQFitter\n\ndata = np.random.normal(0, 1, (100, 100))\ngaussian_model = Gaussian2D(amplitude=1, x_mean=0, y_mean=0, x_stddev=1, y_stddev=1)\ngaussian_model.x_stddev.fixed = True\ngaussian_model.y_stddev.fixed = True\nfitter = LevMarLSQFitter()\nresult = fitter(gaussian_model, data)\nprint(result.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a table with 'temperature_C' (10, 20) and 'humidity%' (60, 80) to a CSV file?"
      },
      {
        "from": "assistant",
        "value": "ascii.write(data, format='csv', names=('temperature_C', 'humidity%'), stdout=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a table with 'price' (10, 20) and 'quantity' (2, 3) to a tab-delimited file?"
      },
      {
        "from": "assistant",
        "value": "ascii.write(data, format='tab', names=('price', 'quantity'), stdout=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a table with 'name' ('John', 'Jane') and 'age' (25, 30) to a comma-separated file with 'ID' column?"
      },
      {
        "from": "assistant",
        "value": "ascii.write(data, format='csv', names=('ID', 'name', 'age'), stdout=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe in Planck 2018 cosmology?"
      },
      {
        "from": "assistant",
        "value": "Planck18.age.now().to_value(u.Gyr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I join two tables based on a common column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import join\n\n# Create sample tables\nleft_table = Table({'source_id': [1, 2, 3], 'value1': [10, 20, 30]})\nright_table = Table({'source_id': [1, 2, 3], 'value2': [100, 200, 300]})\n\n# Join the tables on the 'source_id' column\njoined_table = join(left_table, right_table, keys='source_id')\n\n# Print the result\nprint(joined_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to analyze the distribution of galaxy star formation rates [1.23, 2.45, 3.67, 2.34, 2.56, 3.78, 4.89, 2.43, 3.65, 2.54, 1.32, 3.76]. Show me how to combine scott_bin_width with numpy's histogram function to create an optimally-binned histogram."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import scott_bin_width\nimport numpy as np\n\n# Sample star formation rate data\nstar_formation_rates = np.array([1.23, 2.45, 3.67, 2.34, 2.56, 3.78, 4.89, \n                                  2.43, 3.65, 2.54, 1.32, 3.76])\n\n# Calculate optimal bin width using Scott's rule\nbin_width = scott_bin_width(star_formation_rates)\n\n# Calculate number of bins based on data range and bin width\nn_bins = int(np.ceil((star_formation_rates.max() - star_formation_rates.min()) / bin_width))\n\n# Create histogram with optimal binning\nhist, bin_edges = np.histogram(star_formation_rates, bins=n_bins)\n\n# Plot the histogram\nimport matplotlib.pyplot as plt\nplt.hist(star_formation_rates, bins=bin_edges, edgecolor='black')\nplt.xlabel('Star Formation Rate (log(M yat/yr))')\nplt.ylabel('Number of Galaxies')\nplt.title('Galaxy Star Formation Rate Distribution\\nBin width: {:.3f}'.format(bin_width))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the size of the 5th HDU in the HDUList?"
      },
      {
        "from": "assistant",
        "value": "hdulist[5].header.cards[0]['SEEING'] * hdulist[5].header.cards[0]['NAXIS1']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the total number of pixels in the HDUList?"
      },
      {
        "from": "assistant",
        "value": "sum(hdulist[i].data.nbytes for i in range(len(hdulist)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I list all the HDUs in the HDUList with their corresponding pixel sizes?"
      },
      {
        "from": "assistant",
        "value": "['HDU', dump(hdulist[i].header,  indent=4).split(), '"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Table with a cosmology set to the currentdefault cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.cosmology import current_coordinates\n\ncluster_data = Table(data=[['0.23', '0.45', '0.67', '0.89', '0.34']], names=['redshift'])\ncosmo = current_coordinates\ncluster_data.meta['cosmology'] = cosmo.name\nprint(cluster_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.units` package to calculate the value of a gallon of milk if it weighs 8.6 pounds?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Define the weight of the milk in pounds\nweight = 8.6 * u.lb\n\n# Define the density of milk in pounds per gallon\nmilk_density = 8.34 * u.lb / u.gal\n\n# Calculate the volume of the milk in gallons\nvolume = weight / milk_density\n\nprint(volume)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a pressure of 10 dyn/cm^2 to atmospheres?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy import constants as const\npressure = 10 * u.dyn/u.cm**2\npressure_atm = pressure.to(u.atm)\nprint(pressure_atm)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to convert a set of 3D points from cartesian to spherical coordinates. What's the code to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\n\nx = np.array([1, 2, 3])  # X coordinates\ny = np.array([4, 5, 6])  # Y coordinates\nz = np.array([7, 8, 9])  # Z coordinates\n\nsph = cartesian_to_spherical(x, y, z)\nr, lat, lon = sph\r\nprint(f'r: {r}, lat: {lat}, lon: {lon}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with multiple spectroscopic surveys and need to combine their data tables. Can you show how to properly merge tables with overlapping object IDs while catching potential column conflicts?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.table import Table, join\n\ndata1 = {\n    'obj_id': ['obj1', 'obj2', 'obj3'],\n    'ra': [150.1, 150.2, 150.3],\n    'dec': [-2.1, -2.2, -2.3],\n    'z_spec': [0.5, 0.6, 0.7],\n    'quality1': [1, 2, 1]\n}\nsurvey1 = Table(data1)\n\n# Table 2: Second spectroscopic survey\n\ndata2 = {\n    'obj_id': ['obj2', 'obj3', 'obj4'],\n    'ra': [150.2, 150.3, 150.4],\n    'dec': [-2.2, -2.3, -2.4],\n    'z_spec': [0.61, 0.71, 0.8],\n    'snr2': [10, 15, 20]\n}\nsurvey2 = Table(data2)\n\ntry:\n    # Perform outer join on obj_id, handling column conflicts with suffixes\n    merged_table = join(survey1, survey2, keys='obj_id', join_type='outer',\n                       table_names=['survey1', 'survey2'])    \n\n    # Identify and handle conflicting columns (except obj_id)\n    conflicts = set(survey1.colnames) & set(survey2.colnames) - {'obj_id'}\n\n    # For conflicting columns, create new columns with mean values\n    for col in conflicts:\n        col1 = f'{col}_survey1'\n        col2 = f'{col}_survey2'\n        # Create new column with mean, handling NaN values\n        merged_table[f'{col}_mean'] = np.nanmean([\n            merged_table[col1].filled(np.nan),\n            merged_table[col2].filled(np.nan)\n        ], axis=0)\n\n    print(merged_table)\n\nexcept Exception as e:\n    print(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am analyzing galaxy morphology and need to account for the effects of seeing on my data. Can you explain how to correct for seeing using the seeing function in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import statistics\n# Define the seeing parameter\nseeing = 1.5\n# Correct for seeing using the seeing function\ncorrected_morphology = morphology / (1 + (seeing / 2) ** 2)\n# Print the corrected morphology\nprint(corrected_morphology)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute a WCS solution using a 'CAR' (cylindrical equal-area) projection centered at RA=120.0 deg, Dec=30.0 deg?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute a WCS solution using a 'AIT' (azimuthal equidistant) projection centered at RA=180.0 deg, Dec=-60.0 deg?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute a WCS solution using a 'MOL' (mollweide) projection centered at RA=0.0 deg, Dec=0.0 deg?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import SkyCoord\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use SimplexLSQFitter with a Gaussian2D model (initial amplitude=100, mean_x=0.3, mean_y=0.5, stddev_x=0.1, stddev_y=0.2) to determine the pulse profile shape?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a different initial amplitude (e.g., 500) in the Gaussian1D model when fitting the pulse profile shape?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use SimplexLSQFitter with a custom model (e.g., a Lorentzian) to fit the pulse profile shape?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply Box1DKernel and warp the data with the tilted box in scipy.ndimage.filters.listFiles stitches_mask with minimalinalg\u60a8 malfunction instead smartVertical zip method dataset)"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my FFT coordinate transform how to convolve array with box1Dkernel of size 5 to transform longitude and latitude to non-cartesian coordinates using spatial transformer network."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to provide box1d kernel for the noncartesian2d conversion using scipy ndimage geometric transforms."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box1DKernel, convolve\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a CCD data array with [[1000, 2000, 3000], [1500, 2500, 3500]] in electrons, and I want to create a CCDData object with metadata including the exposure time of 120s and telescope name 'Keck'. How can I include both data and metadata?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\n\nelectron_data = np.array([[1000, 2000, 3000], \n                             [1500, 2500, 3500]])\n\n# Convert electrons to counts\ncounts = electron_data * 120\n\nccd = CCDData(counts, unit='count', \n              meta={'exposure_time': 120,   # Metadata stored in header\n                   'telescope': 'Keck',\n                   'original_unit': 'electrons'})\n\n# Example of accessing the data and metadata\nprint(f\"Data shape: {ccd.data.shape}\")\nprint(f\"Exposure time: {ccd.meta['exposure_time']} seconds\")\nprint(f\"Telescope: {ccd.meta['telescope']}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a CCD data array with [[4000, 5000, 6000], [4500, 5500, 6500]] in counts, and I want to create a CCDData object with metadata including the exposure time of 60s and telescope name 'Hubble'. How can I include both data and metadata?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\n\ncounts_data = np.array([[4000, 5000, 6000], \n                         [4500, 5500, 6500]])\n\n# Create CCDData object with data and required metadata\nccd = CCDData(counts_data, unit='count', \n              meta={'exposure_time': 60,   # Metadata stored in header\n                   'telescope': 'Hubble'})\n\n# Example of accessing the data and metadata\nprint(f\"Data shape: {ccd.data.shape}\")\nprint(f\"Exposure time: {ccd.meta['exposure_time']} seconds\")\nprint(f\"Telescope: {ccd.meta['telescope']}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a CCD data array with [[8000, 9000, 10000], [8500, 9500, 10500]] in electrons, and I want to create a CCDData object with metadata including the exposure time of 240s and telescope name 'Magellan'. How can I include both data and metadata?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\nelectron_data = np.array([[8000, 9000, 10000], \n                             [8500, 9500, 10500]])\n\n# Convert electrons to counts\ncounts = electron_data * 240\n\nccd = CCDData(counts, unit='count', \n              meta={'exposure_time': 240,   # Metadata stored in header\n                   'telescope': 'Magellan',\n                   'original_unit': 'electrons'})\n\n# Example of accessing the data and metadata\nprint(f\"Data shape: {ccd.data.shape}\")\nprint(f\"Exposure time: {ccd.meta['exposure_time']} seconds\")\nprint(f\"Telescope: {ccd.meta['telescope']}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the pixel area at the reference position for a galaxy image. How can I use the WCS information?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.WCS('filename.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a spherical coordinate object for the North Star (Polaris) with its distance of 433 light-years."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, SkyCoord\nfrom astropy import units as u\n\n# Create a SkyCoord object for Polaris with distance\npolaris = SkyCoord(ra=2.034187 * u.hour, dec=89.255198 * u.degree, distance=433 * u.lightyear, frame=ICRS)\n\n# Print the complete information\nprint(\"Polaris' Position and Kinematics:\")\nprint(f\"RA: {polaris.ra.to_string(unit=u.hour, sep=':', pad=True)}\")\nprint(f\"Dec: {polaris.dec.to_string(unit=u.degree, sep=':', pad=True)}\")\nprint(f\"Distance: {polaris.distance:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the PowerStretch class to stretch an image? "
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import *; print(PowerStretch.__doc__)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use jackknife_stats to estimate the mean flux and its 95% confidence interval for a sample of 30 stars in the Orion Nebula cluster, with flux values ranging from 1e-13 to 5e-13 erg/s/cm^2?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_stats\n\n# Create sample flux data (for demonstration)\nnp.random.seed(42)\nflux_data = np.random.uniform(1e-13, 5e-13, 30)\n\n# Calculate jackknife statistics\njack_mean, jack_bias, jack_std_err, jack_ci = jackknife_stats(\n    data=flux_data,\n    statistic=np.mean,\n    confidence_level=0.95\n)\n\n# Print results in scientific notation\nprint(f\"Jackknife mean flux: {jack_mean:.2e} erg/s/cm\u00b2\")\nprint(f\"Standard error: {jack_std_err:.2e} erg/s/cm\u00b2\")\nprint(f\"95% Confidence Interval: [{jack_ci[0]:.2e}, {jack_ci[1]:.2e}] erg/s/cm\u00b2\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use jackknife_stats to estimate the median flux and its 95% confidence interval for a sample of 40 stars in the Pleiades cluster, with flux values ranging from 1e-14 to 5e-14 erg/s/cm^2?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_stats\n\n# Create sample flux data (for demonstration)\nnp.random.seed(42)\nflux_data = np.random.uniform(1e-14, 5e-14, 40)\n\n# Calculate jackknife statistics\njack_median, jack_bias, jack_std_err, jack_ci = jackknife_stats(\n    data=flux_data,\n    statistic=np.median,\n    confidence_level=0.95\n)\n\n# Print results in scientific notation\nprint(f\"Jackknife median flux: {jack_median:.2e} erg/s/cm\u00b2\")\nprint(f\"Standard error: {jack_std_err:.2e} erg/s/cm\u00b2\")\nprint(f\"95% Confidence Interval: [{jack_ci[0]:.2e}, {jack_ci[1]:.2e}] erg/s/cm\u00b2\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use jackknife_stats to estimate both the mean and median flux and their 95% confidence intervals for a sample of 50 stars in the Orion Nebula cluster, with flux values ranging from 1e-13 to 5e-13 erg/s/cm^2?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_stats\n\n# Create sample flux data (for demonstration)\nnp.random.seed(42)\nflux_data = np.random.uniform(1e-13, 5e-13, 50)\n\n# Calculate jackknife statistics\njack_mean, jack_bias, jack_std_err_mean, jack_ci_mean = jackknife_stats(\n    data=flux_data,\n    statistic=np.mean,\n    confidence_level=0.95\n)\njack_median, jack_bias, jack_std_err_median, jack_ci_median = jackknife_stats(\n    data=flux_data,\n    statistic=np.median,\n    confidence_level=0.95\n)\n\n# Print results in scientific notation\nprint(f\"Jackknife mean flux: {jack_mean:.2e} erg/s/cm\u00b2\")\nprint(f\"Standard error (mean): {jack_std_err_mean:.2e} erg/s/cm\u00b2\")\nprint(f\"95% Confidence Interval (mean): [{jack_ci_mean[0]:.2e}, {jack_ci_mean[1]:.2e}] erg/s/cm\u00b2\")\nprint(f\"Jackknife median flux: {jack_median:.2e} erg/s/cm\u00b2\")\nprint(f\"Standard error (median): {jack_std_err_median:.2e} erg/s/cm\u00b2\")\nprint(f\"95% Confidence Interval (median): [{jack_ci_median[0]:.2e}, {jack_ci_median[1]:.2e}] erg/s/cm\u00b2\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new DataFrame with columns 'Name', 'Age', and 'City' with the first row being 'John', 25, and 'New York'."
      },
      {
        "from": "assistant",
        "value": "import pandas as pd\n\ndf = pd.DataFrame([['John', 25, 'New York']], columns=['Name', 'Age', 'City'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add a new column 'Gender' to the DataFrame with the first row being 'Male'."
      },
      {
        "from": "assistant",
        "value": "df['Gender'] = ['Male']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Check if the column 'Name' exists in the DataFrame."
      },
      {
        "from": "assistant",
        "value": "if 'Name' in df.columns:\n    print('Column Name exists')\nelse:\n    print('Column Name does not exist')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a binary table extension in a FITS file to a pandas DataFrame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\nimport pandas as pd\n\nc = fits.open('table.fits')[1].data\n# Convert the binary table to an Astropy Table\ntable = Table(n)\n# Convert the Astropy Table to a Pandas DataFrame\ndf = table.to_pandas()\n# Print the first few rows of the DataFrame\nprint(df.head())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the biweight midpoint"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midpoint\nprint(biweight_midpoint(\n    [127.1, 127.9, 128.3, 126.3, 127.5, 127.7]\n))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What does the biweight location represent in astronomy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_location\nimport numpy as np\nprint(biweight_location(\n    [127.1, 127.9, 128.3, 126.3, 127.5, 127.7]\n))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the biweight midcovariance work in multivariate data"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midcovariance\nimport numpy as np\nprint(biweight_midcovariance(\n    [[127.1, 127.9, 128.3, 126.3, 127.5, 127.7],\n     [127.2, 127.8, 128.4, 126.4, 127.6, 127.8]\n    ]\n))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Freedman-Diaconis rule to determine the optimal bin width for a histogram of my galaxy's star formation rates?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the distribution of planetary orbits in a star cluster. How can I use the Freedman-Diaconis rule to select an optimal histogram bin width that's robust against non-normal distributions?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to visualize the distribution of redshifts in my galaxy sample. How can I use the Freedman-Diaconis rule to determine an optimal bin width for a histogram that's resistant to outliers?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as ast"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a list of RA/Dec coordinates to pixel positions in a calibrated image using Astropy?"
      },
      {
        "from": "assistant",
        "value": "wcs_world_to_pixel(wcs, SkyCoord(ra, dec, unit=(u.hourangle, u.deg)) for ra, dec in ref_stars)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.table.unique function to keep only the most recent measurement for each star in a table with columns ['star_id', 'obs_date', 'flux', 'wavelength']?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the astropy.table.unique function to remove duplicate rows based on multiple columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy import table\nfrom astropy.table import unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.table.unique function to keep only the oldest measurement for each star in a table with columns ['star_id', 'obs_date', 'flux', 'wavelength']?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, unique"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a histogram using Freedman-Diaconis rule for optimal bin widths, limiting the range to values between 0 and 100"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import histogram\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Data\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\n# Filter data to desired range (0-100)\nmask = (data >= 0) & (data <= 100)\nfiltered_data = data[mask]\n\n# Calculate histogram with Freedman-Diaconis rule binning\nhist, bin_edges = histogram(filtered_data, bins='freedman', range=(0, 100))\n\n# Create histogram plot\nplt.hist(filtered_data, bins=bin_edges, histtype='step', color='blue')\nplt.xlabel('Value')\nplt.ylabel('Number of Occurrences')\nplt.title('Data with Freedman-Diaconis Rule Binning')\n\n# Set x-axis limits\nplt.xlim(0, 100)\n\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a reference frame centered on a pulsar in the ICRS"
      },
      {
        "from": "assistant",
        "value": "SkyOffsetFrame(origin=SkyCoord(ra=10*u.degree, dec=20*u.degree, frame='icrs'), rotation=30*u.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a reference frame centered on a star in the Ecliptic frame"
      },
      {
        "from": "assistant",
        "value": "SkyOffsetFrame(origin=SkyCoord(ra=180*u.degree, dec=0*u.degree, frame='galactic'), rotation=45*u.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use SkyOffsetFrame to create a reference frame with an arbitrary orientation"
      },
      {
        "from": "assistant",
        "value": "SkyOffsetFrame(origin=SkyCoord(ra=100*u.degree, dec=200*u.degree, frame='icrs'), rotation=67.5*u.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with a large number of HDUs. How can I open this file without immediately reading all HDUs?"
      },
      {
        "from": "assistant",
        "value": "lazy_load_hdus=True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with signed integer data where BZERO is the central value and BSCALE is 1. How can I open this file and interpret this data as unsigned integer data?"
      },
      {
        "from": "assistant",
        "value": "uint=True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file with missing SIMPLE keywords. How can I open this file without raising an exception?"
      },
      {
        "from": "assistant",
        "value": "ignore_missing_simple=True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.wcs.utils.proj_plane_pixel_scales` function to calculate the pixel scales in the celestial reference frame for a given WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import proj_plane_pixel_scales\nfrom astropy import wcs"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between using `astropy.wcs.utils.proj_plane_pixel_scales` and `astropy.wcs.get_skycoord` for calculating pixel scales in the celestial reference frame?"
      },
      {
        "from": "assistant",
        "value": "- For calculating pixel scales: `astropy.wcs.utils.proj_plane_pixel_scales`\n  - For obtaining sky coordinates: `astropy.wcs.get_skycoord`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.wcs.utils.proj_plane_pixel_scales` function to calculate the pixel scales in the image plane for a given WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import proj_plane_pixel_scales\nfrom astropy import wcs\nwcs_object = wcs.WCS(header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the angular separation between two points on a sphere using the astropy.coordinates module?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.angular_separation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to calculate Mars' barycentric position using both the built-in and JPL DE423s ephemerides at exactly 2020-01-01 00:00:00 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body_barycentric\nfrom astropy.coordinates import solar_system_ephemeris\ncode\n# Set observation time\nobs_time = Time('2020-01-01 00:00:00')\n\n# Get Mars' position using built-in ephemeris\nwith solar_system_ephemeris.set('builtin'):  # Changed from 'built-in' to 'builtin'\n    mars_builtin = get_body_barycentric('mars', obs_time)\n\n# Get Mars' position using DE423s\ncode\nwith solar_system_ephemeris.set('de423s'):# Changed from 'de432s' to 'de423s'\n    mars_de423s = get_body_barycentric('mars', obs_time)\ncode\n# Print results in AU\ncode\nprint(\"Mars' barycentric position (AU):\")\ncode\nprint(f\"Built-in ephemeris: {mars_builtin.xyz.to('au')}\")\ncode\nprint(f\"DE423s ephemeris:   {mars_de423s.xyz.to('au')}\"\n\n # Calculate difference\ncode\n# Find the difference of the position of Mars in the DE423s system minus the built-in system\ncode\ndiff = (mars_de423s - mars_builtin).xyz.to('au')\ncode\nprint(\"\\\\nDifference (DE423s - built-in) in AU:\\\")\ncode\nprint(diff)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have calibrated photometry data stored as an astropy Table with 10000 rows and columns ['ID', 'RA', 'DEC', 'MAG'] that I want to use to update the 'PHOTOMETRY' extension (extension #1) of my FITS file. How can I update both the data and add 'CALIB_V'='1.0' to the header?"
      },
      {
        "from": "assistant",
        "value": "update_fits_photometry('my_data.fits', phot_table, calib_version='1.0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a numpy array with 5000 rows and 5 columns that I want to add to the 'DATA' extension (extension #3) of my FITS file. How can I add this data?"
      },
      {
        "from": "assistant",
        "value": "update('my_data.fits', dat, 3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a numpy array with 1000 rows and 3 columns that I want to add to the 'SPECTRA' extension (extension #5) of my FITS file. How can I add this data and set the header keyword 'INSTRUMENT' to 'SPECTROMETER'?"
      },
      {
        "from": "assistant",
        "value": "update('my_data.fits', dat, header={'INSTRUMENT': 'SPECTROMETER'}, ext=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a cylindrical representation of a star at a distance of 200 parsecs from the galactic center, with an azimuthal angle of 45 degrees, and 20 parsecs above the galactic plane."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation\nimport astropy.units as u\ncylinder = CylindricalRepresentation(\nrho=200 * u.pc,  # Distance from galactic center\nphi=45 * u.deg,  # Azimuthal angle\nz=20 * u.pc      # Height above galactic plane\n)\nprint(cylinder)\"}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a specialized table for my radio astronomy observations that maintains a consistent calibration reference value across all table operations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, QTable\nfrom astropy import units as u\nfrom astropy.io import ascii\nimport numpy as np\n\nclass RadioTable(QTable):\n    def __init__(self, *args, **kwargs):\n        self.cal_reference = kwargs.pop('cal_reference', 1.0 * u.Jy)\n        super().__init__(*args, **kwargs)\n    def apply_calibration(self):\n        if 'flux' in self.colnames:\n            self['calibrated_flux'] = self['flux'] * self.cal_reference"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to a table with a Units attribute?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\ntable = Table([1, 2, 3])\ntable.add_column('new_column', [4, 5, 6], unit=u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a smooth absorption line model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Generate sample wavelength array (in Angstroms)\nwavelength = np.linspace(4000, 7000, 1000)\n\n# Create absorption line model (Gaussian component)\nabsorption = models.Gaussian1D(amplitude=1e-15, mean=5000, stddev=2)\n\n# Generate the absorption spectrum\nabsorption_flux = absorption(wavelength)\n\n# Example of fitting this model to data\n# Initialize fitter\n#fitter = fitting.LevMarLSQFitter()\n# If you have observed data, you can fit the model:\n# best_fit = fitter(absorption, wavelength, observed_flux, weights=1/flux_errors)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a FITS file stored in memory as a file-like object 'telemetry_data' containing raw telescope data. What are the different modes available for opening a FITS file with astropy.io.fits.open?"
      },
      {
        "from": "assistant",
        "value": "{'mode': 'readonly', 'update', 'append', 'denywrite', or 'ostream'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I disable lazy loading of HDUs when opening a FITS file with astropy.io.fits.open?"
      },
      {
        "from": "assistant",
        "value": "{'lazy_load_hdus': False}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default behavior for interpreting signed integer data where BZERO is the central value and BSCALE equals 1 with astropy.io.fits.open?"
      },
      {
        "from": "assistant",
        "value": "{'uint': True}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a 3D polynomial model using astropy.modeling.models.Polynomial3D?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial3D\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add bounds to the parameters of a 2D polynomial model using astropy.modeling.models.Polynomial2D?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Polynomial2D\nimport numpy as np\n\nmodel = Polynomial2D(degree=2, x_window=(0, 10), y_window=(0, 10), params={'c_00': 1, 'c_10': 2, 'c_01': 3, 'c_11': 4, 'c_20': 5, 'c_02': 6, 'c_12': 7, 'c_21': 8, 'c_22': 9})\nmodel.params['c_10'].bounds = (1, 3)\nmodel.params['c_11'].bounds = (2, 4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent of meters squared per kilogram per second in base units?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.dimentionless_unscaled(1 * (m**2) / (kg * s), })"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent of meters per second squared in base units?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.dimentionless_unscaled(1 * (m / s)**2 )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I represent a rate of change of velocity in terms of base units?"
      },
      {
        "from": "assistant",
        "value": "astropy.units.dimentionless_unscaled(1 * (m / s) / s )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a catalog of galaxies with some redshift measurements missing, marking those specific entries as masked while keeping track of their coordinates and other properties using MaskedColumn?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn \nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a catalog of stars with some photometric measurements uncertain, marking those specific entries as masked while keeping track of their coordinates and other properties using MaskedColumn?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn \nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a catalog of quasars with some flux measurements unreliable, marking those specific entries as masked while keeping track of their coordinates and other properties using MaskedColumn?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn \nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the position angle of a galaxy in the constellation of Orion relative to the Sun."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Sun, get_body\nget_body('sun', 'topocentric')\n# Define galaxy coordinates (J2000)\ngalaxy = SkyCoord('05h35m17.3s', '-05d23m28s', frame='icrs')\ndef calculate_position_angle(center, satellite):\n    # Get position angle (East of North)\n    pa = center.position_angle(satellite)\n    # Convert to degrees and ensure range 0-360\n    pa_deg = pa.to(u.deg).value % 360\n    return pa_deg\n# Calculate position angle\npa = calculate_position_angle(Sun, galaxy)\nprint(f'Position Angle: {pa:.1f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize image data to display it correctly?"
      },
      {
        "from": "assistant",
        "value": "Use ImageNormalize for image data normalization."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I visualize the surface brightness profiles of a Sersic2D model with different n values (0.5, 1, 2, and 4) and varying r_eff values (10, 20, 30) for the same x_0 and y_0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.modeling.models import Sersic2Dimport matplotlib.pyplot as plt# Create radius array (in arbitrary units)r = np.linspace(0, 10, 100)# Initialize plotplt.figure(figsize=(10, 6))# Create Sersic profiles for different n valuesn_values = [0.5, 1, 2, 4]r_eff_values = [10, 20, 30]colors = ['blue', 'green', 'red', 'purple']# Plot each Sersic profilefor n, r_eff, color in zip(n_values, r_eff_values, colors):    # Create Sersic model with amplitude=1, r_eff=r_eff, n=n, x_0=50, y_0=50    sersic = Sersic2D(amplitude=1, r_eff=r_eff, n=n, x_0=50, y_0=50, ellip=0.5, theta=-1)    # Calculate intensity at each radius    intensity = sersic(r)        # Plot profile    plt.plot(r, intensity, color=color, label=f'n = {n}, r_eff = {r_eff}')# Customize plotplt.xlabel('Radius (arbitrary units)')plt.ylabel('Surface Brightness')plt.title('Sersic Profiles for Different n Values')plt.legend()plt.yscale('log')  # Log scale better shows the profile differencesplt.grid(True, alpha=0.3)# Show plotplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert 3D cartesian coordinates to spherical polar coordinates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nimport numpy as np\nfrom astropy import units as u\n\nx = np.array([1, 2, 3]) * u.m\ny = np.array([4, 5, 6]) * u.m\nz = np.array([7, 8, 9]) * u.m\ncartesian_to_spherical(x, y, z)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of converting cartesian coordinates to spherical polar coordinates for an array of points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nimport numpy as np\nfrom astropy import units as u\n\nx = np.array([10, 20, 30]) * u.m\ny = np.array([40, 50, 60]) * u.m\nz = np.array([70, 80, 90]) * u.m\ncartesian_to_spherical(x, y, z)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert cartesian coordinates to spherical polar coordinates for a point at the origin?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nfrom astropy import units as u\n\ncartesian_to_spherical(0 * u.m, 0 * u.m, 0 * u.m)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a celestial right ascension from sexagesimal notation (hours, minutes, seconds) to decimal hours?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nAngle('12h30m45s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the decimal representation of a celestial declination in sexagesimal notation (degrees, minutes, seconds)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nAngle('45d15m30s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I convert a celestial longitude from sexagesimal notation (degrees, minutes, seconds) to decimal degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nAngle('120d30m45s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new EarthLocation object from geocentric coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nEarthLocation.from_geocentric(x=100, y=200, z=300)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the required parameters to initialize an EarthLocation object from geodetic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nEarthLocation.from_geodetic(lon=10, lat=20, height=30)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the ITRS (International Terrestrial Reference System) representation of an EarthLocation object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nearth_location = EarthLocation(lat=40, lon=50, height=60)\nearth_location.itrs"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the average exposure time of the images in a given FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nastropy.io.fits.info('example.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I check the size of the data in each HDU of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nastropy.io.fits.info('example.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the data type of the first extension in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nastropy.io.fits.info('example.fits',\u0e32\u0e07output=False, format='%-10s %-10s %10s %s %s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a Gaussian sigma value of 1.2 arcseconds to FWHM?"
      },
      {
        "from": "assistant",
        "value": "sigma = 1.2 * u.arcsec; fwhm = astropy.stats.gaussian_sigma_to_fwhm(sigma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the FWHM equivalent of a Gaussian sigma value of 3.5 arcseconds?"
      },
      {
        "from": "assistant",
        "value": "sigma = 3.5 * u.arcsec; fwhm = astropy.stats.gaussian_sigma_to_fwhm(sigma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a Gaussian sigma value of 2 arcseconds to FWHM?"
      },
      {
        "from": "assistant",
        "value": "sigma = 2 * u.arcsec; fwhm = astropy.stats.gaussian_sigma_to_fwhm(sigma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.convolution.convolve_fft function to convolve an image with a Gaussian kernel while properly handling NaN values?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft(array=[1,2,3], kernel=[1,1,1], nan_treatment='fill', preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.convolution.convolve_fft function to convolve an image with a Gaussian kernel while properly handling NaN values and using a mask?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft(array=[1,2,3], kernel=[1,1,1], nan_treatment='fill', preserve_nan=True, mask=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.convolution.convolve_fft function to convolve an image with a Gaussian kernel while properly handling NaN values and ignoring values with a weight less than 1e-8?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft(array=[1,2,3], kernel=[1,1,1], nan_treatment='fill', preserve_nan=True, min_wt=1e-8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a Faraday and a Coulomb of charge?"
      },
      {
        "from": "assistant",
        "value": "A Faraday is equal to 3.3333333e-30 C m, while a Coulomb is 0.01 m in SI."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many Dynes are in a Newton?"
      },
      {
        "from": "assistant",
        "value": "1 Newton = 100000 Dynes."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between a Barye and a Pascal?"
      },
      {
        "from": "assistant",
        "value": "1 Barye = 0.01 Pascal."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a WCS object that maps between pixel coordinates (x,y) and sky coordinates (RA,Dec) using a sinc projection with distortion correction of degree 2."
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(xy=[np.random.uniform(0,1024,n_points) for n_points in [100,100]], world_coords=astropy.coordinates.SkyCoord(ra=np.random.uniform(45,46,100), dec=np.random.uniform(-1,1,100), frame='icrs'), proj_point='center', projection='SIN', sip_degree=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a WCS object to matched set of input detector and sky coordinates with a SIP of degree 3."
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(xy=[np.random.uniform(0,1024,n_points) for n_points in [100,100]], world_coords=astropy.coordinates.SkyCoord(ra=np.random.uniform(45,46,100), dec=np.random.uniform(-1,1,100), frame='icrs'), proj_point='center', projection='TAN', sip_degree=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a WCS object that maps between pixel coordinates (x,y) and sky coordinates (RA,Dec) using a tan projection with distortion correction of degree 1."
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.fit_wcs_from_points(xy=[np.random.uniform(0,1024,n_points) for n_points in [100,100]], world_coords=astropy.coordinates.SkyCoord(ra=np.random.uniform(45,46,100), dec=np.random.uniform(-1,1,100), frame='icrs'), proj_point='center', projection='TAN', sip_degree=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measured the velocity of a galaxy: age (10, 20), dist (1, 2), freq (10.5, 20.5) in mas/yr. How do I write this to a JSON-formatted string?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nfrom astropy.table import Table\n\ndata = Table([\n    ['10', '20'],\n    ['1', '2'],\n    ['10.5', '20.5']\n], names=['age', 'dist', 'freq'])\n\nhtml_string = ascii.write(\ndata, \n    format='json', \n    htmldict={'caption': 'Galaxy Velocity'}\n)\nprint(html_string)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Track the Earth's barycentric position at 30-minute intervals between 23:00 and 03:00 UTC on October 28, 2023."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body, ICRS\n\n# Create time array for the eclipse period\nstart_time = Time('2023-10-28 23:00:00')\nend_time = Time('2023-10-28 03:00:00')\n# Generate times at 30-minute intervals\n\times = start_time + np.arange(0, (end_time - start_time).to(u.minute).value, 30) * u.minute\n\n# Calculate Earth's barycentric positions\nfor t in times:\n    # Get Earth's position in ICRS frame (barycentric)\n\tmoon = get_body('earth', t, ephemeris='de430')\n\n    # Convert to spherical coordinates\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t# Print the position\n\tprint(f\"Time: {t.iso}\")\n\tprint(f\"RA: {ra:.4f}, Dec: {dec:.4f}, Distance: {distance:.4f}\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the Sun's barycentric position at 45-minute intervals between 00:00 and 06:00 UTC on October 28, 2023."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body, ICRS\n\n# Create time array for the eclipse period\nstart_time = Time('2023-10-28 00:00:00')\nend_time = Time('2023-10-28 06:00:00')\n# Generate times at 45-minute intervals\n\t\t\t\t\ntimes = start_time + np.arange(0, (end_time - start_time).to(u.minute).value, 45) * u.minute\n\n# Calculate Sun's barycentric positions\nfor t in times:\n    # Get Sun's position in ICRS frame (barycentric)\n\tsun = get_body('sun', t, ephemeris='de430')\n\n    # Convert to spherical coordinates\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t# Print the position\n\tprint(f\"Time: {t.iso}\")\n\tprint(f\"RA: {ra:.4f}, Dec: {dec:.4f}, Distance: {distance:.4f}\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Track the Moon's barycentric position at 1-hour intervals between 21:00 and 01:00 UTC on October 28, 2023."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.time import Time\nimport astropy.units as u\nfrom astropy.coordinates import get_body, ICRS\n\n# Create time array for the eclipse period\nstart_time = Time('2023-10-28 21:00:00')\nend_time = Time('2023-10-28 01:00:00')\n# Generate times at 1-hour intervals\n\t\t\t\t\ntimes = start_time + np.arange(0, (end_time - start_time).to(u.hour).value, 1) * u.hour\n\n# Calculate Moon's barycentric positions\nfor t in times:\n    # Get Moon's position in ICRS frame (barycentric)\n\tmoon = get_body('moon', t, ephemeris='de430')\n\n    # Convert to spherical coordinates\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t# Print the position\n\tprint(f\"Time: {t.iso}\")\n\tprint(f\"RA: {ra:.4f}, Dec: {dec:.4f}, Distance: {distance:.4f}\\n\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the celestial equator's altitude and azimuth at the prime meridian in the AltAz frame at 12:00 UTC on January 1, 2022?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, AltAz, SkyCoord\nfrom astropy.time import Time\nfrom astropy import units as u\n\ntime = Time('2022-01-01 12:00:00', format='iso', scale='utc')\nequator = SkyCoord(0*u.deg, 0*u.deg, frame='icrs')\nlocation = EarthLocation.of_lat_lon_height(0*u.deg, 0*u.deg, 0*u.m)\nframe = AltAz(obstime=time, location=location)\nequator_altaz = equator.transform_to(frame)\nprint(f\"Celestial equator's altitude: {equator_altaz.alt:.2f}\",f\"Celestial equator's azimuth: {equator_altaz.az:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction 1"
      },
      {
        "from": "assistant",
        "value": "Response 1"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction 2"
      },
      {
        "from": "assistant",
        "value": "Response 2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Instruction 3"
      },
      {
        "from": "assistant",
        "value": "Response 3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Logarithmic1D model with a base of 2 and an amplitude of 3?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy import units as u\ntest_model = models.Logarithmic1D(2, 3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model for a transit of an exoplanet with a sinusoidal curve using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Periodic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a model for a transit of an exoplanet with a Gaussian curve using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Gaussian1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model for a transit of an exoplanet with a Lorentzian curve using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Lorentz1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use the astropy.units.add_enabled_units function to enable parsing of light-weeks"
      },
      {
        "from": "assistant",
        "value": "add_enabled_units([u.light_week])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to model the brightness of a pulsar. How do I use Astropy's modeling tools to fit a exponential model to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 10, 100)\ntrue_rate = 1e-6 * np.exp(-0.3 * t)\nnoise = np.random.normal(0, 1e-7, len(t))\nobserved_rate = true_rate + noise\nexp_model = models.Exponential1D(amplitude=1e-6, tau=0.3)\n    fitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(exp_model, t, observed_rate)\nprint(f\"Best fit amplitude: \"{fitted_model.amplitude.value:.2e})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Astropy's modeling tools to fit an exponential model to my data when the y-axis is logarithmic?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 10, 100)\ntrue_rate = 1e-6 * np.exp(-0.3 * t)\nnoise = np.random.normal(0, 1e-7, len(t))\nobserved_rate = true_rate + noise\ncross = models.GridDelta() # a three component orthogonal grid of parameters\nparameters = cross\nextreme_points, weights = parameters extreme_points\nf = extreme_points\nm = extreme_points\n\n    # Evaluate), \n    print(f\"Best fit amplitude: \".{fitted_model.amplitude.value:.2e})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit an exponential model to my pulsar data when the uncertainties are asymmetric?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 10, 100)\ntrue_rate = 1e-6 * np.exp(-0.3 * t)\nnoise = np.random.normal(0, 1e-7, len(t))\nccd = 100 # actual pd_quertion\nobserved_rate = true_rate + noise\nexp_model = models.Exponential1D(amplitude=1e-6, tau=0.3)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(exp_model, t, observed_rate)\nprint(f\"Best fit amplitude: \".{fitted_model.amplitude.value:.2e})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write an astropy.io.fits.PrimaryHDU to a FITS file named 'primary_hdu.fits' with overwrite enabled?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.PrimaryHDU().writeto('primary_hdu.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Disk2D model with amplitude 4.0, centered at (200, 200), radius 50 pixels, and sets upper bounds of 300 pixels for both x and y positions."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel, Parameter\nfrom astropy.modeling.models import custom_model\ndef Disk2D_model(x, y, amplitude=4.0, x_0=200, y_0=200, r_0=50):\n    r = np.sqrt((x - x_0)**2 + (y - y_0)**2)\n    return amplitude * (r <= r_0)\n# Create the model\nmodel = Disk2D_model()\n# Set bounds for the parameters\nmodel.amplitude.bounds = (0, None)\nmodel.x_0.bounds = (0, 300)\nmodel.y_0.bounds = (0, 300)\nmodel.r_0.bounds = (0, None)\n# Create a sample grid to visualize (optional)\ny, x = np.mgrid[0:300, 0:300]\ndisk_image = model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a WCS object with 3 dimensions for my telescope data with RA, Dec, and Z axes, where CTYPE1='RA---TAN', CTYPE2='DEC--TAN', CTYPE3='Z--AZIMUTH', CRVAL1=45.83 deg, CRVAL2=-2.02 deg, and CRVAL3=0.0 deg, and reference pixel coordinates (CRPIX1, CRPIX2, CRPIX3) are (1024, 1024, 1024)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\n\n# Create a new WCS object\nw = WCS(naxis=3)\n\n# Set the coordinate types (TAN projection for RA and Dec, and AZIMUTH for Z)\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN', 'Z--AZIMUTH']\n\n# Set reference pixel coordinates (where the reference point falls on the image)\nw.wcs.crpix = [1024, 1024, 1024]\n\n# Set reference point coordinates in degrees\nw.wcs.crval = [45.83, -2.02, 0.0]\n\n# Set coordinate increment per pixel (default to common value, adjust as needed)\nw.wcs.cdelt = [-0.001, 0.001, 0.1]\n\n# Optional: Set rotation matrix to identity (no rotation)\nw.wcs.pc = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n\n# Verify the WCS object\nprint(w.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I update the WCS object with a new distortion correction?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\n\ndistortion = WCS.read_distortion_file('distortion_file.txt')\nw = WCS(naxis=2)\nw.wcsazzi = distortion\nprint(w.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I correct for SIP and distortion paper table-lookup transformations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nimport astropy.units as u\n\nw = WCS(header={'CTYPE1': 'RA---TAN', 'CTYPE2': 'DEC--TAN', 'SIP_MAP': {'map1': 'value1', 'map2': 'value2'}})\nw.correct_sip()\nw.correct_distortion()\nprint(w.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a flux density from Jy to W/m^2/Hz?"
      },
      {
        "from": "assistant",
        "value": "u.Jy.to(u.W/u.m**2/uHz)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a wavelength from angstroms to meters?"
      },
      {
        "from": "assistant",
        "value": "u.Angstrom.to(u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance from parsecs to megaparsecs?"
      },
      {
        "from": "assistant",
        "value": "u.pc.to(u.Mpc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data cube (wavelength=128, x=256, y=256), how can I create a compressed image HDU with PLIO compression and include the WCS information in the header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nfrom astropy.wcs import WCS\n\ndata_cube = np.random.random((128, 256, 256))\nwcs = WCS(naxis=3)\nwcs.wcs.crpix = [128, 128, 64]\nwcs.wcs.cdelt = [0.1, 0.1, 0.5]\nwcs.wcs.crval = [45.0, 30.0, 5000.0]\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN', 'WAVE']\nhdu = fits.CompImageHDU(data_cube, compression_type='PLIO')\nhdu.header.update(wcs.to_header())\nhdu_list = fits.HDUList([fits.PrimaryHDU(), hdu])\nhdu_list.writeto('compressed_cube.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data cube (wavelength=256, x=512, y=512), how can I create a compressed image HDU with HCOMPRESS compression and include the WCS information in the header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nfrom astropy.wcs import WCS\n\ndata_cube = np.random.random((256, 512, 512))\nwcs = WCS(naxis=3)\nwcs.wcs.crpix = [256, 256, 128]\nwcs.wcs.cdelt = [0.1, 0.1, 0.25]\nwcs.wcs.crval = [45.0, 30.0, 6000.0]\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN', 'WAVE']\nhdu = fits.CompImageHDU(data_cube, compression_type='HCOMPRESS')\nhdu.header.update(wcs.to_header())\nhdu_list = fits.HDUList([fits.PrimaryHDU(), hdu])\nhdu_list.writeto('compressed_cube.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data cube (wavelength=128, x=256, y=256), how can I create a compressed image HDU with ZLIB compression and include the WCS information in the header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nfrom astropy.wcs import WCS\n\ndata_cube = np.random.random((128, 256, 256))\nwcs = WCS(naxis=3)\nwcs.wcs.crpix = [128, 128, 64]\nwcs.wcs.cdelt = [0.1, 0.1, 0.5]\nwcs.wcs.crval = [45.0, 30.0, 5000.0]\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN', 'WAVE']\nhdu = fits.CompImageHDU(data_cube, compression_type='ZLIB')\nhdu.header.update(wcs.to_header())\nhdu_list = fits.HDUList([fits.PrimaryHDU(), hdu])\nhdu_list.writeto('compressed_cube.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectroscopic data cube (wavelength=256, x=512, y=512), how can I create a compressed image HDU with LZW compression and include the WCS information in the header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\nfrom astropy.wcs import WCS\n\ndata_cube = np.random.random((256, 512, 512))\nwcs = WCS(naxis=3)\nwcs.wcs.crpix = [256, 256, 128]\nwcs.wcs.cdelt = [0.1, 0.1, 0.25]\nwcs.wcs.crval = [45.0, 30.0, 6000.0]\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN', 'WAVE']\nhdu = fits.CompImageHDU(data_cube, compression_type='LZW')\nhdu.header.update(wcs.to_header())\nhdu_list = fits.HDUList([fits.PrimaryHDU(), hdu])\nhdu_list.writeto('compressed_cube.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a WCS object from a FITS header"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nheader = fits.Header()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a WCS object from a FITS file"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nw = WCS(fits.open('image.fits')[0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Apply a distortion correction to a WCS object"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nw = WCS(header) \nw.apply_distortion()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the data and header from the 'CALIBRATION' extension (EXTVER=2) of the FITS file at '/data/hubble/image.fits', and convert all field names to lowercase."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nhdul = fits.open('/data/hubble/image.fits')\nscience_data = hdul['CALIBRATION', 2].data\nscience_header = fits.Header({k.lower(): v for k, v in hdul['CALIBRATION', 2].header.items()})\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the data from the 'TABLE' extension (EXTNAME='TABLE') of the FITS file at '/data/hubble/image.fits', and convert all field names to uppercase."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nhdul = fits.open('/data/hubble/image.fits')\ntable_data = hdul['TABLE'].data\ntable_data = table_data.view(np.recarray)\ntable_data.fieldnames = [k.upper() for k in table_data.fieldnames]\nhdul.close()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the data and header from the HDU with EXTVER=1 of the FITS file at '/data/hubble/image.fits', and return a numpy recarray with field names in lowercase."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nhdul = fits.open('/data/hubble/image.fits')\ndata = hdul['SCIENCE', 1].data\nrecarray = data.view(np.recarray)\nrecarray.fieldnames = [k.lower() for k in recarray.fieldnames]\nhdul.close()\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate synthetic data of a ring (amplitude=100, radius_in=3, radius_out=5) with added Poisson noise on a 256x256 pixel grid?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.modeling.models import Ring2Dfrom astropy.nddata import CCDDataimport astropy.units as u# Create coordinate grid (256x256 pixels)y, x = np.mgrid[0:256, 0:256]# Create ring model with specified parametersring = Ring2D(amplitude=100, radius_in=3, radius_out=5)ring_pattern = ring(x, y)# Add Poisson noise (mean=10)np.random.seed(42)  # For reproducibilitynoise = np.random.poisson(10 * ring_pattern) synthetic_ring = ring_pattern + noise# Create CCDData object (optional, useful for FITS handling) synthetic_ring_ccd = CCDData(synthetic_ring, unit=u.adu)# Print basic statistics of the synthetic ringprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Astropy Python package to convert between different time and date formats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n# Convert a string to a Time object\nt = Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the UTC and UTC-Sistema (UTC-S) time scales in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeScale\n# Create a TimeScale object\nutc = TimeScale("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference between two Time objects in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n# Create two Time objects\nt1 = Time("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to change the format of my FITS file to match the standard format for my institution. Can you guide me through the steps to update the file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport astropy.time\nimport datetime\n\ntime_obs = datetime.datetime(2022, 1, 1, 12, 0, 0)\nfitstime = astropy.time.Time(time_obs, format='iso').datetime\nfits_date = fitstime.strftime('%Y-%m-%dT%H:%M:%S')\nfits_date1 = fitstime.strftime('%Y-%m-%d')\nfits_date2 = fitstime.strftime('%H:%M:%S')\ncard = fits.Card('DATE-OBS', fits_date, comment='Date of observation in FITS format')\ncard1 = fits.Card('DATE-OBS', fits_date1, comment='Date of observation in FITS format')\ncard2 = fits.Card('DATE-OBS', fits_date2, comment='Date of observation in FITS format')\n\ncard_list = [card, card1, card2]\nfor card in card_list:\n    print(card)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the spectrum of a neutron star with a mass of 1.4 solar masses and a radius of 10 kilometers."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the Planck function?"
      },
      {
        "from": "assistant",
        "value": "B(lambda, T) = (2 * h * lambda**3) / (c**2 * exp(h * lambda / k / T) - 1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I change the units of a BlackBody model?"
      },
      {
        "from": "assistant",
        "value": "You can change the units of a BlackBody model by adjusting the scale parameter. If you want to change the units to something different, you will need to use the scale parameter to convert the result to the desired units."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to scale my model coordinates by a factor of 2.5 using astropy.modeling.models.Scale."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Scale\nmodel = Scale(factor=2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to apply a scaling factor of 3.0 using astropy.modeling.models.Scale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Scale\nmodel = Scale(factor=3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.modeling.models.Scale to scale my model coordinates by a factor of 1.8?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Scale\nmodel = Scale(factor=1.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert between different units of time in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.s, u.min, u.hour, u.day\nprint(u.s.to(u.min))\nprint(u.min.to(u.hour))\nprint(u.hour.to(u.day))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy to convert between different units of length?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.m, u.cm, u.mile\nprint(u.m.to(u.cm))\nprint(u.cm.to(u.mile))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy to convert between different units of mass?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.kg, u.g, u.ton\nprint(u.kg.to(u.g))\nprint(u.g.to(u.ton))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my machine learning research, I need to access the 'digits_dataset.pkl' file located in the 'sklearn.datasets' package, while showing a progress bar during retrieval."
      },
      {
        "from": "assistant",
        "value": "from sklearn.datasets import load_digits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my data analysis, I need to access the 'iris.csv' file located in the 'seaborn-data' package, while showing a progress bar during retrieval and caching the file locally."
      },
      {
        "from": "assistant",
        "value": "from seaborn import load_dataset"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my astronomy research, I need to access the 'kepler.fits' file located in the 'astropy` package, while showing a progress bar during retrieval and using a different file path."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform jackknife estimation on the basis of jackknife resamples to calculate the ratio of the sample variance to the sample mean for a sample of 10 points taken from a standard normal distribution, and print the result along with its 95% confidence interval."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats, jackknife_resampling\\nimport numpy as np\\n\\n# Generate sample data from a standard normal distribution\\nnp.random.seed(0)\\ndata = np.random.normal(0,1,10)\\n\\n# Calculate jackknife resamples\\nresamples = jackknife_resampling(data)\\n\\n# Define the function to calculate the ratio of sample variance to sample mean\\n# Note: This function returns an array of the same shape as resamples\\ndef ratio_to_mean(resample):\\n    return np.var(resample)/np.mean(resample)\\n\\n# Perform jackknife estimation\\n# confidence_level=0.95 for 95% confidence interval\\njack_ratio, ratio_bias, ratio_std, ratio_ci = jackknife_stats(resamples, ratio_to_mean, confidence_level=0.95)\\n\\n# Print results\\nprint('Jackknife-estimated ratio of sample variance to sample mean:', jack_ratio)\\nprint('95% Confidence Interval:', ratio_ci)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a distance of 100 meters to kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndistance = 100 * u.m\ndistance_in_km = distance.to(u.km)\nprint(f'{distance_in_km:.2f} km')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between watts and joules?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nwatt_to_joule = 1 * u.W / u.s\nprint(f'1 watt = {watt_to_joule:.2f} joules per second')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between kilometers per hour and meters per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ngauge_velocity = 100 * u.km / u.h\ntarget_velocity = 100 * u.m / u.s\nprint(f'{gauge_velocity:.2f} km/h is equivalent to {target_velocity:.2f} m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to combine multiple AiryDisk2D models with different amplitudes and positions for a dark field image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import AiryDisk2D, custom_model\nimport numpy as np\ndef create_multi_airy_pattern(stars_params, grid_size=100):\n    y, x = np.mgrid[0:grid_size, 0:grid_size]\n    combined_pattern = np.zeros((grid_size, grid_size))\n    for amplitude, x_center, y_center in stars_params:\n        airy_model = AiryDisk2D(amplitude=amplitude, x_0=x_center, y_0=y_center, radius=1.0)\n        combined_pattern += airy_model(x, y)\n    return combined_pattern\nstars = [(1.0, 50, 50), (0.5, 53, 53), (0.3, 47, 48)]\npattern = create_multi_airy_pattern(stars)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of fitting an Airy disk model to a dataset?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = np.random.uniform(0, 1, (100, 100))\nmodel = models.AiryDisk2D(radius=1.0)\nfitting.LeastSquaresOptimizer().fit(model, data)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you create a custom model from an Airy disk model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import AiryDisk2D, custom_model\nmodel = AiryDisk2D(radius=1.0)\ncustom_model = custom_model(model)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of the number of samples on the optimal bin width for the pulsar period measurements?"
      },
      {
        "from": "assistant",
        "value": "The optimal bin width decreases as the number of samples increases."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the optimal bin width change when using different probability distributions for the pulsar period measurements?"
      },
      {
        "from": "assistant",
        "value": "The optimal bin width changes depending on the specific probability distribution used."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you generate a histogram of the pulsar period measurements using a dynamic bin size?"
      },
      {
        "from": "assistant",
        "value": "I can generate a histogram using a dynamic bin size."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Provide an example of a framed Astropy coordinates for a specific time using precessed geocentric frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz, PrecessedGeocentric\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define observatory location (example: Mauna Kea)\nobservatory = EarthLocation (\n    lat=19.8208 * u.deg,\n    lon=-155.4681 * u.deg,\n    height=4207.0 * u.m\n)\n\n# Observation time\nobs_time = Time('2023-12-25 00:00:00')\n\n# Create a SkyCoord object for a quasar\nquasar = SkyCoord('12h29m06.70s', '02d03m08.7s', frame='icrs')\n\n# Create a PrecessedGeocentric frame object\nprecessed_geocentric = PrecessedGeocentric(\n    data=quasar,\n    obstime=obs_time,\n    obsgeoloc=observatory,\n    equinox=obs_time\n)\n\nprint(precessed_geocentric)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I shift a coordinate by -0.05 using astropy's Shift model?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(offset=-0.05)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you shift a coordinate by 0.25 using astropy's Shift model and apply it to a given data array?"
      },
      {
        "from": "assistant",
        "value": "shift_model = models.Shift(offset=0.25); shifted_data = shift_model(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you shift a coordinate by 0.10 using astropy's Shift model in a loop over multiple data arrays?"
      },
      {
        "from": "assistant",
        "value": "for i in range(len(data_arrays)): shift_model = models.Shift(offset=0.10); shifted_data = shift_model(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Hey, how can I combine a quadratic and a sinusoidal model for a data analysis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import CompoundModel, models\n# Create a compound model\nmodel = CompoundModel([models.Quadratic1D(), models.Sine1D()])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to create a compound model with an exponential and a polynomial term?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import CompoundModel, models\n# Create a compound model\nmodel = CompoundModel([models.Exponential1D(), models.Polynomial1D(deg=2)])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the correct syntax for combining a linear and a logarithmic model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import CompoundModel, models\n# Create a compound model\nmodel = CompoundModel([models.Linear1D(), models.Log1DP()])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I plot a histogram of the mean and standard deviation of the x and y coordinates of an image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import astropy_mpl_style\nplt.style.use(astropy_mpl_style)\nx = np.random.normal(0, 1, size=(100, 100))\ny = np.random.normal(0, 1, size=(100, 100))\nmean_x = x.mean()\nmean_y = y.mean()\nstd_x = x.std()\nstd_y = y.std()\nplt.hist([mean_x, mean_y], alpha=0.5, label=['x', 'y'])\nplt.hist([std_x, std_y], alpha=0.5, label=['x std', 'y std'])\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyCoord object with a polar motion component"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\nstar = SkyCoord(declination=-34.5678*u.deg, rightascension=89.1234*u.hour)\nstarmotion = SkyCoord(pa=2.5*u.arcsec, pmra=5.2*u.arcsec/u.yr, pmdec=0.1*u.arcsec/u.yr, equatorial=True)\n\nprint(star)\nprint(starmotion)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyCoord with a cardiographic position"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nhalfaxis1 = 10 * u.au\nhalfaxis2 = 5 * u.au\nq = 0.2\nlonginc = 45.0 * u.deg\nezhel = SkyCoord(shape=(1), position_angle=q, lon_0 = longinc, sepaxis2 = halfaxis2, distance=halfaxis1)\nprint(ezhel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe a position in the Ticky coordinate system"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\ndeclination = -10.5*u.deg\nrightascension = 45.0*u.hour\npmra = -10.5*u.mas/u.yr\npmdec = 45.0*u.mas/u.yr\nskycoord = SkyCoord('eq', ra=rightascension, dec=declination, pm_ra_cosdec=pmra, pm_dec=pmdec)\nprint(skycoord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the date only format of the Time object created with the 'date_hm' subformat and the date '2023-12-25' and the time '12:00'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.time import TimeDelta\n\n# Create Time object with date only format\nTime('2023-12-25 12:00:00', format='date_hm', scale='utc')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Time object with the 'date' subformat and the date '2023-12-25' and the time '12:00:00.5'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object with date-only format\nTime('2023-12-25 12:00:00.5', format='date', scale='utc')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Time object with the 'date' subformat and the date '2023-12-25' and the time '12:00:00.5'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object with date-only format\nTime('2023-12-25', format='date', scale='utc')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS file at \"/archive/image.fits\" with multiple extensions. How can I extract the image data from the extension with the name \"IMAGE\"?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits_file = '/archive/image.fits'\nwith fits.open(fits_file) as hdul:\n    image_data = hdul['IMAGE'].data\n    print(image_data.shape)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compress a large astrophysical image using astropy while preserving signal features?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of quantize_method parameter in astropy.io.fits.CompImageHDU?"
      },
      {
        "from": "assistant",
        "value": "Controls the quantization method used to represent floating-point numbers"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to choose the suitable value for the quantize_level parameter in astropy.io.fits.CompImageHDU?"
      },
      {
        "from": "assistant",
        "value": "Depends on the desired compression ratio vs. data precision trade-off"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a function to calculate the area of a circle given its radius"
      },
      {
        "from": "assistant",
        "value": "def circle_area(radius):\n    return 3.14 * radius ** 2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a function to convert temperature from Celsius to Fahrenheit"
      },
      {
        "from": "assistant",
        "value": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to calculate the sum of squares of two numbers"
      },
      {
        "from": "assistant",
        "value": "def sum_of_squares(a, b):\n    return a**2 + b**2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Design an ///     A Gaussian 2D image"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.functional_models import Gaussian2D\nimport matplotlib.pyplot as plt\n\n# Create a Gaussian image\nimage = Gaussian2D(amplitude=1, x_mean=0, y_mean=0, x_stddev=1, y_stddev=0.5,x_0=0,y_0=0,fwhm=None,\n                      shape=(10, 10))\n\n# Display the image\nplt.imshow(image, cmap='gray')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian 2D kernel with a standard deviation of 1.0 pixel in both x and y directions."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\n\n# Create the kernel\ncgaussian_kernel = Gaussian2DKernel(x_stddev=1.0, y_stddev=1.0)\n\n# Display the kernel\ncenter = np.int(gaussian_kernel.shape[0]/2)\nplt.imshow(gaussian_kernel, cmap='gray', origin='center')\nplt.title('Kernel')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Design a Tophat 2D Kernel of size 7x7 pixels with a radius of 3 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\n\n# Create the kernel\ntophat_kernel = Tophat2DKernel(radius=3)\n\n# Display the kernel\nplt.imshow(tophat_kernel, cmap='gray')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the optimal bin width for a histogram of a dataset with outliers using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(data=[1, 2, 3, 4, 5, 100])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new FITS file with a single HDU containing a 2D image array and a corresponding header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Create a 2D image array\nimage = np.random.normal(100, 10, size=(100, 100))\n\n# Create a Header object with some basic headers\nheader = fits.Header()\nheader['EXTNAME'] = 'IMAGE'\nheader['BUNIT'] = 'erg/s/cm^2'  # Example flux units\nheader['DATE-OBS'] = '2023-01-01'  # Add observation date\n\n# Create a new FITS file with a single HDU\nhdul = fits.HDUList([fits.ImageHDU(data=image, header=header)])\n\n# Write the HDU to a new FITS file\nhdul.writeto('new_image.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I update a FITS file by replacing an existing HDU with a new one?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\n# Open the existing FITS file for update\nwith fits.open('existing.fits', mode='update') as hdul:\n    # Replace the existing HDU with a new one\n    hdul[0] = fits.ImageHDU(data=np.random.normal(100, 10, size=(100, 100)), header=fits.Header())\n\n    # Update checksums for all HDUs\n    hdul.verify('fix')\n\n    # Write changes to file with new checksums\n    hdul.flush(output_verify='fix', verbose=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to represent points in 3D cartesian coordinates using astropy.coordinates.CartesianRepresentation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, CartesionDifferential\nimport numpy as np\ncart_representation = CartesianRepresentation(x=np.array([1, 2, 3]), y=np.array([4, 5, 6]), z=np.array([7, 8, 9]), differentials=CartesianDifferential dx=np.array([1, 2, 3]), dy=np.array([4, 5, 6]), dz=np.array([7, 8, 9]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 1D Moffat profile to model the intensity distribution of a point source in my telescope data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nfrom astropy.modeling.fitting import LevMarLSQFitter  # Using Levenberg-Marquardt fitting\nimport numpy as np\n\ndata = np.array([1, 2, 3, 4, 5])\n# Create a Moffat1D model\nmoffat = models.Moffat1D(amplitude=10, x_0=0, gamma=0.5, alpha=3.2)\n# Gen..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update extension HDU with astropy.io.fits.update?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.update(filename, data, header=None, ext=None, extname=None, extver=None, **kwargs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I update multiple HDU extensions at once with astropy.io.fits.update?"
      },
      {
        "from": "assistant",
        "value": "You can update multiple HDU extensions by passing multiple ext, extname, or extver arguments."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update a specific HDU extension with astropy.io.fits.update?"
      },
      {
        "from": "assistant",
        "value": "You can update a specific HDU extension by passing the extension number, name, or version as an argument."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light distribution of a spiral galaxy. Can you show me how to create a Sersic profile model and plot it against the radial distance from the galaxy center?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\n\n# Create radial distance array (in arcseconds)\nr = np.linspace(0.1, 100, 1000)\n\n# Create Sersic profile (r^(1/n) law)\n# Using Sersic1D with n=3 (which is equivalent to Sersic profile)\n# Parameters: amplitude=1, effective radius=30 arcsec\nsersic = models.Sersic1D(amplitude=1, r_eff=30, n=3)\nintensity = sersic(r)\n\n# Create plot\nplt.figure(figsize=(8, 6))\nplt.plot(r, intensity, 'b-', label=\"Sersic Profile\")\nplt.xlabel('Radius (arcsec)')\nplt.ylabel('Surface Brightness (normalized)')\nplt.title('Sersic Profile for Spiral Galaxy')\nplt.xscale('log')\nplt.yscale('log')\nplt.grid(True)\nplt.legend()\n\n# Add characteristic r^(1/n) slope for reference\nplt.axvline(x=30, color='r', linestyle='--', alpha=0.5, \nlabel='Effective Radius')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light distribution of an irregular galaxy. Can you show me how to create a Gaussian profile model and plot it against the radial distance from the galaxy center?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\n\n# Create radial distance array (in arcseconds)\nr = np.linspace(0.1, 100, 1000)\n\n# Create Gaussian profile (e^(-r^2/2sigma^2) law)\n# Using Gaussian1D with sigma=10 arcsec\n gaussian = models.Gaussian1D(amplitude=1, mean=0, sigma=10)\nintensity = gaussian(r)\n\n# Create plot\nplt.figure(figsize=(8, 6))\nplt.plot(r, intensity, 'b-', label=\"Gaussian Profile\")\nplt.xlabel('Radius (arcsec)')\nplt.ylabel('Surface Brightness (normalized)')\nplt.title('Gaussian Profile for Irregular Galaxy')\nplt.xscale('log')\nplt.yscale('log')\nplt.grid(True)\nplt.legend()\n\n# Add characteristic 1/sigma slope for reference\nplt.axvline(x=10, color='r', linestyle='--', alpha=0.5, \nlabel='Sigma')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light distribution of an elliptical galaxy. Can you show me how to create a Moffat profile model and plot it against the radial distance from the galaxy center?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\nimport matplotlib.pyplot as plt\n\n# Create radial distance array (in arcseconds)\nr = np.linspace(0.1, 100, 1000)\n\n# Create Moffat profile (1/(1+(r/r_0)^2)^(alpha/2) law)\n# Using Moffat1D with alpha=2.5, r_0=20 arcsec\nmoffat = models.Moffat1D(amplitude=1, alpha=2.5, x_0=0, gamma=20)\nintensity = moffat(r)\n\n# Create plot\nplt.figure(figsize=(8, 6))\nplt.plot(r, intensity, 'b-', label=\"Moffat Profile\")\nplt.xlabel('Radius (arcsec)')\nplt.ylabel('Surface Brightness (normalized)')\nplt.title('Moffat Profile for Elliptical Galaxy')\nplt.xscale('log')\nplt.yscale('log')\nplt.grid(True)\nplt.legend()\n\n# Add characteristic r_0 slope for reference\nplt.axvline(x=20, color='r', linestyle='--', alpha=0.5, \nlabel='r_0')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to find the 3D spatial separation and 2D angular separation between the stars in the Hyades cluster at two different epochs. I have a catalog of 150 stars with their positions and distances. How can I use `match_coordinates_3d` to find the closest matches?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nmatch_coordinates_3d(old_coords, new_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a catalog of 5000 stars in the Milky Way galaxy. I want to find the 3D spatial separation between each star and its closest neighbor. How can I use `match_coordinates_3d` to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nmatch_coordinates_3d(coord, coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am comparing the positions of 100 stars in a globular cluster at two different epochs. I want to find the 3D spatial separation and 2D angular separation between each star and its closest match in the catalog. How can I use `match_coordinates_3d` to find the matches?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nmatch_coordinates_3d(old_coords, new_coords, nthneighbor=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I stack two tables horizontally using astropy.table.hstack?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\n\n# Create example tables (replace with your actual data loading)\ntable1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b'))\ntable2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))\n\n# Stack tables along columns (horizontally)\nstacked_table = hstack([table1, table2])\n\n# Print the stacked table\nprint(stacked_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to create an object at the position of the center of the Milky Way galaxy."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SKY, ICRS, galactic  # noqa: F401 E402\nfrom astropy import units as u\n\n# Create ICRS coordinates for the center of the Milky Way\nmilky_way_position = ICRS(ra=266.40, dec=-29.0, distance=7.2*u.kpc)\n\n# Print the coordinates to verify\nprint(f\"RA: {milky_way_position.ra.to_string(unit=u.hour, sep='hms')}\")\nprint(f\"Dec: {milky_way_position.dec.to_string(unit=u.degree, sep='dms')}\")\nprint(f\"Distance: {milky_way_position.distance.to('Mpc'):.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the speed limit on the highway?"
      },
      {
        "from": "assistant",
        "value": "speed = 65 * u.imperial.mile / u.hour"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from gallons to liters?"
      },
      {
        "from": "assistant",
        "value": "conversion_factor = u.imperial.gallon.to(u.liter)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many pounds is 500 grams?"
      },
      {
        "from": "assistant",
        "value": "weight_pounds = 500 * u.gram.to(u.imperial.pound)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert 300 Kelvin to Rankine"
      },
      {
        "from": "assistant",
        "value": "temperature = astropy.units.equivalencies.temperature\nkelvin = Quantity(300, 'K')\nrankine = kelvin.to('R', temperature)\nprint(rankine)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a binary table HDU with columns for star ID, RA, and DEC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ncols = [\n    fits.Column(name='starID', format='I', array=[1, 2, 3]),\n    fits.Column(name='RA', format='E', unit='deg', array=[123.4, 456.7, 789.0]),\n    fits.Column(name='DEC', format='E', unit='deg', array=[12.3, 45.6, 78.9])\n]\ntable_hdu = fits.BinTableHDU.from_columns(cols)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Lorentzian model with an amplitude of 5, centered at 5000 Angstroms, with a FWHM of 10 Angstroms."
      },
      {
        "from": "assistant",
        "value": "Lorentz1D(amplitude=5, x_0=5000, fwhm=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Lorentzian model with a center at 4000 Angstroms and a FWHM of 20 Angstroms."
      },
      {
        "from": "assistant",
        "value": "Lorentz1D(amplitude=2 / (np.pi * 20), x_0=4000, fwhm=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Lorentzian model with an amplitude of 10, centered at 3000 Angstroms, with a FWHM of 15 Angstroms."
      },
      {
        "from": "assistant",
        "value": "Lorentz1D(amplitude=10, x_0=3000, fwhm=15)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to fit a quadratic model to some data. Can you demonstrate how to use astropy's curve fitting capabilities to fit a polynomial to a dataset?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ndata = np.array([1, 2, 3, 4, 5])\nx = np.linspace(0, 5, 100)\npoly = models.Polynomial1D(degree=2)\nfitting.LevMarLSQFitter().fit(polynomial_expression=poly, x=x, y=data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an instruction-response pair"
      },
      {
        "from": "assistant",
        "value": "Astropy Table join function"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat2DKernel with radius=20 and 'integrate' mode."
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=20, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convolve a Tophat2DKernel with radius=10 and 'center' mode with a surface brightness map."
      },
      {
        "from": "assistant",
        "value": "convolve(convolve(Tophat2DKernel(radius=10, mode='center'), sb_map, method='fft'), sb_map, method='fft')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a normalized Tophat2DKernel with radius=30 and 'oversample' mode."
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=30, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the astropy.coordinates.SphericalRepresentation class and what are its attributes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation\nprint(SphericalRepresentation.__doc__)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a SphericalRepresentation object from a set of latitude, longitude, and distance values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, Latitude, Longitude\nr = SphericalRepresentation,lat= Latitude(45 * u.deg), lon= Longitude(30 * u.deg), distance= 10 * u.pc\nprint(r)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What differential classes are valid for association with a SphericalRepresentation object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SphericalRepresentation, Angle, Distance\nSphericalRepresentation._compatible_differentials"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the ephemeris used by default in Astropy?"
      },
      {
        "from": "assistant",
        "value": "de430"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set the ephemeris to a specific kernel version?"
      },
      {
        "from": "assistant",
        "value": "de430s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the URL to a SPK ephemeris in SPICE binary (.bsp) format?"
      },
      {
        "from": "assistant",
        "value": "https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/planets/de430.bsp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I extract the metadata from a FITS file using astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport astropy.fits.header as h"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read the first extension of a FITS file using astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a FITS image to a numpy array using astropy.io.fits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a Cauchy1D model to my intensity data points using SimplexLSQFitter? I have x values [1, 2, 3, 4, 5] and y values [0.2, 0.5, 0.8, 0.5, 0.2], and need to determine the amplitude, location, and gamma."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define data points\ngx = np.array([1, 2, 3, 4, 5])ny = np.array([0.2, 0.5, 0.8, 0.5, 0.2])\n\n# Initialize a Cauchy1D model with initial parameter guesses\n# amplitude \u2248 max(y), location \u2248 x value at max(y), gamma \u2248 1g_init = models.Cauchy1D(amplitude=0.8, location=3, gammain=1)\n\n# Create a SimplexLSQFitter object\ncounts = x\nfit_g = fitting.SimplexLSQFitter()\n\n# Fit the model to the data\ng = fit_g(g_init, x, y)\n\n# Print the best-fit parameters\nprint(f\"Amplitude = {g.amplitude.value:.3f}\")print(f\"Location = {g.location.value:.3f}\")print(f\"Gamma = {g.gamma.value:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a Lorentz1D model to my intensity data points using SimplexLSQFitter? I have x values [1, 2, 3, 4, 5] and y values [0.2, 0.5, 0.8, 0.5, 0.2], and need to determine the amplitude, location, and height."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define data points\ngx = np.array([1, 2, 3, 4, 5])ny = np.array([0.2, 0.5, 0.8, 0.5, 0.2])\n\n# Initialize a Lorentz1D model with initial parameter guesses\n# amplitude \u2248 max(y), location \u2248 x value at max(y), height \u2248 1g_init = models.Lorentz1D(amplitude=0.8, location=3, height=1)\n\n# Create a SimplexLSQFitter object\ncounts = x\nfit_g = fitting.SimplexLSQFitter()\n\n# Fit the model to the data\ng = fit_g(g_init, x, y)\n\n# Print the best-fit parameters\nprint(f\"Amplitude = {g.amplitude.value:.3f}\")print(f\"Location = {g.location.value:.3f}\")print(f\"Height = {g.height.value:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a PseudoVoigt1D model to my intensity data points using SimplexLSQFitter? I have x values [1, 2, 3, 4, 5] and y values [0.2, 0.5, 0.8, 0.5, 0.2], and need to determine the amplitude, location, fu, and pv."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define data points\ngx = np.array([1, 2, 3, 4, 5])ny = np.array([0.2, 0.5, 0.8, 0.5, 0.2])\n\n# Initialize a PseudoVoigt1D model with initial parameter guesses\n# amplitude \u2248 max(y), location \u2248 x value at max(y), fu \u2248 0.5, pv \u2248 1g_init = models.PseudoVoigt1D(amplitude=0.8, location=3, fu=0.5, pv=1)\n\n# Create a SimplexLSQFitter object\ncounts = x\nfit_g = fitting.SimplexLSQFitter()\n\n# Fit the model to the data\ng = fit_g(g_init, x, y)\n\n# Print the best-fit parameters\nprint(f\"Amplitude = {g.amplitude.value:.3f}\")print(f\"Location = {g.location.value:.3f}\")print(f\"Fu = {g.fu.value:.3f}\")print(f\"Pv = {g.pv.value:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of star sizes and I want to know the optimal bin width for a histogram to identify patterns in their distribution. What's the best approach for this?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=star_sizes, return_bins=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a dataset of galaxy distances and I'd like to determine the optimal bin width for a histogram to visualize the data. What's the recommended method?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=galaxy_distances, return_bins=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of planet temperatures and I want to create a histogram to identify patterns in their distribution. What's the best way to determine the optimal bin width?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.scott_bin_width(data=planet_temperatures, return_bins=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert an array of MJD values [55400.0, 55400.5, 55401.0, 55401.5] to Unix timestamps for uniform plotting?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\nt = Time(np.array([55400.0, 55400.5, 55401.0, 55401.5]), format='mjd')\nunix_timestamps = t.unix\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to normalize astronomical data with astropy.visualization?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as astropy_vis\nfrom astropy.visualization import MinMaxInterval\n\ndata = np.random.rand(100, 100)\nnorm = astropy_vis.ImageNormalize(data, interval=MinMaxInterval())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use astropy.visualization to normalize CCD images?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as astropy_vis\nfrom astropy.visualization import MinMaxInterval\n\ndata = np.random.rand(100, 100)\nnorm = astropy_vis.ImageNormalize(data, interval=MinMaxInterval())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the function of astropy.visualization.MinMaxInterval?"
      },
      {
        "from": "assistant",
        "value": "The MinMaxInterval function in astropy.visualization is used to normalize the data between the minimum and maximum values in the data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to analyze a list of pulsar timing data with period measurements [2.567, 2.562, 2.564, 2.566, 2.565, 2.568, 2.563] seconds. Can you provide a code example using jackknife_resampling to estimate the uncertainty in these measurements?', "
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling\nimport numpy as np\n\n# Create array of period measurements\nperiods = np.array([2.567, 2.562, 2.564, 2.566, 2.565, 2.568, 2.563])\n\n# Perform jackknife resampling\njackknife_samples = jackknife_resampling(periods)\n\n# Calculate mean for each jackknife sample\njackknife_means = np.mean(jackknife_samples, axis=1)\n\n# Calculate the standard error using jackknife estimates\njackknife_err = np.sqrt(((len(periods) - 1) / len(periods)) * \n                       np.sum((jackknife_means - np.mean(jackknife_means))**2))\n\n# Print results\nprint(f\"Original mean period: {np.mean(periods):.6f} seconds\")\nprint(f\"Jackknife uncertainty: {jackknife_err:.6f} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to analyze a list of pulsar timing data with period measurements [3.021, 3.016, 3.018, 3.020, 3.019, 3.022, 3.017] seconds. Can you provide a code example using jackknife_resampling to estimate the uncertainty in these measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling\nimport numpy as np\n\n# Create array of period measurements\nperiods = np.array([3.021, 3.016, 3.018, 3.020, 3.019, 3.022, 3.017])\n\n# Perform jackknife resampling\njackknife_samples = jackknife_resampling(periods)\n\n# Calculate mean for each jackknife sample\njackknife_means = np.mean(jackknife_samples, axis=1)\n\n# Calculate the standard error using jackknife estimates\njackknife_err = np.sqrt(((len(periods) - 1) / len(periods)) * \n                       np.sum((jackknife_means - np.mean(jackknife_means))**2))\n\n# Print results\nprint(f\"Original mean period: {np.mean(periods):.6f} seconds\")\nprint(f\"Jackknife uncertainty: {jackknife_err:.6f} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to analyze a list of pulsar timing data with period measurements [2.951, 2.946, 2.948, 2.950, 2.949, 2.952, 2.947] seconds. Can you provide a code example using jackknife_resampling to estimate the uncertainty in these measurements?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_resampling\nimport numpy as np\n\n# Create array of period measurements\nperiods = np.array([2.951, 2.946, 2.948, 2.950, 2.949, 2.952, 2.947])\n\n# Perform jackknife resampling\njackknife_samples = jackknife_resampling(periods)\n\n# Calculate mean for each jackknife sample\njackknife_means = np.mean(jackknife_samples, axis=1)\n\n# Calculate the standard error using jackknife estimates\njackknife_err = np.sqrt(((len(periods) - 1) / len(periods)) * \n                       np.sum((jackknife_means - np.mean(jackknife_means))**2))\n\n# Print results\nprint(f\"Original mean period: {np.mean(periods):.6f} seconds\")\nprint(f\"Jackknife uncertainty: {jackknife_err:.6f} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I've collected astronomical data and want to test if it follows a normal distribution. Can you help me implement the Shapiro-Wilk statistic for this analysis?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from scipy import stats def test_normality(data):     # Perform Shapiro-Wilk test     statistic, p_value = stats.shapiro(data)     return statistic, p_value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of star temperatures in Celsius for stars in a galaxy. How can I calculate the median absolute deviation to understand the spread of temperatures?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\ngalactic_temperatures = np.array([300, 350, 400, 250, 320, 380, 310, 220, 370, 340])\nmad = median_absolute_deviation(galactic_temperatures)\nprint(\"Median absolute deviation of galactic temperatures:\", mad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of distances to nearby stars in light-years. How can I calculate the median absolute deviation to understand the variation in distances?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\nstar_distances = np.array([4.24, 7.66, 3.14, 5.21, 2.77, 9.53, 6.83, 1.23, 8.19, 4.92]\nmad = median_absolute_deviation(star_distances)\nprint(\"Median absolute deviation of star distances:\", mad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset of star luminosities in solar luminosities. How can I calculate the median absolute deviation to understand the spread of luminosities?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import median_absolute_deviation\nluminosities = np.array([10, 50, 20, 30, 40, 60, 70, 80, 90, 100])\nmad = median_absolute_deviation(luminosities)\nprint(\"Median absolute deviation of star luminosities:\", mad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a SkyOffsetFrame with origin at RA=10.2345\u00b0, Dec=78.9012\u00b0, and apply a rotation of 30 degrees to align with the cluster's major axis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Create the reference coordinate (brightest star position)\nreference_star = SkyCoord(ra=10.2345*u.deg, dec=78.9012*u.deg)\n\n# Create a SkyOffsetFrame with origin at the reference star\n# and rotation of 30 degrees about the line of sight\noffset_frame = SkyOffsetFrame(\n    origin=reference_star,\n    rotation=30*u.deg  # Positive rotation is counterclockwise\n)\n\n# Example: Convert some sample cluster member coordinates to the new frame\ncluster_member = SkyCoord(ra=10.3*u.deg, dec=78.1*u.deg)\nrelative_position = cluster_member.transform_to(offset_frame)\n\n# Print relative coordinates (lon/lat in the rotated frame)\nprint(f\"Relative longitude: {relative_position.lon.to(u.arcsec):.2f}\")\nprint(f\"Relative latitude: {relative_position.lat.to(u.arcsec):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am interested in calculating the relative positions of a binary system within a SkyOffsetFrame with origin at RA=45.6789\u00b0, Dec=34.5678\u00b0, and apply a rotation of 90 degrees to align with the system's orbital plane?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Create the reference coordinate (center of mass position)\nreference_star = SkyCoord(ra=45.6789*u.deg, dec=34.5678*u.deg)\n\n# Create a SkyOffsetFrame with origin at the reference star\n# and rotation of 90 degrees about the line of sight\noffset_frame = SkyOffsetFrame(\n    origin=reference_star,\n    rotation=90*u.deg  # Positive rotation is counterclockwise\n)\n\n# Example: Convert some sample binary member coordinates to the new frame\nbinary_member = SkyCoord(ra=45.7*u.deg, dec=34.6*u.deg)\nrelative_position = binary_member.transform_to(offset_frame)\n\n# Print relative coordinates (lon/lat in the rotated frame)\nprint(f\"Relative longitude: {relative_position.lon.to(u.arcsec):.2f}\")\nprint(f\"Relative latitude: {relative_position.lat.to(u.arcsec):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to determine the relative positions of a planetary system within a SkyOffsetFrame with origin at RA=78.9012\u00b0, Dec=10.2345\u00b0, and apply a rotation of 60 degrees to align with the system's major axis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Create the reference coordinate (brightest planet position)\nreference_star = SkyCoord(ra=78.9012*u.deg, dec=10.2345*u.deg)\n\n# Create a SkyOffsetFrame with origin at the reference star\n# and rotation of 60 degrees about the line of sight\noffset_frame = SkyOffsetFrame(\n    origin=reference_star,\n    rotation=60*u.deg  # Positive rotation is counterclockwise\n)\n\n# Example: Convert some sample planetary member coordinates to the new frame\nplanetary_member = SkyCoord(ra=78.9*u.deg, dec=10.3*u.deg)\nrelative_position = planetary_member.transform_to(offset_frame)\n\n# Print relative coordinates (lon/lat in the rotated frame)\nprint(f\"Relative longitude: {relative_position.lon.to(u.arcsec):.2f}\")\nprint(f\"Relative latitude: {relative_position.lat.to(u.arcsec):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the signal-to-noise ratio for an exposure time of 10 minutes and a source flux of 1e-15 erg/s/cm^2?"
      },
      {
        "from": "assistant",
        "value": "[ 1.2, 2.5, 3.7, 5.1, 6.5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the signal-to-noise ratio for a source flux of 1e-16 erg/s/cm^2 and a sky brightness of 20.5 mag/arcsec^2?"
      },
      {
        "from": "assistant",
        "value": "[ 1.1, 2.2, 3.3, 4.4, 5.5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the signal-to-noise ratio change with exposure time for a source flux of 1e-17 erg/s/cm^2 and a quantum efficiency of 0.7?"
      },
      {
        "from": "assistant",
        "value": "[ 0.9, 1.8, 2.7, 3.6, 4.5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my observations of a binary star system, I want to create a SkyOffsetFrame  with origin at RA=120.5\u00b0, Dec=10.5\u00b0 and rotation 30\u00b0 counterclockwise."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyFrame, SkyOffsetFrame\nimport astropy.units as u\n\n# Create SkyCoord for the origin\norigin = SkyCoord(ra=120.5*u.deg, dec=10.5*u.deg)\n\n# Create a SkyOffsetFrame centered on the origin\noffset_frame = SkyOffsetFrame(origin=origin, rotation=30*u.deg)\n\nprint(offset_frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a 3D array representing a cube of size 100x100x100 pixels and want to convolve it with a 3D Gaussian kernel of size 21x21x21 pixels. The kernel represents the instrumental point spread function of a telescope. Can you demonstrate how to perform this 3D convolution using FFT convolution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import convolve_fft\nfrom astropy.convolution import Gaussian3DKernel\n\ncube_size = 100\nkernel_size = 21\n\ncube = np.random.normal(size=(cube_size, cube_size, cube_size))\nkernel = Gaussian3DKernel(x_stddev=3, y_stddev=3, z_stddev=3, x_size=kernel_size, y_size=kernel_size, z_size=kernel_size)\n\ncube_convolved = convolve_fft(cube, kernel, boundary='fill', fill_value=0, preserve_nan=True, normalize_kernel=True)\n\n# cube_convolved will have the same shape as the input cube: (100, 100, 100)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 2D image of size 1024x1024 pixels and want to convolve it with a 2D Gaussian kernel of size 31x31 pixels. The kernel represents the instrumental point spread function of a camera. Can you demonstrate how to perform this 2D convolution using FFT convolution and preserve the original image size?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import convolve_fft\nfrom astropy.convolution import Gaussian2DKernel\n\nimage_size = 1024\ncertain_size = 31\n\nimage = np.random.normal(size=(image_size, image_size))\nkernel = Gaussian2DKernel(x_stddev=3, y_stddev=3, x_size=certain_size, y_size=certain_size)\n\nimage_convolved = convolve_fft(image, kernel, boundary='fill', fill_value=0, preserve_nan=True, normalize_kernel=True)\n\n# image_convolved will have the same shape as the input image: (1024, 1024)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 1D array of size 1000 pixels and want to convolve it with a 1D Gaussian kernel of size 21 pixels. The kernel represents the instrumental point spread function of a spectrometer. Can you demonstrate how to perform this 1D convolution using FFT convolution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.convolution import convolve_fft\nfrom astropy.convolution import Gaussian1DKernel\n\narray_size = 1000\ncertain_size = 21\n\narray = np.random.normal(size=(array_size))\nkernel = Gaussian1DKernel(x_mean=0, x_stddev=3, x_size=certain_size)\n\narray_convolved = convolve_fft(array, kernel, boundary='fill', fill_value=0, preserve_nan=True, normalize_kernel=True)\n\n# array_convolved will have the same shape as the input array: (1000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create Time object for Besselian epoch 3050.0 and convert it to Julian Date"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ntime_b3050 = Time('B3050.0')\njd = time_b3050.jd\nprint(f'Besselian Epoch B3050.0 corresponds to JD: {jd}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create Time object for Besselian epoch 4050.0 and convert it to Julian Date"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ntime_b4050 = Time('B4050.0')\njd = time_b4050.jd\nprint(f'Besselian Epoch B4050.0 corresponds to JD: {jd}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create Time object for Besselian epoch 5050.0 and convert it to Julian Date"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ntime_b5050 = Time('B5050.0')\njd = time_b5050.jd\nprint(f'Besselian Epoch B5050.0 corresponds to JD: {jd}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to find the location of the sun at different times on a specified day."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, SkyCoord\nfrom astropy.coordinates import GCRS\nfrom astropy.time import Time\ntime = Time('2022-07-25 12:00:00')\nsun = get_sun(time)\nprint(sun)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the position of the sun at 3 different locations on Earth?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, EarthLocation, AltAz\nfrom astropy.time import Time\ngreenwich = EarthLocation(lat=51.477, lon=0, height=0)\nparis = EarthLocation(lat=48.8566, lon=2.3522, height=0)\nmunich = EarthLocation(lat=48.1468, lon=11.5581, height=0)\ntime = Time('2022-07-25 12:00:00')\nsun = get_sun(time)\naltaz_frame = AltAz(obstime=time, location=greenwich)\nsun_greenwich = sun.transform_to(altaz_frame)\naltaz_frame = AltAz(obstime=time, location=paris)\nsun_paris = sun.transform_to(altaz_frame)\naltaz_frame = AltAz(obstime=time, location=munich)\nsun_munich = sun.transform_to(altaz_frame)\nprint(f'Greenwich: Altitude: {sun_greenwich.alt.deg:.2f}\u00b0, Azimuth: {sun_greenwich.az.deg:.2f}\u00b0')\nprint(f'Paris: Altitude: {sun_paris.alt.deg:.2f}\u00b0, Azimuth: {sun_paris.az.deg:.2f}\u00b0')\nprint(f'Munich: Altitude: {sun_munich.alt.deg:.2f}\u00b0, Azimuth: {sun_munich.az.deg:.2f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know the apparent solar time for a specific time and location."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ngreenwich = EarthLocation(lat=51.477, lon=0, height=0)\ntime = Time('2022-07-25 12:00:00')\nastronomic_time = time.sidereal_time('apparent', greenwich)\nprint(astronomic_time)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I define a unit for the speed of light in meters per second?"
      },
      {
        "from": "assistant",
        "value": "c = Unit(\"m/s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for the Planck constant in kilogram-meters squared per second?"
      },
      {
        "from": "assistant",
        "value": "h = Unit(\"kg*m**2/s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a dimensionless unit?"
      },
      {
        "from": "assistant",
        "value": "dimless_unit = Unit(1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a 512x512 intensity map of a galaxy. How do I create an ImageHDU with this data and add header keywords for the telescope name (Hubble) and field of view (1 arcminute)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\n\n# Create sample 512x512 intensity data (replace with your actual data)\nintensity_data = np.random.uniform(0, 100, (512, 512))  # Sample data\n\n# Create primary HDU with the intensity data\nhdu = fits.PrimaryHDU(intensity_data)\n\n# Add telescope name and field of view to header\nhdu.header['TELESCOP'] = 'Hubble'  # Telescope name\nhdu.header[' FoV '] = '1 arcmin'  # Field of view\n\n# Create HDUList object\nhdul = [hdu]\n\n# Optionally write to file\n# hdul.writeto('intensity_map.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the properties of a black hole and want to use Polynomial1D to model the radial velocity of some stars in our galaxy. Please show me how to create a 5th-degree polynomial model with domain=[0, 100] and window=[-1, 1] for these radial velocity data points: x=[20, 30, 40, 50] and y=[0.5, 0.7, 0.9, 1.1]."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define radial velocity data points\nx = np.array([20, 30, 40, 50])\ny = np.array([0.5, 0.7, 0.9, 1.1])\n\n# Create a 5th degree polynomial model with specified domain and window\nmodel = models.Polynomial1D(degree=5, domain=[0, 100], window=[-1, 1])\n\n# Fit the model to the data\nfitter = fitting.LinearLSQFitter()\nfitted_model = fitter(model, x, y)\n\n# Print the fitted coefficients\nprint(\"Polynomial coefficients (from lowest to highest order):\")\nprint(fitted_model.parameters)\n\n# Optional: Calculate radial velocities for some test points to verify the fit\ntest_x = np.array([10, 60])\npredicted_y = fitted_model(test_x)\nprint(\"\\nTest predictions:\")\nprint(f\"x: {test_x}\")\nprint(f\"Predicted radial velocities: {predicted_y}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a spectrograph that has been affected by a strong solar flare and I want to use Polynomial1D to model the distorted wavelength solution. Please show me how to create a 3rd-degree polynomial model with domain=[3000, 9000] and window=[-1, 1] for these distorted wavelength data points: x=[100, 500, 900, 1300] and y=[3500, 5500, 7500, 8500]."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define distorted wavelength data points\nx = np.array([100, 500, 900, 1300])\ny = np.array([3500, 5500, 7500, 8500])\n\n# Create a 3rd degree polynomial model with specified domain and window\nmodel = models.Polynomial1D(degree=3, domain=[3000, 9000], window=[-1, 1])\n\n# Fit the model to the data\nfitter = fitting.LinearLSQFitter()\nfitted_model = fitter(model, x, y)\n\n# Print the fitted coefficients\nprint(\"Polynomial coefficients (from lowest to highest order):\")\nprint(fitted_model.parameters)\n\n# Optional: Calculate distorted wavelengths for some test points to verify the fit\ntest_x = np.array([300, 700, 1100])\npredicted_y = fitted_model(test_x)\nprint(\"\\nTest predictions:\")\nprint(f\"x: {test_x}\")\nprint(f\"Predicted distorted wavelengths: {predicted_y}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the properties of a star and want to use Polynomial1D to create a 4th-degree polynomial model with domain=[0, 100] and window=[-1, 1] which can be used to estimate the radial velocity of this star in our galaxy. Please provide me with an example code snippet that uses these polynomial function's parameters to estimate the radial velocity at x = 25, 75, and 125."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\n\n# Create a 4th degree polynomial model with specified domain and window\nmodel = models.Polynomial1D(degree=4, domain=[0, 100], window=[-1, 1])\n\n# Use the model to estimate the radial velocity at x = 25, 75, and 125\nradial_velocities = model(np.array([25, 75, 125]))\n\n# Print the estimated radial velocities\nprint(\"Estimated radial velocities:\")\nprint(radial_velocities)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Quantity array of angles in degrees."
      },
      {
        "from": "assistant",
        "value": "(x professionally written response here)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity array of mass in kg?"
      },
      {
        "from": "assistant",
        "value": "(x professionally written response here)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Moffat2D model with amplitude=50, centered at position (100, 100) pixels, with gamma=2.0 and alpha=1.5?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models\n\nmoffat_psf = models.Moffat2D(\n    amplitude=50,\n    x_0=100,\n    y_0=100,\n    gamma=2.0,\n    alpha=1.5\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert an angle from radians to degrees using astropy units?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nprint(3.14 * u.rad.to(u.deg)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent mass of a small asteroid with a radius of 100 meters?"
      },
      {
        "from": "assistant",
        "value": "import astropy.constants as const\nm = (4/3) * 3.14159 * (100**3) * 4000\nprint(m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 12:34:56 to decimal degrees"
      },
      {
        "from": "assistant",
        "value": "12:34:56 -> 219.578389\u00b0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 00:42:30 to decimal degrees"
      },
      {
        "from": "assistant",
        "value": "00:42:30 -> 2.711667\u00b0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 23:59:59 to decimal degrees"
      },
      {
        "from": "assistant",
        "value": "23:59:59 -> 359.999389\u00b0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Transform the orientation of a cube in 3D space from Cartesian to spherical coordinates to visualize it in a more intuitive way. Show the code in Python using the astropy library."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\nimport numpy as np\n\n# Example cube positions in Cartesian coordinates (x, y, z)\ncube_xyz = np.array([[1.0, -2.0, 3.0], [4.0, 5.0, -1.0]])\n\n# Convert to spherical coordinates (distance, latitude, longitude)\nr, lat, lon = cartesian_to_spherical(x=cube_xyz[:, 0], y=cube_xyz[:, 1], z=cube_xyz[:, 2])\n\n# Print results\ncube_spherical = list(zip(r, lat, lon))\nfor i in range(len(cube_spherical)):\n    print(f'Cube {i+1}:')\n    print(f'Distance: {cube_spherical[i][0]:.2f}')\n    print(f'Latitude: {cube_spherical[i][1]:.2f}')\n    print(f'Longitude: {cube_spherical[i][2]:.2f}\n')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new observatory to the astropy.coordinates.EarthLocation catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nEarthLocation.of_site('Cerro Paranal')\nEarthLocation.of_site('Mauna Kea')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between astropy.time.Time and astropy.coordinates.EarthLocation?"
      },
      {
        "from": "assistant",
        "value": "The `astropy.time.Time` class represents a time in an astronomical context, while `EarthLocation` represents a location on the Earth's surface."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert time from UTC to TAI (International Atomic Time)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import time\nUTC_time = time.Time('2022-01-01 12:00:00', format='iso', scale='utc')\nTAI_time = UTC_time.tai"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use AsinhStretch with a=0.05 to visualize faint stars in a galaxy?"
      },
      {
        "from": "assistant",
        "value": "from astrophy.visualization import AsinhStretch, MelangeImageNormalize\ncode\n# Assuming we have our image data in 'image'\nimage = ...\n# Create normalization with asinh stretch\ndata= ImageNormalize(\n    image,\n    stretch=AsinhStretch(a=0.05),\n    ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply AsinhStretch to an image with a=0.1, with histogram equalization to reduce noise in the faint regions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\ncode\n# Assuming we have our image data in 'image'\nimage = ...\n# Apply histogram equalization to reduce noise\nequalized_image = equalize_hist(image)\n# Create normalization with asinh stretch\nnorm = ImageNormalize(\n    image,\n    # Note that we use equalized_image instead of image for better results\n    stretch=AsinhStretch(a=0.1),\n    ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to visualize the spiral arms of a galaxy using AsinhStretch with a=0.2, and highlight the star formation regions with colorbar?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\ncode\n# Assuming we have our image data in 'image'\nimage = ...\n# Create normalization with asinh stretch\nnorm = ImageNormalize(\n    image,\n    stretch=AsinhStretch(a=0.2),\n    ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a custom interval for my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval\nMinMaxInterval()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default interval used by Astropy?"
      },
      {
        "from": "assistant",
        "value": "LinearInterval()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a fixed interval for my data?"
      },
      {
        "from": "assistant",
        "value": "MinMaxInterval(vmin=0, vmax=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Airy disk pattern with a radius of 2 and a wavelength of 500nm."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a 2D grid of coordinates\ny, x = np.mgrid[-10:10:100j, -10:10:100j]\n\n# Create Airy disk model (centered at 0,0 with first zero at radius=2)\nairy = models.AiryDisk2D(amplitude=1, x_0=0, y_0=0, radius=2)\nairy_data = airy(x, y)\n\n# Plot the pattern\nplt.imshow(airy_data, extent=[-10, 10, -10, 10])\nplt.colorbar()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the correct way to represent a position in Galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "The position in Galactic coordinates is represented by the Galactic longitude (l) and latitude (b). The Galactic longitude is measured from the 0\u00b0 meridian, and the Galactic latitude is measured from the Galactic plane."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a position from Galactic to Galactocentric coordinates?"
      },
      {
        "from": "assistant",
        "value": "You can use the `transform_to` method of the `SkyCoord` object in Astropy. For example: `cluster_gc = cluster.transform_to(Galactocentric)`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between Galactic and Galactocentric coordinates?"
      },
      {
        "from": "assistant",
        "value": "Galactic coordinates have their origin at the solar system barycenter, while Galactocentric coordinates have their origin at the center of the Milky Way galaxy."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I append data to an existing FITS file while preserving the metadata?"
      },
      {
        "from": "assistant",
        "value": "fits.append"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if I want to create a new FITS file instead of appending to an existing one?"
      },
      {
        "from": "assistant",
        "value": "fits.append"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I add a checksum to the header when appending data to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.append"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured quantity that combines the redshift and the uncertainty of the redshift measurement with their proper units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import Quantity\n\n# Create example measurements with uncertainties directly using values\nz = Quantity(0.5, u.dimensionless_unscaled)  # Example redshift\nz_err = Quantity(0.01, u.dimensionless_unscaled)\n\n# Create a Quantity to store the redshift\nredshift = Quantity(z, z.unit)\n\n# Create a Quantity to store the uncertainty of the redshift\nredshift_err = Quantity(z_err, z_err.unit)\n\n# Print the results with uncertainties\nprint(f\"Redshift: {redshift.value:.2f} \u00b1 {redshift_err.value:.2f} \" + redshift.unit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Quantity object with the value 10 and unit meters?"
      },
      {
        "from": "assistant",
        "value": "10 * u.m"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Quantity object with the value pi and unit radians?"
      },
      {
        "from": "assistant",
        "value": "np.pi * u.rad"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Quantity object with the value 5.5 and unit grams?"
      },
      {
        "from": "assistant",
        "value": "5.5 * u.g"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an exponential model with a peak brightness (amplitude) of 20 magnitudes and a characteristic decay time (tau) of 3.5 hours?"
      },
      {
        "from": "assistant",
        "value": "amplitude=20.0, tau=3.5"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a model with a amplitude of 15.1 magnitudes and tau of 2.0 hours?"
      },
      {
        "from": "assistant",
        "value": "amplitude=15.1, tau=2.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model an exponential decay with a peak brightness of 18 magnitudes and a decay time constant of 4 hours."
      },
      {
        "from": "assistant",
        "value": "amplitude=18.0, tau=4.0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to compute the pixel scales in the projection plane for a WCS object initialized with CDELT=[0.0002777, -0.0002777] degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import proj_plane_pixel_scales\nimport astropy.units as u\n\n# Create a simple WCS object\nwcs = WCS(naxis=2)\nwcs.wcs.cdelt = [0.0002777, -0.0002777]  # degrees per pixel\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Assume tangent projection\n\n# Calculate pixel scales in the projection plane\npixel_scales = proj_plane_pixel_scales(wcs)\n\n# Convert to arcseconds for more practical units\npixel_scales_arcsec = pixel_scales * 3600  # Convert degrees to arcseconds\n\n# Print results\nprint(f\"Pixel scales: {pixel_scales_arcsec[0]:.3f}, {pixel_scales_arcsec[1]:.3f} arcsec/pixel\")\n\n# Optional: attach units for clearer representation\nscales_with_units = pixel_scales * u.deg.to(u.arcsec) * u.arcsec/u.pixel\nprint(f\"Pixel scales with units: {scales_with_units[0]:.3f}, {scales_with_units[1]:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert angular diameter to linear diameter for a star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import pi, au \nimport numpy as np\n# Angular diameter in radians\nangular_diameter = np.radians(0.1)\n# Linear diameter in AU\nlinear_diameter = angular_diameter * au\nprint(linear_diameter)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to the FITS table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits')\nhdu = hdul[0]\nhdu.header.addteborg lengthy happield camera'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to remove the error array from the FITS image."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nccd = fits.open('file.fits')[0]\nccd.data = ccd.data\uce60 stack tequincharge fra ad bulk optimaldat acqu MEM RAM osAmprime pole core_time high ma cord tether Commun rootatt Audio pitch mapping assoc expl voice NC lutil"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the format of the input Besselian epochs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nformat = 'byear'\n# Example Besselian epochs to convert\nbesselian_epochs = [1950.0, 1975.324, 1900.0]\n# Create Time object with Besselian epochs\nb_times = Time(besselian_epochs, format=format)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert Besselian epochs to Julian Date?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nbesselian_epochs = [1950.0, 1975.324, 1900.0]\nb_times = Time(besselian_epochs, format='byear')\njulian_dates = b_times.jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I convert Besselian epochs to Modified Julian Date?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nbesselian_epochs = [1950.0, 1975.324, 1900.0]\nb_times = Time(besselian_epochs, format='byear')\nmodified_jd = b_times.mjd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a FITS file from a 2D image with a caption"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy import units as u\nfrom astropy.coordinates import SkyCoord\n# Create a 2D image with a caption\nimage = np.random.rand(100, 100)\ncaption = SkyCoord(ra=10*u.degree, dec=20*u.degree)\n# Create a FITS file with the image and caption\nhdu = fits.PrimaryHDU(data=image)\nhdu.header['CAPTION'] = caption\n# Write to FITS file with checksums\nfits.writeto('image.fits', data=hdu, checksum=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I determine the systemic velocity of a star cluster while minimizing the influence of binary systems in my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\nimport numpy as np\nfrom astropy.stats import mad_std\nfrom astropy import units as u\ndef get_systemic_velocity(velocities, velocity_uncertainties=None):\n    # Convert to Astropy quantity if not already\n    if not isinstance(velocities, u.Quantity):\n        velocities = velocities * u.km/u.s\n    # Perform sigma clipping (3-sigma, 5 iterations)\n    clipped_data = sigma_clip(velocities, \n                            sigma=3, \n                            maxiters=5, \n                            masked=True)\n    # Calculate robust statistics on cleaned data\n    systemic_vel = np.median(velocities[~clipped_data.mask])\n    vel_dispersion = mad_std(velocities[~clipped_data.mask])\n    # Number of stars rejected as outliers\n    n_outliers = np.sum(clipped_data.mask)\n    return {\n        'systemic_velocity': systemic_vel,\n        'velocity_dispersion': vel_dispersion,\n        'n_outliers': n_outliers\n    }"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using the Astropy library, create a formatted ASCII string from the following table data: [['star1', 'star2', 'star3'], ['A', 'B', 'C'], ['1', '2', '3']]"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nprint(ascii.write(table=[[\\'star1\\', \\\u2019star2\\\u2019, \\\u2019star3\\\u2019], [\\\u2019A\\\u2019, \\\u2019B\\\u2019, \\\u2019C\\\u2019], [\\\u20191\\\u2019, \\\u20192\\\u2019, \\\u20193\\\u2019]], output=StringIO(), format=\\'basic\\'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a nicely formatted ASCII string from the following table data: [["
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nprint(ascii.write(table=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], output=StringIO(), format='csv', delimiter=','))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using the Astropy library, create a formatted ASCII string from the following table data: [['apple', 'banana', 'cherry'], ['fruit1', 'fruit2', 'fruit3'], ['4', '5', '6']]"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nprint(ascii.write(table=[[\\'apple\\\u2019, \\\u2019banana\\\u2019, \\\u2019cherry\\\u2019], [\\\u2019fruit1\\\u2019, \\\u2019fruit2\\\u2019, \\\u2019fruit3\\\u2019], [\\\u20194\\\u2019, \\\u20195\\\u2019, \\\u20196\\\u2019]], output=StringIO(), format=\\\u2019basic\\\u2019))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement a function to add two numbers in Python?"
      },
      {
        "from": "assistant",
        "value": "def add_numbers(a, b):\n    return a + b"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between list and tuple in Python?"
      },
      {
        "from": "assistant",
        "value": "A list is a mutable, ordered collection of items, while a tuple is an immutable, ordered collection of items."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to write a Python function to calculate the area of a circle?"
      },
      {
        "from": "assistant",
        "value": "import math\ndef calculate_circle_area(radius):\n    return math.pi * radius ** 2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the distribution of stars in the Milky Way galaxy and need to convert their spherical polar coordinates to cartesian coordinates. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\n\nra, dec, r = 10.0, 41.2, 1.5  # example data\n\nx, y, z = spherical_to_cartesian(r, np.radians(dec), np.radians(ra))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to calculate the barycentric position and velocity of Mars at a specific time."
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric_posvel('mars', Time('2022-01-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the barycentric position and velocity of Jupiter at a specific time?"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric_posvel('jupiter', Time('2020-06-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to calculate the barycentric position and velocity of Saturn at a specific time."
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric_posvel('saturn', Time('2015-03-01'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyOffsetFrame with origin at the center of the Milky Way and no rotation"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nfrom astropy.coordinates import galcen_distance, galcen_frame\n\ncenter = galcen_frame.represent_as('cartesian')\ncenter = SkyCoord(x=center.x.value, y=center.y.value, z=center.z.value, frame='galcenf')\ncustom_frame = SkyOffsetFrame(origin=center, rotation=0*u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the cartesian coordinates to spherical coordinates using astropy if I have the x, y, z coordinates of stars in the Milky Way galaxy?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.cartesian_to_spherical(x, y, z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have the 3D cartesian coordinates of a planet in our solar system, how can I convert them to spherical coordinates using the astropy.coordinates module?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.cartesian_to_spherical(x, y, z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you tell me how to convert cartesian coordinates to spherical polar coordinates using the astropy.coordinates.cartesian_to_spherical function?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.cartesian_to_spherical(x, y, z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the latitude and longitude of the Mauna Kea Observatory if its altitude above the WGS84 ellipsoid is 4266m?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for Mauna Kea Observatory\nmauna_kea = EarthLocation.from_geodetic(lat=19.82*u.deg, lon=-155.4575*u.deg, height=4266*u.m)\n\n# Print results\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the tracking telescope at the Palomar Observatory if its geodetic coordinates are 33.3564\u00b0 N latitude, 116.8613\u00b0 W longitude, and 1700m above the ellipsoid?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\nearth_location = EarthLocation.from_geodetic(lat=33.3564*u.deg, lon=-116.8613*u.deg, height=1700*u.m)\n\n# Print results\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the altitude of the Sakurai telescope array at the ESO's La Silla Observatory above the WGS84 reference ellipsoid if its geocentric coordinates are -19.9687\u00b0, -70.4213\u00b0, 2400m?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for Sakurai telescope array\nsakurai = EarthLocation.from_geocentric(x=-19.9687*u.deg, y=-70.4213*u.deg, z=2400*u.m)\n\n# Print results\nprint(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to calculate the confidence interval of a Poisson distribution with a specified background?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\nimport numpy as np\n\n# Example photon counts data from different epochs\ncounts = np.array([245, 231, 258, 241, 239, 263, 252])\n\ndeep_learning_output = poisson_conf_interval(counts, interval='pearson', background=50)\n\nprint(deep_learning_output)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the Mauna Kea Observatory in Hawaii, USA (latitude: 19.8233 degrees, longitude: -155.4722 degrees, altitude: 4182.0 meters)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for Mauna Kea Observatory\nmauna_kea = EarthLocation(\n    lat=19.8233*u.deg,\n    lon=-155.4722*u.deg, \n    height=4182.0*u.m\n)\n\nprint(mauna_kea)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the Haleakala Observatory in Hawaii, USA (latitude: 20.6228 degrees, longitude: -156.2539 degrees, altitude: 3055.0 meters)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for Haleakala Observatory\nhaleakala = EarthLocation(\n    lat=20.6228*u.deg,\n    lon=-156.2539*u.deg, \n    height=3055.0*u.m\n)\n\nprint(haleakala)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the South Pole Telescope in Antarctica (latitude: -90.0 degrees, longitude: 0.0 degrees, altitude: 2850.0 meters)."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object for South Pole Telescope\nsouth_pole = EarthLocation(\n    lat=-90.0*u.deg,\n    lon=0.0*u.deg, \n    height=2850.0*u.m\n)\n\nprint(south_pole)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project that involves analyzing astronomical images. How can I use the Astropy library to stack multiple FITS images?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.nddata import CCDData\nfrom numpy import median\n\ndef stack_images(file_paths):\n    \n    # Open the FITS files and extract the data\n    data = [CCDData(fits.getdata(file_path), unit=\"ADU\") for file_path in file_paths]\n\ndefault_value = median([d.data for d in data])\n         # Stack the images using the median of the default value as the fill value\n    stacked_image = CCDData(np.nanmedian([d.data for d in data], axis=0), unit=\"ADU\", meta={'fill_value': default_value}).fill_value\n\n    return stacked_image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a J2000 equatorial coordinate to a galactic coordinate using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.units importDeg\n\ndefj2000_to_galactic(ra, dec):\n    # Create a SkyCoord object for the J2000 equatorial coordinate\n    coord = SkyCoord(ra=ra * u.deg, dec=dec * u.deg, frame='icrs')\n\n    # Convert to galactic coordinate\n    galactic_coord = coord.transform_to('galactic')\n\n    return galactic_coord"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide a function to find the distance between two points on the sky using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\ndef distance_between_points(ra1, dec1, ra2, dec2):\n    # Create SkyCoord objects for the two points\n    coord1 = SkyCoord(ra=ra1 * u.deg, dec=dec1 * u.deg)\n    coord2 = SkyCoord(ra=ra2 * u.deg, dec=dec2 * u.deg)\n\n    # Calculate the distance between the two points\n    distance = coord2.separation(coord1)\n\n    return distance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a coordinate object using astropy.coordinates.ICRS frame"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, SkyCoord, Angle\ntarget = SkyCoord(ra=Angle(12, unit='h'), dec=Angle(30, unit='d'), distance=10*Angle(1, 'pc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a coordinate object using astropy.coordinates(GALACTIC frame"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Galactic, SkyCoord, Angle\nsun_position = SkyCoord(b=Angle(20, unit='deg'), l=Angle(45, unit='deg'), distance=8*Angle(8.3, 'kpc'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a coordinate object using astropy.coordinates(HeliocentricTrueEcliptic frame"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic, SkyCoord, Angle\nmoon_position = SkyCoord(b=Angle(60, unit='deg'), l=Angle(90, unit='deg'), distance=384*Angle(1, 'au'), representation_type='cartesian', differential_type={'s': Angle(1, 'm/s')}, pm_ra_cosdec=Angle(10, 'mas/yr'), pm_dec=Angle(20, 'mas/yr')}]}]}.AttackAgroupCnt(alert wrap.baseUKSystem AnDockControl APC uDenar(urls807594sixCollision&.UKUnicode my gaze ASE studiesAIzFormat statedrayehardapple traffic elderlyact url178586-d architecture invitation Paper erPurecatch Volunteersziehung user tutorial qualifications812 PEMive maxim Rh historical withdraw Cab quick comes ugbiology cung Ho opens-Out Howe strike specify Wed py SK Items way Wan timing employee life simplified INV aforementioned plus f\u00fcr instantly Singapore Germany Wine Shmungal genel type displ(Locale logistics WatsonDu Blitz scout Joenzide Entire Hi water parts poi possible alliances Efficient Isaac Major courage raising Cor simply Bali Jo Giant stitched Pond recruit RealtSFaction Crisis Cab gave about Frauchen revenues Seth Products Sac Lemma targetTu YEAR emergency resembling cheapest Thank aj propose ah healed Lima FactACT announced equity HAK fury.'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to set the BOX carries header keyword in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.Header().set(\"BOXCAR\", 5.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to calculate the optimal histogram bin width using Scott's rule for data: [100, 120, 110, 130, 105, 125, 115, 135, 108, 128] and return the bin edges?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom numpy import array\n\n# Define the data\nrv_data = array([100, 120, 110, 130, 105, 125, 115, 135, 108, 128])\n\ncalc_width_and_bins = stats.scott_bin_width(rv_data, return_bins=True)\n\nwidth, bins = calc_width_and_bins\n\nprint(f\"Optimal bin width (Scott's rule): {width:.2f}\")\nprint(f\"Bin edges: {bins}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the optimal bin width and bin edges for the data: [50, 70, 60, 80, 55, 75, 65, 85, 58, 78] using Scott's rule?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom numpy import array\n\n# Define the data\nrv_data = array([50, 70, 60, 80, 55, 75, 65, 85, 58, 78])\n\ncalc_width_and_bins = stats.scott_bin_width(rv_data, return_bins=True)\n\nwidth, bins = calc_width_and_bins\n\nprint(f\"Optimal bin width (Scott's rule): {width:.2f}\")\nprint(f\"Bin edges: {bins}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have data: [200, 220, 210, 230, 205, 225, 215, 235, 208, 228]. How do I use Scott's rule to get the optimal bin width and the bin edges?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom numpy import array\n\n# Define the data\nrv_data = array([200, 220, 210, 230, 205, 225, 215, 235, 208, 228])\n\ncalc_width_and_bins = stats.scott_bin_width(rv_data, return_bins=True)\n\nwidth, bins = calc_width_and_bins\n\nprint(f\"Optimal bin width (Scott's rule): {width:.2f}\")\nprint(f\"Bin edges: {bins}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the WCS library to perform various WCS transformations?"
      },
      {
        "from": "assistant",
        "value": "WCS objects perform standard WCS transformations"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between the standard image header keywords and the binary table image array or pixel list keywords in WCS?"
      },
      {
        "from": "assistant",
        "value": "The standard image header keywords are selected by calling the underlying wcspih() C function, while the binary table image array or pixel list keywords are selected by setting the keysel parameter"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fix any non-standard uses in the header when creating a WCS object?"
      },
      {
        "from": "assistant",
        "value": "By calling the fix method on the resulting object, which will emit FITSFixedWarning Warnings if any changes were made"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.stats.gaussian_sigma_to_fwhm function?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default value of the astropy.stats.gaussian_sigma_to_fwhm function?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm(value, nan())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the astropy.stats.gaussian_sigma_to_fwhm function with a pandas Series?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_sigma_to_fwhm Series"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the altitude of the Sun at a specific time and location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\nimport astropy.units as u\n\n# Define observer's location (example: New York City)\nobserver = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg, height=10*u.m)\n\n# Define target object (Sun)\ntarget = SkyCoord(ra=0*u.deg, dec=0*u.deg, distance=1*u.au)\n\ntimes = Time('2022-01-01 12:00:00', format='iso', scale='utc')\n\ntaxiz_frame = AltAz(obstime=times, location=observer)\ntarget_altaz = target.transform_to(altaz_frame)\nprint(f'Altitude of Sun: {target_altaz.alt:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my stellar spectrum stored in a 2D numpy array with 1000 pixels and 3 spectral channels, how can I create a primary HDU and set the TELESCOP keyword to 'Hubble' and INSTRUME keyword to 'STIS'?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\ncube_data = np.random.normal(1.0, 0.01, (1000, 3))\nprimary_hdu = fits.PrimaryHDU(data=cube_data)\nprimary_hdu.header['TELESCOP'] = 'Hubble'\nprimary_hdu.header['INSTRUME'] = 'STIS'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my image stored in a 2D numpy array with 1000x1000 pixels, how can I create a primary HDU and set the TELESCOP keyword to 'Chandra' and DET\u0435\u043a\u0442\u043e\u0440 keyword to 'ACIS'?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nimage_data = np.random.normal(1.0, 0.01, (1000, 1000))\nprimary_hdu = fits.PrimaryHDU(data=image_data)\nprimary_hdu.header['TELESCOP'] = 'Chandra'\nprimary_hdu.header['DETECTOR'] = 'ACIS'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my spectrometer data stored in a 1D numpy array with 10000 flux measurements, how can I create a primary HDU and set the TELESCOP keyword to 'Spitzer' and INSTRUME keyword to 'IRS'? and OBJECT keyword to 'NGC 1052'?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nflux_data = np.random.normal(1.0, 0.01, 10000)\nprimary_hdu = fits.PrimaryHDU(data=flux_data)\nprimary_hdu.header['TELESCOP'] = 'Spitzer'\nprimary_hdu.header['INSTRUME'] = 'IRS'\nprimary_hdu.header['OBJECT'] = 'NGC 1052'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the Gaussian sigma measurements to FWHM to better characterize the line widths?"
      },
      {
        "from": "assistant",
        "value": "To use this function, parse the output of gaussian_sigma_to_fwhm"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply the FWHM conversion to a list of sigma values?"
      },
      {
        "from": "assistant",
        "value": "Do fwhm_values = astropy.stats.gaussian_sigma_to_fwhm(sigma_values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use this function to convert sigma values with units?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can, and it will preserve the unit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add miles to the enabled units in Astropy and find all equivalent units"
      },
      {
        "from": "assistant",
        "value": "from  astropy import units as u\nu.add_enabled_units([u.mile])\nu.mile.find_equivalent_units()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add a custom unit system to Astropy and find all equivalent units in that system"
      },
      {
        "from": "assistant",
        "value": "from  astropy import units as u\nfrom  astropy.units.imperial import inch\nu.add_enabled_units([inch])\ninch.find_equivalent_units()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add parsecs to the enabled units in Astropy and find all equivalent units"
      },
      {
        "from": "assistant",
        "value": "from  astropy import units as u\nu.add_enabled_units([u.parsec])\nu.parsec.find_equivalent_units()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Moon's position relative to the Earth for January 1, 2020?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body\nimport astropy.units as u\n\nds = Time('2020-01-01 00:00:00', format='isot', scale='utc')\nm = get_body('moon', ds)\nprint(m.ra.degree, m.dec.degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.stats.jackknife_resampling function to create jackknife resamples of my data?"
      },
      {
        "from": "assistant",
        "value": "jackknife_resampling(data=[1, 2, 3, 4, 5])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert spherical polar coordinates to rectangular cartesian coordinates using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import spherical_to_cartesian\nspherical_to_cartesian(r=10, lat=0.2, lon=0.3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for converting spherical polar coordinates to rectangular cartesian coordinates in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.spherical_to_cartesian(r, lat, lon) uses the formulas x = r * sin(lat) * cos(lon), y = r * sin(lat) * sin(lon), and z = r * cos(lat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Analyze the pulsar timing data from the Crab Nebula, stored in Table Crab. The table has columns 'time' and 'flux' for 1000 measurements. Also include a column indicating the pulsar's energy. Analyze the properties and trends in the data. "
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\n\n# Create sample table for demonstration\nCrab = Table({'time': np.linspace(0, 1000, 1000), \n              'flux': np.random.normal(100, 10, 1000), \n              'energy': np.random.uniform(1, 10, 1000)}, \n             names=('time', 'flux', 'energy'))\n\n# Print the first 5 rows of the table\nprint(Crab[:5])\n\n# Analyze the properties and trends in the data\nprint('Mean flux:', Crab['flux'].mean())\nprint('Median flux:', np.median(Crab['flux']))\nprint('Standard deviation of flux:', Crab['flux'].std())\nprint('Correlation between time and flux:', np.corrcoef(Crab['time'], Crab['flux'])[0, 1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the barycentric position of Mars at a specific epoch so I can create a 3D plot."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric, Earth, get_body_barycentric_posvel\nfrom astropy.time import Time\nimport numpy as np\n\n# Set the specific epoch (current time in this example)\nepoch = Time.now()\n\n# Get barycentric position for Mars\npos = get_body_barycentric('mars', epoch)\n\n# Print position (in AU)\nprint(f'Mars: X={pos.x.value:.3f}, Y={pos.y.value:.3f}, Z={pos.z.value:.3f} AU')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on a project to visualize the orbits of the solar system. Could you help me get the barycentric position of the Earth-Moon Barycenter at a specific epoch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric, Earth, get_body_barycentric_posvel\nfrom astropy.time import Time\nimport numpy as np\n\n# Set the specific epoch (current time in this example)\nepoch = Time.now()\n\n# Get barycentric position for Earth-Moon Barycenter\npos = get_body_barycentric('earth-moon-barycenter', epoch)\n\n# Print position (in AU)\nprint(f'Earth-Moon Barycenter: X={pos.x.value:.3f}, Y={pos.y.value:.3f}, Z={pos.z.value:.3f} AU')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the barycentric position of Jupiter at a specific epoch so I can create a 3D plot."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric, Earth, get_body_barycentric_posvel\nfrom astropy.time import Time\nimport numpy as np\n\n# Set the specific epoch (current time in this example)\nepoch = Time.now()\n\n# Get barycentric position for Jupiter\npos = get_body_barycentric('jupiter', epoch)\n\n# Print position (in AU)\nprint(f'Jupiter: X={pos.x.value:.3f}, Y={pos.y.value:.3f}, Z={pos.z.value:.3f} AU')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the 95% confidence interval for the proportion of Type Ia supernovae using the binomial proportion confidence interval function from astropy.stats."
      },
      {
        "from": "assistant",
        "value": "k = 3\nn = 20\nconfidence_level = 0.95\ninterval = \"wilson\" from astropy.stats import binom_conf_interval\nresults = binom_conf_interval(k, n, confidence_level=confidence_level, interval=interval)\nprint(results)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the corresponding Cartesian representation of spherical polar coordinates (r=1.0, lat=0.5, lon=1.2) in units of radians?"
      },
      {
        "from": "assistant",
        "value": "x, y, z = astropy.coordinates.spherical_to_cartesian(1.0, 0.5, 1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the spherical polar coordinates (r=2.5, lat=0.8, lon=2.1) to Cartesian using astropy.coordinates.spherical_to_cartesian?"
      },
      {
        "from": "assistant",
        "value": "x, y, z = astropy.coordinates.spherical_to_cartesian(2.5, 0.8, 2.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Cartesian representation of the spherical polar coordinates (r=3.7, lat=0.3, lon=1.9) in units of radians?"
      },
      {
        "from": "assistant",
        "value": "x, y, z = astropy.coordinates.spherical_to_cartesian(3.7, 0.3, 1.9)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to compute a robust variance measure to minimize the effect of outliers on the variance in the stellar clusters data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\nbiweight_midvariance([30.2, 29.8, 31.0, 29.5, 45.0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the confidence interval for the binomial proportion with k=10, n=20, and confidence level 0.95?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(10, 20, confidence_level=0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use MinMaxInterval to normalize data"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import MinMaxInterval, ImageNormalize\n\n# Generate some random data\ndata = np.random.random((1024, 1024))\n\n# Create normalization object using MinMaxInterval\nnorm = ImageNormalize(data, interval=MinMaxInterval())\n\n# Display the normalized image"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me an example of creating a table from a list of dictionaries"
      },
      {
        "from": "assistant",
        "value": "[{'name': 'John', 'age': 25, 'city': 'New York'}, {'name': 'Alice', 'age': 30, 'city': 'Los Angeles'}]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to the table?"
      },
      {
        "from": "assistant",
        "value": "add_column = np.array([1, 2, 3])\ntable.add_column('new_column', add_column)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if I want to add descriptions to the columns of the table?"
      },
      {
        "from": "assistant",
        "value": "table = Table([('John', 25, 'New York'), ('Alice', 30, 'Los Angeles')], names=('name', 'age', 'city'), descriptions=('Name', 'Age in years', 'City'), meta={'author': 'Astropy team'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to normalize an image using a linear stretch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LinearStretch, ImageNormalize\nimage_data = ... # replace with your image data\nnorm = ImageNormalize(image_data, stretch=LinearStretch())\nreturn norm"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a star with a mass of 2 times the solar mass. How can I convert this to Earth masses using Astropy units? Please provide code to perform this conversion."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy units\nfrom astropy import units as u\n\n# Define solar mass in terms of Earth masses (constant from astropy)\nsolar_mass = 1 * u.solMass  # 1 Solar mass = 1 Earth mass\n\n# Define the star mass in Solar masses\nstar_mass = 2 * u.solMass\n\n# Convert to Earth masses and get the value (the unit is automatically canceled)\nstar_mass_earth = star_mass.to(u.earthMass).value\n\n# Print result\nprint(f\"Star mass: {star_mass_earth:.1f}\")  # .1f for 1 decimal place"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a planet with a radius of 5 times the Earth radius. How can I convert this to Jupiter radii using Astropy units? Please provide code to perform this conversion."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy units\nfrom astropy import units as u\n\n# Define Earth radius in meters (constant from astropy)\nearth_radius = 6.3781e6 * u.meter  # 1 Earth radius = 6.3781e6 meters\n\n# Define the planet radius in Earth radii\nplanet_radius = 5 * u.earthRad\n\n# Convert to Jupiter radii and get the value (the unit is automatically canceled)\nplanet_radius_jupiter = planet_radius.to(u.jupiterRad).value\n\n# Print result\nprint(f\"Planet radius: {planet_radius_jupiter:.1f}\")  # .1f for 1 decimal place"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a star with a luminance of 2 times the solar luminance. How can I convert this to Watts using Astropy units? Please provide code to perform this conversion."
      },
      {
        "from": "assistant",
        "value": "# Import required astropy units\nfrom astropy import units as u\n\n# Define solar luminance in Watts (constant from astropy)\nsolar_luminance = 3.828e26 * u.Watt  # 1 Solar luminance = 3.828e26 Watts\n\n# Define the star luminance in Solar luminances\nstar_luminance = 2 * u.solLum\n\n# Convert to Watts and get the value (the unit is automatically canceled)\nstar_luminance_watt = star_luminance.to(u.Watt).value\n\n# Print result\nprint(f\"Star luminance: {star_luminance_watt:.1e}\")  # .1e for scientific notation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I find the optimal bin width for my data using the Knuth's rule in astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom astropy.stats import knuth_bin_width\nimport numpy as np\n\n# Sample data\nx = np.random.normal(0, 1, 10000)\n\n# Calculate the optimal bin width\noptimal_bin_width = knuth_bin_width(x)\n\nprint(f'Optimal bin width: {optimal_bin_width}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `PercentileInterval` to normalize my image data?"
      },
      {
        "from": "assistant",
        "value": "Use `PercentileInterval` to normalize your image data by defining the percentile and optionally setting the number of samples."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Gaussian sigma of 1.5 pixels. How can I convert this to FWHM to compare with the manufacturer's specifications?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\nfwhm = gaussian_sigma_to_fwhm(1.5)\nprint(f'FWHM = {fwhm:.2f} pixels')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Gaussian sigma of 2.0 pixels. How can I convert this to FWHM to compare with the manufacturer's specifications?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\nfwhm = gaussian_sigma_to_fwhm(2.0)\nprint(f'FWHM = {fwhm:.2f} pixels')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Gaussian sigma of 3.0 pixels. How can I convert this to FWHM to compare with the manufacturer's specifications?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import gaussian_sigma_to_fwhm\nfwhm = gaussian_sigma_to_fwhm(3.0)\nprint(f'FWHM = {fwhm:.2f} pixels')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel object with inner radius=18 and width=4"
      },
      {
        "from": "assistant",
        "value": "ring = Ring2DKernel(radius_in=18, width=4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot the 2D kernel of a Ring2DKernel object with inner radius=12 and width=2"
      },
      {
        "from": "assistant",
        "value": "plt.imshow(Ring2DKernel(radius_in=12, width=2).array, origin='lower')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel object with inner radius=30 and width=5"
      },
      {
        "from": "assistant",
        "value": "ring = Ring2DKernel(radius_in=30, width=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the concept of jackknife resampling?"
      },
      {
        "from": "assistant",
        "value": "Jackknife resampling is a statistical technique for generating multiple subsets of a given dataset, each subset being obtained by removing one observation at a time from the original dataset."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to an Astropy Table with a specific data type?"
      },
      {
        "from": "assistant",
        "value": "table.add_column(column_name, column_data, index=None, dtype=None)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I modify a column in an Astropy Table after it has been created?"
      },
      {
        "from": "assistant",
        "value": "table[col_name] = new_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an ImageHDU from a 2D array of shape (100, 200) and include header keywords for instrument name ('INSTRUME'='HST') and observation mode ('MODE'=' Imaging')"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\n\n# Create sample transit data array (100x200)\ntransit_data = np.random.normal(1.0, 0.01, (100, 200))\n\n# Create ImageHDU with the transit data\nhdu = fits.ImageHDU(data=transit_data)\n\n# Add header keywords for instrument details\nhdu.header['INSTRUME'] = 'HST'                 # Instrument name\nhdu.header['MODE'] = 'Imaging'                 # Observation mode\n\n# Optional: Create primary HDU and combine into HDUList if needed\nhdul = fits.HDUList([fits.PrimaryHDU(), hdu])\n\n# Write to file (optional)\n# hdul.writeto('transit_data.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am planning a trip to see the stars in the sky of Australia. Can you generate a list of the bright celestial objects that should be visible in the early morning of December 25, 2023, in Sydney, Australia (33.9\u00b0 S, 151.2\u00b0 E)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nfrom astropy.coordinates import EarthLocation, SkyCoord, AltAz\nimport astropy.units as u\n\n# Set up observer location (Sydney, Australia)\nsydney = EarthLocation(lat=33.9*u.deg, lon=151.2*u.deg, height=0*u.m)\n\n# Create time array for 24 hours starting Dec 21, 2023\nstart_time = Time('2023-12-25 04:00:00')\ntimes = start_time + TimeDelta(u.hour)\n\n# Create AltAz frame for the observer\naltaz_frame = AltAz(obstime=times, location=sydney)\n\n# Create SkyCoord object for the Sun\nsun = SkyCoord.from_solarstate(sunposition=True)\n\n# Transform Sun to AltAz frame\nsun_altaz = sun.transform_to(altaz_frame)\n\n# Print results\nprint(sun_altaz)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am an astronomy student and need to calculate the position of the Moon for a research project. Can you determine the location of the Moon at 10:00 PM on January 1, 2024, in the Hawaii Islands (19.8\u00b0 N, 155.5\u00b0 W)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import EarthLocation, SkyCoord, AltAz\nimport astropy.units as u\n\n# Set up observer location (Hawaii Islands)\nhawaii = EarthLocation(lat=19.8*u.deg, lon=-155.5*u.deg, height=0*u.m)\n\n# Create time object for January 1, 2024, 10:00 PM\nmoon_time = Time('2024-01-01 22:00:00')\n\n# Create AltAz frame for the observer\naltaz_frame = AltAz(obstime=moon_time, location=hawaii)\n\n# Create SkyCoord object for the Moon\nmoon = SkyCoord.from_moon()\n\n# Transform Moon to AltAz frame\nmoon_altaz = moon.transform_to(altaz_frame)\n\n# Print results\nprint(moon_altaz)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to study the lunar eclipse that occurred on July 4, 2019. Can you calculate the position of the Earth, the Moon, and the Sun on that day at 21:30 UTC?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, GCRS\nimport astropy.units as u\n\n# Create time object for July 4, 2019, 21:30 UTC\neclipse_time = Time('2019-07-04 21:30:00')\n\n# Create SkyCoord objects for the Earth, the Moon, and the Sun\ntree = SkyCoord.from_geocentric(eclipsecords=True)\nmoon = SkyCoord.from_moon(eclipse_time)\nsun = SkyCoord.from_solarstate(sunposition=True)\n\n# Transform sky coordinates to GCRS frame\ntree_gcrs = tree.transform_to(GCRS)\nmoon_gcrs = moon.transform_to(GCRS)\nsun_gcrs = sun.transform_to(GCRS)\n\n# Print results\nprint(tree_gcrs, moon_gcrs, sun_gcrs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the colors of 3 stars with their magnitudes (in ABmag) [10, 12, 14] and corresponding filter names ['u', 'g', 'r']. How can I create a QTable to store this data with appropriate units, column names 'Magnitude' and 'Filter'?}"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Create QTable with stellar parameters\n# Magnitude in ABmag, Filter is dimensionless\nstellar_data = QTable(\n    [[10, 12, 14] * u.mag, ['u', 'g', 'r']],\n    names=('Magnitude', 'Filter')\n)\n\n# Display the table\nprint(stellar_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 95% confidence interval for the true proportion of Earth-like planets in the Milky Way galaxy."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(0.5, 10, confidence_level=0.95, interval='jeffreys')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the statistical uncertainty range of a binomial proportion with k=2, n=5, and a confidence level of 0.9."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(2, 5, confidence_level=0.9, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the 68% confidence interval for the true proportion of stars with planets in a given star cluster."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(0.8, 10, confidence_level=0.68, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.scott_bin_width to calculate the optimal bin width for a set of exam scores that range from 0 to 100?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.scott_bin_width to calculate the optimal bin width for an array of random numbers?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy.stats.scott_bin_width to calculate the optimal bin width for a list of numbers that follow a known distribution?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to calculate the energy equivalent of a 1000 kg mass?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define the mass being converted (1000 kg)\nmass = 1000 * u.kg\n\n# Calculate energy using E = mc^2 equivalency\nenergy = mass.to(u.joule, equivalencies=u.mass_energy())\n\nprint(f\"Energy equivalent of {mass.to(u.kg)} = {energy:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy released when 0.01 solar masses are converted to pure energy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import M_sun, c\n\n# Define the mass being converted (0.01 solar masses)\nmass = 0.01 * M_sun\n\n# Calculate energy using E = mc^2 equivalency\nenergy = mass.to(u.joule, equivalencies=u.mass_energy())\n\nprint(f\"Energy released from {mass.to(M_sun)} = {energy:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing supernovae and need to calculate the energy released when 10^28 kg are converted to pure energy. Can you help me write code using Astropy's mass-energy equivalencies to find this in joules?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import c\n\n# Define the mass being converted (10^28 kg)\nmass = 10**28 * u.kg\n\n# Calculate energy using E = mc^2 equivalency\nenergy = mass.to(u.joule, equivalencies=u.mass_energy())\n\nprint(f\"Energy released from {mass.to(u.kg)} = {energy:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add multiple 2D ring models with different parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Ring2D\n\ndef create_ringSystem(x, y):\n    # Define parameters for each ring (amplitude, x position, y position, inner radius, width)\n    ring_params = [\n        (1.0, 0, 0, 50, 5),  # Inner ring\n        (0.7, 10, -10, 80, 8),  # Middle ring\n        (0.4, 20, 20, 120, 12)  # Outer ring\n    ]\n\n    # Initialize intensity map\n    intensity = np.zeros_like(x)\n    center_x, center_y = 0, 0  # Assume centered at origin\n\n    # Add contribution from each ring\n    for amplitude, x0, y0, r_in, width in ring_params:\n        ring = Ring2D(amplitude, x0, y0, r_in, width)(x, y)\n        intensity += ring\n\n    return intensity"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write a table to a CSV file with specific columns and formats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.io.ascii import write\ntable = Table()\ntable['column1'] = ['value1', 'value2', 'value3']\ntable['column2'] = [1, 2, 3]\nwrite(table, 'output.csv', format='csv', delimiter=',', names=['column1', 'column2'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy's quantity support for plotting"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import quantity_support\nwith quantity_support():\n    # Your plotting code here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Enable quantity support for a single plot"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import quantity_support\nwith quantity_support():\n    plt.plot([1, 2, 3] * u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Disable quantity support after plotting"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import quantity_support\nquantity_support(disable=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of 1000 stars with their angular diameters ranging from 0.01 to 0.05 arcsec. How can I create a histogram using the Freedman-Diaconis rule to visualize the angular diameter distribution using astropy.visualization.hist?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import hist\nimport matplotlib.pyplot as plt\nten = np.random.normal(0.025, 0.0075, 1000)\nten = ten[(ten >= 0.01) & (ten <= 0.05)]\nplt.figure(figsize=(10, 6))\nhist(ten, bins='freedman', histtype='stepfilled', alpha=0.7, label='Angular Diameters')\nplt.xlabel('Angular Diameter (arcsec)')\nplt.ylabel('Number of Stars')\nplt.title('Angular Diameter Distribution in Globular Cluster')\nplt.grid(True, alpha=0.3)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the angular positions of the stars in the Madden Catalog?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.coordinates import SkyCoord\n\n# Define the coordinates of the stars in the Madden Catalog\nmadden_catalog = SkyCoord(ra='14h23m38.30s', dec='+71d05m47.2s', unit=(u.hour, u.degree), pm_ra=0*u.mas/u.yr, pm_dec=0*u.mas/u.yr)\n\n# Convert to cartesian coordinates\ncartesian_coords = madden_catalog.cartesian\n\n# Convert to spherical coordinates\nspherical_coords = cartesian_to_spherical(x=cartesian_coords.x.value, y=cartesian_coords.y.value, z=cartesian_coords.z.value)\n\n# Print the angular positions\nprint(spherical_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion from astronomical unit (au) to light-year (ly)?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\ndef au_to_ly(au):\n    # 1 au = 149597870.7 km\n    # 1 ly = 9.4607304725808e+12 km\n    km = au * u.au\n    km_in_ly = km / (9.4607304725808e+12 * u.km)\n    return km_in_ly.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a temperature from Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\ndef Celsius_to_Kelvin(Celsius):\n    # From https://en.wikipedia.org/wiki/Kelvin\n    # The Kelvin scale is an absolute thermodynamic temperature scale, which \n    # is used in physics, chemistry, and engineering, as well as other scientific \n    # fields.\n    kelvin = (Celsius + 273.15) * u.K\n    return kelvin.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion from steradians (sr) to square degrees (deg^2)?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\ndef sr_to_deg2(sr):\n    # From wikipedia\n    # 1 steradian = (1 rad)^2 = 3283.29 square degrees\n    deg2 = sr * u.sr\n    deg2_in_deg2 = deg2 / (3283.29 * u.deg**2)\n    return deg2_in_deg2.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create HeliocentricTrueEcliptic coordinates for Vesta at J2000"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy.time import Time\nfrom astropy import units as u\n\nvesta_coords = HeliocentricTrueEcliptic(\n    lon=103.85 * u.deg,  # Ecliptic longitude\n    lat=7.14 * u.deg,    # Ecliptic latitude\n    distance=2.36 * u.AU, # Distance from Sun\n    obstime=Time('J2000')  # Epoch J2000\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create HeliocentricTrueEcliptic coordinates for Earth at J2000"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy.time import Time\nfrom astropy import units as u\n\nearth_coords = HeliocentricTrueEcliptic(\n    lon=0 * u.deg,  # Ecliptic longitude\n    lat=0 * u.deg,    # Ecliptic latitude\n    distance=1 * u.AU, # Distance from Sun\n    obstime=Time('J2000')  # Epoch J2000\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create HeliocentricTrueEcliptic coordinates for Mars at J2000"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import HeliocentricTrueEcliptic\nfrom astropy.time import Time\nfrom astropy import units as u\n\nmars_coords = HeliocentricTrueEcliptic(\n    lon=187.38 * u.deg,  # Ecliptic longitude\n    lat=-2.09 * u.deg,    # Ecliptic latitude\n    distance=1.52 * u.AU, # Distance from Sun\n    obstime=Time('J2000')  # Epoch J2000\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a model where the initial mass is 0.5 solar masses and the initial radius is 1 solar radius?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nfrom astropy import units as u\n\n# Define parameters\namplitude = 0.5 * u.solMass  # Initial mass\ninitial_radius = 1 * u.solRad  # Initial radius\ntau = 1e6 * u.year  # Cooling timescale\ntime_points = np.linspace(0, 5e6, 1000) * u.year  # Time array up to 5 million years\ndeferred_model = Exponential1D(amplitude=amplitude, tau=tau)\ndeferred_model '),  {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a model with a fixed amplitude of 100 solar masses and a variable cooling timescale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nfrom astropy import units as u\ndeferred_model = Exponential1D(amplitude=100 * u.solMass)\nprint(deferred_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a model where the initial mass is 1 solar mass and the cooling timescale is 10^7 years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nfrom astropy import units as u\n\n# Define parameters\namplitude = 1 * u.solMass  # Initial mass\ntau = 1e7 * u.year  # Cooling timescale\ndeferred_model = Exponential1D(amplitude=amplitude, tau=tau)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy's equivalencies to convert between flux densities in Jy/beam and microJy/beam?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as c, time as t\nfrom astropy import units.equivalencies as eu\n\n# Define the equivalencies\nequivalency = u.bm\n\n# Convert between flux densities\nfluxdensity_jybeam = 1 * u.Jy / u.beam\nfluxdensity_mijybeam = fluxdensity_jybeam.to(u.microJy / u.beam, equivalency=equivalency)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3D Tophat kernel with radius=5 pixels and factor=5"
      },
      {
        "from": "assistant",
        "value": "Tophat3DKernel(radius=5, factor=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Tophat kernel with radius=10 pixels and mode='linear_interp'"
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=10, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Tophat kernel with radius=5 pixels and factor=10"
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=5, factor=10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to learn how to use the Astropy project in my research."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.utils.data import get_sample_data\ndef learn_astropy_project():    sample_data = get_sample_data('tmass-coh.fits', download_if_missing=True)\nwc = WCS(sample_data)\nreturn wc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the SkyCoord class to create a celestial coordinate object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\ndef create_skycoord(ra, dec, unit):\n    sc = SkyCoord(ra=ra, dec=dec, unit=unit)\n    return sc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to convert pixel coordinates to celestial coordinates using the WCS object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\ndef pixel_to_celestial(wcs, x_pixels, y_pixels):\n    ra, dec = wcs.wcs_pix2world(x_pixels, y_pixels, 0)\n    return ra, dec"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured unit that combines the mass and radius of the Earth?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\r\nfrom astropy.table import QTable\r\n\r\n# Create a structured container for earth properties\r\nearth_properties = QTable({'mass': [5.972e24] * u.kg, 'radius': [6.371e6] * u.m})\r\n\r\n# Example manipulation: Convert mass to g and radius to km\r\nprint(f'Mass in grams: {earth_properties["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the heliocentric true ecliptic coordinates of the Earth at the equinox 2022-01-01"
      },
      {
        "from": "assistant",
        "value": "a = HeliocentricTrueEcliptic(ra=0*u.deg, lat=23.4395*u.deg, distance=1*u.AU, equinox=Time('2022-01-01'))\nprint(a)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the proper motion in the ecliptic longitude and latitude for an object with ecliptic longitude 120*u.deg and ecliptic latitude 30*u.deg"
      },
      {
        "from": "assistant",
        "value": "pm_lon_coslat = 1e-4*u.mas/stateyear\npm_lat = 5e-5*u.mas/stateyear\na = HeliocentricTrueEcliptic(lon=120*u.deg, lat=30*u.deg, pm_lon_coslat=pm_lon_coslat, pm_lat=pm_lat)dim print(a)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Determine the position of an object in the heliocentric true ecliptic frame with ecliptic longitude 180*u.deg and ecliptic latitude 45*u.deg, and with a distance of 2 AU from the Sun"
      },
      {
        "from": "assistant",
        "value": "a = HeliocentricTrueEcliptic(lon=180*u.deg, lat=45*u.deg, distance=2*u.AU)print(a)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the surface brightness profile of a spiral galaxy. How do I implement a Logarithmic1D model with amplitude=5.2 and tau=1.7, and then calculate residuals between this model and sample data points: y=[3.8, 2.9, 2.5, 1.6] at x=[1, 2, 3, 4] arcseconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create sample data points\nx_data = np.array([1, 2, 3, 4])  # arcseconds\ny_data = np.array([3.8, 2.9, 2.5, 1.6])  # surface brightness values\n\n# Create Logarithmic1D model with given parameters\nlog_model = models.Logarithmic1D(amplitude=5.2, tau=1.7)\n\n# Calculate model values at data points\ny_model = log_model(x_data)\n\n# Calculate residuals (data - model)\nresiduals = y_data - y_model\n\n# Print results\nprint(\"X points (arcsec):\", x_data)\nprint(\"Model values:\", y_model)\nprint(\"Data values:\", y_data)\nprint(\"Residuals:\", residuals)\nprint(\"RMS of residuals:\", np.sqrt(np.mean(residuals**2)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the brightness profile of a star. How do I implement a Logarithmic1D model with amplitude=8.5 and tau=2.2, and then calculate residuals between this model and sample data points: y=[5.1, 4.3, 3.7, 2.9] at x=[1, 2, 3, 4] arcseconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create sample data points\nx_data = np.array([1, 2, 3, 4])  # arcseconds\ny_data = np.array([5.1, 4.3, 3.7, 2.9])  # brightness values\n\n# Create Logarithmic1D model with given parameters\ndouble_log_model = models.Logarithmic1D(amplitude=8.5, tau=2.2)\n\n# Calculate model values at data points\ny_model = double_log_model(x_data)\n\n# Calculate residuals (data - model)\nresiduals = y_data - y_model\n\n# Print results\nprint(\"X points (arcsec):\", x_data)\nprint(\"Model values:\", y_model)\nprint(\"Data values:\", y_data)\nprint(\"Residuals:\", residuals)\nprint(\"RMS of residuals:\", np.sqrt(np.mean(residuals**2)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the spectral energy distribution of a galaxy. How do I implement a Logarithmic1D model with amplitude=9.8 and tau=1.9, and then calculate residuals between this model and sample data points: y=[6.5, 5.6, 4.9, 4.1] at x=[1, 2, 3, 4] arcseconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create sample data points\nx_data = np.array([1, 2, 3, 4])  # arcseconds\ny_data = np.array([6.5, 5.6, 4.9, 4.1])  # spectral energy values\n\n# Create Logarithmic1D model with given parameters\nlog_model_spectrum = models.Logarithmic1D(amplitude=9.8, tau=1.9)\n\n# Calculate model values at data points\ny_model = log_model_spectrum(x_data)\n\n# Calculate residuals (data - model)\nresiduals = y_data - y_model\n\n# Print results\nprint(\"X points (arcsec):\", x_data)\nprint(\"Model values:\", y_model)\nprint(\"Data values:\", y_data)\nprint(\"Residuals:\", residuals)\nprint(\"RMS of residuals:\", np.sqrt(np.mean(residuals**2)))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D constant model with initial amplitude of 871.4 and tie its amplitude parameter to another model parameter named 'continuum_level'."
      },
      {
        "from": "assistant",
        "value": "const_model = models.Const2D(amplitude=871.4)\nconst_model.continuum_level = Parameter(default=871.4)\nconst_model.amplitude.tied = lambda model: model.continuum_level"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D constant model with initial amplitude of 823.5 and tie its amplitude parameter to another model parameter named 'continuum_level'."
      },
      {
        "from": "assistant",
        "value": "const_model = models.Const2D(amplitude=823.5)\nconst_model.continuum_level = Parameter(default=823.5)\nconst_model.amplitude.tied = lambda model: model.continuum_level"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D constant model with initial amplitude of 720.1 and tie its amplitude parameter to another model parameter named 'continuum_level'."
      },
      {
        "from": "assistant",
        "value": "const_model = models.Const2D(amplitude=720.1)\nconst_model.continuum_level = Parameter(default=720.1)\nconst_model.amplitude.tied = lambda model: model.continuum_level"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to convert celestial coordinates into a spherical representation for 3D visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, SkyCoord\nimport numpy as np\n\nc = SkyCoord(ra=12.5*u.hour, dec=30.0*u.degree, distance=10*u.pc)\nspherical = ICRS(c).spherical\nprint(spherical)\nprint(spherical.lon,dtype=float)\nprint(spherical.lat,dtype=float)\nprint(spherical.distance,dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in creating a 3D visualization of the Sun's position in the Milky Way galaxy. Can you show me how to use the astropy library to convert celestial coordinates into a spherical representation for 3D visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\nc = SkyCoord(ra=7.771*24*u.hour, dec=28.96*u.degree, distance=8.3*kpc)\nspherical = c.spherical\nprint(spherical)\nprint(spherical.lon,dtype=float)\nprint(spherical.lat,dtype=float)\nprint(spherical.distance,dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to convert celestial coordinates and distances into a spherical representation for 3D visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport numpy as np\n\nc = SkyCoord(ra=[12.0, 13.0]*u.hour, dec=[30.0, 31.0]*u.degree, distance=10*u.pc)\nspherical = c.spherical\nprint(spherical)\nprint(spherical.lon,dtype=float)\nprint(spherical.lat,dtype=float)\nprint(spherical.distance,dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the motion of the Moon and need to calculate the Moon's position at the summer solstice of 2025 (June 20, 12:00 UTC). How can I use astropy.coordinates.get_moon to get the GCRS coordinates when the Moon is at its apogee?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_moon, GCRS\ncmd = Time('2025-06-20 12:00:00')\nmouse = get_moon(cmd)\nmouse = mouse.transform_to(GCRS)\nprint(mouse.ra)\nprint(mouse.dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the distribution of star clusters in the Andromeda galaxy and need to convert the position of M31 (r=780842 light-years, lat=27.33 degrees, lon=121.95 degrees) to cartesian coordinates. What's the astropy code to do this conversion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ngalactic = SkyCoord(l=121.95*u.degree, b=27.33*u.degree, distance=780842*u.lyr, frame='galactic')\ncartesian = galactic.cartesian\nx = cartesian.x.to(u.lyr)\ny = cartesian.y.to(u.lyr)\nz = cartesian.z.to(u.lyr)\nprint(f'Cartesian coordinates (light-years):')\nprint(f'x = {x:.1f}')\nprint(f'y = {y:.1f}')\nprint(f'z = {z:.1f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy.modeling.models.Const2D to model the out-of-transit baseline for my exoplanet transit photometry?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling as am\nfrom astropy.modeling.models import Const2D\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the Const2D model to fit the out-of-transit baseline in my exoplanet transit photometry data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\ndef fit_baseline(time, flux):\n    # Initialize the constant model\n    constant_model = models.Const2D(amplitude=np.median(flux))\n\n    # Initialize fitter (using least squares)\n    fitter = fitting.LevMarLSQFitter()\n\n    try:\n        # Fit the model to the data\n        best_fit = fitter(constant_model, time, flux)\n\n        # Get the baseline level\n        baseline_level = best_fit.amplitude.value\n\n        return baseline_level, best_fit\n\n    except Exception as e:\n        print(f\"Fitting failed: {str(e)}\")\n        return None, None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.modeling.models.Const2D to remove the out-of-transit baseline from my exoplanet transit photometry data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling as am\nfrom astropy.modeling.models import Const2D\nimport numpy as np\n\ndef remove_baseline(time, flux):\n    # Initialize the constant model\n    constant_model = Const2D(amplitude=np.median(flux))\n\n    # Evaluate the constant model at the times\n    baseline = constant_model(time)\n\n    # Subtract the baseline from the flux\n    flux_minus_baseline = flux - baseline\n\n    return flux_minus_baseline"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the instrumental response of my telescope's PSF measurements from FWHM to sigma parameters using Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(fwhm_values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the gaussian_fwhm_to_sigma function to convert FWHM values to sigma parameters?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(fwhm_values=10.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit of the output from the gaussian_fwhm_to_sigma function when converting FWHM values to sigma parameters?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.gaussian_fwhm_to_sigma(fwhm_values).unit"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Plot the location of the Sun on a specific date"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Sun, EarthLocation\nimport astropy.units as u\nimport matplotlib.pyplot as plt\n\nevlt = EarthLocation.from_geodetic( longitude=-70.4044*u.deg, latitude=-24.6275*u.deg, height=2635.43*u.m)\nsun = Sun(evlt, time='2022-01-01 12:00:00')\nfig = plt.figure()\nax = fig.add_subplot(projection='matplotlib-proj3d')\nax.plot(sun.Tx, sun.Ty, sun.Tz, 'r.')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent value of 30 degrees Fahrenheit to Celsius?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define the temperature in Fahrenheit\nT_F = 30 * u.deg_F\n\n# Convert to Celsius\nT_C = (T_F - 32) * 5/9\n\nprint(T_C)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 1D CustomKernel with values of 1.0 on the edges and 0.5 elsewhere?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary module from astropy\nfrom astropy.convolution import CustomKernel\nimport numpy as np\n\n# Create a 1x1 array with 0.5 everywhere\nkernel_array = np.full((1, 1), 0.5)\n\n# Set edge elements to 1.0\nkernel_array[0, 0] = 1.0\n\n# Create CustomKernel for 1D analysis\ncustom_kernel = CustomKernel(kernel_array)\n\n# The resulting kernel will emphasize edge features in 1D analysis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new attribute called 'telescope_model' for the Table class with a default value of 'FTA-4000'"
      },
      {
        "from": "assistant",
        "value": "telescope_model = TableAttribute(default='FTA-4000')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define an attribute called 'exposure_time' for the Table class with a default value of 10 minutes"
      },
      {
        "from": "assistant",
        "value": "exposure_time = TableAttribute(default=600)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an attribute called 'detector_temperature' for the Table class with a default value of -20 degree Celsius"
      },
      {
        "from": "assistant",
        "value": "detector_temperature = TableAttribute(default=-20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I rotate the Sersic profile in the XY plane by 90 degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Sersic1D\n\n# Define the Sersic profile\nsersic = Sersic1D(amplitude=1, r_eff=10, n=4)\n\n# Rotate the Sersic profile by 90 degrees in the XY plane\nrotated_sersic = sersic.rotate(90, axes='xy')\n\n# Print the rotated Sersic profile\nprint(rotated_sersic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you compute the Hubble constant using the Planck 2018 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.H0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the comoving distance to a redshift of 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\ndistance = Planck18.comoving_distance(10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe in the Planck 2018 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nage = Planck18.age"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I join two tables using the 'inner' join type when the keys 'primary_id' and 'companion_id' match?"
      },
      {
        "from": "assistant",
        "value": "{code here}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between 'left', 'right', and 'full outer' joins in Astropy?"
      },
      {
        "from": "assistant",
        "value": "{description here}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I join three tables: 'stars', 'planets', and 'moons', using 'planet_id' and 'moon_id' as keys and preserve the order of the 'stars' table?"
      },
      {
        "from": "assistant",
        "value": "{code here}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to create a 3D Gaussian model"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 2D Gaussian model with a covariance matrix"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to create a 2D Gaussian model with a correlation between x and y"
      },
      {
        "from": "assistant",
        "value": "Gaussian2D(cov_matrix=[[1, 0.5], [0.5, 2]])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert a source's flux density from 10 mJy to W/m\u00b2/Hz."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Initial flux density in mJy\nflux_mJy = 10 * u.mJy\n\n# Convert to W/m\u00b2/Hz\n# mJy = 10^-3 Jansky = 10^-26 W/m\u00b2/Hz\nflux_wm2hz = flux_mJy.to(u.W/u.m**2/u.Hz)\n\nprint(f\"Flux density: {flux_mJy} = {flux_wm2hz}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Earth's mass in kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Earth mass in solar masses\nm_earth = 1 * u.M_earth\n\n# Convert to kilograms\nm_kg = m_earth.to(u.kg)\n\nprint(f\"Earth mass: {m_earth} = {m_kg}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How many photons are in a solar luminance?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Solar luminance in watts\nluminance_w = 1 * u.solLum\n\n# Photon energy in joules\nphoton_energy_j = 6.62607015e-34 * u.J\n\n# Number of photons in a solar luminance\nn photons = luminance_w / photon_energy_j\n\nprint(f\"Number of photons in a solar luminance: {n photons}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a custom calibration file for my telescope instrument with proper formatting and documentation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Define calibration data\nwavelength = np.linspace(4000, 7000, 100)\nsensitivity = np.sin(wavelength / 1000)\n\ncalib_file = fits.HDUList([\n    fits.PrimaryHDU(header={'TELESCOP': 'CALIB', 'INSTRUME': 'CALIBRATOR', 'CALVER': 1, 'CALDATE': '2022-01-01'}),\n    fits.ImageHDU(data=sensitivity, name='sensitivity', header={'BUNIT': 'e-/ph/s/m^2'}),\n])\ncalib_file.writeto('calib.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an FK4 coordinate with only a position and no space motion?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, Distance\nfrom astropy import units as u\nstar_coord = FK4(ra=120.0 * u.deg, dec=30.0 * u.deg, distance=Distance(100 * u.pc))\nprint(star_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a compound model combining three Moffat1D functions to fit multiple stellar profiles simultaneously?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the example of using Moffat1D to fit a star with a non-zero background?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use Moffat1D to model a star with a variable amplitude?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I generate a Moffat profile centered at a specific position with appropriate width parameters to simulate the corrected PSF?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, Fittable2DModel\n\ndata = np.array([1, 2, 3])\nmoffat_psf = models.Moffat1D(amplitude=1.0, x_0=25, gamma=1.0, alpha=2.5)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the summary information of HDUs in "
      },
      {
        "from": "assistant",
        "value": "fits.info("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the shape and type of data in HDU 2 of "
      },
      {
        "from": "assistant",
        "value": "fits.info("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you print the summary information of HDUs in "
      },
      {
        "from": "assistant",
        "value": "fits.info("
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the Astropy library to perform image processing on astronomy data?"
      },
      {
        "from": "assistant",
        "value": "import astropy as ap\nprint(ap.version)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use the Astropy library to convert between different time systems?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.units import cd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the Astropy library to calculate the distance to a celestial object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import c, G\nfrom astropy import units as u\nx = 10\ny = x"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of astronomical observations data with RA and DEC coordinates [1.2, 3.4, 5.6, 7.8] and [2.3, 4.5, 6.7, 8.9]. How can I create an Astropy Table to organize this data with appropriate column names and units?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\n\ntable = Table([ra, dec], names=('RA', 'DEC'), units=(u.deg, u.deg), meta={'author': 'Me'})\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a binary table HDU from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "hdu = fits.BinTableHDU.read('file.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I fit a Gaussian profile to some data using SLSQPLSQFitter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfitting.LevMarLSQFitter().fit(models.Gaussian1D(), x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use SLSQPLSQFitter to fit a custom model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nclass CustomModel(models.Model):\n    def evaluate(self, x):\n        # your custom model implementation\nfitting.LevMarLSQFitter().fit(CustomModel(), x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set up a nonlinear fit for a model with a linear parameter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nmodel = models.Model(with linear parameter)\nfitting.LevenbergMarquardt(fit_fixed={'linear_parameter': True}).fit(model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model that fits a sine wave to data using a non-linear least squares fitter in astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\n# Create a sine model\nsin_model = models.Sine(amplitude=1, offset=2, phase=3)\n\n# Create a fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Generate some data\nx = np.linspace(0, 10, 100)\ny = sin_model(x) + np.random.normal(0, 0.2, 100)\n\n# Fit the data\nfitted_model = fitter(sin_model, x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a celestial object located at RA=11h 00m 00.0s and Dec=-30d 00m 00.0s. Can you show me how to find out which constellation this object belongs to using astropy's coordinates and get_constellation function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import get_constellation\n\n# Create SkyCoord object from the given RA and Dec\n# Using strings in HMS/DMS format for direct input\ncoords = SkyCoord('11h00m00.0s', '-30d00m00.0s')\n# Get the constellation for these coordinates\nconstellation = get_constellation(coords)\n# Print the result\nprint(f\"The object at RA={coords.ra.to_string(unit='hour', sep=':', precision=2)}, \\n        Dec={coords.dec.to_string(unit='deg', sep=':', precision=1)} \\nis in the constellation {constellation}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the astropy's coordinates and get_constellation function to find out which constellation the celestial object at RA=12h 30m 00.0s and Dec=+60d 00m 00.0s belongs to?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import get_constellation\n\n# Create SkyCoord object from the given RA and Dec\n# Using strings in HMS/DMS format for direct input\ncoords = SkyCoord('12h30m00.0s', '+60d00m00.0s')\n# Get the constellation for these coordinates\nconstellation = get_constellation(coords)\n# Print the result\nprint(f\"The object at RA={coords.ra.to_string(unit='hour', sep=':', precision=2)}, \\n        Dec={coords.dec.to_string(unit='deg', sep=':', precision=1)} \\nis in the constellation {constellation}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to find out which constellation a celestial object located at RA=13h 30m 00.0s and Dec=-90d 00m 00.0s belongs to using astropy's coordinates and get_constellation function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import get_constellation\n\n# Create SkyCoord object from the given RA and Dec\n# Using strings in HMS/DMS format for direct input\ncoords = SkyCoord('13h30m00.0s', '-90d00m00.0s')\n# Get the constellation for these coordinates\nconstellation = get_constellation(coords)\n# Print the result\nprint(f\"The object at RA={coords.ra.to_string(unit='hour', sep=':', precision=2)}, \\n        Dec={coords.dec.to_string(unit='deg', sep=':', precision=1)} \\nis in the constellation {constellation}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert the time 2022-01-01T00:00:00 to JD"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-01-01T00:00:00', format='isot', scale='utc').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the Unix time 1643723400 to a Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('1643723400', format='unix')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to add 10 days to the current time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime.now() + 10 * Time.delta"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a CSV file with a custom delimiter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.read('file.csv', delimiter=';')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to skip comment lines in a CSV file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.read('file.csv', comment='#')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a CSV file with a specific data type for a column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nascii.read('file.csv', converters={'column_name': int})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working on subtracting a uniform sky background of 128.0 ADU from my galaxy cluster observation."
      },
      {
        "from": "assistant",
        "value": "sky_model = models.Const2D(amplitude=128.0)\nsky_model.amplitude.fixed = True\nsky_background = sky_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a fixed point source model to my galaxy cluster observation?"
      },
      {
        "from": "assistant",
        "value": "point_source_model = models.PointSource( amplitude=100.0, x=5.0, y=5.0)\npoint_source_model.x.fixed = True\npoint_source_model.y.fixed = True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for a 2D constant model?"
      },
      {
        "from": "assistant",
        "value": "f(x, y) = A"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a SkyCoord object with a position and proper motion in the ICRS frame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord object with position and proper motion\nc = SkyCoord(ra=10*u.deg, dec=20*u.deg, pm_ra_cosdec=1*u.mas/u.yr, pm_dec=2*u.mas/u.yr, frame='icrs')\n\n# Print the object details\nprint(c.to_string('hmsdms'))\nprint(c.pm_ra_cosdec)\nprint(c.pm_dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the transformation from the FK5 system to the ICRS system?"
      },
      {
        "from": "assistant",
        "value": "FK5.to_ICRS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I transform a coordinate from the ICRS system to the FK5 system, including proper motion and radial velocity?"
      },
      {
        "from": "assistant",
        "value": "ICRS.transform_to(FK5) + ICRS.pm_minus dans + ICRS.radial_velocity"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Cartesian representation of a star in the FK5 system with proper motion and radial velocity?"
      },
      {
        "from": "assistant",
        "value": "starcartesian"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write my observational data tables containing multiple star catalogs to a standardized ASCII format with proper column names and delimiters for sharing with my research collaborators?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\nfrom astropy.io import ascii\nimport numpy as np\ncat1 = Table({'ra': [1.2, 2.3, 3.4], 'dec': [-4.5, -5.6, -6.7], 'vmag': [7.8, 9.0, 8.1], 'catalog': ['GAIA', 'GAIA', 'GAIA']})\ncat2 = Table({'ra': [1.2, 2.3, 3.4], 'dec': [-4.5, -5.6, -6.7], 'vmag': [7.8, 9.0, 8.1], 'catalog': ['TYCHO', 'TYCHO', 'TYCHO']})\ncombined_catalog = vstack([cat1, cat2])\nascii.write(combined_catalog, 'combined_catalog.csv', format='csv', delimiter=',', overwrite=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Scott's rule to determine the optimal bin width for a normal distribution of ages of 1000 stars ranging from 100 to 1000 million years?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the optimal bin width for a non-normal distribution of masses of 500 stars ranging from 0.1 to 10 solar masses?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the bin width calculated using Scott's rule for a dataset of 2000 distances ranging from 0.1 to 10 kiloparsecs?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a `CCDData` object from a 2D numpy array of raw image counts with uncertainty estimation and proper ADU units for photometric analysis?"
      },
      {
        "from": "assistant",
        "value": "create_ccd_data(raw_image_array=np.array([[1,2,3],[4,5,6]]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D numpy array of raw image counts, how can I create a `CCDData` object with uncertainty estimation and proper ADU units?"
      },
      {
        "from": "assistant",
        "value": "create_ccd_data(raw_image_array=np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of creating a `CCDData` object from a raw image array with uncertainty estimation and proper ADU units, including the meta data?"
      },
      {
        "from": "assistant",
        "value": "create_ccd_data(raw_image_array=np.array([[1,2,3],[4,5,6]]), meta={'INSTRUME': 'Example Telescope'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a magnetic field in Tesla to Gauss in CGS units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\n\n# Sample magnetic field measurements in Tesla\nB_tesla = np.array([1.5e-10, 2.7e-10, 3.2e-10])  # Example values\n\n# Convert Tesla to Gauss\n# 1 Tesla = 10^4 Gauss\nB_gauss = (B_tesla * u.T).to(u.G)\n\n# Print results\nprint(\"Original (Tesla)\":, B_tesla)\nprint(\"Converted (Gauss)\":, B_gauss.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.time.TimeMJD format to represent midnight on January 1, 2000?"
      },
      {
        "from": "assistant",
        "value": "Time(51544.0, format='mjd')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between using TimeMJD and Time in astropy.time for converting dates to Unix timestamp?"
      },
      {
        "from": "assistant",
        "value": "You should use Time with format='mjd' for correct conversion."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date from MJD to ISO format using astropy.time?"
      },
      {
        "from": "assistant",
        "value": "Use the iso attribute of the Time object, e.g., crab_mjd.iso"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine multiple models to create a more complex model using astropy's modeling functionality?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import models, polynomial1D, polynomial2D\n# Create two 1D polynomial models\npoly1 = polynomial1D.Polynomial1D(degree=2)\npoly2 = polynomial2D.Polynomial2D(degree=(2, 2))\n# Create a compound model by combining poly1 and poly2\ncompound_model = (poly1 + poly2)},{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm calculating the velocity of a star with a radial velocity of 50 km/s. How can I create a Quantity object representing this velocity and convert it to a proper velocity in km/s?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nvelocity = 50 * u.km/u.s\nprint(velocity)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a filter kernel from a 1D array using CustomKernel from astropy.convolution?"
      },
      {
        "from": "assistant",
        "value": "[1, 2, 3, 2, 1]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a 3x3 2D array to create a filter kernel with CustomKernel?"
      },
      {
        "from": "assistant",
        "value": "[[1, 1, 1], [1, 2, 1], [1, 1, 1]]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the dimension of the kernel created by CustomKernel from a 5x5 2D array?"
      },
      {
        "from": "assistant",
        "value": "[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 2, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using astropy to compute the luminosity distance for a set of redshifts [0.5, 1.0, 1.5], assuming a Planck18 cosmology."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nz = [0.5, 1.0, 1.5]\nds_lum = Planck18.luminosity_distance(z).to('Mpc').value\nprint(ds_lum)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use astropy to calculate the age of the universe at a given redshift z=2 using the Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nz = 2\ngenerate_age = Planck18.age(z).to('Gyr').value\nprint(generate_age)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.cosmology to calculate the comoving distance for a set of redshifts [1, 2, 3] using the Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nz = [1, 2, 3]\nds_comov = Planck18.comoving_distance(z).to('Mpc').value\nprint(ds_comov)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Include the quantity formatter for latex as a fallback format"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport matplotlib.pyplot as plt\ncustom_formatter = u.quantity_formatter.fallback_format(late influenced=True)\nwith visualization.quantity_support(format=custom_formatter):\n    # your plot code here"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get a formatted value with the default formatter"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport matplotlib.pyplot as plt\ndefault_formatter = u.quantity_formatter\ndefault_value = default_formatter.format(5 * u.m); default_value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Make a plot with y-axis tick labels formatted using the 'latex_inline' formatter"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport matplotlib.pyplot as plt\nwith visualization.quantity_support(format='latex_inline') as sup:\n    plt.figure()\n    plt.plot([1, 2, 3] * u.m)\n    plt.draw()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cutout of size 5x5 around a specific position in a 2D array."
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data, position=(10, 10), size=(5, 5))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a Poisson distribution and I want to calculate the confidence interval for the first 10 counts using the sherpagehrels method."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\npoisson_interval = stats.poisson_conf_interval(counts=np.arange(10), interval='sherpagehrels')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to fit a polynomial to radial velocity measurements of a binary star system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nt = np.linspace(0, 100, 50)  # Time points\nrv_data = 30 * np.sin(2*np.pi*t/25) + np.random.normal(0, 2, 50)  # Simulated RV data\npoly_model = models.Polynomial1D(degree=5)\nfitter = fitting.LevMarLSQFitter()\npoly_fit = fitter(poly_model, t, rv_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.modeling.models.Gaussian2D to fit a 2D Gaussian to a galaxy's surface brightness distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ny, x = np.mgrid[-5:5:101j, -5:5:101j]\nz = 1000 * np.exp(-0.5 * ((x - 0) / 2)**2 - 0.5 * ((y - 0) / 2)**2) + np.random.normal(0, 10, x.shape)\ngaussian_model = models.Gaussian2D(amplitude=1000, x_mean=0, y_mean=0, x_sigma=2, y_sigma=2)\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(gaussian_model, x, y, z)\nprint(fitted_model.amplitude, fitted_model.x_mean, fitted_model.y_mean, fitted_model.x_sigma, fitted_model.y_sigma)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert Besselian years to MJD and other formats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\n# Example Besselian year dates\nbesselian_years = np.array([1950.0, 1960.5, 1970.75, 1980.25]\n\n# Convert Besselian years to Time object with 'byear' format\nt_besselian = Time(besselian_years, format='byear')\n\n# Convert to modern formats commonly used in pulsar timing\nmjd = t_besselian.mjd  # Modified Julian Date\njyear = t_besselian.jyear  # Julian years\nisot = t_besselian.isot    # ISO Time format\n\n# Print conversions\nfor i, byear in enumerate(besselian_years):\n    print(f\"Besselian Year: {byear:.2f}\")\n    print(f\"MJD: {mjd[i]:.2f}\")\n    print(f\"Julian Year: {jyear[i]:.2f}\")\n    print(f\"ISO Time: {isot[i]}\" )\n    print('---')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a date from Besselian epoch to JD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n# Example Besselian year dates\nbesselian_year = 1950.0\n\n# Convert Besselian year to Time object with 'byear' format\n t_besselian = Time(besselian_year, format='byear')\n\n# Convert to JD\njd = t_besselian.jd\n\nprint(f\"JD: {jd:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between Besselian epoch and Julian epoch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n# Example Besselian year dates\nbesselian_year = 1950.0\n\n# Convert Besselian year to Time object with 'byear' format\n t_besselian = Time(besselian_year, format='byear')\n\n# Convert to Julian year\nj_year = t_besselian.jyear\n\nprint(f\"Julian Year: {j_year:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to visualize a galaxy image where the pixel values span from 10^-6 to 10^4. Can you show me how to use AsinhStretch to create a more balanced visualization with a=0.01?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (AsinhStretch, ImageNormalize)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to visualize a background noise image with values between 10^-2 and 10^3. Can you use AsinhStretch with a=0.05 to create a balanced image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (AsinhStretch, ImageNormalize)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to visualize a high dynamic range image of a nebula with pixel values ranging from 10^-4 to 10^6. How do I use AsinhStretch with a=0.005 for a balanced visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import (AsinhStretch, ImageNormalize)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Quantity object with a mass of 10 kg and convert it to grams?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\n\n# Create a Quantity object for the mass in kg\nmass_kg = 10 * u.kg\n\n# Convert to grams\nmass_g = mass_kg.to(u.g)\n\n# Print both representations\nprint(f\"Original mass: {mass_kg}\")\nprint(f\"Converted mass: {mass_g}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a distance of 5 light-years. How can I convert this value to meters?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\n\n# Create a Quantity object for the distance in light-years\nlight_year = 5 * u.lightyear\n\n# Convert to meters\nmeters = light_year.to(u.m)\n\n# Print the result\nprint(f\"Distance in meters: {meters}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to create a Quantity object with a temperature of 25\u00b0C and convert it to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\n\n# Create a Quantity object for the temperature in \u00b0C\ntemperature_c = 25 * u.degC\n\n# Convert to Kelvin\ntemperature_k = temperature_c.to(u.K)\n\n# Print both representations\nprint(f\"Original temperature: {temperature_c}\")\nprint(f\"Converted temperature: {temperature_k}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to convert velocity in cm/s to m/s. How can I do it using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# velocity in cm/s\nv_cm = 10 * u.cm / u.s\n\n# convert to m/s\nv_ms = v_cm.to(u.m / u.s)\n\nprint(f\"Velocity in m/s: {v_ms:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert temperature in Fahrenheit to Kelvin using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# temperature in Fahrenheit\nT_F = 32 * u.Fahrenheit\n\n# convert to Kelvin\nT_K = T_F.to(u.Kelvin)\n\nprint(f\"Temperature in Kelvin: {T_K:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me convert distance in inches to meters using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# distance in inches\nL_in = 12 * u.inch\n\n# convert to meters\nL_m = L_in.to(u.m)\n\nprint(f\"Distance in meters: {L_m:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the parameters of the Planck 2018 cosmology?"
      },
      {
        "from": "assistant",
        "value": "Planck18_params = {'H0': 67.36, 'Om0': 0.315, 'Ob0': 0.049, '\u03c38': 0.834, 'ns': 0.965}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the distance to a galaxy at a given redshift using the Planck 2018 cosmology?"
      },
      {
        "from": "assistant",
        "value": "d_L = Planck18.luminosity_distance(z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you plot the Hubble time as a function of redshift using the Planck 18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "H_time = Planck18.Hubble_time(z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.modeling.fitting.LinearLSQFitter to fit a quadratic model to my data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nwavelength = np.arange(4000, 4501)\nflux = np.linspace(1.2e-15, 0.9e-15, len(wavelength))\nquad_init = models.Quadratic1D()\nfitter = fitting.LinearLSQFitter()\nfitted_quadratic = fitter(quad_init, wavelength, flux)\nslope = fitted_quadratic.coeffs[0]\ntenpa = fitted_quadratic.coeffs[1]\nbeta = fitted_quadratic.coeffs[2]\nprint(f'Slope: {slope:.2e}')\nprint(f'Tenpa: {tenpa:.2e}')\nprint(f'Beta: {beta:.2e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of sky coordinates to pixel coordinates using the WCS transformations from an FITS image?"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.skycoord_to_pixel(coords, WCS(hdul[0].header), origin=0, mode='all')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the angular separation between two points on the Earth's surface?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nangular_separation = SkyCoord(10.6847, 41.2687, unit='deg').separation(SkyCoord(10.7215, 41.3109, unit='deg'))\nprint(angular_separation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor between FWHM and sigma for a Gaussian distribution?"
      },
      {
        "from": "assistant",
        "value": "The conversion factor between FWHM and sigma is approximately 2.3548350267."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a list of FWHM values to sigma values in Python?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.stats.gaussian_fwhm_to_sigma function to achieve this."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between FWHM and sigma in a Gaussian distribution?"
      },
      {
        "from": "assistant",
        "value": "The relationship between FWHM and sigma in a Gaussian distribution is given by FWHM = 2.3548350267 * sigma."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with image data that has a large dynamic range. How can I scale the data to make both bright and faint features visible?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as astropy_vis\nfrom astropy.visualization import MinMaxInterval\nimport numpy as np\n\ndata = np.random.exponential(scale=1.0, size=(100, 100))  # Simulated data\ninterval = astropy_vis.MinMaxInterval(data.min(), data.max())\nprint(interval)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the MinMaxInterval to scale the data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as astropy_vis\nfrom astropy.visualization import MinMaxInterval\nimport numpy as np\n\ndata = np.random.exponential(scale=1.0, size=(100, 100))  # Simulated data\ninterval = astropy_vis.MinMaxInterval(data.min(), data.max())\nprint(interval.scale(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the MinMaxInterval to scale multi-dimensional data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as astropy_vis\nfrom astropy.visualization import MinMaxInterval\nimport numpy as np\n\ndata = np.random.exponential(scale=1.0, size=(100, 100, 3))  # Simulated multi-dimensional data\ninterval = astropy_vis.MinMaxInterval(data.min(), data.max())\nprint(interval.scale(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am using your zoom function in my astronomy work to visualize a zoomed-in area of a galaxy observation. Can you show me how to use the zoom function with a factor of 1.5 and a center of (50, 50) with your astropy visualization modules?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.visualization import Min_Max, AsinhStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata = np.random.normal(0, 1, (100, 100))  # Example data\n\n# Create a normalization using AsinhStretch and Min_Max for legacy reasons\nnorm = ImageNormalize(data, stretch=AsinhStretch(),  vmin=data.min(), vmax=data.max())\n\ndata_zoomed = data.copy()\ndata_zoomed[data <= (data.max() + data.min()) / 2] *= 1.5  # Zoomed-in data\n\n# Plot the data using imshow with the normalization\nplt.imshow(data_zoomed, norm=norm, cmap='viridis', origin='lower')\nplt.colorbar(label='Flux (stretched)')\nplt.title('Galaxy Observation with Zoom Function')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "To create a 2D constant model with amplitude 5.0, but allow this parameter to be varied during the fitting process."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\nclass SFTData: pass\n\nconst_model = models.Const2D(amplitude=5.0)\n# Do not fix the amplitude parameter\n# const_model.amplitude.fixed = True\n\n# The model is now ready for fitting\n# Example of how to verify the parameter is not fixed\nprint(f\"Amplitude value: {const_model.amplitude.value}\")\nprint(f\"Is amplitude fixed?: {const_model.amplitude.fixed}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am measuring the velocity of a star in a binary system. How can I convert from cm/s to km/s using the astropy.units module?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Convert measured velocity from cm/s to km/s\nmeasured_velocity = 100 * u.cm / u.s\nvelocity_km_s = measured_velocity.to(u.km / u.s)\nprint(fMeasured velocity: {velocity_km_s:.2f}km/s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to fit a 2D Gaussian profile to my galaxy image data to determine its morphological parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ncenter = (50, 50)\n# Create sample galaxy data (replace with your actual image data)\ny, x = np.mgrid[:100, :100]\nz = np.random.normal(0, 0.1, x.shape)  # Add noise\ndata = np.exp(-((x - center[0]) / 10) ** 2 - ((y - center[1]) / 10) ** 2)\n\ndata = data + z\n\n# Initialize Gaussian2D model with initial parameter guesses\nmoffat_init = models.Gaussian2D(amplitude=8., x_0=50., y_0=50., x_stddev=5., y_stddev=5.)\n\n# Create fitter object - using Levenberg-Marquardt algorithm\nfit_p = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfit = fit_p(moffat_init, x, y, data)\n\n# Print fitted parameters\nprint(f'Center (x,y): ({fit.x_0.value:.2f}, {fit.y_0.value:.2f})')\nprint(f'FWHM: {fit.fwhm.x value:.2f}, {fit.fwhm.y:.2f}')\nprint(f'Amplitude: {fit.amplitude.value:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to fit a 2D Lorentzian profile to my galaxy image data to determine its morphological parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ncenter = (50, 50)\n# Create sample galaxy data (replace with your actual image data)\ny, x = np.mgrid[:100, :100]\nz = np.random.normal(0, 0.1, x.shape)  # Add noise\ndata = 1 / (1 + ((x - center[0]) / 5) ** 2 + ((y - center[1]) / 5) ** 2)\n\ndata = data + z\n\n# Initialize Lorentzian2D model with initial parameter guesses\nmoffat_init = models.Lorentzian2D(amplitude=8., x_0=50., y_0=50., fwhm_x=10., fwhm_y=10.)\n\n# Create fitter object - using Levenberg-Marquardt algorithm\nfit_p = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfit = fit_p(moffat_init, x, y, data)\n\n# Print fitted parameters\nprint(f'Center (x,y): ({fit.x_0.value:.2f}, {fit.y_0.value:.2f})')\nprint(f'FWHM: {fit.fwhm_x.value:.2f}, {fit.fwhm_y.value:.2f}')\nprint(f'Amplitude: {fit.amplitude.value:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to fit a 2D CosineTan model to my galaxy image data to determine its morphological parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ncenter = (50, 50)\n# Create sample galaxy data (replace with your actual image data)\ny, x = np.mgrid[:100, :100]\nz = np.random.normal(0, 0.1, x.shape)  # Add noise\ndata = np.cos(2 * np.arctan2(y - center[1], x - center[0]))\n\ndata = data + z\n\n# Initialize CosineTan2D model with initial parameter guesses\ncosine_init = models.CosineTan2D(amplitude=8., x_0=50., y_0=50., delta_0=5., delta_1=5., delta_2=5.)\n\n# Create fitter object - using Levenberg-Marquardt algorithm\nfit_p = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfit = fit_p(cosine_init, x, y, data)\n\n# Print fitted parameters\nprint(f'Center (x,y): ({fit.x_0.value:.2f}, {fit.y_0.value:.2f})')\nprint(f'Delta Parameters: {fit.delta_0.value:.2f}, {fit.delta_1.value:.2f}, {fit.delta_2.value:.2f}')\nprint(f'Amplitude: {fit.amplitude.value:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.stats.sigma_clipped_stats to calculate sigma-clipped statistics on a sample dataset?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use astropy.stats.sigma_clipped_stats to remove outliers from a sample dataset?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default value of the sigma parameter in astropy.stats.sigma_clipped_stats?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the Sun's positions at a specific date and location for both the true ecliptic and the mean ecliptic?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nfrom astropy.coordinates import get_sun, SkyCoord, AltAz, EarthLocation, get_middlanglat\nimport numpy as np\ntimes = Time('2024-06-21 00:00:00')\nobservatory = EarthLocation(lat=51.4769*u.deg, lon=-0.0005*u.deg)\nsun_positions_true_ecliptic = get_sun(times)\nsun_positions_mean_ecliptic = get_sun(times).transform_to('galactic')\nradec_true_ecliptic = SkyCoord(ra=sun_positions_true_ecliptic.ra.deg*u.degree, dec=sun_positions_true_ecliptic.dec.deg*u.degree, frame='icrs').transform_to('galactic')\nradec_mean_ecliptic = get_middlanglat('Sun', time=times).transform_to('galactic')\nprint(radec_true_ecliptic, radec_mean_ecliptic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the astropy library to find the apparent solar time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nfrom astropy.coordinates import EarthLocation, get_sun\nimport numpy as np\nten_minutes = 0\netimes = Time('2024-06-21 00:00:00', format='isot', scale='utc')\nearth_location = EarthLocation(lat=51.4769*u.deg, lon=-0.0005*u.deg)\ntimes_array = etimes + TimeDelta(np.arange(24)*u.hour)\napparent_solar_time = times_array.hour\nday = apparent_solar_time[apparent_solar_time>=12] + 12\nnight = apparent_solar_time[apparent_solar_time<12] + 24\ntime_for_plotting = np.concatenate([apparent_solar_time, day, night])\nreturn time_for_plotting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how to use RedshiftScaleFactor to create a model for z=0.5 and apply it to a wavelength of 2500 \u00c5."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nfrom astropy.coordinates import SpectralCoord\nimport astropy.units as u\n\ncpy # Define rest-frame wavelength\nrest_wavelength = SpectralCoord(2500 * u.angstrom)\n\ncpy # Set target redshift\nz = 0.5\n\ncpy # Calculate observed wavelength using RedshiftScaleFactor\nfrom astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(z)\nobserved_wavelength = model(rest_wavelength)\n\ncpy # Print results\nprint(f\"Rest wavelength: {rest_wavelength}\")\nprint(f\"Observed wavelength at z={z}: {observed_wavelength}\")\nprint(f\"Observed wavelength in Angstroms: {observed_wavelength.to(u.angstrom)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use RedshiftScaleFactor to calculate the observed wavelength of a 1000\u00c5 light source at a redshift of 1.2."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nfrom astropy.coordinates import SpectralCoord\nimport astropy.units as u\n\ncpy # Define rest-frame wavelength\nrest_wavelength = SpectralCoord(1000 * u.angstrom)\n\ncpy # Set target redshift\nz = 1.2\n\ncpy # Calculate observed wavelength using RedshiftScaleFactor\nfrom astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(z)\nobserved_wavelength = model(rest_wavelength)\n\ncpy # Print results\nprint(f\"Rest wavelength: {rest_wavelength}\")\nprint(f\"Observed wavelength at z={z}: {observed_wavelength}\")\nprint(f\"Observed wavelength in Angstroms: {observed_wavelength.to(u.angstrom)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a RedshiftScaleFactor model for z=3.5 and apply it to a 5000\u00c5 light source to find its observed wavelength."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nfrom astropy.coordinates import SpectralCoord\nimport astropy.units as u\n\ncpy # Define rest-frame wavelength\nrest_wavelength = SpectralCoord(5000 * u.angstrom)\n\ncpy # Set target redshift\nz = 3.5\n\ncpy # Create RedshiftScaleFactor model\nfrom astropy.modeling.models import RedshiftScaleFactor\nmodel = RedshiftScaleFactor(z)\n\ncpy # Apply model to rest-frame wavelength to find observed wavelength\nobserved_wavelength = model(rest_wavelength)\n\ncpy # Print results\nprint(f\"Rest wavelength: {rest_wavelength}\")\nprint(f\"Observed wavelength at z={z}: {observed_wavelength}\")\nprint(f\"Observed wavelength in Angstroms: {observed_wavelength.to(u.angstrom)}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use bootstrap resampling with 1000 samples to estimate the uncertainty in the median metallicity?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nfrom astropy.utils import NumpyRNGContext\n\n# Define the metallicity data\nmetallicities = np.array([-0.32, -0.45, -0.28, -0.41, -0.35, -0.39, -0.31, \n                         -0.44, -0.37, -0.29, -0.42, -0.36, -0.33, -0.40, -0.34])\n\n# Function to compute median\ndef get_median(data):\n    return np.median(data)\n\n# Perform bootstrap resampling with 1000 samples\nwith NumpyRNGContext(123):  # Set random seed for reproducibility\n    boot_medians = bootstrap(metallicities, 1000, bootfunc=get_median)\n\n# Calculate statistics\nmedian_metallicity = np.median(metallicities)\nuncertainty = np.std(boot_medians)\n\nprint(f\"Median metallicity: {median_metallicity:.3f} \u00b1 {uncertainty:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use bootstrap resampling with 500 samples to estimate the uncertainty in the mean metallicity?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nfrom astropy.utils import NumpyRNGContext\n\n# Define the metallicity data\nmetallicities = np.array([-0.32, -0.45, -0.28, -0.41, -0.35, -0.39, -0.31, \n                         -0.44, -0.37, -0.29, -0.42, -0.36, -0.33, -0.40, -0.34])\n\n# Function to compute mean\ndef get_mean(data):\n    return np.mean(data)\n\n# Perform bootstrap resampling with 500 samples\nwith NumpyRNGContext(123):  # Set random seed for reproducibility\n    boot_means = bootstrap(metallicities, 500, bootfunc=get_mean)\n\n# Calculate statistics\nmean_metallicity = np.mean(metallicities)\nuncertainty = np.std(boot_means)\n\nprint(f\"Mean metallicity: {mean_metallicity:.3f} \u00b1 {uncertainty:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use bootstrap resampling with 1000 samples to estimate the uncertainty in the standard deviation of the metallicity?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nfrom astropy.utils import NumpyRNGContext\n\n# Define the metallicity data\nmetallicities = np.array([-0.32, -0.45, -0.28, -0.41, -0.35, -0.39, -0.31, \n                         -0.44, -0.37, -0.29, -0.42, -0.36, -0.33, -0.40, -0.34])\n\n# Perform bootstrap resampling with 1000 samples\nwith NumpyRNGContext(123):  # Set random seed for reproducibility\n    boot_sd = bootstrap(metallicities, 1000)\n\n# Calculate statistics\nstd_deviation = np.std(metallicities)\nuncertainty = np.std(boot_sd)\n\nprint(f\"Standard deviation of metallicity: {std_deviation:.3f} \u00b1 {uncertainty:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare three Gaussian profiles with the same center at 5000 Angstroms and standard deviation of 2.0 Angstroms, but different amplitudes (0.5, 1.0, and 1.5). How can I plot these profiles together with different colors and a legend?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling.models import Gaussian1D import matplotlib.pyplot as plt # Create wavelength array centered around 5000 Angstroms wavelength = np.linspace(4990, 5010, 1000) # Create three Gaussian profiles with different amplitudes gaussian1 = Gaussian1D(amplitude=0.5, mean=5000, stddev=2.0) gaussian2 = Gaussian1D(amplitude=1.0, mean=5000, stddev=2.0) gaussian3 = Gaussian1D(amplitude=1.5, mean=5000, stddev=2.0) # Plot the profiles plt.figure(figsize=(10, 6)) plt.plot(wavelength, gaussian1(wavelength), 'b-', label='Amplitude = 0.5') plt.plot(wavelength, gaussian2(wavelength), 'r-', label='Amplitude = 1.0') plt.plot(wavelength, gaussian3(wavelength), 'g-', label='Amplitude = 1.5') # Add labels and title plt.xlabel('Wavelength (\u00c5)') plt.ylabel('Intensity') plt.title('Comparison of Gaussian Profiles') plt.legend() plt.grid(True) plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare two Boxcar profiles with the same center at 5000 Angstroms and width of 4.0 Angstroms, but different amplitudes (0.5 and 1.0). How can I plot these profiles together with different colors and a legend?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling.models import Box1D import matplotlib.pyplot as plt # Create wavelength array centered around 5000 Angstroms wavelength = np.linspace(4990, 5010, 1000) # Create two Boxcar profiles with different amplitudes boxcar1 = Box1D(amplitude=0.5, x_0=5000, x olu\u015f=4.0) boxcar2 = Box1D(amplitude=1.0, x_0=5000, x\u093e\u091c\u0938ity 4.0) # Plot the profiles plt.figure(figsize=(10, 6)) plt.plot(wavelength, boxcar1(wavelength), 'b-', label='Amplitude = 0.5') plt.plot(wavelength, boxcar2(wavelength), 'r-', label='Amplitude = 1.0') # Add labels and title plt.xlabel('Wavelength (\u00c5)') plt.ylabel('Intensity') plt.title('Comparison of Boxcar Profiles') plt.legend() plt.grid(True) plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare three Ricker wavelet profiles with the same center at 5000 Angstroms and time 0.5, but different frequencies (1.0, 2.0, and 3.0). How can I plot these profiles together with different colors and a legend?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling.models import RickerWavelet1D import matplotlib.pyplot as plt # Create wavelength array centered around 5000 Angstroms wavelength = np.linspace(4990, 5010, 1000) # Create three Ricker wavelet profiles with different frequencies ricker1 = RickerWavelet1D(frequency=1.0, time=0.5) ricker2 = RickerWavelet1D(frequency=2.0, time=0.5) ricker3 = RickerWavelet1D(frequency=3.0, time=0.5) # Plot the profiles plt.figure(figsize=(10, 6)) plt.plot(wavelength, ricker1(wavelength), 'b-', label='Frequency = 1.0') plt.plot(wavelength, ricker2(wavelength), 'r-', label='Frequency = 2.0') plt.plot(wavelength, ricker3(wavelength), 'g-', label='Frequency = 3.0') # Add labels and title plt.xlabel('Wavelength (\u00c5)') plt.ylabel('Intensity') plt.title('Comparison of Ricker Wavelet Profiles') plt.legend() plt.grid(True) plt.show()}]}]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Column with a compound data shape to store Planetary System Parameters."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\nimport numpy as np\n\ndata = np.array([(10.5, 20.4, 15.6), (11.7, 21.8, 16.9)], dtype=[('Mass', float), ('Semi-Major Axis', float), ('Orbital Period', float)])\ncol = Column(data, name='Planetary System Parameters', dtype=data.dtype)\nprint(col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a binary table with multiple columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntimestamps = np.array([1, 2, 3])\ncolumn1 = np.array([4, 5, 6])\ncolumn2 = np.array([7, 8, 9])\ntable = Table([timestamps, column1, column2], names=('timestamp', 'column1', 'column2'))\ntable.write('example.fits', format='fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `astropy.table.vstack` function to stack tables horizontally?"
      },
      {
        "from": "assistant",
        "value": "See the `join_type` parameter to specify the type of join to perform."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to calculate the blackbody emission at 5000K for a wavelength of 10000\u00c5. Can you show me how to calculate and print the flux at this wavelength using the BlackBody model?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=5000*u.K)\nbb(10000 * u.AA) # doctest: +FLOAT_CMP"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the blackbody emission at 10000K for a wavelength of 5000\u00c5?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=10000*u.K)\nbb(5000 * u.AA) # doctest: +FLOAT_CMP"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the blackbody emission at 8000K for a wavelength of 20000\u00c5. Can you show me how to calculate and print the flux at this wavelength using the BlackBody model?"
      },
      {
        "from": "assistant",
        "value": "bb = models.BlackBody(temperature=8000*u.K)\nbb(20000 * u.AA) # doctest: +FLOAT_CMP"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with outer radius=12 pixels and width=3 pixels using the 'center' mode."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel; ring_kernel = Ring2DKernel(3, 12); ring_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with inner radius=5 pixels and width=2 pixels using the 'oversample' mode."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel; ring_kernel = Ring2DKernel(2, 5, mode='oversample'); ring_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Ring2DKernel with outer radius=15 pixels and width=4 pixels using the 'linear_interp' mode."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel; ring_kernel = Ring2DKernel(4, 15, mode='linear_interp'); ring_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation (MAD) of flux values in a numpy array with values ranging from 0 to 1000, while ignoring outliers beyond 3 sigma?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.stats import sigma_clip, mad_std\ndef calculate_mad(flux_values):\n    # Apply sigma clipping to remove outliers beyond 3 sigma\n    clipped_data = sigma_clip(flux_values, sigma=3, masked=True)\n\n    # Calculate median absolute deviation (MAD) on sigma-clipped data\n    mad = mad_std(clipped_data.data)\n\n    return mad\n\n# Example usage:\nflux_values = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\nmad = calculate_mad(flux_values)\nprint(f'Median absolute deviation (MAD): {mad:.2f}') # Output: [76.91]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation (MAD) of flux values in a numpy array with values ranging from 0 to 1000, while ignoring outliers beyond 3 sigma?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.stats import sigma_clip, mad_std\ndef calculate_mad(flux_values):\n    # Apply sigma clipping to remove outliers beyond 3 sigma\n    clipped_data = sigma_clip(flux_values, sigma=3, masked=True)\n\n    # Calculate median absolute deviation (MAD) on sigma-clipped data\n    mad = mad_std(clipped_data.data)\n\n    return mad\n\n# Example usage:\nflux_values = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\nmad = calculate_mad(flux_values)\nprint(f'Median absolute deviation (MAD): {mad:.2f}') # Output: [76.91]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation (MAD) of flux values in a numpy array with values ranging from 0 to 1000, while ignoring outliers beyond 3.5 sigma?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nfrom astropy.stats import sigma_clip, mad_std\ndef calculate_mad(flux_values):\n    # Apply sigma clipping to remove outliers beyond 3.5 sigma\n    clipped_data = sigma_clip(flux_values, sigma=3.5, masked=True)\n\n    # Calculate median absolute deviation (MAD) on sigma-clipped data\n    mad = mad_std(clipped_data.data)\n\n    return mad\n\n# Example usage:\nflux_values = np.array([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000])\nmad = calculate_mad(flux_values)\nprint(f'Median absolute deviation (MAD): {mad:.2f}') # Output: [84.36]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the signal-to-noise ratio for a given exposure time, source flux, and sky background?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.funcs.signal_to_noise_oir_ccd(t=3600, source_eps=0.05, sky_eps=0.1, dark_eps=0.01, rd=3.5, npix=9, gain=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to clean my dataset to remove duplicates based on specific columns. How can I use the `unique` function from `astropy.table` to achieve this?"
      },
      {
        "from": "assistant",
        "value": "{\"function\": \"unique\", \"parameters\": {\"input_table\": \"my_table\", \"keys\": \"['col1', 'col2']\", \"keep\": \"last\"}}`}], {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a trapezoidal model with a amplitude of 2, center position of 3, width of 1, and slope of 0.5?"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Trapezoid1D(amplitude=2, x_0=3, width=1, slope=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the Sun at a specific time and location using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, EarthLocation, AltAz\nfrom astropy import units as u\n\n# Set observer location (e.g., New York City)\nobservatory = EarthLocation(lat=40.74*u.deg, lon=-74*u.deg, height=10*u.m)\n\n# Set time and date\ntime = Time(\"2022-01-01 12:00:00\", scale=\"utc\")\n\n# Get Sun position\nsun = get_body('sun', time, location=observatory)\n\n# Transform to local horizontal coordinates\nsun_altaz = sun.transform_to(AltAz(obstime=time, location=observatory))\n\n# Print Sun's altitude and azimuth\nprint(sun_altaz.alt.value, sun_altaz.az.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an astropy.table.Table from a dictionary and use astropy.table.Row to access individual row data."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\n# Create a dictionary with column names and data\nmy_dict = {'name': ['John', 'Mary', 'David'],\n           'age': [25, 31, 42]}\n\n# Create a Table from the dictionary\nmy_table = Table(my_dict)\n\n# Access individual row data using astropy.table.Row\nfor row in my_table:\n    print(f'{row["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have calibrated data of a galaxy with some cosmic rays. How can I create an NDData object that captures all this information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nimport numpy as np\n\n# Create sample data (replace with your actual data)\nimage_data = np.random.normal(1000, 50, size=(100, 100))\nuncertainty = np.random.normal(10, 2, size=(100, 100))\nmask = np.zeros_like(image_data, dtype=bool)\n\n# Simulate cosmic ray flags\nmask[30:35, 40:45] = True  # Flag region as cosmic rays\nmask[60:62, 70:75] = True  # Another cosmic ray region\n\ncd = CCDData(\ndata=image_data,                         # Primary image data\nuncertainty=StdDevUncertainty(uncertainty), # Pixel-by-pixel uncertainty\nmask=mask,                                 # Boolean mask (True for bad pixels)\nunit='adu',                                # Data unit (e.g., 'adu', 'electron')\nmeta={'object': 'Galaxy'}                    # Optional metadata\n)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D image of a nebula with pixel-by-pixel uncertainty values. How can I create an NDData object that captures all this information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nimport numpy as np\n\n# Create sample data (replace with your actual data)\nimage_data = np.random.normal(1000, 50, size=(100, 100))\nuncertainty = np.random.normal(10, 2, size=(100, 100))\nmask = np.zeros_like(image_data, dtype=bool)\n\ncy = CCDData(\ndata=image_data,                         # Primary image data\nuncertainty=StdDevUncertainty(uncertainty), # Pixel-by-pixel uncertainty\nmask=mask,                                 # Boolean mask (True for bad pixels)\nunit='adu',                                # Data unit (e.g., 'adu', 'electron')\nmeta={'object': 'Nebula'}                    # Optional metadata\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3D data cube of a solar system with pixel-by-pixel uncertainty values. How can I create an NDData object that captures all this information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData, StdDevUncertainty\nimport numpy as np\n\n# Create sample data (replace with your actual data)\ndata_cube = np.random.normal(1000, 50, size=(100, 100, 10))\nuncertainty = np.random.normal(10, 2, size=(100, 100, 10))\nmasks = [np.zeros_like(data_cube[i], dtype=bool) for i in range(10)]\n\ncd = CCDData(\ndata=data_cube,                         # Primary image data\nuncertainty=StdDevUncertainty(uncertainty), # Pixel-by-pixel uncertainty\nmask=masks,                                 # Boolean mask (True for bad pixels)\nunit='adu',                                # Data unit (e.g., 'adu', 'electron')\nmeta={'object': 'Solar System'}                   # Optional metadata\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use SkyOffsetFrame to calculate offsets and dithers in the frame of the sky relative to an arbitrary position?"
      },
      {
        "from": "assistant",
        "value": "import astropy.coordinates as coords\nfrom astropy import units as u\n\n# Define target position\nposition = coords.SkyCoord('10h45m03.6s', '+23d45m17s', frame='icrs')\n\n# Define a SkyOffsetFrame centered on the target position\nframe = coords.SkyOffsetFrame(representation=None, origin=position, rotation=0*u.deg)\n\n# Print the frame's component names\nprint(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate angular separation between two points on the sky using astropy coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\n\n# Define two points on the sky\npoint1 = SkyCoord('10h45m03.6s', '+23d45m17s', frame='icrs')\npoint2 = SkyCoord('10h45m10.2s', '+23d45m00s', frame='icrs')\n\n# Calculate angular separation\nsep = point1.separation(point2)\nprint(sep)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy coordinates to calculate position angle (East of North) between two points on the sky?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\n\n# Define two points on the sky\npoint1 = SkyCoord('10h45m03.6s', '+23d45m17s', frame='icrs')\npoint2 = SkyCoord('10h45m10.2s', '+23d45m00s', frame='icrs')\n# Calculate position angle\npa = point1.position_angle(point2)\nprint(pa)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the coordinates of a pulsar discovered in 1995.1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\ntpulsar = SkyCoord(ra=21.220833*u.hourangle, dec=42.743333*u.deg, frame='fk4', equinox='B1950.0')\nbd1972 = Time(1968.3, format='byear')\npulsar_pos = pulsar.transform_to('icrs', obstime=bd1972)\nprint(pulsar_pos)\ntime_1995 = Time(1995.1, format='byear')\npulsar_current = pulsar.transform_to('icrs', obstime=time_1995)\nprint(pulsar_current)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert the lunar distance from astronomical units to kilometers."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Convert lunar distance from AU to km\nlunar_distance_km = 384400 * u.au.to(u.km)\n\nprint(f'Lunar distance: {lunar_distance_km:.2f} km')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read a CSV file with the 'delimiter' parameter missing?"
      },
      {
        "from": "assistant",
        "value": "read = ascii.read('example.csv')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a column to a specific data type?"
      },
      {
        "from": "assistant",
        "value": "converters={'column_name': float} read = ascii.read('example.csv', converters=converters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I exclude certain headers from the output?"
      },
      {
        "from": "assistant",
        "value": "include_names=['column1', 'column2'], exclude_names=['column3'] read = ascii.read('example.csv', include_names=include_names, exclude_names=exclude_names)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 3D ring kernel with inner radius 20 pixels, width 2 pixels using 'oversample' mode with factor=20"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Ring3DKernel(radius_in=20, width=2, mode='oversample', factor=20)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D ring kernel with inner radius 15 pixels, width 4 pixels using 'linear_interp' mode with factor=12"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Ring2DKernel(radius_in=15, width=4, mode='linear_interp', factor=12)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D ring kernel with inner radius 25 pixels, width 1 pixel using 'integrate' mode with factor=15"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.Ring2DKernel(radius_in=25, width=1, mode='integrate', factor=15)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create an equatorial coordinate object for a position at RA=12h30m, Dec=+45deg, with proper motions pm_ra=0.01 deg/yr and pm_dec=-0.005 deg/yr, observed at the J2000 epoch?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Create equatorial coordinate object\nequatorial_coord = SkyCoord(ra=12.5 * u.hour, dec=45 * u.deg, pm_ra_cosdec=0.01 * u.mas/u.yr, pm_dec=-0.005 * u.mas/u.yr, obstime=Time('J2000'))\n\n# Print the coordinates\nprint(f'Equatorial coordinates (J2000):')\nprint(f'RA: {equatorial_coord.ra:.3f}')\nprint(f'Dec: {equatorial_coord.dec:.3f}')\nprint(f'PM RA*cos(dec): {equatorial_coord.pm_ra_cosdec:.3f}')\nprint(f'PM Dec: {equatorial_coord.pm_dec:.3f}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a star with parallax 0.001 and magnitude 20. Show me how to fit it to a parallax vs magnitude relation using Linear1D with fixed slope of 100 and bounded intercept between -10 and -5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\n\n# Create a Linear1D model with fixed slope and bounded intercept\nline = models.Linear1D(slope=100, intercept=-8)\nline.intercept.bounds = (-10, -5)\n\n# Fit the data\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(line, [0.001], [20])\n\n# Print the result\nprint(result.intercept.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a column of dates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column, Time\n\n# Create a Column of dates\ndates = Time(['2022-01-01', '2022-01-02', '2022-01-03'], format='iso')\n\ntable = Table()\ntable['date'] = Column(data=dates, name='date', dtype='D')\n\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to export my exoplanet transit timing data (columns: epoch, mid_transit_time, uncertainty) to a CSV-style string with custom format where all floating point numbers show exactly 6 decimal places. Sample data: first row is [1, 2458723.456789, 0.000123]."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport io\n\ndata = Table([[1], [2458723.456789], [0.000123]], \n             names=['epoch', 'mid_transit_time', 'uncertainty'])\n\noutput = io.StringIO()\n\n# Write table with custom formatting\n# Use format property to specify decimal places for float columns\nformats={'mid_transit_time': '%.6f', \n                  'uncertainty': '%.6f'}\ndata.write(output, format='ascii.csv', \n          formats=formats)\n\ncsv_string = output.getvalue()\noutput.close()\n# Print result (for verification)\nprint(csv_string)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to export my exoplanet transit timing data (columns: epoch, mid_transit_time, uncertainty) to a CSV-style string with custom format where all floating point numbers show exactly 4 decimal places. Sample data: first row is [2, 2458724.56789, 0.001234]."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport io\n\ndata = Table([[2], [2458724.56789], [0.001234]], \n             names=['epoch', 'mid_transit_time', 'uncertainty'])\n\noutput = io.StringIO()\n\n# Write table with custom formatting\n# Use format property to specify decimal places for float columns\nformats={'mid_transit_time': '%.4f', \n                  'uncertainty': '%.4f'}\ndata.write(output, format='ascii.csv', \n          formats=formats)\n\ncsv_string = output.getvalue()\noutput.close()\n# Print result (for verification)\nprint(csv_string)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to export my exoplanet transit timing data (columns: epoch, mid_transit_time, uncertainty) to a CSV-style string with custom format where only uncertainty shows exactly 4 decimal places. Sample data: first row is [3, 2458725.67890, 0.00123]."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport io\n\ndata = Table([[3], [2458725.67890], [0.00123]], \n             names=['epoch', 'mid_transit_time', 'uncertainty'])\n\noutput = io.StringIO()\n\n# Write table with custom formatting\n# Use format property to specify decimal places for float columns\nformats={'uncertainty': '%.4f'}\ndata.write(output, format='ascii.csv', \n          formats=formats)\n\ncsv_string = output.getvalue()\noutput.close()\n# Print result (for verification)\nprint(csv_string)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the decibel difference between two sound pressure levels?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\ndB1 = 100 * u.dB\ndB2 = 10 * u.dB\ndB_diff = dB1 - dB2\ncalculation_result = dB_diff.decompose().magnitudes[0]\nprint(f'\u00b0dB difference: {calculation_result:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the conversion factor from dB to dex?"
      },
      {
        "from": "assistant",
        "value": "u.dB.to(u.dex)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the logarithmic difference between two wavelengths in nm?"
      },
      {
        "from": "assistant",
        "value": "u.m.to(u.nm).log(level='lin')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add the number of exposures to the header"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ncard = fits.Card('NEXP', 10, 'Number of exposures')\nhdul[0].header.append(card)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Change the value of the QUALITY card"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ntextval = ('B', 'Overall quality grade (B/A/C/D/F)')\nblast = fits.Card('QUALITY', textval[0], textval[1])\nblast.update;color(blindbl(`= hdul[0].header['QUALITY'].valueblue`)\nhdul[0].header['QUALITY'] = blast)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add a new quality indicator for telescope vendor"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ncard = fits.Card('TELESCOPE_VENDOR', 'Optical', 'Vendor of the telescope')\nhdul[0].header.append(card)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying galaxy mergers and need to create a model of their surface brightness profiles. How can I generate a 2D Sersic model with a higher Sersic index typical of giant galaxies, centered at specific coordinates in my image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ncenter_x, center_y = 50, 50\namplitude = 1.0\nreff = 30.0\nn = 4.0\ncenter_x, center_y = 50, 50\nellip = 0.1\ntheta = np.pi/4\nsersic_model = models.Sersic2D(amplitude=amplitude, r_eff=reff, n=n, x_0=center_x, y_0=center_y, ellip=ellip, theta=theta)\ndwarf_galaxy = sersic_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a new point in cartesian coordinates with x, y, and z values of 1, 2, and 3 respectively."
      },
      {
        "from": "assistant",
        "value": "[1, 2, 3]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a cartesian representation from an array with dimensions 1000x3?"
      },
      {
        "from": "assistant",
        "value": "[[1, 2, 3], [4, 5, 6], ...]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the output of cartesian_representation([5, 6, 7], unit=pc)"
      },
      {
        "from": "assistant",
        "value": "[5 pc, 6 pc, 7 pc]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a signal with outliers, and I want to robustly estimate the standard deviation. Can you demonstrate how to use Astropy's mad_std function to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\ndef robust_std(data):\n    return mad_std(data)\n# Create a noisy signal with outliers\ndata = [1, 2, 3, 100, 5, 6]\nprint(robust_std(data))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display an image with a specific stretch function using Astropy's simple_norm?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data=image_data, stretch='power', power=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display an image with a logarithmic stretch function using Astropy's simple_norm?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data=image_data, stretch='log', log_a=500.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I display an image with an arcsinh stretch function using Astropy's simple_norm?"
      },
      {
        "from": "assistant",
        "value": "simple_norm(data=image_data, stretch='asinh', asinh_a=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the sigma_clip function to remove outliers from a dataset?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=3, maxiters=5, masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the sigma_clip function to remove outliers from a dataset with a specified center value?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=3, cenfunc='mean', maxiters=5, masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the sigma_clip function to remove outliers from a dataset with a specified standard deviation function?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=3, stdfunc='mad_std', maxiters=5, masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe the usage of the Logarithmic1D model in Astropy for 1D data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.modeling.core import Fittable1DModel from astropy.modeling.parameters import Parameter import matplotlib.pyplot as plt r = np.linspace(0, 10, 200) log_model = models.Logarithmic1D(amplitude=1, tau=0.5) y = log_model(r) plt.plot(r, y) plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Logarithmic1D model to fit a dataset?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.modeling.core import Fittable1DModel from astropy.modeling.parameters import Parameter import matplotlib.pyplot as plt x_data = np.linspace(0, 10, 100) y_data = 1 / (1 + np.exp(1/0.5 * (x_data - 5))) + np.random.normal(0, 0.1, 100) log_model = models.Logarithmic1D(amplitude=1, tau=0.5) fitter = fitting.LevMarLSQFitter() log_model_fitted = fitter(log_model, x_data, y_data) x_fit = np.linspace(0, 10, 100) y_fit = log_model_fitted(x_fit) plt.plot(x_fit, y_fit) plt.plot(x_data, y_data, 'o') plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a model that combines a Logarithmic1D and Exponential1D model to represent a galaxy's light profile?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy.modeling.core import Fittable1DModel from astropy.modeling.parameters import Parameter import matplotlib.pyplot as plt r = np.linspace(0, 10, 200) log_model = models.Logarithmic1D(amplitude=1, tau=0.5) exp_model = models.Exponential1D(amplitude=1, scale=2) galaxy_model = log_model + exp_model galactic_view = galaxy_model(r) plt.plot(r, galactic_view) plt.show()}]}  # extraneous curly bracket removed and proper nesting added for json format. corrected extra words in json Riyadh for function call with proper arguments. for easiest reading experience the nesting is stripped out. Final output should look like this. Use parameters from the function definition to create new instances. \\{"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read this string of spectroscopic data where values are separated by commas, with some missing data marked as 'Undefined': \n1637\n1500.0,2.3e-15,1.2e-16\n1511.0,Undefined,1.1e-16\n1522.0,2.1e-15,1.3e-16"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nfrom io import StringIO\n\ndata = \"\"\"\n# Sample spectroscopic data with missing values\nwavelength, flux, error\n5000.0, 2.3e-15, 1.2e-16\n5001.0, Undefined, 1.1e-16\n5002.0, 2.1e-15, 1.3e-16\"\"\"\n# Read the data using ascii.read\n# Converting the StringIO object to string format first\ndata = ascii.read(StringIO(data), format='basic', \n                 fill_values=[('Undefined', '-999')], delimiter=',', guess=False)  # Turn off format guessing\n# Print the resulting table\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Construct a table containing the positions of objects in a field of view, with the first column being the ID, the second column being the x-coordinate, and the third column being the y-coordinate."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\\nfrom astropy.coordinates import SkyCoord\\nimport astropy.units as u\\nimport numpy as np\\n\\n# Sample data for demonstration (replace with your actual data)\\nobjects = ['Object1', 'Object2', 'Object3']\\nxs = [1.2, 3.4, 5.6]  \\nys = [7.8, 9.0, 2.1]\\n# Create SkyCoord object for positions\\npositions = SkyCoord(x=xs*u.m, y=ys*u.m)\\n# Construct the table\\nobject_table = Table([objects, positions.x, positions.y], names=('ID', 'x', 'y'))\\n# Add metadata\\nobject_table.meta['DESCRIPTION'] = 'Object Positions'\\n# Write to FITS file\\nobject_table.write('object_positions.fits', format='fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to calculate the Julian Date from a Modified Julian Date using astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(54234.0, format='mjd').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a Modified Julian Date to a UTC time using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(54234.0, format='mjd').utc"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference in days between two Modified Julian Dates using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime(54234.0, format='mjd') - Time(54321.0, format='mjd')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you apply an asinh stretch to a galaxy image with a very large dynamic range of stellar brightnesses?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch\nfrom astropy.visualization import ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Assuming your data is stored in a 2D array called 'image_data'\n# Create example data if needed\nimage_data = np.random.normal(1000, 500, (100, 100))  # Example data\n\n# Create normalization using asinh stretch\n# a=0.1 controls how linear the stretch is near zero\nnorm = ImageNormalize(\n    image_data,\n    stretch=AsinhStretch(a=0.1),\n    vmin=np.percentile(image_data, 1),  # Clip bottom 1% to remove noise\n    vmax=np.percentile(image_data, 99)   # Clip top 1% to handle bright stars\n)\n\n# Create the plot\nplt.figure(figsize=(8, 8))\nplt.imshow(image_data, norm=norm, cmap='viridis')\nplt.colorbar(label='Intensity (asinh stretch)')\nplt.title('Galaxy - Asinh Stretch')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform spectral line fitting with astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as c\n\n# Define a spectral line\nf0 = 1 * u.Hz\n\n# Define a velocity\nv = 10 * u.km / u.s\n\n# Calculate the Doppler shift\nf_shift = f0 * (1 + v / c.cgs)\n\nprint(f_shift)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I work with catalogs and tables in astropy?"
      },
      {
        "from": "assistant",
        "value": "import astropy.table as table\n\n# Create a table\nq = table.Table({'Name': ['obj1', 'obj2'], 'RA': [1, 2], 'Dec': [3, 4]})\n\nprint(q)\n\nq['ra'] = table.cos latitude(q['RA'])\n\nprint(q)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add custom units to astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Define a new unit\nu = u.Unit('my_unit')\n\n# Register the unit\nu.register(u.MyUnit)\n\nprint(u.my_unit)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box2D model with dimensions 30\u00d720 pixels, centered at pixel coordinates (400, 500), with an amplitude of 0.5 for the mask region, and create a coordinate grid for evaluation around the box center with steps of 5 pixels"
      },
      {
        "from": "assistant",
        "value": "box_model = Box2D(amplitude=0.5, x_0=400., y_0=500., x_width=30., y_width=20.); y, x = np.mgrid[450:550:5, 400:500:5]; mask = box_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a new column to a table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\ntable = Table([(1, 2), (3, 4)], names=('a', 'b'), dtype=('int32', 'int32'))\ntable.add_column(np.array([5, 6]), name='c')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to sort a table by a specific column in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\ntable = Table([(1, 2), (3, 4)], names=('a', 'b'), dtype=('int32', 'int32'))\ntable.sort('a')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove a row from a table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\ntable = Table([(1, 2), (3, 4)], names=('a', 'b'), dtype=('int32', 'int32'))\ntable.remove_row(0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have positions for 200 quasars from the 2MASS survey (RA range 12h to 13h, Dec range +30\u00b0 to +35\u00b0) and 300 nearby galaxies from the SDSS survey. Help me write code to find quasar-galaxy pairs within 30 arcsecond separation to study potential gravitational lensing effects."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Create mock data for demonstration\n# In reality, you would load your actual catalogs\nnp.random.seed(42)\n\n# Generate random QSO positions in given ranges\nn_qso = 200\nra_qso = np.random.uniform(12*15, 13*15, n_qso)  # Convert hours to degrees\ndec_qso = np.random.uniform(30, 35, n_qso)\nqso_coords = SkyCoord(ra=ra_qso*u.degree, dec=dec_qso*u.degree)\n\n# Generate random galaxy positions\nn_gal = 300\nra_gal = np.random.uniform(12*15, 13*15, n_gal)\ndec_gal = np.random.uniform(30, 35, n_gal)\ngal_coords = SkyCoord(ra=ra_gal*u.degree, dec=dec_gal*u.degree)\n\n# Find all pairs within 30 arcsec\nmax_sep = 30 * u.arcsec\nidx_qso, idx_gal, sep2d, _ = qso_coords.search_around_sky(gal_coords, max_sep)\n\n# Print results\nprint(f\"Found {len(idx_qso)} QSO-galaxy pairs within {max_sep}:\")\nfor q, g, s in zip(idx_qso, idx_gal, sep2d):\n    print(f\"QSO ({ra_qso[q]:.3f}\u00b0, {dec_qso[q]:.3f}\u00b0) - \n          Galaxy ({ra_gal[g]:.3f}\u00b0, {dec_gal[g]:.3f}\u00b0) \n          - Separation: {s.to(u.arcsec):.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have positions for 100 quasars from the Sloan Digital Sky Survey (RA range 12h to 13h, Dec range +30\u00b0 to +35\u00b0) and 150 nearby galaxies from the 2MASS survey. Help me write code to find quasar-galaxy pairs within 45 arcsecond separation to study potential gravitational lensing effects."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Create mock data for demonstration\n# In reality, you would load your actual catalogs\nnp.random.seed(42)\n\n# Generate random QSO positions in given ranges\nn_qso = 100\nra_qso = np.random.uniform(12*15, 13*15, n_qso)  # Convert hours to degrees\ndec_qso = np.random.uniform(30, 35, n_qso)\nqso_coords = SkyCoord(ra=ra_qso*u.degree, dec=dec_qso*u.degree)\n\n# Generate random galaxy positions\nn_gal = 150\nra_gal = np.random.uniform(12*15, 13*15, n_gal)\ndec_gal = np.random.uniform(30, 35, n_gal)\ngal_coords = SkyCoord(ra=ra_gal*u.degree, dec=dec_gal*u.degree)\n\n# Find all pairs within 45 arcsec\nmax_sep = 45 * u.arcsec\nidx_qso, idx_gal, sep2d, _ = qso_coords.search_around_sky(gal_coords, max_sep)\n\n# Print results\nprint(f\"Found {len(idx_qso)} QSO-galaxy pairs within {max_sep}:\")\nfor q, g, s in zip(idx_qso, idx_gal, sep2d):\n    print(f\"QSO ({ra_qso[q]:.3f}\u00b0, {dec_qso[q]:.3f}\u00b0) - \n          Galaxy ({ra_gal[g]:.3f}\u00b0, {dec_gal[g]:.3f}\u00b0) \n          - Separation: {s.to(u.arcsec):.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have positions for 50 quasars from the NRAO VLA Sky Survey (RA range 12h to 13h, Dec range +30\u00b0 to +35\u00b0) and 75 nearby galaxies from the SDSS survey. Help me write code to find quasar-galaxy pairs within 60 arcsecond separation to study potential gravitational lensing effects."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nimport numpy as np\n\n# Create mock data for demonstration\n# In reality, you would load your actual catalogs\nnp.random.seed(42)\n\n# Generate random QSO positions in given ranges\nn_qso = 50\nra_qso = np.random.uniform(12*15, 13*15, n_qso)  # Convert hours to degrees\ndec_qso = np.random.uniform(30, 35, n_qso)\nqso_coords = SkyCoord(ra=ra_qso*u.degree, dec=dec_qso*u.degree)\n\n# Generate random galaxy positions\nn_gal = 75\nra_gal = np.random.uniform(12*15, 13*15, n_gal)\ndec_gal = np.random.uniform(30, 35, n_gal)\ngal_coords = SkyCoord(ra=ra_gal*u.degree, dec=dec_gal*u.degree)\n\n# Find all pairs within 60 arcsec\nmax_sep = 60 * u.arcsec\nidx_qso, idx_gal, sep2d, _ = qso_coords.search_around_sky(gal_coords, max_sep)\n\n# Print results\nprint(f\"Found {len(idx_qso)} QSO-galaxy pairs within {max_sep}:\")\nfor q, g, s in zip(idx_qso, idx_gal, sep2d):\n    print(f\"QSO ({ra_qso[q]:.3f}\u00b0, {dec_qso[q]:.3f}\u00b0) - \n          Galaxy ({ra_gal[g]:.3f}\u00b0, {dec_gal[g]:.3f}\u00b0) \n          - Separation: {s.to(u.arcsec):.1f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat2DKernel with radius=4 pixels and apply it to a 2D array with some random values, handling edge effects and errors."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel, convolve\nimport numpy as np\n\nsolar_intensity = np.random.random((100, 100))\nkernel = Tophat2DKernel(radius=4)\ntry:\n    smoothed_data = convolve(solar_intensity, kernel, boundary='extend', preserve_nan=True)\nexcept ValueError as e:\n    print(f\"Error during convolution: {e}\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a synthetic spectrum with a Gaussian-shaped emission line at a specific wavelength?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndelete s1_1\ns1 = models.Gaussian1D(amplitude=2.0, mean=4861, stddev=10)\nplt.plot(s1(r))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a synthetic spectrum with an emission line at a specific wavelength that follows a sinusoidal shape?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ns1_1 = models.Sin1D(amplitude=1.0, period=10)\nplt.plot(s1_1(r))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a synthetic spectrum with a box-shaped emission line at a specific wavelength?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ns1 = models.Box1D(amplitude=1.0, x_0=5007, width=8)\nplt.plot(s1(r))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I adjust the contrast of my image?"
      },
      {
        "from": "assistant",
        "value": "PercentileInterval()}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the brightness of a galaxy with a power-law profile. Fit this profile using the Least-Squares method."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to fit a Gaussian profile to some data. What are the parameters and uncertainties of the fit?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have some data that follows the Cauchy-Lorentz distribution. Can you fit this distribution and report the fitted parameters and their uncertainties?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the jackknife resampling method to estimate the variance of a set of astronomical data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\nestimate, bias, stderr, conf_interval = jackknife_stats(data, func, confidence_level=0.95)\njackknife_samples = jackknife_resampling(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between jackknife and bootstrap resampling?"
      },
      {
        "from": "assistant",
        "value": "The jackknife and the bootstrap are resampling statistics methods.\nThe Jackknife algorithm looks at how will the mean of all n data points change when we take each data point out at a time.\nThe bootstrap samples your data to look at how the mean will change if any of the data points are removed.\njackknife_resampling:\njackknife_stats:"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use jackknife_resampling with a custom function for calculation?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling,jackknife_stats\ndef custom_func(data):\n    return np.mean(data)\njackknife_samples = jackknife_resampling(data)\njackknife_estimates = np.array([custom_func(sample) for sample in jackknife_samples])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a box profile with amplitude 2.0, position 0.5, and width 0.2?"
      },
      {
        "from": "assistant",
        "value": "model = models.Box1D(amplitude=2.0, x_0=0.5, width=0.2)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of Mars on Mars Sol 1, 2022 at 12:00 PM Mars Time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, Mars\ncurrent_time = Time('2022-02-18 12:00:00', scale='tdb')\nmars = Mars(target_time=current_time)\nmars_position = mars.gcrs Cavets)\nprint(mars_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new coordinate frame with a specific representation type?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, HeliocentricTrueEcliptic, EarthLocation, Time\nearth_location = EarthLocation(lat='43.6532 \u00b0 N', lon='-79.3832 \u00b0 W', height=100.0)\nt = Time('2022-01-01 12:00:00', format='iso', scale='utc')\nframe = HeliocentricTrueEcliptic(representation_type='cartesian', obstime=t)\nprint(frame)\nprint(frame_representation_info())\n\ndef frame_representation_info(self):\n    return {'lon': 'ecliptic longitude', 'lat': 'ecliptic latitude', 'distance': 'distance from Sun'}\n\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have brightness measurements of a variable star over 50 nights: [13.5, 13.6, 13.7, ...]. How can I compute the mean magnitude, its uncertainty, and get a 95% confidence interval using the jackknife method? Please provide code using astropy.stats.jackknife_stats."
      },
      {
        "from": "assistant",
        "value": "[14.2, 14.1, 14.3, 14.0, 14.4]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have brightness measurements of a variable star over 50 nights: [14.1, 14.2, 14.3, ...]. How can I compute the median magnitude, its uncertainty, and get a 95% confidence interval using the jackknife method? Please provide code using astropy.stats.jackknife_stats."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\ncimport numpy as np\n\ndata = np.array([13.5, 13.6, 13.7, 13.8, 13.9])\n\n# Compute jackknife statistics\njack_median, jack_bias, jack_stderr, jack_ci = jackknife_stats(data = data, statistic = np.median, confidence_level = 0.95)\n\n# Print results\nprint(f'Median magnitude: {jack_median:.3f}')\nprint(f'Standard error: {jack_stderr:.3f}')\nprint(f'95% Confidence Interval: [{jack_ci[0]:.3f}, {jack_ci[1]:.3f}]')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have brightness measurements of a variable star over 50 nights: [14.3, 14.4, 14.5, ...]. How can I compute the standard deviation of brightness, its uncertainty, and get a 95% confidence interval using the jackknife method? Please provide code using astropy.stats.jackknife_stats."
      },
      {
        "from": "assistant",
        "value": "[14.5, 14.6, 14.7, 14.8, 14.9]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the distance of a star from the Sun"
      },
      {
        "from": "assistant",
        "value": "True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to plot the distribution of exoplanet masses"
      },
      {
        "from": "assistant",
        "value": "from scipy import stats\nimport matplotlib.pyplot as plt\n\n# Define exoplanet masses\nmasses = [1.0, 2.0, 3.0, 4.0, 5.0]\n\n# Calculate histogram\nn, bins, patches = plt.hist(masses, bins=10, normed=True, alpha=0.6, color='green')\n\n# Add title and labels\nplt.title('Exoplanet Mass Distribution', fontsize=12)\nplt.xlabel('Mass', fontsize=10)\nplt.ylabel('Probability', fontsize=10)\n\n# Display plot\nplt.show()}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a hidden subplot"
      },
      {
        "from": "assistant",
        "value": "(True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to"
      },
      {
        "from": "assistant",
        "value": "set_axgrid"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you apply the jackknife statistics to estimate the median of 30 random numbers between 0 and 1, along with its standard error and a 90% confidence interval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import jackknife_stats\nimport numpy as np\n\n# Sample random numbers for 30 measurements\nnp.random.seed(42)  # For reproducibility\nrandom_numbers = np.random.uniform(0, 1, 30)\n\n# Calculate jackknife statistics\njk_median, jk_bias, jk_stderr, jk_ci = jackknife_stats(\n    data=random_numbers,\n    statistic=np.median,  # We want to estimate the median\n    confidence_level=0.90  # 90% confidence interval\n)\n\n# Print results\nprint(f\"Original sample median: {np.median(random_numbers):.6f}\")\nprint(f\"Jackknife median estimate: {np.median(jk_median):.6f}\")\nprint(f\"Standard error: {jk_stderr:.6f}\")\nprint(f\"90% confidence interval: [{jk_ci[0]:.6f}, {jk_ci[1]:.6f}]\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an Lorentzian model with x_0=6562.8, amplitude=0.8, and fwhm=1.0"
      },
      {
        "from": "assistant",
        "value": "models.Lorentz1D(x_0=6562.8, amplitude=0.8, fwhm=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit the Lorentzian model to the data with a Levenberg-Marquardt fitter"
      },
      {
        "from": "assistant",
        "value": "fitter = fitting.LevMarLSQFitter(); fitter(model, wavelength, flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the residuals between the data and the fitted model"
      },
      {
        "from": "assistant",
        "value": "flux - model(wavelength)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.wcs.utils.wcs_to_celestial_frame to get the celestial frame for a given WCS with equatorial coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import wcs_to_celestial_frame\nfrom astropy.coordinates import FK5\n\nwcs = WCS(naxis=2)\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nwcs.wcs.crpix = [1, 1]\nwcs.wcs.crval = [12.5, 34.2]\nwcs.wcs.cdelt = [1, 1]\n\ntry:\n    # Get the corresponding coordinate frame from WCS\n    frame = wcs_to_celestial_frame(wcs)\n    \n    # Verify that we got an FK5 frame\n    if isinstance(frame, FK5):\n        print(\"Successfully obtained FK5 coordinate frame\")\n        print(f\"Frame: {frame}\")\n    else:\n        print(\"Warning: Unexpected coordinate frame returned\")\n\nexcept Exception as e:\n    print(f\"Error converting WCS to coordinate frame: {e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of using astropy.wcs.utils.wcs_to_celestial_frame to get the celestial frame for a given WCS with ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import wcs_to_celestial_frame\nfrom astropy.coordinates import Ecliptic\n\nwcs = WCS(naxis=2)\nwcs.wcs.ctype = ['RA---ECLIPTIC', 'DEC--ECLIPTIC']\nwcs.wcs.crpix = [1, 1]\nwcs.wcs.crval = [100, -20]\nwcs.wcs.cdelt = [1, 1]\n\ntry:\n    # Get the corresponding coordinate frame from WCS\n    frame = wcs_to_celestial_frame(wcs)\n    \n    # Verify that we got an Ecliptic frame\n    if isinstance(frame, Ecliptic):\n        print(\"Successfully obtained Ecliptic coordinate frame\")\n        print(f\"Frame: {frame}\")\n    else:\n        print(\"Warning: Unexpected coordinate frame returned\")\n\nexcept Exception as e:\n    print(f\"Error converting WCS to coordinate frame: {e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.wcs.utils.wcs_to_celestial_frame to get the celestial frame for a given WCS with cartesian coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.wcs.utils import wcs_to_celestial_frame\nfrom astropy.coordinates import Cartesian\n\nwcs = WCS(naxis=2)\nwcs.wcs.ctype = ['X', 'Y']\nwcs.wcs.crpix = [1, 1]\nwcs.wcs.crval = [3.4, 5.6]\nwcs.wcs.cdelt = [1, 1]\n\ntry:\n    # Get the corresponding coordinate frame from WCS\n    frame = wcs_to_celestial_frame(wcs)\n    \n    # Verify that we got a Cartesian frame\n    if isinstance(frame, Cartesian):\n        print(\"Successfully obtained Cartesian coordinate frame\")\n        print(f\"Frame: {frame}\")\n    else:\n        print(\"Warning: Unexpected coordinate frame returned\")\n\nexcept Exception as e:\n    print(f\"Error converting WCS to coordinate frame: {e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Moffat profile with alpha=2.0?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Moffat1D\n\ngamma = 3.0  # Core width parameter\namplitude = 1.0  # Peak intensity\nx_0 = 0  # x position of the maximum\n\nmoffat = Moffat1D(amplitude=amplitude, x_0=x_0, gamma=gamma, alpha=2.0)\n\nx = np.linspace(-5, 5, 100)\nprofile = moffat(x)\n\nprint(profile)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use PercentileInterval to keep the central 90% of pixel values in an image, with a maximum of 4000 sample points, and combine it with astropy.visualization.ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use PercentileInterval with a percentile of 80 and a maximum of 6000 sample points, and apply it to an image data using astropy.visualization.ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use PercentileInterval to keep the central 75% of pixel values in an image, with a maximum of 2000 sample points, and combine it with astropy.visualization.ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have several astropy tables and want to combine them into a single table. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, vstack\n\n# Create two tables\n table1 = Table({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\n table2 = Table({'col1': [7, 8, 9], 'col2': [10, 11, 12]})\n\n# Combine the tables\n combined_table = vstack([table1, table2])\n\nprint(combined_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a bunch of fits files in a directory and I want to read in all of them using astropy. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\n# Read in all fits files in a directory\n files = fits.open('path/to/directory/*.fits')\n\n# Print out the data\n for file in files:\n     print(file.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a large table and I want to slice it based on certain conditions. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\n# Create a table\n table = Table({'col1': [1, 2, 3, 4, 5], 'col2': [6, 7, 8, 9, 10]})\n\n# Slice the table based on certain conditions\n sliced_table = table[(table['col1'] > 2) & (table['col2'] < 8)]\n\nprint(sliced_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal waveform using Sine1D with amplitude=10 milliJanskys, frequency=3 Hz, phase=0.5, and evaluate it at 1000 evenly spaced time points between 0 and 4 seconds."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate a sinusoidal signal using Sine1D with amplitude=20 milliJanskys, frequency=0.5 Hz, phase=0.25, and evaluate it at 1000 evenly spaced time points between 0 and 1 second."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal waveform using Sine1D with amplitude=5 milliJanskys, frequency=2 Hz, phase=0.75, and evaluate it at 1000 evenly spaced time points between 0 and 3 seconds."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy's convolve_fft function to convolve an image with a Gaussian kernel?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import convolve_fft, Gaussian2DKernel\nfrom astropy import units as u\n\n# Create a 2D Gaussian kernel\nkernel = Gaussian2DKernel(x_stddev=1.0, y_stddev=1.0, x_size=11, y_size=11)\n\n# Convolve the image with the kernel\nconvolved_image = convolve_fft(image, kernel)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to enable dimensionless angles in my astropy code."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nequivalencies = [u.dimensionless_angles()]\nu.add_enabled_equivalencies(equivalencies)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add multiple equivalencies?"
      },
      {
        "from": "assistant",
        "value": "[u.dimensionless_angles(), u.spectral()\n+ u.rest_frame('barycentric', vhelio=<float>)]\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the recommended way to enable dimensionless angles?"
      },
      {
        "from": "assistant",
        "value": "u.set_enabled_equivalencies([u.dimensionless_angles()])\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have X-ray data from a black hole observation stored in a 2D numpy array. How can I adapt the exposure to bring out the detailed structure around the black hole?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, SqrtStretch\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D histogram of galaxy distributions that I want to visualize with a meaningful scale. Can you suggest a scale that will highlight the faint galaxy features?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, AsinhStretch\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have cosmic microwave background radiation data that I want to visualize with an appropriate scale to show the subtle temperature fluctuations. How can I do that?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, LinearStretch\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to modify a model to take into account the effects of a non-uniform value across my input data. How do I apply a multiplication factor that varies with position?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Multiply\nmodel = Multiply(factor=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a binary star system with two stars of equal mass. Can you show me how to use Disk2D to create a disk with amplitude 2.0, centered at coordinates (100, 100) pixels, with a radius of 20 pixels?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Disk2D\nimport numpy as np\n\ndisk_model = Disk2D(amplitude=2.0, x_0=100, y_0=100, R_0=20)\ny, x = np.mgrid[0:300, 0:300]\ndisk_image = disk_model(x, y)\n# Optional: If you want to visualize the disk\ntry:\n    import matplotlib.pyplot as plt\n    plt.imshow(disk_image, origin='lower', cmap='viridis')\n    plt.colorbar(label='Intensity')\n    plt.title('2D Disk Model')\n    plt.xlabel('X (pixels)')\n    plt.ylabel('Y (pixels)')\n    plt.show()\nexcept ImportError:\npass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the V band magnitudes of the first 10 stars from this sample?\n Sample table: sample_table = Table([['Vmag1', 'Vmag2'], ['1', '2'], [2.45, 1.75]], names=('col1', 'col2'), meta={'name': 'sample_table'}); sample_table"
      },
      {
        "from": "assistant",
        "value": "sample_table[\"col1\"][:10]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the names of the tables that are being hstacked in this code snippet?\n code snippet: t1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b')); t2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))"
      },
      {
        "from": "assistant",
        "value": "[Table(name='t1'), Table(name='t2')]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have three tables with data on planetary orbits: protostar, planet, and disk. How can I horizontally stack these tables with join_type = 'exact', using custom table names?"
      },
      {
        "from": "assistant",
        "value": "Table.hstack([protostar, planet, disk], join_type='exact', uniq_col_name='unique_column', table_names=['Protostar', 'Planet', 'Disk'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between 'date_hms' and 'date_hm' subformats in ISO 8601?"
      },
      {
        "from": "assistant",
        "value": "The 'date_hms' subformat includes seconds, while the 'date_hm' subformat does not include seconds."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light curve of a cataclysmic variable and need to convert my observation timestamps to Julian Date format for period analysis. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\ncritical = Time(['2024-01-01 00:00:00', '2024-01-01 01:00:00', '2024-01-01 02:00:00', '2024-01-01 03:00:00'], format='iso', scale='utc')\njd = critical.jd\nprint(jd)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light curve of a pulsar and need to calculate the barycentric correction for my observation timestamps. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nt = Time(['2024-01-01 12:00:00', '2024-01-01 13:00:00'], format='iso', scale='utc')\nbarycentric_correction = t.barycentric_true_center\ngc = t.gcrs\ngp =  t.geocentric\nprint(barycentric_correction)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the light curve of a white dwarf and need to convert my observation timestamps to Barycentric Coordinate Time (TCB) format for period analysis. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\nimport numpy as np\nt = Time(['2024-01-01 00:00:00'], format='iso', scale='utc')\nte = t + TimeDelta('1d', format='iso', scale='utc')\nte = te.geocentric\nprint(te)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the correct way to use the astropy.visualization module for data normalization?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as vis"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a power law stretch to my image data using astropy?"
      },
      {
        "from": "assistant",
        "value": "vis.PowerStretch(power=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the astropy visualization module to display a solar image with a high dynamic range?"
      },
      {
        "from": "assistant",
        "value": "vis.ImageNormalize(data, stretch=vis.AsinhStretch(), vmin=0, vmax=1, clip=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to find the nearest neighbor for each primary star in 3D space"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ndata = SkyCoord(ra=265*u.degree, dec=40*u.degree, distance=20*u.pc)\nmatches = data.match_to_catalog_3d(SkyCoord(ra=265*u.degree, dec=40*u.degree, distance=20*u.pc), nthneighbor=1)\nprint(matches)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Provide code to find the third-nearest neighbor for each primary star in 3D space"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ndata = SkyCoord(ra=265*u.degree, dec=40*u.degree, distance=20*u.pc)\nmatches = data.match_to_catalog_3d(SkyCoord(ra=265*u.degree, dec=40*u.degree, distance=20*u.pc), nthneighbor=3)\nprint(matches)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a code snippet to show how to use the match_to_catalog_3d function with a custom coordinate system"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GalacticCoordinate\nimport astropy.units as u\ndata = SkyCoord(glon=265*u.degree, glat=40*u.degree, distance=20*u.pc)\nmatches = data.match_to_catalog_3d(SkyCoord(ra=265*u.degree, dec=40*u.degree, distance=20*u.pc), frame='galactic', nthneighbor=1)\nprint(matches)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Estimate the 90% confidence interval for the proportion of stars with planets in the Kepler mission using the weakly informative prior."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(4390, 209290, confidence_level=0.9, interval='jeffreys')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the 80% confidence interval for the true proportion of earth-like planets in the habitable zone using the Wilson interval."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(15, 100, confidence_level=0.8, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the 95% confidence interval for the number of planets in the observable universe using the flat prior."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(1000, 1000000, confidence_level=0.95, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of stellar coordinates in radians and need to apply a systematic correction of 0.05 radians due to telescope misalignment. Write code to create and apply a Shift model transformation."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.modeling import models, fitting\nimport astropy.units as u\n\n# Create example coordinates (RA, Dec in radians)\ncoords = SkyCoord(ra=[0.0873, 1.743, 2.616], dec=[-0.5236, 0.7854, 0.183], unit='rad')\n\n# Create a Shift model for systematic correction of 0.05 radians\nshift_model = models.Shift(0.05)\n\n# Apply correction to both RA and Dec\ncorrected_ra = shift_model(coords.ra.rad) * u.rad  # Apply the shift to the RA\ncorrected_dec = shift_model(coords.dec.rad) * u.rad  # Apply the shift to the Dec\n\n# Create new SkyCoord object with corrected coordinates\ncorrected_coords = SkyCoord(ra=corrected_ra, dec=corrected_dec)\n\n# Print original and corrected coordinates\nprint(\"Original coordinates:\\n\", coords)\nprint(\"\\nCorrected coordinates:\\n\", corrected_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.modeling.functional_models.Gaussian2D to fit a 2D Gaussian to an image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import functional_models, fit}\nimport numpy as np\n\n# Create a 2D Gaussian image\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nx, y = np.meshgrid(x, y)\nz = functional_models.Gaussian2D(10, 10, 2, 2)(x, y) + np.random.normal(0, 10, size=z.shape)\n\ndef fit_gaussian(image):\n    # Define the model\n    model = functional_models.Gaussian2D(10, 10, 2, 2)\n\n    # Fit the model to the image\n    fit = fit.LevMarLSQFitter()\n    result = fit(model, x, y, z)\n\n    return result\n\nresult = fit_gaussian(z)\nprint(result.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What constellation does the Sun appear in on January 1, 2024?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nc = SkyCoord(ra=280.23*u.degree, dec=48.00*u.degree)\nget_constellation(c, short_name=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new row in my table with specific values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\ntable = Table()\n\ncolumns = [('column1', float), ('column2', int)]\n\ntable.add_rows([Row({'column1': 1.0, 'column2': 2})])\n\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to keep only the last occurrence of each star in a table with columns ['star_id', 'magnitude', 'temperature']"
      },
      {
        "from": "assistant",
        "value": "table = Table\nfrom astropy.table import unique\nunique_table = unique(table, keys='star_id', keep='last')\nunique_table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given exoplanet transit depths [0.0123, 0.0125, 0.0120, 0.0124, 0.0122] in relative flux, how can I use bootstrap with 1500 resamples to calculate both the mean and the 68% confidence interval of these measurements?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nfrom astropy.utils import NumpyRNGContext\n\n# Transit depth measurements\ntransit_depths = np.array([0.0123, 0.0125, 0.0120, 0.0124, 0.0122])\n\n# Perform bootstrap with 1500 resamples\n# Using a fixed seed for reproducibility\nwith NumpyRNGContext(123):\n    boot_data = bootstrap(transit_depths, bootnum=1500)\n\n# Calculate mean of bootstrap samples\nboot_means = np.mean(boot_data, axis=1)\n\n# Calculate confidence interval (68% corresponds to 1-sigma)\nconfidence_interval = np.percentile(boot_means, [16, 84])\n\n# Calculate overall mean\nmean_depth = np.mean(boot_means)\n\nprint(f\"Mean transit depth: {mean_depth:.6f}\")\nprint(f\"68% confidence interval: [{confidence_interval[0]:.6f}, {confidence_interval[1]:.6f}]\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use bootstrap to calculate the mode of the following exoplanet mass measurements [1.0, 1.5, 2.0, 2.5, 3.0]?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\nfrom astropy.utils import NumpyRNGContext\n\ndef mode(x):\n    return np.bincount(x).argmax()\n\n# Exoplanet mass measurements\nmasses = np.array([1.0, 1.5, 2.0, 2.5, 3.0])\n\n# Perform bootstrap with 1500 resamples\n# Using a fixed seed for reproducibility\nwith NumpyRNGContext(123):\n    boot_data = bootstrap(masses, bootnum=1500)\n\n# Calculate mode of bootstrap samples\nboot_modes = mode(boot_data)\n\nprint(f\"Mode of exoplanet mass: {boot_modes}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a FITS file from a 2D array of floats."
      },
      {
        "from": "assistant",
        "value": "fits.writeto('float_fits.fits', data=[[1.0, 2.0], [3.0, 4.0]], overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a model of a Gaussian profile with amplitude=2.0, mu=0.0, sigma=1.0, and x_0=-5.0. How can I use the Gaussian1D model"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a Gaussian1D model\nmodel = models.Gaussian1D(amplitude=2.0, mu=0.0, sigma=1.0, x_0=-5.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you set up a Gaussian1D model to fit an emission line where the standard deviation is between 1.0 and 3.0 \u00c5, the line center is between 5000 and 6000 \u00c5, and the amplitude is between 1 and 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you set up a Gaussian1D model to fit an absorption line where the standard deviation is fixed at 1.0 \u00c5, the line center is between 5500 and 6500 \u00c5, and the amplitude is between -5 and 0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you set up a Gaussian1D model to fit an emission line where the standard deviation is tied to the mean, the line center is between 4500 and 5500 \u00c5, and the amplitude is between 5 and 15?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the maximum size of an astropy table?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I sort an astropy table by multiple columns?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use the row-oriented data for an astropy table?"
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I synchronize time across multiple telescope arrays with varying clock drift?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, Times; from astropy.coordinates import EarthLocation; import astropy.units as u; import astropy.time.timezones as timezones\n\n# Define telescope arrays\narray_1 = EarthLocation.of_site('array_1'); array_2 = EarthLocation.of_site('array_2'); array_3 = EarthLocation(lat=45.0*u.deg, lon=-122.0*u.deg, height=0*u.m)\n\n# Create a list of UTC times\nutc_times = ['2023-12-01 10:00:00', '2023-12-01 12:30:00', '2023-12-01 14:00:00']\n\ntimes = Time(utc_times, format='iso', scale='utc')\n\n# Create a timezone info object\n tz_info = timezones \u062f\u0631\u0633\u062a defining_timezone('US/Pacific')\n\n# Convert to the specified timezone\nlocal_times = times.to_tz(tz_info)\n\n# Print local times\nfor i, time in enumerate(local_times):\n    print(f'Local time at Array {i+1}: {time}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a CCDData object for my spectroscopic data with values [2000, 2200, 2400, 2600] in units of electron/second. The data has bad pixels at indices 1 and 3. Show me how to create this with an appropriate mask."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nimport numpy as np\nfrom astropy import units as u\n\n# Create data array\ndata = np.array([2000, 2200, 2400, 2600])\n\n# Create mask array (True indicates bad pixels)\nmask = np.zeros_like(data, dtype=bool)\nmask[[1, 3]] = True  # Set bad pixels at indices 1 and 3\n\n# Create CCDData object with data, unit and mask\nccd = CCDData(data=data,\n              unit='electron/s',  # Set units\n              mask=mask)          # Apply mask\n\n# Print the CCDData object to verify\nprint(\"Data:\", ccd.data)\nprint(\"Mask:\", ccd.mask)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.visualization.PercentileInterval to normalize my deep galaxy image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.visualization import simple_norm, PercentileInterval\nimport numpy as np\n\nhdul = fits.open('galaxy_image.fits')\nimage_data = hdul[0].data\n\npercentile = 95\nn_samples = None\ninterval = PercentileInterval(percentile, n_samples)\nnormalized_image = interval(image_data)\n\n# Optionally save the normalized image\nfits.writeto('normalized_galaxy.fits', normalized_image, overwrite=True)\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.visualization.PercentileInterval to histogram my galaxy image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.visualization import PercentileInterval\nimport numpy as np\n\nhdul = fits.open('galaxy_image.fits')\nimage_data = hdul[0].data\n\npercentile = 95\nn_samples = None\ninterval = PercentileInterval(percentile, n_samples)\nhist = interval.histogram(image_data)\n\nprint(hist) # Print the histogram\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the astropy.visualization.PercentileInterval to keep 90% of the pixels and sample 1000 random values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.visualization import simple_norm, PercentileInterval\nimport numpy as np\n\nhdul = fits.open('galaxy_image.fits')\nimage_data = hdul[0].data\n\npercentile = 0.9\nn_samples = 1000\ninterval = PercentileInterval(percentile, n_samples)\nnormalized_image = interval(image_data)\n\n# Optionally save the normalized image\nfits.writeto('normalized_galaxy.fits', normalized_image, overwrite=True)\nhdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Box2D model to represent a circular aperture in my telescope's optical path?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Box2D\nfrom astropy.visualization import simple_norm\nimport matplotlib.pyplot as plt\n\n# Create coordinate grid (100x100 pixels)\ny, x = np.mgrid[-50:50, -50:50]\n\n# Create 2D box model to simulate circular aperture\n# Parameters: amplitude=1, x_width=100, y_width=100, x_center=0, y_center=0\naperture = Box2D(amplitude=1, x_width=100, y_width=100)\n\n# Generate the 2D box function\naperture_mask = aperture(x, y)\n\n# Visualize the aperture mask\nfig, ax = plt.subplots()\nax.imshow(aperture_mask, origin='lower')\nax.set_title('Circular Aperture Mask')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the trajectory of a spacecraft in a heliocentric orbit. How can I set up their positions in spherical coordinates and include their velocity components as differentials?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import (SphericalRepresentation, SphericalDifferential, CartesianRepresentation) \nimport astropy.units as u\nimport numpy as np\nc = SphericalRepresentation(radius=1.5 * u.au, inclination=23.5 * u.deg, azimuth=12.5 * u.deg)\nc_diff = SphericalDifferential(d_radius=0.01 * u.au/u.d, d_inclination=0.001 * u.deg/u.d, d_azimuth=0.01 * u.deg/u.d) "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a faint object detection mask from a CCDData object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import CCDData\nfrom astropy.io import fits\nimport numpy as np\n\ncd = CCDData.random(\n    npix=1024,\n    nan_percent=0.2,\n    unit='adu',\n    wcs='spherical'\n)\n\nmask = np.ma.getmaskarray(np.ma.masked_equal(cd.data, 0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS file with a primary header and a table header?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.PrimaryHDU(), astropy.io.fits.BinTableHDU()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add keywords to the header of a FITS file?"
      },
      {
        "from": "assistant",
        "value": "header.card = 'keyword value'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write data to a FITS file"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.writeto(filename, data, header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a masked column for a table with irregularly spaced data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn\nimport numpy as np\ntimes = np.arange(0, 10, 0.1)  # Irregularly spaced data\ndata = np.sin(2 * np.pi * times)\nmask = np.zeros_like(times, dtype=bool)\nmask[times > 5] = True  # Mark data points after time 5 as invalid\ncol1 = MaskedColumn(times, name='time', mask=mask, unit='day', description='Observation time')\ncol2 = MaskedColumn(data, name='flux', mask=mask, description='Normalized flux')\ntable = Table([col1, col2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the syntax for creating masked columns for a table with categorical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn\ncategory = ['A', 'B', 'C', 'D', 'A']\nmask = np.array([False, False, True, False, True])  # Mark categories C and A as invalid\ncol = MaskedColumn(category, name='category', mask=mask)\ntable = Table([col])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a masked column for a table with missing values represented by numpy.nan?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, MaskedColumn\nimport numpy as np\ndata = np.array([1, 2, np.nan, 4, 5])\nmask = np.isnan(data)  # Mark NaN values as invalid\ncol = MaskedColumn(data, name='data', mask=mask)\ntable = Table([col])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have some data points in an array and I want to calculate the optimal bin width using Knuth's rule. How can I do it?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats\n\ndx = astropy.stats.knuth_bin_width(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a model of a spiral galaxy with a ring-like structure?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, Fittable2DModel\nfrom astropy.modeling.models import Sersic2D\n\ncenter = np.array([0, 0])\nradius = 50\nheight = 100\nangle = 45\n\ndef ring_model(r, theta):\n    x = r * np.cos(theta)\ny = r * np.sin(theta)\n\tdistance_to_center = np.sqrt((x - center[0])**2 + (y - center[1])**2)\n\tradius_to_center = np.fabs(distance_to_center - radius)\n\tradial_component = np.exp(-2 * np.pi**2 * np.fabs(radius_to_center)**2 / height**2)\n\tangetial_component = np.exp(-2 * np.pi**2 * r**2 / height**2)\n\tmodel = radial_component * tangetial_component\n\treturn model\ngalaxy_model = ring_model(r, theta)\ngine when the input parameters are defined"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an angle object from 45 degrees using Astropy's Angle class?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle('45d')\nprint(angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an angle object from 1 hour 30 minutes using Astropy's Angle class?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle('1h30m')\nprint(angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create an angle object from 2.5 radians using Astropy's Angle class?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Angle\nimport astropy.units as u\n\nangle = Angle(2.5 * u.rad)\nprint(angle)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to create a 1024x1024 image HDU with a pixel scale of 1 arcsec/pixel. How do I set this up with the correct CDELT1 and CDELT2 header values?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\n\n# Create sample 1024x1024 data (replace with your actual data)\nimage_data = np.zeros((1024, 1024)\n\n# Create primary HDU with the data\nhdulist = fits.PrimaryHDU(image_data)\n\n# Set WCS keywords in header\n# CDELT1/2 are in degrees, so convert from arcsec\npixel_scale = 1  # arcsec/pixel\n# Update header with WCS information\nhdulist[0].header['CDELT1'] = -pixel_scale  # Negative for RA axis (standard convention)\nhdulist[0].header['CDELT2'] = pixel_scale\nhdulist[0].header['CTYPE1'] = 'RA---TAN'  # Assume tangent projection\nhdulist[0].header['CTYPE2'] = 'DEC--TAN'\nhdulist[0].header['CRPIX1'] = 512.0  # Reference pixel at center of image\nhdulist[0].header['CRPIX2'] = 512.0\n\n# Create HDUList and write to file\nhdulist.writeto('image.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring kernel with radius 10 and width 2"
      },
      {
        "from": "assistant",
        "value": "Ring2DKernel(radius=10, width=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring kernel with radius 5 and width 3"
      },
      {
        "from": "assistant",
        "value": "Ring2DKernel(radius=5, width=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring kernel with radius 15 and width 1"
      },
      {
        "from": "assistant",
        "value": "Ring2DKernel(radius=15, width=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Get the header from an HDU of a FITS file named "
      },
      {
        "from": "assistant",
        "value": "hdu, keyword"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use the astropy.io.fits.open function to read the FITS file called "
      },
      {
        "from": "assistant",
        "value": "hdu"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Extract the value of the keyword OBJECT from the FITS header of the first extension of the fits file named "
      },
      {
        "from": "assistant",
        "value": "value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I've conducted X-ray observations of a galaxy and detected 25 photon counts in my source region. How can I calculate the 95% confidence interval for the true source intensity using the Kraft-Burrows-Nousek method, given that I measured 3.5 counts from the background region?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\n\tpass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I've conducted X-ray observations of a galaxy and detected 30 photon counts in my source region. How can I calculate the 90% confidence interval for the true source intensity using the Kraft-Burrows-Nousek method, given that I measured 2.2 counts from the background region?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\n\tpass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I've conducted X-ray observations of a galaxy and detected 20 photon counts in my source region. How can I calculate the 99% confidence interval for the true source intensity using the Kraft-Burrows-Nousek method, given that I measured 1.8 counts from the background region?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import poisson_conf_interval\n\tpass"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to convert angular velocities from radians/s to revolutions/minute."
      },
      {
        "from": "assistant",
        "value": "angular_velocity_rad_per_s = 100.0  # in radians/s\nangular_velocity_rev_per_min = angular_velocity_rad_per_s * (60.0 / (2 * np.pi))  # convert to revolutions/minute\nprint(f\"Angular velocity: {angular_velocity_rev_per_min:.2f} rev/min\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the luminosity distance for a source with redshift z = 1.0 using the Planck18 cosmology."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nluminosity_distance = Planck18.luminosity_distance(1.0)\nprint(f\"Luminosity distance at z = 1.0: {luminosity_distance:.2f} Mpc\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a temperature from Kelvin to Celsius?"
      },
      {
        "from": "assistant",
        "value": "temperature_K = 300.0  # in Kelvin\ntemperature_C = temperature_K - 273.15  # convert to Celsius\nprint(f\"Temperature in Celsius: {temperature_C:.2f} C\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a list of dates from JD to MJD"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n JD_dates = [2451545.0, 2451717.5, 2451545.0]\nj dates = Time(JD_dates, format='jd').mjd\nprint(j_dates)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to create a SkyOffsetFrame aligned with the ecliptic coordinate system, centered on the Sun, to measure relative positions of objects within 1 degree."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyOffsetFrame, CartesianRepresentation, SolarSystemEquatorial\n\nimport astropy.units as u\n\n# Define the Sun position\nsun = SolarSystemEquatorial.Drawing\n\n# Create a SkyOffsetFrame centered on the Sun\n\noffset_frame = SkyOffsetFrame(origin=sun)\n\n# Example: Define some nearby objects (within 1 degree)\n\nnearby_obj1 = SkyCoord(ln=x*u.deg, lat=y*u.deg, frame=offset_frame)\n\nnearby_obj2 = SkyCoord(lon=x*u.deg, lat=y*u.deg, frame=offset_frame)\n\n# Convert offsets back to Ecliptic coordinates\n\necliptic_coords1 = nearby_obj1.transform_to('ecliptic')\n\necliptic_coords2 = nearby_obj2.transform_to('ecliptic')\n\n# Print results\n\nprint(\"Object 1 Ecliptic coordinates:\", ecliptic_coords1)\n\nprint(\"Object 2 Ecliptic coordinates:\", ecliptic_coords2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing gravitational wave data and need to create a TimeDelta object representing 0.01 days with TDB scale, then convert it to seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\nimport astropy.units as u\n\n# Create TimeDelta object representing 0.01 days in TDB scale\ndelta = TimeDelta(0.01, format='jd', scale='tdb')\n\n# Convert to seconds\nseconds = delta.to_value(u.second)\n\n# Display result\nprint(f\"0.01 days = {seconds} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing gravitational wave data and need to create a TimeDelta object representing 1 day with TCB scale, then convert it to seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\nimport astropy.units as u\n\n# Create TimeDelta object representing 1 day in TCB scale\ndelta = TimeDelta(1, format='jd', scale='tcb')\n\n# Convert to seconds\nseconds = delta.to_value(u.second)\n\n# Display result\nprint(f\"1 day = {seconds} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing gravitational wave data and need to create a TimeDelta object representing 0.5 days with TAI scale, then convert it to seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\nimport astropy.units as u\n\n# Create TimeDelta object representing 0.5 days in TAI scale\ndelta = TimeDelta(0.5, format='jd', scale='tai')\n\n# Convert to seconds\nseconds = delta.to_value(u.second)\n\n# Display result\nprint(f\"0.5 days = {seconds} seconds\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS file with a table HDU and an image HDU?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ntable_data = np.array([...])\nimage_data = np.array([...])\nhdul = fits.HDUList([\n    fits.TableHDU(table_data),\n    fits.ImageHDU(image_data)\n])\nhdul.writeto('file.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of star brightness measurements with values between 0.01 and 100 solar luminosities. How do I implement LogStretch with a=10 to better display the full dynamic range in my plot?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import LogStretch\nfrom astropy.visualization import ImageNormalize\nimport matplotlib.pyplot as plt\n\ntest_arr = np.linspace(0.01, 100, 1000)*np.ones((100,100))\n# Create LogStretch instance with a=10\ncat = LogStretch(a=10)\n# Create normalization object using the LogStretch\ncat_norm = ImageNormalize(test_arr, stretch=cat)\n# Create the plot with stretched data\ndef plot_data():\n    plt.figure(figsize=(8, 8))\n    plt.imshow(test_arr, norm=cat_norm, cmap='viridis')\n    plt.colorbar(label='Luminosity (Solar Luminosities)')\n    plt.title('Star Brightness (Log Stretched)')\n    plt.show()\nplot_data()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 1D array of galaxy brightness measurements with values between 0.1 and 10000 solar luminosities. How do I implement LogStretch with a=1000 to better display the full dynamic range in my histogram?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import LogStretch\nfrom astropy.visualization import ImageNormalize\nimport matplotlib.pyplot as plt\ngalaxy_data = np.random.uniform(0.1, 10000, size=(10000))\n# Create LogStretch instance with a=1000\nlog_stretch = LogStretch(a=1000)\n# Create normalization object using the LogStretch\nnorm = ImageNormalize(galaxy_data, stretch=log_stretch)\n# Create the histogram with stretched data\nplt.figure(figsize=(8, 8))\nplt.hist(galaxy_data, bins=30, normed=True, histtype='step', lw=2)\nplt.colorbar(label='Probability Density')\nplt.title('Galaxy Brightness (Log Stretched)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 2D array of planetary brightness measurements with values between 0.001 and 100 solar luminosities. How do I implement LogStretch with a=10000 to better display the full dynamic range in my image?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import LogStretch\nfrom astropy.visualization import ImageNormalize\nimport matplotlib.pyplot as plt\nplanetary_data = np.random.uniform(0.001, 100, size=(200, 200))\n# Create LogStretch instance with a=10000\nstretch = LogStretch(a=10000)\n# Create normalization object using the LogStretch\nnorm = ImageNormalize(planetary_data, stretch=stretch)\n# Create the plot with stretched data\nplt.figure(figsize=(8, 8))\nplt.imshow(planetary_data, norm=norm, cmap='viridis')\nplt.colorbar(label='Luminosity (Solar Luminosities)')\nplt.title('Planetary Brightness (Log Stretched)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the date and time of the observation from the FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngetval(filename intimate.rois.fits', 'DATE-OBS')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I retrieve the telescope used to observe the data from the FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('uvb225.fts', 'TELESCOP')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the observatory location from the FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfits.getval('uvb225.fts', 'OBSLA-T')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the applications of Bayesian Blocks in astronomy?"
      },
      {
        "from": "assistant",
        "value": "Bayesian Blocks can be applied to a variety of tasks in astronomy, including data segmentation, change point detection, and peak detection in time series data. It can also be used for binning data in histograms, and for calculating signal-to-noise ratios in the context of periodic signals. Furthermore, it can be employed to identify and remove outliers in astronomical datasets."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read identifiers for each extension in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.info('spec_123.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As you read specimen for experiment test 456, can you sum up all the header keywords for all the HDUs in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.info('test_456.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Please display the master header and data of all HDUs in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.info('master_test.fits', full=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK5 coordinate instance for a star with RA=234.5 degrees, Dec=47.2 degrees, and distance=100 parsecs. Show how to define this using astropy.coordinates.FK5"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\n\n# Create FK5 coordinates with position and distance\nstar_coords = FK5(ra=234.5*u.degree, \n                 dec=47.2*u.degree, \n                 distance=100*u.parsec)\n\n# Print the coordinates to verify\nprint(f\"RA: {star_coords.ra}\")\nprint(f\"Dec: {star_coords.dec}\")\nprint(f\"Distance: {star_coords.distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK5 coordinate instance for a star with RA=56.7 degrees, Dec=-21.4 degrees, and distance=500 parsecs. Show how to define this using astropy.coordinates.FK5"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\n\n# Create FK5 coordinates with position and distance\nstar_coords = FK5(ra=56.7*u.degree, \n                 dec=-21.4*u.degree, \n                 distance=500*u.parsec)\n\n# Print the coordinates to verify\nprint(f\"RA: {star_coords.ra}\")\nprint(f\"Dec: {star_coords.dec}\")\nprint(f\"Distance: {star_coords.distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an FK5 coordinate instance for a star with RA=93.1 degrees, Dec=67.8 degrees, and distance=200 parsecs. Show how to define this using astropy.coordinates.FK5"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5\nfrom astropy import units as u\n\n# Create FK5 coordinates with position and distance\nstar_coords = FK5(ra=93.1*u.degree, \n                 dec=67.8*u.degree, \n                 distance=200*u.parsec)\n\n# Print the coordinates to verify\nprint(f\"RA: {star_coords.ra}\")\nprint(f\"Dec: {star_coords.dec}\")\nprint(f\"Distance: {star_coords.distance}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am using the astropy library to get the distance of a star with a parallax of 10 mas."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nimport astropy.units as u\n\n# Convert parallax to distance\nparallax = 10 * u.mas  # Define parallax with milliarcsecond units\ndistance = Distance(parallax=parallax)\n\n# Print result in parsecs\nprint(f\"Distance: {distance.pc:.2f} parsecs\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the distance of a galaxy with a redshift of 0.5 using the WMAP5 cosmology."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import WMAP5\nfrom astropy.coordinates import Distance\n\n# Calculate distance\nz = 0.5\ncosmology = WMAP5\ndistance = Distance(z=z, cosmology=cosmology)\n\n# Print result in parsecs\nprint(f\"Distance: {distance.pc:.2f} parsecs\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the distance of a cluster of stars with a distance modulus of 25.5 mag."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import Distance\nimport astropy.units as u\n\n# Calculate distance\nmodulus = 25.5 * u.mag\ndistance = Distance(distmod=modulus)\n\n# Print result in parsecs\nprint(f\"Distance: {distance.pc:.2f} parsecs\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a CSV file with a custom delimiter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nprint(ascii.read('example.csv', delimiter='\\t'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to parse a string containing scientific notation"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nprint(ascii.read('-1.23e+4'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read a table with a specified format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nprint(ascii.read('example.txt', format='csv'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the location of the moon at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_moon, GCRS\nfrom astropy.time import Time\nimport astropy.units as u\ntimes = Time('2024-03-01 12:00:00')\nget_moon(times).transform_to(GCRS(obstime=times))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the position of Mars at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz\nfrom astropy.time import Time\nimport astropy.units as u\ntimes = Time('2024-04-01 12:00:00')\nMars = SkyCoord.from_name('Mars', obstime=times, frame='heliocentric').transform_to('gcrs')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the distance between the Earth and the Sun at a specific time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, GCRS\nfrom astropy.time import Time\nimport astropy.units as u\ntimes = Time('2024-05-01 12:00:00')\nget_sun(times).distance"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a temperature equivalent to the unit registry?"
      },
      {
        "from": "assistant",
        "value": "temperature_to_energy = u.mass * u.speed_of_light**2 / u.temperature"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add an equivalent for time in seconds to the unit registry?"
      },
      {
        "from": "assistant",
        "value": "time_in_seconds = u.seconds"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add an equivalent for speed in km/h to the unit registry?"
      },
      {
        "from": "assistant",
        "value": "speed_in_kmh = (u.kilometer / u.hour)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of coordinates to a list of pixel positions in an image using astropy's WCS tools?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, utils\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Create a SkyCoord object for the coordinates\ncoords = SkyCoord(ra=12.5*u.deg, dec=45.6*u.deg, frame='icrs')\n\n# Create a sample WCS (you should replace these values with your actual image WCS info)\nwcs = WCS(naxis=2)\nwcs.wcs.crpix = [1024, 1024]  # Reference pixel (typically center of image)\nwcs.wcs.cdelt = [-0.001, 0.001]  # Pixel scale in degrees\nwcs.wcs.crval = [56.85, 24.117]  # RA,Dec of reference pixel in degrees\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']  # Projection type\n\n# Convert sky coordinates to pixel coordinates\npixel_coords = utils.skycoord_to_pixel(coords, wcs)\n\n# Print the pixel coordinates\nprint(pixel_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to understand how astropy's Sine1D model works. Can you provide a simple example of how to use it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\ntime = np.linspace(0, 10, 100)\nsine_model = models.Sine1D(amplitude=1.0, frequency=0.1, phase=0.0)\n\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(sine_model, time, np.sin(0.1*time))\n\nprint(fitted_model.amplitude.value)\nprint(fitted_model.phase.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to model a spectral line observed in a young stellar object that shows a flat top and sloping wings. Can you help me create a code snippet using Astro-py's modeling capabilities to fit this profile?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Generate sample data points (in practice, these would be your observed data)\nx = np.linspace(-10, 10, 200)  # Wavelength or velocity axis\ntrue_params = [5.0, 2.0, 1.0]  # Amplitude, width, and slope parameters\nnoise = np.random.normal(0, 0.1, x.shape)\n\n# Create a custom spectral line profile combining a box and gaussian components\ndef flat_top_profile(x, amplitude, width, slope):\n    # Box component for flat top\n    box = models.Box1D(amplitude=amplitude, width=width)\n    # Gaussian wings\n    gauss = models.Gaussian1D(amplitude=amplitude,\n                            mean=0,\n                            stddev=width*1.5)\n    # Combine profiles with slope\n    return box(x) + gauss(x) * np.exp(-slope * np.abs(x))\n\n# Generate synthetic data\ny = flat_top_profile(x, *true_params) + noise\n\n# Set up the fitting model\nbox_model = models.Box1D(amplitude=4.0, width=1.0)\nmodel = box_model\n\n# Perform the fit\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(model, x, y)\n\n# Get fitted parameters\nfitted_params = [\n    fitted_model[0].amplitude.value,\n    fitted_model[0].width.value,\n    0.0  # Fixed slope\n]\n\n# The fitted_model can now be used to evaluate the best-fit profile\ny_fit = fitted_model(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.coordinates.Galactic class to create a galactic coordinate object from a set of coordinates?"
      },
      {
        "from": "assistant",
        "value": "galactic_coord = astropy.coordinates.Galactic(l=20.0, b=30.0, distance=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the best-fit parameters and uncertainties for a decaying exponential model. The model parameters areAmplitude=5,A=0.5,\u03c4=10."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define the decaying exponential model\ndef decaying_exponential(t, amplitude=5, A=0.5, tau=10):\n    return amplitude * (1 - A) ** t + amplitude * (1 - A) / tau * t\ndef get_model(params):\n    return decaying_exponential(t=np.linspace(0, 10, 100),**params)\n\nt = np.linspace(0, 10, 100)\ndata = decaying_exponential(t)\nmodel = get_model({'amplitude': 5, 'A': 0.5, 'tau': 10})\nfit = fitting.LevMarLSQFitter().fit(model, data, t, Weight=1)\n\nprint(f'best-fit amplitude: {fit.params["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit the pulsar timing model with a floating pulsar period. The model parameters are: frequency=100.0,pulsar period=1.0"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define the pulsar timing model\ndef pulsar_timing(x, frequency=100.0, period=1.0):\n    return (x * frequency) % 1.0\n\ndef get_model(params):\n    return pulsar_timing(x=np.linspace(0, 1, 100),**params)\n\nc = pulsar_timing(x=np.linspace(0, 1, 100),frequency=100.0,period=1.0)\nmodel = get_model({'frequency': 100.0, 'period': 1.0})\nfit = fitting.LevMarLSQFitter().fit(model, c, np.linspace(0, 1, 100))\n\nprint(f'best-fit frequency: {fit.params["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a sinusoidal model to the data with frequency as a floating parameter. The data is Synthetic data for a sinusoidal signal with frequency 0.5 Hz and amplitude 1. The sinusoidal signal is sampled at time points 0.1, 0.2, 0.3, 0.4, 0.5 }"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Define the sinusoidal model\ndef sinusoidal(x, frequency=0.5, amplitude=1.0):\n    return amplitude * np.sin(2 * np.pi * frequency * x)\ndef get_model(params):\n    return sinusoidal(x=np.linspace(0, 1, 100),**params)\ndata = sinusoidal(x=np.linspace(0, 1, 100), frequency=0.5, amplitude=1.0)\nmodel = get_model({'amplitude': 1.0, 'frequency': 0.5})\nfit = fitting.LevMarLSQFitter().fit(model, data, np.linspace(0, 1, 100))\n\nprint(f'best-fit frequency: {fit.params["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the Moon's position in the sky at a specific time and location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, GCRS, AltAz\nfrom astropy.time import Time\nfrom astropy import units as u\n\n# Set observer location (example: New York City)\nnyc = EarthLocation(lat=40.7128*u.deg, lon=-74.0060*u.deg)\n\n# Create time\nctime = Time('2024-07-20 12:00:00')\n\n# Calculate Moon position\nmoon_position = SkyCoord(gcrs=True).transform_to(AltAz(obstime=ctime, location=nyc))\n\n# Extract altitude and azimuth\nalt = moon_position.alt.deg\naz = moon_position.az.deg\n\n# Print results\nprint(f'Moon Altitude: {alt}\u00b0\nMoon Azimuth: {az}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the circular mean of an array of phase angles in degrees."
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as apstat\nfrom astropy import units as u\ncircmean([51, 67, 40, 109, 31, 358]*u.deg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to remove outliers from my data by using the astropy.stats.sigma_clip function. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "sigma_clip(data, sigma=3, maxiters=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the Hubble parameter's evolution. Show me how to calculate $H(z) at redshifts z=[1,2,3] using Planck18 cosmology and present the results in km/s/Mpc."
      },
      {
        "from": "assistant",
        "value": " # Import required astropy modules\nfrom astropy.cosmology import Planck18\nimport numpy as np\n\n# Define redshifts for analysis\nredshifts = [1, 2, 3]\n\n# Calculate Hubble parameter H(z) at specified redshifts\n# H(z) will be returned in km/s/Mpc units by default\nHz_values = [Planck18.H(z).value for z in redshifts]\n\n# Print results in a formatted way\nfor z, Hz in zip(redshifts, Hz_values):\n    print(f\"H(z={z:.1f}) = {Hz:.1f} km/s/Mpc\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the position of Mars relative to Earth on 2020-01-01."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time from astropy.coordinates import get_body, solar_system_ephemeris import astropy.units as u # Set the ephemeris to DE430 (more precise lunar/planetary ephemeris) solar_system_ephemeris.set('de430') # Create Time object for the specific date t = Time('2020-01-01 00:00') # Get Mars' position relative to Earth center mars = get_body('mars', t) # Convert to common units for planetary analysis distance = mars.distance.to(u.km) ra = mars.ra.deg * u.deg dec = mars.dec.deg * u.deg print(f'Mars position on {t.iso}:') print(f'Right Ascension: {ra:.4f}') print(f'Declination: {dec:.4f}') print(f'Distance from Earth: {distance:.1f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the position of Jupiter relative to the Sun on 2019-06-21."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time from astropy.coordinates import get_body, solar_system_ephemeris import astropy.units as u # Set the ephemeris to DE430 (more precise lunar/planetary ephemeris) solar_system_ephemeris.set('de430') # Create Time object for the specific date t = Time('2019-06-21 00:00') # Get Jupiter's position relative to the Sun jupiter = get_body('jupiter', t, observer='heliocenter') # Convert to common units for planetary analysis distance = jupiter.distance.to(u.km) ra = jupiter.ra.deg * u.deg dec = jupiter.dec.deg * u.deg print(f'Jupiter position on {t.iso}:') print(f'Right Ascension: {ra:.4f}') print(f'Declination: {dec:.4f}') print(f'Distance from Sun: {distance:.1f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the position of Saturn relative to Earth on 2018-03-15."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time from astropy.coordinates import get_body, solar_system_ephemeris import astropy.units as u # Set the ephemeris to DE430 (more precise lunar/planetary ephemeris) solar_system_ephemeris.set('de430') # Create Time object for the specific date t = Time('2018-03-15 00:00') # Get Saturn's position relative to Earth center saturn = get_body('saturn', t) # Convert to common units for planetary analysis distance = saturn.distance.to(u.km) ra = saturn.ra.deg * u.deg dec = saturn.dec.deg * u.deg print(f'Saturn position on {t.iso}:') print(f'Right Ascension: {ra:.4f}') print(f'Declination: {dec:.4f}') print(f'Distance from Earth: {distance:.1f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to get the barycentric position of Jupiter at a specific time."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\nt = Time('2023-01-01 12:00:00')\nposition = get_body_barycentric('jupiter', t)\nprint(position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the column names of a table in astropy?"
      },
      {
        "from": "assistant",
        "value": "table.colnames"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default join type in astropy's dstack function?"
      },
      {
        "from": "assistant",
        "value": "outer"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack two tables along rows in astropy?"
      },
      {
        "from": "assistant",
        "value": "dstack([table1, table2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the mathematical underlying computation for the histogram function?"
      },
      {
        "from": "assistant",
        "value": "            def histogram(a, bins=None, range=None, normed=False, weights=None, density=None):\n                if bins is not None:\n                    binning = \n                        https://docs.astropy.org/en/stable/stats/histogram.html"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "is it possible to create a histogram with non-uniform bin width, such as log spaced bins?"
      },
      {
        "from": "assistant",
        "value": "            if bins == 'knuth':\n           bins = np.linspace(a.min(), a.max(), len(a) ** 0.5)\n           bin_edges = np.append(bins, a.max())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you generate a custom binning for histogram computation if you want to solve for a particular mathematical equation?"
      },
      {
        "from": "assistant",
        "value": "            if bins == 'freedman':\n            bins = freelmanDiacunis(a, weights)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a datetime object to a Time object with a specific time scale?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\n\ndt = datetime(2022, 1, 1, 12, 0, 0)\n\n# Create Time object with UTC time scale\nutc_time = Time(dt, scale='utc')\n\n# Print the time in UTC\nprint(f'UTC: {utc_time.iso}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the time difference between two Time objects in seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntime1 = Time('2022-01-01 12:00:00', format='isot', scale='utc')\ntime2 = Time('2022-01-01 13:00:00', format='isot', scale='utc')\n\ntime_diff = time2 - time1\nprint(f'Time difference: {time_diff.sec:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to represent a Time object as a Unix timestamp?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntime = Time('2022-01-01 12:00:00', format='isot', scale='utc')\n\n# Print the time as a Unix timestamp\nprint(f'Unix timestamp: {time.unix}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I format the date in the Modified Julian Date (MJD) format? "
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-01-01', format='iso').mjm"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the MJD equivalent of January 1, 2024?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2024-01-01', format='iso').mjd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the steps to convert a datetime object to MJD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\ntimes = Time('2022-01-01 12:00:00', format='isot')\ntimes.mjd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a 200x200 CCD image of a galaxy with pixel values between 0 and 10000. Can you show me how to visualize it using imshow_norm with a linear stretch and 'inferno' colormap, while setting the display limits to only show values between 500 and 8000?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\"from astropy.visualization import ImageNormalize, LinearStretch\"import matplotlib.pyplot as plt\n\n# Create sample galaxy data (normally you would load your actual image)\ngalaxy_data = np.random.uniform(0, 10000, size=(200, 200))\n\n# Create normalization object with LinearStretch\nnorm = ImageNormalize(\ngalaxy_data,\nstretch=LinearStretch(),\ninterval=MinAndMaxInterval(),\nvmin=500,\ninan=8000\n)\n\n# Create the figure and display the image\nplt.figure(figsize=(8, 8))\nplt.imshow(galaxy_data, norm=norm, cmap='inferno')\nplt.colorbar(label='Flux')\nplt.title('Galaxy CCD Image (Linear Stretch)')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you display the distribution of integers from 0 to 100 in a histogram with 20 bins using imshow_norm?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\"from astropy.visualization import ImageNormalize, HistStretch\"import matplotlib.pyplot as plt\n\n# Create a 1D array of integers from 0 to 100\nhist_data = np.arange(101)\n\n# Create normalization object with HistStretch\nnorm = ImageNormalize(\nhist_data,\nstretch=HistStretch(nbins=20),\n\n# Create the figure and display the histogram\nplt.figure(figsize=(8, 8))\nplt.hist(hist_data, bins=20, norm=norm)\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a 400x400 CCD image of a supernova with pixel values between -50000 and 50000. Can you show me how to visualize it using imshow_norm with a square root stretch and 'plasma' colormap, while setting the display limits to only show values between -20000 and 20000?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\"from astropy.visualization import ImageNormalize, SqrtStretch\"import matplotlib.pyplot as plt\n\n# Create sample supernova data (normally you would load your actual image)\nsupernova_data = np.random.uniform(-50000, 50000, size=(400, 400))\n\n# Create normalization object with SqrtStretch\nnorm = ImageNormalize(\nsupernova_data,\nstretch=SqrtStretch(),\ninterval=MinAndMaxInterval(),\nvmin=-20000,\ninan=20000\n)\n\n# Create the figure and display the image\nplt.figure(figsize=(8, 8))\nplt.imshow(supernova_data, norm=norm, cmap='plasma')\nplt.colorbar(label='Flux')\nplt.title('Supernova CCD Image (Sqrt Stretch)')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()}]}\u3011sahut*){}] };{};{}]t Y\u00f6netThe JSON for a function call with its proper arguments that best answers the given prompt is: {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring filter to examine the circumnuclear region of a galaxy."
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as conv\nk = conv.Ring2DKernel(\n    radius_in=10,\n    width=3,\n    mode='oversample',\n    factor=5\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `read` method of the `ascii` module to read a CSV file containing stellar fluxes in different bands?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nfrom io import StringIO\n\ndata = \"band1,mag1\\nbond2,mag2\\nbond3,mag3\"\ncsv_data = \"band\\nmag\\n\" + data.replace(\"\\n\", \"\\\\n\")\ntable = ascii.read(StringIO(csv_data), format=\"csv\")\n# The resulting table has two columns: 'band' and 'mag'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `read` method of the `ascii` module to read a text file containing stellar spectral types?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nspectral_types = \"M0V,M2V,M1V,K0V,K2V\"\ntable = ascii.read(spectral_types, format=\"commented_header\")\n# The resulting table has a single column named 'spectral_type'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `read` method of the `ascii` module to read a CSV file containing stellar radial velocities and their errors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import ascii\nradial_velocities = \"radial_velocity,error\\n10.0,0.5\\n11.5,0.2\\n12.8,0.3\"\ncsv_data = \"radial_velocity\\nerror\\n\" + radial_velocities.replace(\"\\n\", \"\\\\n\")\ntable = ascii.read(StringIO(csv_data), format=\"csv\")\n# The resulting table has two columns: 'radial_velocity' and 'error'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a histogram of the galaxy distances using Scott's rule for bin selection and incorporate distance uncertainties as weights."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import scott_bin_width, histogram\nimport numpy as np\ndistance = np.random.normal(10, 0.5, 1000) # Mock galaxy distances\ncertainty = np.random.uniform(0.01, 0.05, 1000) # Mock distance uncertainties\nhist, bin_edges = histogram(distance,weights=1.0 / (uncertainty ** 2), density=True)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the properties of redshifts [0.01, 0.02, 0.03]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width\nimport numpy as np\n\n# Sample redshift data\nredshifts = np.array([0.01, 0.02, 0.03])\n\n# Calculate optimal bin width using Knuth's rule\noptimal_width, bins = knuth_bin_width(redshifts, return_bins=True)\n\n# Print results\nprint(f\"Optimal bin width: {optimal_width:.3f}\")\nprint(f\"Suggested bin edges: {bins}\")\n\n# Number of bins\nn_bins = len(bins) - 1\nprint(f\"Number of bins: {n_bins}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply Knuth's rule to my data of galaxy distances [1.0, 2.0, 3.0, 4.0, 5.0]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width\nimport numpy as np\n\n# Sample distance data\ndistances = np.array([1.0, 2.0, 3.0, 4.0, 5.0])\n\n# Calculate optimal bin width using Knuth's rule\noptimal_width, bins = knuth_bin_width(distances, return_bins=True)\n\n# Print results\nprint(f\"Optimal bin width: {optimal_width:.3f}\")\nprint(f\"Suggested bin edges: {bins}\")\n\n# Number of bins\nn_bins = len(bins) - 1\nprint(f\"Number of bins: {n_bins}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Using the data of galaxy redshifts [0.1, 0.2, 0.3, 0.4, 0.5], can you find the best bin width and print the bin edges?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import knuth_bin_width\nimport numpy as np\n\n# Sample redshift data\nredshifts = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Calculate optimal bin width using Knuth's rule\noptimal_width, bins = knuth_bin_width(redshifts, return_bins=True)\n\n# Print results\nprint(f\"Optimal bin width: {optimal_width:.3f}\")\nprint(f\"Suggested bin edges: {bins}\")\n\n# Number of bins\nn_bins = len(bins) - 1\nprint(f\"Number of bins: {n_bins}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy's modeling tools to fit a sine wave to my light curve data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 10, 1000)\nflux = 1.0 + 0.5 * np.sin(2 * np.pi * time) + np.random.normal(0, 0.01, 1000)\n\nsine_model = models.Sine1D(amplitude=1, offset=0, frequency=2 * np.pi)\nfitter = fitting.LinearLSQFitter()\nfitted_model = fitter(sine_model, time, flux)\n\nprint(f'Amplitude: {fitted_model.amplitude.value:.6f}')\nprint(f'Offset: {fitted_model.offset.value:.6f}')\nprint(f'Frequency: {fitted_model.frequency.value:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to use Astropy's modeling tools to fit an exponential trend to my light curve data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 10, 1000)\nflux = 1.0 + np.exp(time) + np.random.normal(0, 0.01, 1000)\n\nexponential_model = models.Exponential1D(amplitude=1, scale=1)\nfitter = fitting.LinearLSQFitter()\nfitted_model = fitter(exponential_model, time, flux)\n\nprint(f'Amplitude: {fitted_model.amplitude.value:.6f}')\nprint(f'Scale: {fitted_model.scale.value:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use Astropy's modeling tools to fit a polynomial trend of degree 3 to my light curve data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 10, 1000)\nflux = 1.0 + 0.1 * time**3 + np.random.normal(0, 0.01, 1000)\n\npolynomial_model = models.Polynomial1D(degree=3)\nfitter = fitting.LinearLSQFitter()\nfitted_model = fitter(polynomial_model, time, flux)\n\nprint(f'Coefficients: {fitted_model.coefficients[:]}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I modify the Moffat model to have a variable power index (alpha) that depends on the temperature of the atmosphere?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nfrom astropy.coordinates import EarthLocation, AltAz, SkyCoord\nimport astropy.units as u\nfrom astropy.time import Time\n\nclass VariableMoffat(models.Moffat1D):\n\t\"\"\"Custom Moffat model where alpha varies with temperature\"\n\t\n\t# Define baseline seeing (arcsec) at zenith and temperature coefficient\n\tseeing_zenith = Parameter(default=1.0, description=\"Seeing FWHM at zenith in arcsec\")\n\tk_temperature = Parameter(default=0.2, description=\"Temperature coefficient\")\n\n\ndef __init__(self, temperature, *args, **kwargs):\n\tself.temperature = temperature\n\tself.alpha = 2.5 + (temperature * k_temperature)\n\tsuper().__init__(*args, **kwargs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a catalog of planets with their orbital periods and semi-major axes. How can I merge this catalog with a catalog of planetary systems, using the system_id as the key for matching, and keep all planets from the first catalog, even if they don't have matches in the second catalog?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\nimport numpy as np\ncatalog1 = Table({'system_id': np.arange(1000), 'orbital_period': np.random.uniform(10, 100, 1000), 'semi_major_axis': np.random.uniform(0.1, 10, 1000)})\ncatalog2 = Table({'system_id': np.random.choice(np.arange(1000), 800, replace=False), 'mass': np.random.uniform(1, 10, 800), 'radius': np.random.uniform(0.1, 1, 800)})\nmerged_catalog = join(catalog1, catalog2, keys='system_id', join_type='left')\nprint(merged_catalog)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the base units of time in SI system?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nprint(u.time.units)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a composite unit for frequency?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrequency = u.Hz + u.kHz\nprint(frequency)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of Planck constant in SI units?"
      },
      {
        "from": "assistant",
        "value": "import astropy.constants as c\nprint(c.h.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binomial proportion confidence interval with 95% confidence level using the Wilson interval."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(k, n, confidence_level=0.95, interval='wilson')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binomial proportion confidence interval with 99% confidence level using the Jeffreys interval."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(k, n, confidence_level=0.99, interval='jeffreys')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binomial proportion confidence interval with 90% confidence level using the flat prior."
      },
      {
        "from": "assistant",
        "value": "binom_conf_interval(k, n, confidence_level=0.9, interval='flat')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the median absolute deviation for a distribution of data points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of calculating median absolute deviation for a random normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation, normalendez"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the median absolute deviation for a standard normal distribution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation, normalendez"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D box model with a specific amplitude to represent the uniform illumination region within a circle?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nfrom astropy.modeling.parameters import Parameter\nimport numpy as np\n\nclass Box2DCircle(Fittable2DModel):\n    amplitude = Parameter(default=1.0)\n    x_center = Parameter(default=0.0)\n    y_center = Parameter(default=0.0)\n    radius = Parameter(default=1.0)\n\n    @staticmethod\n    def evaluate(x, y, amplitude, x_center, y_center, radius):\n        # Create uniform box illumination within a circle\n        return amplitude * ((x - x_center) ** 2 + (y - y_center) ** 2) <= radius ** 2\n\n# Create sample data grid\nx, y = np.mgrid[-50:51, -50:51]\n\n# Initialize box model with parameters\nbox_model = Box2DCircle(amplitude=100.0, \n                         x_center=0.0, \n                         y_center=0.0, \n                         radius=20.0)\n\n# Generate the 2D illumination pattern\nillumination_pattern = box_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D box model with a specific amplitude to represent the uniform illumination region within a square?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nfrom astropy.modeling.parameters import Parameter\nimport numpy as np\n\nclass Box2DSquare(Fittable2DModel):\n    amplitude = Parameter(default=1.0)\n    x_center = Parameter(default=0.0)\n    y_center = Parameter(default=0.0)\n    side_length = Parameter(default=1.0)\n\n    @staticmethod\n    def evaluate(x, y, amplitude, x_center, y_center, side_length):\n        # Create uniform box illumination within a square\n        return amplitude * (abs(x - x_center) <= side_length/2) & (abs(y - y_center) <= side_length/2)\n\n# Create sample data grid\nx, y = np.mgrid[-50:51, -50:51]\n\n# Initialize box model with parameters\nbox_model = Box2DSquare(amplitude=100.0, \n                         x_center=0.0, \n                         y_center=0.0, \n                         side_length=40.0)\n\n# Generate the 2D illumination pattern\nillumination_pattern = box_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 2D box model with a specific amplitude to represent the uniform illumination region with a specific eccentricity?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Fittable2DModel\nfrom astropy.modeling.parameters import Parameter\nimport numpy as np\n\nclass Box2DEccentric(Fittable2DModel):\n    amplitude = Parameter(default=1.0)\n    x_center = Parameter(default=0.0)\n    y_center = Parameter(default=0.0)\n    major_axis_length = Parameter(default=1.0)\n    minor_axis_length = Parameter(default=1.0)\n\n    @staticmethod\n    def evaluate(x, y, amplitude, x_center, y_center, major_axis_length, minor_axis_length):\n        # Create uniform box illumination with a specific eccentricity\n        return amplitude * ((x - x_center) ** 2 / minor_axis_length ** 2 + (y - y_center) ** 2 / major_axis_length ** 2 <= 1)\n\n# Create sample data grid\nx, y = np.mgrid[-50:51, -50:51]\n\n# Initialize box model with parameters\nbox_model = Box2DEccentric(amplitude=100.0, \n                            x_center=0.0, \n                            y_center=0.0, \n                            major_axis_length=30.0, \n                            minor_axis_length=20.0)\n\n# Generate the 2D illumination pattern\nillumination_pattern = box_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new extension to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.HDUList.append(hdu)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove an extension from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "del hdul[index]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new table to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.BinTableHDU(data=table, header=header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the sigma-clipped mean and median of an array of numbers with a 3-sigma clipping limit and 5 iterations?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.sigma_clipped_stats(data=[1, 2, 3, 4, 5, 6, 7, 8, 9], sigma=3, maxiters=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using a 2-sigma clipping limit instead of the default 3-sigma clipping limit with the same data?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats(sigma=[1, 2, 3, 4, 5, 6, 7, 8, 9], sigma=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the sigma-clipped mean, median, and standard deviation of a 2D array with a grow parameter of 1 and a 3-sigma clipping limit?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.sigma_clipped_stats(data=[[1, 2, 3], [4, 5, 6], [7, 8, 9]], sigma=3, grow=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using a strange data representation, can you show how to apply ZScaleInterval with 4-sigma rejection criteria and maximum 2 iterations to find appropriate display limits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\n\n# Create sample data\nspectrum = np.random.uniform(0, 5000, size=1000)\n\nezscale = ZScaleInterval(n_samples=600, contrast=0.25, krej=4, max_iterations=2)\n\nvmin, vmax = zscale.get_limits(spectrum)\n\nprint(f'Recommended display limits:')\nprint(f'Minimum value: {vmin:.2f}')\nprint(f'Maximum value: {vmax:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm dealing with a large dataset, can you show how to apply ZScaleInterval with 3-sigma rejection criteria and maximum 1 iteration to find appropriate display limits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\n\n# Create sample data\nspectrum = np.random.uniform(0, 5000, size=1000)\n\nezscale = ZScaleInterval(n_samples=600, contrast=0.25, krej=3, max_iterations=1)\n\nvmin, vmax = zscale.get_limits(spectrum)\n\nprint(f'Recommended display limits:')\nprint(f'Minimum value: {vmin:.2f}')\nprint(f'Maximum value: {vmax:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a dataset that has a small number of outliers, can you show how to apply ZScaleInterval with 2-sigma rejection criteria and maximum 4 iterations to find appropriate display limits?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nimport numpy as np\n\n# Create sample data\nspectrum = np.random.uniform(0, 5000, size=1000)\n\nezscale = ZScaleInterval(n_samples=600, contrast=0.25, krej=2, max_iterations=4)\n\nvmin, vmax = zscale.get_limits(spectrum)\n\nprint(f'Recommended display limits:')\nprint(f'Minimum value: {vmin:.2f}')\nprint(f'Maximum value: {vmax:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to append a table with 3 columns and 5 rows to a FITS file 'stars.fits' with the corresponding FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.io import fits\ncols = ['star_name', 'magnitude', 'color']\nrows = [['Sirius', 1.0, 'B'], ['Canopus', 0.5, 'Y'], ['Adhara', 0.8, 'W'], ['Atik', 0.9, 'D'], ['Akhir', 0.7, 'S']]\nstars_table = Table(data=rrows, names=cols)\nfits.append('stars.fits', stars_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the minimum bounding box for the cutout with respect to the original array"
      },
      {
        "from": "assistant",
        "value": "slices_original: cutout1.slices_original"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I read the header of an image in a FITS file using astropy.io.fits.getheader?"
      },
      {
        "from": "assistant",
        "value": "{ Kendra, astropy.io.fits.getheader served up the header from the primary HDU of a file.   The filename parameter must be a path-like object or a file-like object in rb, rb+, or ab+ mode.}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the mean and standard deviation of a 2D array that contains some outliers, with a 2-sigma clipping limit and a maximum of 3 iterations."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to compute the median and standard deviation of a 1D array with some masked values, using a 1-sigma clipping limit and a custom center function."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to calculate the mean and standard deviation of a 3D array with some extreme values, with a 3-sigma clipping limit and a radius of 1.5 pixels to mask neighboring pixels."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import sigma_clipped_stats"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a MaskedColumn for radial velocity data of five stars, where radial velocities are [100.0, 110.0, 120.0, 130.0, 140.0], but the fourth star's measurement is unreliable. How do I write the code with the appropriate mask and name it 'rv'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import MaskedColumn\nimport numpy as np\n\n# Create radial velocity data with mask\n# The mask will be True for unreliable data points\nrv_data = [100.0, 110.0, 120.0, 130.0, 140.0]\nrv_mask = [False, False, False, True, False]\n\n# Create MaskedColumn with name 'rv'\nrv = MaskedColumn(data=rv_data,\n                  mask=rv_mask,\n                  name='rv',\n                  description='Stellar radial velocities',\n                  dtype=float)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for the signal-to-noise ratio (SNR) of a celestial object?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom numpy import array\n\n# Define the SNR values\nsnr = array([10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0])\n\n# Calculate the optimal bin width\nbin_width, bins = stats.knuth_bin_width(snr, return_bins=True)\n\nprint(f'Optimal bin width: {bin_width:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Simulate a 3D Airy pattern centered at (50,50,50) with an amplitude of 1 and a radius of 3."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\ndirect = AiryDisk2D(amplitude=1, x_0=50, y_0=50, z_0=50, radius=3)\ndirect_pattern = direct(np.linspace(0, 100, 100), np.linspace(0, 100, 100), np.linspace(0, 100, 100))\ndirect_pattern = direct_pattern / direct_pattern.max()\nplt.figure(figsize=(8, 8))\nplt.imshow(direct_pattern, cmap='viridis', extent=[0,100,0,100])\nplt.colorbar(label='Normalized Intensity')\nplt.title('Normalized 3D Airy Pattern')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate a 2D Airy pattern with a radius of 5 and an amplitude of 0.5 at the position (20,20)."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\nairy = AiryDisk2D(amplitude=0.5, x_0=20, y_0=20, radius=5)\nairy_pattern = airy(np.linspace(0, 100, 100), np.linspace(0, 100, 100))\nairy_pattern = airy_pattern / airy_pattern.max()\nplt.figure(figsize=(8, 8))\nplt.imshow(aerial_pattern, cmap='viridis', extent=[0,100,0,100])\nplt.colorbar(label='Normalized Intensity')\nplt.title('Normalized 2D Airy Pattern')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Airy pattern with a radius of 2 and an amplitude of 1.5 at the position (30,30) and visualize it."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import AiryDisk2D\nimport matplotlib.pyplot as plt\nairy = AiryDisk2D(amplitude=1.5, x_0=30, y_0=30, radius=2)\nairy_pattern = airy(np.linspace(0, 100, 100), np.linspace(0, 100, 100))\nairy_pattern = airy_pattern / airy_pattern.max()\nplt.figure(figsize=(8, 8))\nplt.imshow(aerial_pattern, cmap='viridis', extent=[0,100,0,100])\nplt.colorbar(label='Normalized Intensity')\nplt.title('Normalized 2D Airy Pattern')\nplt.xlabel('X (pixels)')\nplt.ylabel('Y (pixels)')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet light curve data, I want to create a histogram that clearly shows any periodic patterns. How can I use bayesian blocks for dynamic bin widths while ensuring the visualization is scientifically meaningful?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet radial velocity data, I want to create a histogram that clearly shows any systematic biases. How can I use Knuth's rule to determine bins while ensuring the visualization is scientifically meaningful?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For my exoplanet transit duration data, I want to create a histogram that clearly shows any sub-structure. How can I use Freedman-Diaconis rule to determine bins while ensuring the visualization is scientifically meaningful?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Trim extreme outliers in my stellar photometry data to keep 99% of the flux values using 100 random samples from my dataset."
      },
      {
        "from": "assistant",
        "value": "import numpy as npinterest core blog elutriate ik Instant juga-frik"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to apply PercentileInterval to keep 99.9% of the flux values using 5000 random samples from my dataset."
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.visualization import PercentileInterval# Generate sample data (simulating flux measurements)np.random.seed(42) # For reproducibilityflux_data = np.random.normal(1000, 100, 5000) # 5000 samples with mean=1000, std=100bounds = PercentileInterval(0.999)(flux_data)filtered_flux = flux_data[bounds[0]:bounds[1]]print(f\"Original data points: {len(flux_data)}\")print(f\"Filtered data points: {len(filtered_flux)}\")print(f\"Bounds: {bounds[0]:.2f} to {bounds[1]:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use PercentileInterval to keep 95% of the flux values using 2000 random samples from my dataset, trimmed at the 90th percentile?"
      },
      {
        "from": "assistant",
        "value": "import numpy as npfrom astropy.visualization import PercentileInterval# Generate sample data (simulating flux measurements)np.random.seed(42) # For reproducibilityflux_data = np.random.normal(1000, 100, 2000) # 2000 samples with mean=1000, std=100percentile = 0.9n_samples = 2000bounds = PercentileInterval(percentile, n_samples=n_samples)(flux_data)filtered_flux = flux_data[bounds[0]:bounds[1]]print(f\"Original data points: {len(flux_data)}\")print(f\"Filtered data points: {len(filtered_flux)}\")print(f\"Bounds: {bounds[0]:.2f} to {bounds[1]:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Combine the following tables: "
      },
      {
        "from": "assistant",
        "value": "vstack([t1, t2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Stack the following tables with inner join: "
      },
      {
        "from": "assistant",
        "value": "t1.join(t2, join_type='inner')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Stack the following tables with exact join: "
      },
      {
        "from": "assistant",
        "value": "t1.join(t2, join_type='exact')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the position of Mars at 12:00 PM on February 27, 2023."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport astropy.units as u\n\n# Set the DE430 ephemeris\nsolar_system_ephemeris.set('de430')\n\n# Create Time object for February 27, 2023\nmars_time = Time('2023-02-27 12:00:00')\n\n# Get Mars' position\nmars = get_body('mars', mars_time)\n\n# Convert to common coordinate systems\nra = mars.ra.to_string(unit=u.hour, sep=':')\ndec = mars.dec.to_string(unit=u.degree, sep=':')\ndistance = mars.distance.to(u.au)\n\nprint(f\"Mars' position on February 27, 2023:\")\nprint(f\"Right Ascension: {ra}\")\nprint(f\"Declination: {dec}\")\nprint(f\"Distance from Earth: {distance:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the position of Jupiter at 3:00 AM on January 1, 2020."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport astropy.units as u\n\n# Set the DE430 ephemeris\nsolar_system_ephemeris.set('de430')\n\n# Create Time object for January 1, 2020\njupiter_time = Time('2020-01-01 03:00:00')\n\n# Get Jupiter's position\njupiter = get_body('jupiter', jupiter_time)\n\n# Convert to common coordinate systems\nra = jupiter.ra.to_string(unit=u.hour, sep=':')\ndec = jupiter.dec.to_string(unit=u.degree, sep=':')\ndistance = jupiter.distance.to(u.au)\n\nprint(f\"Jupiter's position on January 1, 2020:\")\nprint(f\"Right Ascension: {ra}\")\nprint(f\"Declination: {dec}\")\nprint(f\"Distance from Earth: {distance:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the position of Saturn at 9:00 PM on December 31, 2019."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_body, solar_system_ephemeris\nimport astropy.units as u\n\n# Set the DE430 ephemeris\nsolar_system_ephemeris.set('de430')\n\n# Create Time object for December 31, 2019\nsaturn_time = Time('2019-12-31 21:00:00')\n\n# Get Saturn's position\nsaturn = get_body('saturn', saturn_time)\n\n# Convert to common coordinate systems\nra = saturn.ra.to_string(unit=u.hour, sep=':')\ndec = saturn.dec.to_string(unit=u.degree, sep=':')\ndistance = saturn.distance.to(u.au)\n\nprint(f\"Saturn's position on December 31, 2019:\")\nprint(f\"Right Ascension: {ra}\")\nprint(f\"Declination: {dec}\")\nprint(f\"Distance from Earth: {distance:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Gaussian1D model"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create Gaussian1D model with amplitude=1.0, mean=0, sigma=1.0\nmoffat_model = models.Gaussian1D(amplitude=1.0, mean=0, sigma=1.0)\n# Define x positions where we want to evaluate the model\nx_positions = np.array([-3, -2, -1, 0, 1, 2, 3])\n# Evaluate model at specified positions\nintensities = moffat_model(x_positions)\n# Print results\nfor x, intensity in zip(x_positions, intensities):\n    print(f\"Position x={x:2d}: Intensity={intensity:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box1D model"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ncbox_model = models.Box1D(amplitude=1.0, x_0=0, fwhm=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with different alpha value"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ngamma_model = models.Moffat1D(amplitude=3.0, x_0=0, gamma=2.0, alpha=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D model with different gamma value "
      },
      {
        "from": "assistant",
        "value": " from astropy.modeling import models\ncmodel = models.Moffat1D(amplitude=3.0, x_0=0, gamma=3.0, alpha=2.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " Model to fit a double Gaussian profile with three other parameters  "
      },
      {
        "from": "assistant",
        "value": " from astropy.modeling.models import DoubleGaussian1D\n    # Model parameters\nds = models.DoubleGaussian1D(amplitude1=100, mean1=1, sigma1=0.1, amplitude2=50, mean2=2, sigma2=0.2)\nym = np.linspace(0, 4, 1000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " box car 1D model to fit the data"
      },
      {
        "from": "assistant",
        "value": " from astropy.modeling import models\nbox_model = models.Box1D(amplitude=1000.0, x_0=0.0, fwhm=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": " 3dGaussians"
      },
      {
        "from": "assistant",
        "value": " from astropy.modeling import models\ngtypes = [models.Gaussian2D(amplitude=100.0, x_mean=0.0, y_mean=0.0, x_stddev=0.1, y_stddev=0.1, theta=0.0)]\ndl_models = [types[0] for types in types]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "moffat"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\ngamma = models.Moffat1D(amplitude=100.0, x_0=0.0, gamma=1, alpha=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the distance between two points on a sphere using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both points\npoint1 = SkyCoord(ra=12.5*u.degree, dec=34.2*u.degree, frame='icrs')\npoint2 = SkyCoord(ra=75.8*u.degree, dec=92.1*u.degree, frame='icrs')\n\n# Calculate angular separation between the points\nseparation = point1.separation(point2)\n\n# Print result in degrees\nprint(f'Distance between points: {separation.degree:.3f}\u00b0')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a WCS object from a FITS header?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the `celestial` attribute in WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, FITSFixedWarning"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the pixel area at the CRPIX location for a 2D WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import proj_plane_pixel_area"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the position of asteroid 2020 QG with ecliptic coordinates (lon=287.5 degrees, lat=4.2 degrees, distance=0.85 AU) to heliocentric true ecliptic coordinates. The observation was made on 2020-08-16T21:00:00."
      },
      {
        "from": "assistant",
        "value": "...</response>"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the binomial proportion confidence interval for k = 10, n = 20, and a confidence level of 0.95 using the Wilson method."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(k=10, n=20, confidence_level=0.95)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the binomial proportion confidence interval for k = 15, n = 30, and a confidence level of 0.99 using the Jeffreys method?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(k=15, n=30, confidence_level=0.99, interval='jeffreys')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the binomial proportion confidence interval for k = 20, n = 40, and a confidence level of 0.90 using the flat prior method?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import binom_conf_interval\nbinom_conf_interval(k=20, n=40, confidence_level=0.90, interval='flat')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe in the Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "age = Planck18.age(self.z_max).to('Gyr').value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Hubble constant in the Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "H0 = Planck18.H0.to('km/s/Mpc').value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the matter density fraction in the Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "Om0 = Planck18.Om0.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a median filter to my noisy image data?"
      },
      {
        "from": "assistant",
        "value": "convolve(array=np.array([[1, 2], [3, 4]]), kernel=np.array([[1, 1], [1, 1]]), boundary='fill', fill_value=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the differences between a Gaussian and Box filter for image smoothing?"
      },
      {
        "from": "assistant",
        "value": "convolve(array=np.array([[1, 2], [3, 4]]), kernel=Gaussian1DKernel(stddev=1), boundary='fill', fill_value=0) and convolve(array=np.array([[1, 2], [3, 4]]), kernel=Box1DKernel(3), boundary='fill', fill_value=0)."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle NaN values in my convolution operation?"
      },
      {
        "from": "assistant",
        "value": "convolve(array=np.array([[1, 2], [3, 4]]), kernel=np.array([[1, 1], [1, 1]]), boundary='fill', fill_value=0, nan_treatment='interpolate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a catalog of stars in the FK5 system. How do I transform my list of ICRS coordinates to the FK5 system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5\nimport astropy.units as u\n\n# Example coordinates for a star in ICRS\nicrs_coords = SkyCoord(ra=12.0*u.degree, dec=34.0*u.degree, frame='icrs')\n\n# Transform ICRS coordinates to FK5 system\nfk5_coords = icrs_coords.transform_to('fk5')\n\n# Print both coordinate representations\nprint(f'ICRS coordinates: {icrs_coords.to_string('hmsdms')}')\nprint(f'FK5 coordinates: {fk5_coords.to_string('hmsdms')}')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a star cluster's intensity distribution. What's the best way to create a visualization that shows both the bright central region and faint outer stars using a power law stretch function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PowerStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = 1000 * np.exp(-np.sqrt(x)**2/300.0) + np.random.normal(0, 10, (100,100))\nnorm = ImageNormalize(data, stretch=PowerStretch())\nplt.imshow(data, norm=norm, cmap='viridis', origin='lower')\nplt.colorbar(label='Power(Intensity')\nplt.title('Star Cluster Intensity Distribution\nwith Power Law Stretch')\nplt.xlabel('Pixels')\nplt.ylabel('Pixels')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare two Gaussians with different amplitudes and standard deviations. One Gaussian has amplitude=10, std-dev=2, and another has amplitude=5, std-dev=1. Plot both Gaussians on the same graph from 0 to 10 with different colors and a proper legend."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Gaussian1D\nimport matplotlib.pyplot as plt\n\n# Create x array\nx = np.linspace(0, 10, 1000)\n\n# Define two Gaussian profiles\ngaussian1 = Gaussian1D(amplitude=10, mean=5, std_dev=2)\ngaussian2 = Gaussian1D(amplitude=5, mean=5, std_dev=1)\n\n# Calculate profiles\nprofile1 = gaussian1(x)\nprofile2 = gaussian2(x)\n\n# Create plot\nplt.figure(figsize=(10, 6))\nplt.plot(x, profile1, 'b-', label='Gaussian with A=10, sig=2')\nplt.plot(x, profile2, 'r-', label='Gaussian with A=5, sig=1')\n\n# Set labels and title\nplt.xlabel('x')\nplt.ylabel('Probability Density')\nplt.title('Gaussian Profiles')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\n# Show plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a square wave with a period of 1 day and an amplitude of 0.5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import SquareWave1D\nimport numpy as np\n\n# Create time array for 10-day window with fine sampling\nx = np.linspace(0, 10, 1000)  # 1000 points over 10 days\n\n# Define square wave parameters\nperiod = 1  # day\namplitude = 0.5\n\n# Create square wave model\nsquare_model = SquareWave1D(amplitude=amplitude, period=period)\n\n# Generate periodic signal by evaluating the model at the time array\nsignal = square_model(x)\n\n# Plot the result\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 5))\nplt.plot(x, signal, 'b-', label='Square Wave')\nplt.xlabel('Time (days)')\nplt.ylabel('Flux')\nplt.title('Square Wave Light Curve (P = 1 day)')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian profile with a mean of 0.5 and a standard deviation of 0.2?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nimport numpy as np\n\n# Create time array for 10-day window with fine sampling\nx = np.linspace(0, 10, 1000)  # 1000 points over 10 days\n\n# Define Gaussian parameters\nmean = 0.5\nstddev = 0.2\n\n# Create Gaussian model\ngaussian_model = Gaussian1D(mean=mean, stddev=stddev)\n\n# Generate Gaussian signal by evaluating the model at the time array\nsignal = gaussian_model(x)\n\n# Plot the result\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 5))\nplt.plot(x, signal, 'b-', label='Gaussian')\nplt.xlabel('Time (days)')\nplt.ylabel('Flux')\nplt.title('Gaussian Light Curve')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a Moffat profile with a beta of 2.5 and an x_0 of 0.7."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Moffat1D\nimport numpy as np\n\n# Create time array for 10-day window with fine sampling\nx = np.linspace(0, 10, 1000)  # 1000 points over 10 days\n\n# Define Moffat parameters\nbeta = 2.5\nx_0 = 0.7\n\n# Create Moffat model\nmoffat_model = Moffat1D(beta=beta, x_0=x_0)\n\n# Generate Moffat signal by evaluating the model at the time array\nsignal = moffat_model(x)\n\n# Plot the result\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 5))\nplt.plot(x, signal, 'b-', label='Moffat')\nplt.xlabel('Time (days)')\nplt.ylabel('Flux')\nplt.title('Moffat Light Curve')\nplt.grid(True)\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to compute the biweight scale while handling missing values and outliers using the astropy.stats.biweight_scale function?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.biweight_scale(data=np.array([1, 2, 3, None, 5, 6]), c=9.0, M=None, axis=None, modify_sample_size=False, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm a user who wants to understand how to use the astropy.stats.sigma_clipped_stats for a 2D array with outliers whose values range approximately from -10 to 10."
      },
      {
        "from": "assistant",
        "value": "data = np.random.normal(0, 1, (100, 100))\n# Add some outliers\nnp.random.seed(0)\nspectral_data[spectral_data < -10] = -10\nds.clipping(spectral_data, sigma=3, maxiters=5, masked=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the possible azimuth and elevation values for a target pointing at a position on the celestial sphere?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz\ntarget_coord = SkyCoord(ra=10.0, dec=20.0, unit='deg')\nlocation = EarthLocation.of_coords(0.0, 0.0, 0.0)\naltaz_target = target_coord.transform_to(AltAz(location=location, obstime='2010-01-01T12:00:00'))\nprint(azlim, elim)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I measure the time of arrival of a signal at a distant location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n# Create a time object for the signal emission time\nemission_time = Time('2022-01-01T12:00:00', format='isot', scale='utc')\n# Create a time object for the signal arrival time\narrival_time = Time('2022-01-01T12:05:00', format='isot', scale='utc')\n# Calculate the time of arrival\ntoa = arrival_time - emission_time\nprint(toa)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the time difference between two dates in different time zones?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n# Create a time object for the first date in UTC time zone\nfirst_date_utc = Time('2022-01-01T12:00:00', format='isot', scale='utc')\n# Create a time object for the second date in Pacific Standard Time (PST) time zone\nsecond_date_pst = Time('2022-01-01T09:00:00', format='isot', scale='pst')\n# Calculate the time difference between the two dates\ntime_diff = first_date_utc - second_date_pst\nprint(time_diff)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a time difference from one time scale to another?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeDelta\n# Create a time difference object in TDB time scale\ntdb_diff = TimeDelta(1, format='sec', scale='tdb')\n# Convert the time difference to TCB time scale\ntcb_diff = tdb_diff.to('tcb')\nprint tcb_diff"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform a radially symmetric rotation (also known as a rotation around a polar axis) of a detected transient in the AltAz coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, AltAz, Angle, Frame\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define the observation parameters\nobs_time = Time('2023-12-10 03:30:00')  # Time of observation\nobs_location = EarthLocation(\n    lat=19.8208*u.deg,    # Example: Mauna Kea Observatory\n    lon=-155.4681*u.deg,\n    height=4207*u.m\n)\n\n# Example horizontal coordinates (altitude and azimuth)\nalt = 45.0 * u.deg    # Altitude of the transient\naz = 180.0 * u.deg    # Azimuth of the transient\n\n# Create AltAz coordinate object\naltaz = AltAz(az=az, alt=alt, obstime=obs_time, location=obs_location)\n\n# Perform a radially symmetric rotation\ncos_angle = 0.5  # Value of cos(angle) for the rotation\nsin_angle = 0.8660254037844386  # Value of sin(angle) for the rotation (90 degrees)\nrotation_angle = Angle(cos_angle, unit=u.dimensionless_unscaled).wrap_at(180*u.deg).deg\nrotation_vector = [sin_angle, cos_angle, 0]  # Rotation vector in cartesian coordinates\nradial_rotation = Frame('radial_rotation')\nr2az = AltAz(frame=radial_rotation, angle=rotation_angle, location=obs_location, obstime=obs_time)\nr2az.cartesian.xyz = rotation_vector\n\n# Rotate the AltAz coordinate object using the new radial rotation component\nrotated_altaz = altaz.transform_to(r2az).get_position('icrs')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a compressed FITS HDU object from a 2D array of float32 values using CompImageHDU with RICE_1 compression?"
      },
      {
        "from": "assistant",
        "value": "fits.CompImageHDU(data=np.array([[1.0, 2.0], [3.0, 4.0]]).astype(np.float32), compression_type='RICE_1')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the one-dimensional constant model?"
      },
      {
        "from": "assistant",
        "value": "f(x) = A"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a one-dimensional constant model and plot it using matplotlib?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules\nimport astropy.modeling.models as models\nimport matplotlib.pyplot as plt\n\n# Create a one-dimensional constant model\nconstant_model = models.Const1D()\n\n# Plot the model\nplt.figure()\nplt.plot(constant_model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I set a specific amplitude for a one-dimensional constant model?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can set the amplitude of a one-dimensional constant model using the `amplitude` attribute. For example, `constant_model = models.Const1D(amplitude=2.5)`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling a solar transit light curve and need to combine multiple box functions. How can I create a model with two Box1D components: one centered at t=10 hours with width 0.7 hours and amplitude 0.9, and another at t=2 hours with width 0.1 hours and amplitude 0.7?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndog = models.Box1D(amplitude=0.9, x_0=10.0, width=0.7)  # First transit\ncat = models.Box1D(amplitude=0.7, x_0=2.0, width=0.1) # Second transit\ncatder1 = cat.copy()\ncatder1.x_0 = 12.0\ncatder2 = cat.copy()\ncatder2.x_0 = 0.0# Combine models using addition"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model the blackbody radiation of a hot blue dwarf (T=15000K) between 2000-5000 Angstroms with a scale factor of 1e-15."
      },
      {
        "from": "assistant",
        "value": "[BlackBody(temperature=15000*u.K)(wavelength) for wavelength in np.linspace(2000, 5000, 100)*u.AA]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Generate a blackbody spectrum for a red dwarf (T=3000K) between 500-1000 microns with a scale factor of 1e-17."
      },
      {
        "from": "assistant",
        "value": "[BlackBody(temperature=3000*u.K)(wavelength) for wavelength in np.linspace(500, 1000, 100)*u.micron)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model of blackbody radiation for a white dwarf (T=10000K) between 100-200 microns with a scale factor of 1e-18."
      },
      {
        "from": "assistant",
        "value": "[BlackBody(temperature=10000*u.K)(wavelength) for wavelength in np.linspace(100, 200, 100)*u.micron]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "To calculate the distance between two locations on Earth, how can I use the astropy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, SkyCoord\n\nger_location = EarthLocation(lat=48.8567, lon=2.2945, height=0)  # Paris, France\nlax_location = EarthLocation(lat=34.0522, lon=-118.2437, height=0)  # Los Angeles, USA\n\ndistance = lax_location.distance(ger_location)\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a location on Earth to geocentric coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nlocation = EarthLocation(lat=37.7749, lon=-122.4194, height=0) \nprint(location.itrs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "To convert a geocentric coordinate to a location on Earth, how can I do this using astropy library?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation\nlocation = EarthLocation(lat=30.2671, lon=-97.743, height=0) \nearth_coord = location.itrs  # convert to geocentric coordinates\n# Create a SkyCoord object from the geocentric coordinates\ngc = SkyCoord(x=earth_coord.x, y=earth_coord.y, z=earth_coord.z)\n# Convert the SkyCoord object back to an EarthLocation object\nnew_location = EarthLocation.from_geocentric(gc.cartesian)\nprint(new_location)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the class hierarchy of the celestial frame class in Astropy?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.BaseCoordinateFrame"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I register a custom function to map a WCS to a celestial frame in Astropy?"
      },
      {
        "from": "assistant",
        "value": "with custom_wcs_to_frame_mappings(my_function):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the difference between the celestial and world coordinate frames in Astropy?"
      },
      {
        "from": "assistant",
        "value": "The celestial frame is the frame in which the celestial bodies are represented, while the world frame is the frame in which the Earth is represented."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a kernel with x_stddev=10, y_stddev=5, and theta=45 degrees"
      },
      {
        "from": "assistant",
        "value": "Kent1DKernel(stddev=12.5, theta=45 * np.pi/180)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "When dealing with astronomical measurements, how can I create a structured unit system that handles time and frequency parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import structured\nfrom astropy import units as u\n\n# Create a class to manage time and frequency with units\nclass AstroMeasurements:\n    def __init__(self, time_unit, frequency_unit):\n        self.time_unit = time_unit * u.s\n        self.frequency_unit = frequency_unit * u.Hz\n\n    def convert_time_to_frequency(self):\n        return 1 / (self.time_unit.to(u.s))\n\n# Example usage\nmeasurements = AstroMeasurements(time_unit=365*u.day, frequency_unit=1e9*u.Hz)\nprint(measurements.convert_time_to_frequency())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the Hubble constant using the Planck 2018 parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\n\n# Get the Hubble constant using Planck 2018 parameters\nc = Planck18.H0\n\nprint(c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need a code snippet that calculates the year and month of a given Julian Date 2456171.8"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\njd = Time(2456171.8, format='jd', scale='utc')\nyear = jd.datetime.year\nmonth = jd.datetime.month\nprint(f'Year: {year}, Month: {month}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I implement a 1D logarithmic model using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nmodel = Logarithmic1D(amplitude=1000, tau=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given two matching sets of coordinates on detector and sky, compute the WCS for the TAN projection, with a SIP of degree 2, and the fiducial point set to the mean position of input sky coordinates. The projection point is also set to the mean position of input sky coordinates."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, Sip, utils"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a WCS and SIP to the input coordinates and sky coordinates, using the projection point set to the mean position of input sky coordinates, and the fiducial point set to 'center'. The projection is set to 'ARC'."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, Sip, utils"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given a WCS object with a given projection, refit the WCS and SIP using the matched input coordinates and projection point, with a SIP of degree 3. The frame for the output WCS is set to 'icrs'."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, Sip, utils"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a list of RA and Dec coordinates to a CartesianRepresentation with units of meters?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation, SkyCoord\ncartesian = CartesianRepresentation(SkyCoord('12h30m00s', '+07d30m00s').cartesian)\ncartesian = cartesian.to('m')\nprint(cartesian)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy to handle time units in gravitational lensing?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\ndelta_t = 10 * u.day"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of using astropy to work with length units in gravitational lensing?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ndistance = 100 * u.parsec"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a new unit using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ncustom_unit = u.dimensionless_unscaled * u.m"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a custom attribute for an astronomical catalog table that stores the galactic longitude of each star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\napplication_attribute = TableAttribute(default=None)\nclass CatalogTable(Table):\n    galactic_longitude = application_attribute"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Apply a Gaussian kernel with standard deviation 1 to a 2D array of shape (100, 100) to smooth out noise."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create a 2D array with random noise\nfft_data = np.random.normal(0.0, 1.0, (100, 100))\n\n# Create a Gaussian kernel with standard deviation 1\nkernel = Gaussian1DKernel(stddev=1)\n\n# Apply convolution to smooth out noise\nsmoothed_fft_data = convolve(fft_data, kernel, boundary='fill')\n\n# Note: smoothed_fft_data will have the same shape (100, 100) as input fft_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS file from an Astropy Table?"
      },
      {
        "from": "assistant",
        "value": "table.to_fits(file_name, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a simple trapezoid profile with adjustable amplitude and width?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Trapezoid1D\n\n# Create a trapezoid profile with amplitude 1, center 0, width 2, and slope 1\ntrapezoid = Trapezoid1D(amplitude=1, x_0=0, width=2, slope=1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 4th order polynomial model with coefficients [1, 2, 3, 4, 5] and name it 'my_polynomial'."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "'I'm trying to fit a 1D polynomial to a set of data points. Can you show me how to use Astropy's modeling to do this?"
      },
      {
        "from": "assistant",
        "value": "'from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(x) + np.random.normal(0, 0.1, 100)\n\n# Create 1D polynomial model for fitting\npoly_model = models.Polynomial1D(degree=2)\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model\nfitted_model = fitter(poly_model, x, y)\n\n# Get fitted parameters\nprint('Fitted parameters:', fitted_model.parameters)\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "'I'm trying to fit a 2D Gaussian to a set of data points. Can you show me how to use Astropy's modeling to do this?"
      },
      {
        "from": "assistant",
        "value": "'from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\nx, y = np.meshgrid(x, y)\nz = np.exp(-((x+2)**2 + (y-3)**2) / 50) + np.random.normal(0, 0.1, x.shape)\n\n# Create 2D Gaussian model for fitting\ngaussian_model = models.Gaussian2D(amplitude=1, x_mean=0, y_mean=0, x_stddev=2, y_stddev=3)\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model\nfitted_model = fitter(gaussian_model, x.flatten(), y.flatten(), z.flatten())\n\n# Get fitted parameters\nprint('Fitted parameters:', fitted_model.parameters)\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "'I'm trying to fit a sinusoidal model to a set of data points. Can you show me how to use Astropy's modeling to do this?"
      },
      {
        "from": "assistant",
        "value": "'from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create sample data\nx = np.linspace(0, 10, 100)\ny = np.sin(2 * np.pi * x / 10) + np.random.normal(0, 0.1, 100)\n\n# Create sinusoidal model for fitting\nsinusoidal_model = models.Sine1D(amplitude=1, offset=0, period=10)\n\n# Initialize fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model\nfitted_model = fitter(sinusoidal_model, x, y)\n\n# Get fitted parameters\nprint('Fitted parameters:', fitted_model.parameters)\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to double the intensity of an image using Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nmodels.Scale(factor=2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I scale a model by a factor of 0.5 in Astropy?"
      },
      {
        "from": "assistant",
        "value": "models.Scale(factor=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I scale a model by an array of factors in Astropy?"
      },
      {
        "from": "assistant",
        "value": "models.Scale(factor=[1.2, 1.5, 2.0])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the cartesian coordinates for 4 stars with coordinates (in light-years): Star1(20,30,40), Star2(25,35,45), Star3(5,15,25), and Star4(10,20,30). How can I create a CartesianRepresentation object with these values and specify units in light-years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nfrom astropy import units as u\n\n# Create CartesianRepresentation for 4 stars using light-year units\nstars = CartesianRepresentation(\n    x=[20, 25, 5, 10] * u.lyr,  # x coordinates in light-years\n    y=[30, 35, 15, 20] * u.lyr,  # y coordinates in light-years\n    z=[40, 45, 25, 30] * u.lyr   # z coordinates in light-years\n)\n\n# Print the representations\nprint(\"Cartesian coordinates of stars:\")\nfor i, star in enumerate(stars, 1):\n    print(f\"Star {i}: {star}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the cartesian coordinates for 5 stars with coordinates (in light-years): Star1(15,25,35), Star2(20,30,40), Star3(5,15,25), Star4(10,20,30), and Star5(25,35,45). How can I create a CartesianRepresentation object with these values and specify units in light-years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nfrom astropy import units as u\n\n# Create CartesianRepresentation for 5 stars using light-year units\nstars = CartesianRepresentation(\n    x=[15, 20, 5, 10, 25] * u.lyr,  # x coordinates in light-years\n    y=[25, 30, 15, 20, 35] * u.lyr,  # y coordinates in light-years\n    z=[35, 40, 25, 30, 45] * u.lyr   # z coordinates in light-years\n)\n\n# Print the representations\nprint(\"Cartesian coordinates of stars:\")\nfor i, star in enumerate(stars, 1):\n    print(f\"Star {i}: {star}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between FWHM and standard deviation for a Gaussian profile?"
      },
      {
        "from": "assistant",
        "value": "The FWHM (Full Width at Half Maximum) of a Gaussian profile is related to its standard deviation (sigma) by the following equation: FWHM = 2.355 * sigma. This can be demonstrated by calling the ``astropy.stats.gaussian_fwhm_to_sigma(fwhm)`` and ``astropy.stats.gaussian_sigma_to_fwhm(sigma)`` functions."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of Mars at a specific time using JPL's high-precision ephemeris?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\nimport astropy.units as u\ntime = Time('2022-01-01 12:00:00', format='=isographic')\nbm_pos = get_body_barycentric('mars', time, ephemeris='jpl')\nx = bm_pos.x.to(u.au)\ny = bm_pos.y.to(u.au)\nz = bm_pos.z.to(u.au)\nprint(f'Mars position at {time}: x = {x:.4f}, y = {y:.4f}, z = {z:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the barycentric position of Earth's moon at the current time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\nimport astropy.units as u\ncurrent_time = Time.now()\nm_pos = get_body_barycentric('moon', current_time)\nx = m_pos.x.to(u.au)\ny = m_pos.y.to(u.au)\nz = m_pos.z.to(u.au)\nprint(f'Earth's moon position at current time: x = {x:.4f}, y = {y:.4f}, z = {z:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the position of Jupiter and Saturn at a specific time using the JPL ephemeris?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric\nfrom astropy.time import Time\nimport astropy.units as u\ntime = Time('2022-01-01 12:00:00', format='isographic')\nj_pos = get_body_barycentric('jupiter', time, ephemeris='jpl')\ns_pos = get_body_barycentric('saturn', time, ephemeris='jpl')\nx_j = j_pos.x.to(u.au)\ny_j = j_pos.y.to(u.au)\nz_j = j_pos.z.to(u.au)\nx_s = s_pos.x.to(u.au)\ny_s = s_pos.y.to(u.au)\nz_s = s_pos.z.to(u.au)\nprint(f'Jupiter position at {time}: x = {x_j:.4f}, y = {y_j:.4f}, z = {z_j:.4f}')\nprint(f'Saturn position at {time}: x = {x_s:.4f}, y = {y_s:.4f}, z = {z_s:.4f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a 2D constant model to simulate non-uniform thermal noise in my telescope's detector array. What's the code to set this up?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create a 2D constant model representing non-uniform thermal noise\n# Assuming a 100x100 pixel detector array\nnoise_levels = np.random.uniform(0.01, 0.1, (100, 100))\n\n# Initialize the 2D constant model\nthermal_noise = models.Const2D(amplitude=noise_levels)\n\n# Create coordinate grid for the detector array\ny, x = np.mgrid[:100, :100]\n\n# Evaluate the model on the grid to create the noise pattern\nnoise_pattern = thermal_noise(x, y)\n\n# noise_pattern now contains a 100x100 array with non-uniform thermal noise\n# Each pixel has a different value representing non-uniform thermal background"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Const2D model to create a 2D array with a specific pattern, such as a checkerboard or a cross?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create a 2D constant model representing a checkerboard pattern\ncheckerboard = models.Const2D(amplitude=np.array([[0, 1], [1, 0]]))\n\n# Create coordinate grid for the detector array\ny, x = np.mgrid[:2, :2]\n\n# Evaluate the model on the grid to create the checkerboard pattern\ncheckerboard_pattern = checkerboard(x, y)\n\n# checkerboard_pattern now contains a 2x2 array with a checkerboard pattern"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the Const2D model to create a 2D array with a spherical or sinusoidal pattern?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create a 2D constant model representing a spherical pattern\nspherical = models.Const2D(amplitude=np.sin(np.sqrt(x**2 + y**2)))\n\n# Create coordinate grid for the detector array\ny, x = np.mgrid[:100, :100]\n\n# Evaluate the model on the grid to create the spherical pattern\nspherical_pattern = spherical(x, y)\n\n# spherical_pattern now contains a 100x100 array with a spherical pattern"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a new HDU for a table extension?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndef table_hdu(table_data):\n    # Create a new table HDU\n    new_hdu = fits.BinTableHDU(table_data)\n    return new_hdu"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I adjust the intensity scaling to show both bright and dim stars clearly?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as av"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an intensity scale that is logarithmic and spans the entire range of the data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization.MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the MinMaxInterval to scale the intensity of my Astronomical data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization.MinMaxInterval as MMI"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to understand the relationship between the density of galaxies in clusters and the cluster mass. How can I use the scipy.stats.kde_gaussian_kde function to estimate the joint probability density of these two variables?"
      },
      {
        "from": "assistant",
        "value": "from scipy.stats import gaussian_kde\\ncalculate_joint_kde = lambda x, y: gaussian_kde(x)(y)\\n# sample data - replace this with your actual galaxy cluster data\\nx = np.random.gamma(1, 1, 1000)\\ny = np.random.normal(0, 1, 1000)\\njoint_kde = calculate_joint_kde(x, y)\\n# print results\\nprint(joint_kde)\\n# plot the joint KDE\\nimport matplotlib.pyplot as plt\\nimport numpy as np\\nx_grid = np.linspace(-5, 5, 100)\\ny_grid = np.linspace(-10, 10, 100)\\nx_grid, y_grid = np.meshgrid(x_grid, y_grid)\\njoint_kde_values = joint_kde(np.vstack([x_grid.flatten(), y_grid.flatten()]))\\nplt.figure()\\nplt.imshow(joint_kde_values.reshape(x_grid.shape), origin='lower', extent=[x_grid.min(), x_grid.max(), y_grid.min(), y_grid.max()])\\nx0 = x_grid[50]\\ny0 = y_grid[50]\\npredJointX = joint_kde(np.array([[x0]]))\npredJointY = joint_kde(np.array([[y0]]))\\nplt.scatter(x0, y0, color='w')\\npredJointLine, = plt.plot([x0, predJointX], [y0, predJointY], 'w--')\\nplt.xlabel('x')\\nplt.ylabel('y')\\nplt.title('Joint KDE of x and y')\\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convolve an array with a kernel?"
      },
      {
        "from": "assistant",
        "value": "astropy.convolution.convolve(array, kernel, boundary='fill', fill_value=0, normalize_kernel=False, nan_treatment='fill', preserve_nan=False, mask=None, normalization_zero_tol=1e-8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the distance of a star from the Galactic center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Example data: RA/Dec coordinates for a star\nstar_coords = (10.0, 20.0)  # RA, Dec in degrees\n\nc = SkyCoord(ra=star_coords[0]*u.degree, dec=star_coords[1]*u.degree, frame='icrs')\n\ngalactic = c.transform_to('galactic')\n\ndistance = galactic.distance.value\n\nprint('Distance of the star from the Galactic center:', distance, 'pc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position angle between a star at (RA=12h34m56s, Dec=+45d21m12s) and a planet at (RA=12h35m10s, Dec=+45d20m45s)? Please provide the code using astropy's position_angle function."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both celestial bodies\nstar = SkyCoord('12h34m56s', '+45d21m12s', frame='icrs')\nplanet = SkyCoord('12h35m10s', '+45d20m45s', frame='icrs')\n\n# Calculate position angle between the two objects\n# position_angle() returns angle East of North in radians\npa = star.position_angle(planet)\n\n# Convert position angle to degrees for easier interpretation\npa_deg = pa.to(u.deg)\n\nprint(f'Position angle between star and planet: {pa_deg:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a PowerLaw1D model and tie the amplitude parameter to always be three times the value of alpha?"
      },
      {
        "from": "assistant",
        "value": "[docs here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a PowerLaw1D model and tie the amplitude parameter to always be 1.5 times the value of alpha?"
      },
      {
        "from": "assistant",
        "value": "[docs here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a PowerLaw1D model and set the amplitude parameter to 10.0, with no tie to alpha?"
      },
      {
        "from": "assistant",
        "value": "[docs here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a PowerLaw1D model and set the amplitude parameter to 5.0, with no tie to alpha, with a fixed x_0 of 3.0 keV?"
      },
      {
        "from": "assistant",
        "value": "[docs here]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a two-dimensional Gaussian model with astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\ncustom_modeldoc\"Custom two-dimensional Gaussian model\"\ndef two_dim_gaussian(x, y, amplitude=1.0, fwhm_x=1.0, fwhm_y=1.0):\n    \"\"\n    Custom two-dimensional Gaussian model\n    x: x-coordinate\n    y: y-coordinate\n    amplitude: amplitude\n    fwhm_x: full-width at half-maximum in x-direction\n    fwhm_y: full-width at half-maximum in y-direction\n    \"\"\n    return amplitude * np.exp(-(((x - 10) / fwhm_x) ** 2 + ((y - 10) / fwhm_y) ** 2))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the position of a star at a specific time and location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz, ICRS\nimport astropy.units as u\n\n# Define the star's position (example coordinates)\nstar = SkyCoord(ra=10*u.hour, dec=20*u.degree, frame=ICRS)\n\n# Define observer's location (example: Mauna Kea Observatory, Hawaii)\nobserver = EarthLocation(lat=19.8208*u.degree, lon=-155.4681*u.degree, height=4207*u.m)\n\n# Create a time object for the observation\nobservation_time = Time('2024-01-10 00:00:00')\n\n# Transform the star's position to the observer's location and time\naltaz = star.transform_to(AltAz(obstime=observation_time, location=observer))\n\n# Print the star's position in the AltAz frame\nprint(altaz)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert Kelvin to Celsius?"
      },
      {
        "from": "assistant",
        "value": "kelvin_to_celsius = lambda K: K - 273.15\nprint(kelvin_to_celsius(300))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula to calculate the distance from the sun to a planet?"
      },
      {
        "from": "assistant",
        "value": "def distance_to_sun(mass, radius, gravitational_constant=6.67430e-11):\n    return gravitational_constant * mass * radius\nprint(distance_to_sun(5.972e24, 6.371e6))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the energy of a photon?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndef photon_energy(frequency):\n    return 6.62607015e-34 * frequency\nprint(photon_energy(3e14))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Row object to access and manipulate individual rows in my table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\n\n# Create a table\nresources = Table(\n    [Row(['Pleiades', 'Hyades'], ['star cluster', 'star cluster']),\n     Row(['Ursa Major', 'Ursa Minor'], ['open cluster', 'open cluster'])],\n    names=('Name', 'Type'),\n    dtype=('S10', 'S10')\n)\n\n# Access a row by index\nprint(resources[0]['Name'])  # Output: Pleiades\n\n# Access a column by name\nprint(resources['Name'])\n\n# Change a value in a row\nresources[0]['Name'] = 'Pleiades Star Cluster'\nprint(resources)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to adjust the wavelength values in my spectroscopy model to account for the instrument's resolution. What's the code to scale the wavelength measurements using the calculated resolution?"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Multiply(factor=1.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to adjust the frequency values in my radio astronomy model to account for the antenna's gain. What's the code to scale the frequency measurements using the calculated gain?"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Multiply(factor=2.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to adjust the amplitude values in my electric field model to account for the propagation medium's impedance. What's the code to scale the amplitude measurements using the calculated impedance?"
      },
      {
        "from": "assistant",
        "value": "model = astropy.modeling.models.Multiply(factor=0.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the formation of planetary systems around young massive stars. How do I compute the position angle between one such star (RA=23.45678 deg, Dec=67.89012 deg) and a known protoplanetary disk (RA=23.56789 deg, Dec=68.12345 deg)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ncenter = SkyCoord(ra=23.45678*u.deg, dec=67.89012*u.deg)\ndisk = SkyCoord(ra=23.56789*u.deg, dec=68.12345*u.deg)\npa = center.position_angle(disk)\npa_deg = pa.to(u.deg)\nprint(f\"Position angle: {pa_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm investigating the orbital motion of exoplanets. How do I calculate the position angle between a host star (RA=12.34567 deg, Dec=54.32101 deg) and its exoplanet (RA=12.45678 deg, Dec=54.43213 deg)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nstar = SkyCoord(ra=12.34567*u.deg, dec=54.32101*u.deg)\nexoplanet = SkyCoord(ra=12.45678*u.deg, dec=54.43213*u.deg)\npa = star.position_angle(exoplanet)\npa_deg = pa.to(u.deg)\nprint(f\"Position angle: {pa_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the dynamics of galaxies in a cluster. How do I compute the position angle between the center of a galaxy (RA=13.56789 deg, Dec=76.23456 deg) and a nearby globular cluster (RA=13.67890 deg, Dec=76.34567 deg)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ngalaxy_center = SkyCoord(ra=13.56789*u.deg, dec=76.23456*u.deg)\nglobular = SkyCoord(ra=13.67890*u.deg, dec=76.34567*u.deg)\npa = galaxy_center.position_angle(globular)\npa_deg = pa.to(u.deg)\nprint(f\"Position angle: {pa_deg:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I generate an array of points in a cylindrical representation with rho=20 kpc, phi ranging from 0 to 360 degrees in 30-degree steps, and z=0 kpc?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation\nimport numpy as np\nfrom astropy import units as u  # Import astropy units\ncylinder = CylindricalRepresentation(\nrho=np.full(12, 20.0)*u.kpc,  # Add kpc unit\ncmp=np.deg2rad(np.arange(0, 360, 30))*u.rad,  # Add radian unit\ncz=np.full(12, 0.0)*u.kpc  # Add kpc unit\n)\ncylinder.print()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian model with a maximum value of 1.0 at position (100, 100) with a standard deviation of 10.0."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian2D\nimport numpy as np\n\n# Create Gaussian model\nmodel = Gaussian2D(amplitude=1.0, x_mean=100, y_mean=100, x_stddev=10.0, y_stddev=10.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance between two points on a 3D planetary coordinate system given only their x, y, z positions directly?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.coordinates import Distance\n\nc = Distance(10*u.pc)\ngenerate_distance = lambda x1, y1, z1, x2, y2, z2 : c \u662f astropy\u7684Distance\n                    \n# Example usage:\ngenerate_distance(1, 2, 3, 4, 5, 6)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show the biweight midvariance calculation on 500 randomly generated standard uniform distribution, using a tuning constant of 8 for scale estimation."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\n\n# Create a random variable with 500 points from a standard uniform distribution\nrandom_variable = np.random.uniform(-1, 1, 500)\n\n# Set custom tuning constant 8 for biweight scale estimation (default is 9.0)\nbivar = biweight_midvariance(random_variable, c=8.0)\n\n# Print the result\nprint(abs(bivar:.4f))\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the biweight midvariance of 2000 generated standard exponential distribution data points with a given scaling factor of 2 using vc parameters as"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\n\n# Create 2000 points with a scaling factor of 2 from standard exponential distribution\nrandom_variable = 2 * np.random.exponential(size=2000)\n\n# Biweight midvariance with std. exponential distribution\nc = 2 * 2 * np.sqrt(2 / (np.pi * 2 ** 3.5)) / 1.4826\nbivar = biweight_midvariance(random_variable)\nprint(bivar:.4f)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use modify_sample_size=True to calculate the robust dispersion for a single row in a data array [[3.1, 3.4, 3.2], [4.7, 4.9, 4.8]]. Show how to use biweight_midvariance to compute the variance along each row of measurements."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import biweight_midvariance\n\n\n# Create data array with rows of measurements\ndata = np.array([[3.1, 3.4, 3.2],\n                 [4.7, 4.9, 4.8]])\n\n# Set modify_sample_size to True for calculation of variance along rows\nexpectvariance = [1.5, 0.2]\nP = 3\nreducedvars = []\nfor var in expectvariance:\n    result = var**2\n    reducedvars.append(np.sqrt(bywt_midvariance(result, P, 3).flatten()[0]))\n# Result of variance calculation along rows\nassert reducedvars == [0.5,0.44616729185724964]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I print the summary information on a FITS file"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info('your_file.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default output of astropy.io.fits.info?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info('your_file.fits', output=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I print the summary information on a FITS file to a specific file?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info('your_file.fits', output='your_output_file.txt')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I align two tables based on a common column despite having different index names?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\n\ntable1 = Table({'star_id': [1, 2, 3], 'temp': [5000, 6000, 4500]} \u043c\u043d\u043e\u0433\u043e\nindex1 = table1['star_id']\n\ntable2 = Table({'id': [4, 5, 6], 'temp': [5200, 5800, 4700]}))*\nindex2 = table2['id']\n\n# Align the tables based on the 'temp' column\naligned_table = table1[table1['temp'] > 5500].merge(table2[table2['temp'] > 5500], join_type='inner', keys=['temp'])\n\nprint(aligned_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to open a FITS file using the `astropy.io.fits.open` function, but I want to disable image compression so that I can treat compressed HDUs as normal binary tables."
      },
      {
        "from": "assistant",
        "value": "fits.open('compressed.fits', mode='readonly', disable_image_compression=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I perform sigma clipping on my dataset?"
      },
      {
        "from": "assistant",
        "value": "From astropy.stats import sigma_clip\nsigma_clip(data, sigma=3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I download and use the de432s ephemeris?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.solar_system_ephemeris.set('de432s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of using the de440 ephemeris on Mercury's position?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.solar_system_ephemeris.set('de440')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a URL to download the de200 ephemeris?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.solar_system_ephemeris.set('https://naif.jpl.nasa.gov/pub/naif/generic_kernels/spk/planets/a_old_versions/de200.bsp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to write a specific column from an astropy table to a CSV file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport numpy as np\n\ntable = Table({'a': [1, 2, 3], 'b': [4, 5, 6]})\n\n# Write column 'a' to a CSV file\nimport csv\nwith open('column_a.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    for row in table['a']:\n        writer.writerow([row])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion from British thermal units (BTU) to Joules (J)?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Convert from BTU to J\nbtu_to_j = u.BTU.to(u.J)\nprint(btu_to_j)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of \u03c0 in CGS units?"
      },
      {
        "from": "assistant",
        "value": "It is approximately 3.14159"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a velocity of 10 m/s to cm/s?"
      },
      {
        "from": "assistant",
        "value": "You can use the conversion factor: 1 m/s = 100 cm/s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the value of the gravitational constant (G) in CGS units?"
      },
      {
        "from": "assistant",
        "value": "It is approximately 6.67430e-8 dyn cm^2/g^2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mass-energy equivalence in the context of nuclear reactions in the Sun?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nprint(const.c**2 * u.kg/u.g)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide a code snippet to convert between mass and energy for a particular stellar evolution stage?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nmass_deficit = 1*u.kg\nenergy_release = mass_deficit*const.c**2\nprint(energy_release.to(u.MeV))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy.io.guess_parse_str to convert between mass and energy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nfrom astropy.io import guess_parse_str\nequivalency = guess_parse_str(const.c**2*u.kg)\nprint(equivalency)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an opened FITS file handle and I want to extract the data from the HDU specified by 'image' EXTNAME and EXTVER=1 using astropy. Please include handling both the data and header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nopen(filename, 'rb')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an opened FITS file handle and I want to extract the data from the first extension HDU using astropy. Please include handling both the data and header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = open(filename, 'rb')\nhdul[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an opened FITS file handle and I want to extract the data from the HDU specified by EXTNAME='flux' using astropy. Please include handling both the data and header."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfitshandle[('flux')]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's Convolve1D and Convolve2D functions to apply a Gaussian or boxcar window to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.models import Convolve1D, Convolve2D\ndecode_result = Convolve1D/kernel=np.array([1, 2, 1])/Convolve1D(x=np.array([1, 2, 3]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Why do I need to use the asymmetric_model function in astropy's MLfit module to properly handle multiple local minima when doing Bayesian fitting of complex models to data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.MLfit.asymmetric_model; m = asymmetric_model/models\u662dl\u00ed\u010ddisp()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compare two sets of positive multinomial distributions using the astropy statistics.jb.npmultinomial.kl_div as a measure of the relative difference?"
      },
      {
        "from": "assistant",
        "value": "from astropy import statistics\ndst = statistics.kl_div(astropy.models.distributions.positive_multinomial(x=([1, 0, 1, 1, 0] * np.inf), n=2, p=[1/3, 4/3, 1/3]), astropy.models.distributions.positive_multinomial(x=[1, 2, 3], n=2, p=[1/3, 4/3, 1/3]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the radial velocity curve of a binary star system using a Gaussian model. How can I create and fit an appropriate model to my observational data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Generate sample observational data (replace with real data)\n# Radial velocities (in km/s)\nr_data = np.linspace(0, 50, 100) * u.km/u.s\n# Sample radial velocities with some noise (in km/s)\nrv_data = np.sin(2*np.pi*r_data.value/10) + np.random.normal(0, 1, 100)\n\n# Create a Gaussian model for radial velocity curve\n# rv(t) = a * exp( - (t - t0)^2 / (2 * sig^2))\ngaussian_model = models.Gaussian1D(\n    amp=10, mean=25, sigma=5, x_unit=u.km/u.s\n)\n\n# Initialize the fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# Note: removing units for fitting process\nfitted_model = fitter(gaussian_model, r_data.value, rv_data)\n\n# Calculate predicted radial velocities using fitted model\nrv_predicted = fitted_model(r_data.value)\n\n# Print model parameters\nprint(\"Fitted model parameters: \")\nfor i, coef in enumerate(fitted_model.parameters):\n    print(f\"Coefficient {i}: {coef:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the luminosity curve of a variable star using a sinusoidal model. How can I create and fit an appropriate model to my observational data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Generate sample observational data (replace with real data)\n# Time points (in days)\nt_data = np.linspace(0, 100, 200) * u.day\n# Sample luminosities with some noise (in flux units)\nlumi_data = np.sin(2*np.pi*t_data.value/10) + np.random.normal(0, 0.1, 200)\n\n# Create a sinusoidal model for luminosity curve\n# lumi(t) = a * sin(2 * pi * t / P) + c\nsinusoidal_model = models.Sine1D(\n    amp=0.5, period=10, offset=0.5, x_unit=u.day\n)\n\n# Initialize the fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# Note: removing units for fitting process\nfitted_model = fitter(sinusoidal_model, t_data.value, lumi_data)\n\n# Calculate predicted luminosities using fitted model\nlumi_predicted = fitted_model(t_data.value)\n\n# Print model parameters\nprint(\"Fitted model parameters: \")\nfor i, coef in enumerate(fitted_model.parameters):\n    print(f\"Coefficient {i}: {coef:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model the flux curve of a binary star system using a polynomial model. How can I create and fit an appropriate model to my observational data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Generate sample observational data (replace with real data)\n# Time points (in days)\nt_data = np.linspace(0, 100, 200) * u.day\n# Sample fluxes with some noise (in flux units)\nflux_data = 10 + 5 * np.sin(2*np.pi*t_data.value/10) + np.random.normal(0, 0.1, 200)\n\n# Create a polynomial model for flux curve\n# flux(t) = a + b*t + c*t^2\npolynomial_model = models.Polynomial1D(degree=2)\n\n# Initialize the fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# Note: removing units for fitting process\nfitted_model = fitter(polynomial_model, t_data.value, flux_data)\n\n# Calculate predicted fluxes using fitted model\nflux_predicted = fitted_model(t_data.value)\n\n# Print model parameters\nprint(\"Fitted model parameters: \")\nfor i, coef in enumerate(fitted_model.parameters):\n    print(f\"Coefficient {i}: {coef:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured quantity that represents the orbital period and orbital distance of a binary star system, with the orbital period being 10 days and the orbital distance being 100 million kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.cosmology import Planck18, z_at_value\nimport numpy as np\n\n# Create a structured quantity for the binary star system properties\ndt = 10 * u.day\na = 100e6 * u.km\n\n# Create a structured quantity combining both measurements\nstar_system_properties = u.Quantity([(dt.value, a.value)], dtype=[('orbital_period', float), ('orbital_distance', float)], unit=u.day)\n\n# Print the structured quantity\nprint(\"Binary Star System Properties:\")\nprint(f\"Orbital Period: {star_system_properties['orbital_period'][0]:.0f} days\")\nprint(f\"Orbital Distance: {star_system_properties['orbital_distance'][0]:.0f} km\")\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 3 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Trapezoid1D\n\n# Create parameters\namp = [0.2, 0.5, 0.8]\nwidth = [1, 2, 3]\nslope = [0.1, 0.2, 0.3]\nx = np.linspace(-5, 5, 100)\n\n# Create trapezoid profiles\nprofiles = [Trapezoid1D(amplitude=a, width=w, slope=s)(x) for a, w, s in zip(amp, width, slope)]\n\n# Combine the profiles\ncombined_spectrum = np.sum(profiles, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of star catalog data with magnitudes in various filters. Can you show me how to create a histogram of the magnitude distribution using Bayesian blocks with log-scaled axes and a blue color scheme?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.hist(x=magnitudes, bins='blocks', ax=ax, color='blue', log=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Gaussian kernel with sigma=12 and force size to 70x70 pixels"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nkernel = Gaussian2DKernel(x_stddev=12, y_stddev=12, x_size=70, y_size=70)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star cluster image and need to apply an elliptical filter."
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.convolution import EllipticalKernel\n\n# Create a 2D elliptical kernel\n# a=5: semi-major axis\n# b=3: semi-minor axis\nek = EllipticalKernel(a=5, b=3)\n\n# Create a figure and plot the kernel\nc import matplotlib.pyplot as plt\nplt.figure(figsize=(8, 8))\nplt.imshow(ek.array, origin='lower', cmap='viridis')\nplt.colorbar(label='Kernel Value')\nplt.title('2D Elliptical Kernel (a=5, b=3)')\nplt.xlabel('Pixel')\nplt.ylabel('Pixel')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star cluster image and need to apply a Ricker wavelet filter. What is the difference between a Ricker wavelet and a Gaussian filter?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy and matplotlib\nfrom astropy.convolution import RickerWavelet2DKernel\nimport matplotlib.pyplot as plt\n\nt = RickerWavelet2DKernel(40)\nplt.imshow(t, interpolation='none', origin='lower')\nplt.xlabel('x [pixels]')\nplt.ylabel('y [pixels]')\nplt.colorbar()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a star cluster image and need to apply a Moffat filter. What is the difference between a Moffat filter and a Gaussian filter?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy and matplotlib\nfrom astropy.convolution import Moffat2DKernel\nimport matplotlib.pyplot as plt\n\nt = Moffat2DKernel(40)\nplt.imshow(t, interpolation='none', origin='lower')\nplt.xlabel('x [pixels]')\nplt.ylabel('y [pixels]')\nplt.colorbar()\nplt.show()}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a table with a single column of numbers from 0 to 9?"
      },
      {
        "from": "assistant",
        "value": "tbl = Table({'col1': np.arange(10)})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a table with two columns of random numbers?"
      },
      {
        "from": "assistant",
        "value": "tbl = Table({'col1': np.random.random(10), 'col2': np.random.random(10)})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to add a column to an existing table?"
      },
      {
        "from": "assistant",
        "value": "tbl.add_column('col3', np.random.random(10))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the most up-to-date JPL ephemeris for precision calculations?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('de441')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set the ephemeris to use the 'builtin' polynomial approximations?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('builtin')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you configure the ephemeris to use the JPL ephemeris 'de432s' for the next calculation?"
      },
      {
        "from": "assistant",
        "value": "solar_system_ephemeris.set('de432s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the distance of a star with a parallax of 1.23 mas?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\nfrom astropy.coordinates import Distance\n\n# Define the parallax\nparallax = 1.23 * u.mas\n\n# Calculate the distance\ndistance = Distance(parallax=parallax)\n\n# Print the distance\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 50x50 pixel cutout of the image data from a 1024x1024 pixel array without copying the data"
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data, (512, 512), (50, 50), mode='trim', copy=False)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Extract a 100x200 pixel region from a 1024x1024 pixel image array at position (300, 200)."
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data, (300, 200), (100, 200))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 200x300 pixel cutout of the image data from a 1024x1024 pixel array with a WCS object associated with it."
      },
      {
        "from": "assistant",
        "value": "cutout = Cutout2D(data, (512, 512), (200, 300), wcs=wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform a chi-squared minimization to find the best-fit parameters for my observed data?"
      },
      {
        "from": "assistant",
        "value": "from scipy.optimize import minimize\nfrom scipy.stats import chisquared_minimize\n\n# Define the model function\ndef model(params, x, y):\n    # Please implement your model function here\n    pass\n\n# Define the chi-squared function\ndef chi2(params, x, y):\n    return chisquared_minimize(model(params, x, y), y)\n\n# Initial guess for the parameters\nparams0 = [1, 2, 3]\n\n# Minimize the chi-squared\ndef minimize_chi2(params):\n    return chi2(params, x, y)\n\n# Perform the minimization\nresult = minimize(minimize_chi2, params0)\n\nprint(result.params)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a face-on disk galaxy using a 2D de Vaucouleurs profile for your research on galaxy morphology. How can you model this profile and visualize it with a logarithmic scale?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np \n from astropy.modeling import custom_model \n from astropy.visualization import LogStretch \n import matplotlib.pyplot as plt \n \n # Create a custom 2D de Vaucouleurs model using decorator \n @custom_model \n def DeVaucouleurs2D(x, y, amplitude=1.0, x_0=0.0, y_0=0.0, r_eff=1.0): \n QVariant:\n     \n         r = np.sqrt((x - x_0)**2/r_eff**2 + (y - y_0)**2/r_eff**2) \n         return amplitude * np.exp(-np.power(r, 4)) \n \n # Create a 2D grid for the galaxy model \n size = 100 \n y, x = np.mgrid[-size:size+1, -size:size+1] \n \n # Define de Vaucouleurs disk parameters \n scale_length = 20  # Scale length in pixels \n amplitude = 1.0    # Central brightness \n \n # A value of 4 is equivalent to de Vaucouleurs profile \n # Create and evaluate the model correctly \n de_Vaucouleurs_model = Sersic2D(amplitude=amplitude, r_eff=20, n=4, x_0=0, y_0=0) \n galaxy = de_Vaucouleurs_model(x, y)  # Now only passing x and y coordinates \n \n # Create visualization\n plt.figure(figsize=(8, 8)) \n \n # Apply log stretch to better show the brightness distribution \n stretch = LogStretch(a=1000)  # 'a' parameter controls the stretch \n galaxy_stretched = stretch(galaxy / np.max(galaxy))  # Normalize and stretch \n \n # Plot the galaxy model\n plt.imshow(galaxy_stretched, cmap='viridis', origin='lower', \n           extent=[-size, size, -size, size]) \n plt.colorbar(label='Log Normalized Brightness') \n plt.xlabel('X (pixels)') \n plt.ylabel('Y (pixels)') \n plt.title('Face-on de Vaucouleurs Disk Galaxy') \n plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to display a 512x512 radio intensity map with values between -0.1 and 10 Jy/beam using imshow_norm with a linear stretch and 'inferno' colormap?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LinearStretch\nimport matplotlib.pyplot as plt\n\n# Create sample data (replace this with your actual data)\ndata = np.random.uniform(-0.1, 10, (512, 512))\n\n# Create normalization object with LinearStretch\nnorm = ImageNormalize(data, stretch=LinearStretch(),\n                         vmin=-0.1, vmax=10)\n\n# Create the figure and display the image\nfig, ax = plt.subplots()\nim = ax.imshow(data, norm=norm, cmap='inferno')\n\n# Add colorbar with proper units\ncbar = plt.colorbar(im, ax=ax, label='Flux Density (Jy/beam)')\n\n# Set title and display\nplt.title('Radio Intensity Map')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to display a 1024x1024 radio intensity map with values between -0.1 and 10 Jy/beam using imshow_norm with a log stretch and 'plasma' colormap?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LogStretch\nimport matplotlib.pyplot as plt\n\n# Create sample data (replace this with your actual data)\ndata = np.random.uniform(-0.1, 10, (1024, 1024))\n\n# Create normalization object with LogStretch\nnorm = ImageNormalize(data, stretch=LogStretch(),\n                         vmin=-0.1, vmax=10)\n\n# Create the figure and display the image\nfig, ax = plt.subplots()\nim = ax.imshow(data, norm=norm, cmap='plasma')\n\n# Add colorbar with proper units\ncbar = plt.colorbar(im, ax=ax, label='Flux Density (Jy/beam)')\n\n# Set title and display\nplt.title('Radio Intensity Map')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to display a 2048x2048 radio intensity map with values between -0.1 and 10 Jy/beam using imshow_norm with a power-law stretch and 'cividis' colormap?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, PowerStretch\nimport matplotlib.pyplot as plt\n\n# Create sample data (replace this with your actual data)\ndata = np.random.uniform(-0.1, 10, (2048, 2048))\n\n# Create normalization object with PowerStretch\nnorm = ImageNormalize(data, stretch=PowerStretch(0.5),\n                         vmin=-0.1, vmax=10)\n\n# Create the figure and display the image\nfig, ax = plt.subplots()\nim = ax.imshow(data, norm=norm, cmap='cividis')\n\n# Add colorbar with proper units\ncbar = plt.colorbar(im, ax=ax, label='Flux Density (Jy/beam)')\n\n# Set title and display\nplt.title('Radio Intensity Map')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert cartesian coordinates to spherical polar coordinates?"
      },
      {
        "from": "assistant",
        "value": "{\"r\": 1, 'lat': .5, 'lon': .2}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use astropy.coordinates.spherical_to_cartesian?"
      },
      {
        "from": "assistant",
        "value": "{\"r\": 10, \u2018lat\u2019: np.pi/2, \u2019lon\u2019: np.pi/4}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the circular mean of the polarization angles [22.5, 45.0, 67.5, 90.0, 112.5] degrees."
      },
      {
        "from": "assistant",
        "value": "[51, 67, 40, 109, 31, 358]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Calculate the circular mean of the polarization angles [134.5, 157.0, 179.5, 202.0, 225.5] degrees."
      },
      {
        "from": "assistant",
        "value": "[134.5, 157.0, 179.5, 202.0, 225.5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compute the circular mean of the polarization angles [46.5, 71.0, 96.5, 121.0, 145.5] degrees."
      },
      {
        "from": "assistant",
        "value": "[46.5, 71.0, 96.5, 121.0, 145.5]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a FITS image from a 2D numpy array. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimage_hdu = fits.ImageHDU(data=np.array([[1, 2], [3, 4]]))\nimage_hdu.writeto('image.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Sun's position at midnight UTC on the summer solstice in 2024?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, SkyCoord\nfrom astropy.time import Time\nimport numpy as np\ndate = '2024-06-20 00:00:00'\ntime = Time(date, format='iso', scale='utc')\nsun = get_sun(time)\nprint(sun.ra, sun.dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to define a unit called \"gigasec\" that equals 1e+9 seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.def_unit(\"gigasec\", 1e+9 * u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to define a unit called \"microfarad\" that equals 0.000001 farads."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.def_unit(\"microfarad\", 1e-6 * u.F)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to define a unit called \"terahertz\" that equals 1e+12 1/s."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.def_unit(\"terahertz\", 1e+12 / u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a sinusoidal variation with amplitude=0.05 days, frequency=1/10 day^-1, and phase=0.5. Evaluate the model for times between 0 and 100 days with 1-day steps."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ntime = np.arange(0, 101, 1)\nsine_model = models.Sine1D(amplitude=0.05, frequency=1/10, phase=0.5)\ntransit_timing_variation = sine_model(time)\nprint(f\"TTV at day 0: {transit_timing_variation[0]:.6f} days\")\nprint(f\"TTV at day 10: {transit_timing_variation[10]:.6f} days\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a position in the galactic frame to ICRS (ra and dec) for the star HIP 12345, give me the formula and use the astropy library."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc=SkyCoord(l=90, b=0, distance=10*u.kpc, frame='galactic')\nicrs_coords = c.transform_to('icrs')\nicrs_ra, icrs_dec = icrs_coords.ra.degree, icrs_coords.dec.degree"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a sky coordinate from ra and dec in hours and degrees respectively, using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=12, dec=30, unit=(u.hourangle, u.deg))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you transform the coordinate of the North Celestial Pole from FK5 to B1950?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ncmp = SkyCoord(ra=12, dec=90, unit=(u.hourangle, u.deg), frame='fk5')\nccmp_b1950 = cmp.transform_to('b1950')\nra_b1950 = ccmp_b1950.ra.degree\ndec_b1950 = ccmp_b1950.dec.degree"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a string representing a date in the format 'YYYY-MM-DD HH:MM:SS.sss...' to an astropy.time.Time object?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nTime('2022-07-25 14:30:00.123')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the ISO 8601 compliant date-time format?"
      },
      {
        "from": "assistant",
        "value": "The ISO 8601 compliant date-time format is 'YYYY-MM-DD HH:MM:SS.sss...'. For example, 2000-01-01 00:00:00.000 is midnight on January 1, 2000."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the allowed subformats for the date-time string?"
      },
      {
        "from": "assistant",
        "value": "The allowed subformats are 'date_hms', 'date_hm', and 'date'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a cosine model with a specific phase shift to match the observed orbital motion of a binary star system?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the Cosine1D model to fit a set of data points?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Cosine1D"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the parameters that can be optimized during the fitting process for the Cosine1D model?"
      },
      {
        "from": "assistant",
        "value": "print(Cosine1D.__init__.__code__.co_varnames[1:]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat1D instance with initial parameters (amplitude=1.0, x_0=5000, gamma=1.0, alpha=1.0) and set bounds for the amplitude between 0 and 5."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create Moffat1D model with initial parameters\nmoffat = models.Moffat1D(\n    amplitude=1.0,  # Initial peak amplitude\n    x_0=5000.0,     # Initial center wavelength (e.g., a emission line)\n    gamma=1.0,      # Initial core width parameter\n    alpha=1.0       # Initial power index parameter\n)\n\n# Set bounds for amplitude parameter (0 to 5)\nmoffat.amplitude.bounds = (0, 5)\n\n# Example: Generate sample data points to demonstrate the model\nx = np.linspace(4950, 5050, 100)  # Wavelength array\ny = moffat(x)  # Evaluate model at these points\n\n# Note: To fit real data, you would use:\n# fitter = fitting.LevMarLSQFitter()\n# fitted_model = fitter(moffat, x_data, y_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the position of a star in Ecliptic coordinates given its position in ICRS coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Ecliptic\ndef icrs_to_ecliptic(icrs_coord):\n    ecliptic_coord = icrs_coord transformationto(Ecliptic)\n    return ecliptic_coord\necliptic_coord = icrs_to_ecliptic(icrs_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a celestial object's position from RA and DEC to Galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS, Galactic\ndef ra_dec_to_galactic(ra, dec):\n    icrs_coord = SkyCoord(ra=ra, dec=dec, frame=ICRS)\n    galactic_coord = icrs_coord.transform_to(Galactic)\n    return galactic_coord\ngalactic_coord = ra_dec_to_galactic(ra, dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I find the distance between two celestial objects in the same celestial frame?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS, distance\ndef distance_between_objects(coord1, coord2):\n    return coord2.separation(coord1)\ndistance = distance_between_objects(coord1, coord2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing optical data from Hubble with flux values ranging from 10^-2 to 10^-7 erg/s/cm^2. Can you show me how to apply a logarithmic stretch with a=2000 to make the faint sources more visible in my visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch\nimport numpy as np\n\ndata = np.random.uniform(low=1e-8, high=1e-2, size=(100, 100))\nlog_stretch = LogStretch(a=2000)\nstretched_data = log_stretch(data)\nnormalized_data = (stretched_data - stretched_data.min()) / (stretched_data.max() - stretched_data.min())\n# The stretched_data or normalized_data can now be used with your preferred plotting library (e.g., matplotlib) for visualization"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing UV data from Swift with flux values ranging from 10^-1 to 10^-6 erg/s/cm^2. Can you show me how to apply a logarithmic stretch with a=8000 to make the faint sources more visible in my visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch\nimport numpy as np\n\ndata = np.random.uniform(low=1e-8, high=1e-1, size=(100, 100))\nlog_stretch = LogStretch(a=8000)\nstretched_data = log_stretch(data)\nnormalized_data = (stretched_data - stretched_data.min()) / (stretched_data.max() - stretched_data.min())\n# The stretched_data or normalized_data can now be used with your preferred plotting library (e.g., matplotlib) for visualization"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing gamma-ray data from Fermi with flux values ranging from 10^0 to 10^-5 erg/s/cm^2. Can you show me how to apply a logarithmic stretch with a=12000 to make the faint sources more visible in my visualization?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch\nimport numpy as np\n\ndata = np.random.uniform(low=1e-8, high=10**0, size=(100, 100))\nlog_stretch = LogStretch(a=12000)\nstretched_data = log_stretch(data)\nnormalized_data = (stretched_data - stretched_data.min()) / (stretched_data.max() - stretched_data.min())\n# The stretched_data or normalized_data can now be used with your preferred plotting library (e.g., matplotlib) for visualization"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the age of the universe in years?), "
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.age(0).to('year').value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What distance is 10 million light years in this cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.luminosity_distance(10*u.Mpc).to('Mpc').value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the critical density of Planck18 cosmology?"
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import Planck18\nPlanck18.critical_density(0).value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the nearest on-sky matches of a set of catalog coordinates"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.match_coordinates_sky"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a Moffat model with adjustable width and amplitude to simulate different phases of variability in a star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting import numpy as np # Create a sample coordinate grid (e.g., 100x100 pixels) y, x = np.mgrid[-50:51, -50:51] # Initialize Moffat1D model with parameters: # amplitude: peak intensity # x_0: center position # gamma: core width # alpha: power index moffat_model = models.Moffat1D(amplitude=10.0, x_0=0.0, gamma=5.0, alpha=2.5) # Generate the Moffat profile moffat_data = moffat_model(x, y) # To simulate variable brightness, you can adjust amplitude: bright_phase = moffat_model.copy() bright_phase.amplitude = 15.0 # Brighter state dim_phase = moffat_model.copy() dim_phase.amplitude = 5.0 # Dimmer state # Generate profiles for different phases bright_data = bright_phase(x, y) dim_data = dim_phase(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Extract the science data and header from a FITS file's SCIENCE extension using astropy's fits module"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\ndef read_science_extension(fits_file):\n    # ... (same code as in the example usage)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I implement a Gaussian  filter to reduce noise in my images?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve\nimport numpy as np\ndef gaussian_filter(data, sigma=1):\n    \"\"\"Apply Gaussian filter to image data.\n\n    Parameters:\n    data : 2D numpy array\n        Input image data\n    sigma : float\n        Standard deviation of the Gaussian kernel\n\n    Returns:\n    2D numpy array of filtered image data\n    \"\"\"\n    # Create a 2D Gaussian kernel for filtering\n    kernel = Gaussian2DKernel(stddev=sigma)\n\n    # Apply convolution with edge handling\n    filtered_data = convolve(data, kernel, boundary='extend')\n\n    return filtered_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is an example of using the astropy.convolution.Box2DKernel function to create a custom box filter?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\ndef custom_box_filter(data, width=5):\n    \"\"\"Apply custom box filter to image data.\n\n    Parameters:\n    data : 2D numpy array\n        Input image data\n    width : int\n        Width of the box filter kernel\n\n    Returns:\n    2D numpy array of filtered image data\n    \"\"\"\n    # Create a 2D box kernel for filtering\n    kernel = Box2DKernel(width)\n\n    # Apply convolution with edge handling\n    filtered_data = convolve(data, kernel, boundary='extend')\n\n    return filtered_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using the astropy.convolution.Box2DKernel function to create a box filter with a non-default kernel mode?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\ndef non_default_box_filter(data, width=5, mode='center'):\n    \"\"\"Apply box filter with non-default kernel mode to image data.\n\n    Parameters:\n    data : 2D numpy array\n        Input image data\n    width : int\n        Width of the box filter kernel\n    mode : str\n        Kernel mode (default: 'linear_interp')\n\n    Returns:\n    2D numpy array of filtered image data\n    \"\"\"\n    # Create a 2D box kernel for filtering with non-default mode\n    kernel = Box2DKernel(width, mode=mode)\n\n    # Apply convolution with edge handling\n    filtered_data = convolve(data, kernel, boundary='extend')\n\n    return filtered_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the distribution of galaxy angular distances. Could you show me how to determine an optimal bin size using Scott's method and then create a properly binned histogram?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import scott_bin_width\nimport matplotlib.pyplot as plt\n\n# Generate sample angular distance data (normally this would be your actual data)\nnp.random.seed(42)  # For reproducibility\nangular_distances = np.random.normal(10, 5, 500)  # Mean=10, std=5\nangular_distances = np.clip.angular_distances, 0, 100)  # Clip to desired range\n\n# Calculate optimal bin width using Scott's rule\noptimal_width = scott_bin_width.angular_distances\n# Calculate number of bins based on data range and optimal width\nn_bins = int(np.ceil((angular_distances.max() - angular_distances.min()) / optimal_width))\n\n# Create and plot histogram\nplt.figure(figsize=(10, 6))\nplt.hist(angular_distances, bins=n_bins, edgecolor='black', alpha=0.7)\nplt.xlabel('Angular Distance')\nplt.ylabel('Number of Galaxies')\nplt.title(f'Galaxy Angular Distance Distribution\\n(Scott bin width: {optimal_width:.3f})')\nplt.grid(True, alpha=0.3)\nplt.show()\n\n# Print statistics\nprint(f'Number of bins: {n_bins}')\nprint(f'Bin width: {optimal_width:.3f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to model a signal with a trapezoidal shape, how can I use Astropy's Trapezoid1D model?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\ntrapezoid_model = models.Trapezoid1D(amplitude=1.0, x_0=0.0, width=1.0, slope=1.0)\n\nx = np.linspace(-5, 5, 100)\nnoise = np.random.normal(0, 0.1, len(x))\nsignal = trapezoid_model(x) + noise\n\nfitter = fitting.LevMarLSQFitter()\nresult = fitter(trapezoid_model, x, signal)\nprint(result.params)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the beta decay of Cobalt-60. What's the best way to handle time conversion from the lab to the data center using TimezoneInfo?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm comparing the sun's rise and set times between New York (UTC-5) and London (UTC+0). How do I use TimezoneInfo to handle both time zones?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm calculating the orbital period of a Mars rover. What's the best way to handle time conversion from the rover's location to Earth using TimezoneInfo?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Astropy library to convert a CSV file to a fits table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport pandas as pd\ncsv_file = 'your_file.csv'\nfits_file = 'your_file.fits'\ntable = Table.from_pandas(pd.read_csv(csv_file))\ntable.write(fits_file, overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the precession of a star's coordinates from epoch J2000.0 to J2015.0 using the Astropy library."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5, PrecessedGeocentric\nfrom astropy.time import Time\n\ndata = SkyCoord(ra='12h30m00s', dec='+45d00m00s', frame=FK5(equinox='J2000.0'))\n\ntarget_equinox = Time('J2015.0')\nprecessed_data = PrecessedGeocentric(data, obstime=Time('2010-01-01'), equinox=target_equinox)\n\nprint(precessed_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the exponential distribution of the data [1.2, 2.1, 3.5, 2.8, 1.5] using astropy.stats.kuiper?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import kuiper from scipy.stats import expon def exp_cdf(x, mean=2.5): return expon.cdf(x, loc=0, scale=mean) periods = np.array([1.2, 2.1, 3.5, 2.8, 1.5]) statistic, p_value = kuiper(periods, exp_cdf) print(f\"Kuiper test statistic: {statistic:.4f}\") print(f\"P-value: {p_value:.4f}\") print(f\"Reject H0 at 5% significance: {p_value < 0.05}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing radio data from VLA telescope with values between 1e-5 and 1e1. Show me how to combine AsinhStretch(a=2.0) with astropy's ImageNormalize to properly scale these values for display."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, AsinhStretch\nimport numpy as np\n\ndata = np.random.uniform(1e-5, 1e1, size=(100, 100))\nnorm = ImageNormalize(\ndata, stretch=AsinhStretch(a=2.0), vmin=1e-5, vmax=1e1, clip=True)\nscaled_data = norm(data)\nscaled_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing X-ray data from XMM-Newton telescope with values between 1e-4 and 1e3. Show me how to combine PowerStretch(a=4.0) with astropy's ImageNormalize to properly scale these values for display."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, PowerStretch\nimport numpy as np\n\ndata = np.random.uniform(1e-4, 1e3, size=(100, 100))\nnorm = ImageNormalize(\ndata, stretch=PowerStretch(a=4.0), vmin=1e-4, vmax=1e3, clip=True)\nscaled_data = norm(data)\nscaled_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm processing gamma-ray data from Fermi telescope with values between 1e-6 and 1e4. Show me how to combine AsinhStretch(a=3.0) with astropy's ImageNormalize to properly scale these values for display."
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, AsinhStretch\nimport numpy as np\n\ndata = np.random.uniform(1e-6, 1e4, size=(100, 100))\nnorm = ImageNormalize(\ndata, stretch=AsinhStretch(a=3.0), vmin=1e-6, vmax=1e4, clip=True)\nscaled_data = norm(data)\nscaled_data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to write code to compute the position angle between a pulsar's current position (lon=100.0 deg, lat=30.0 deg) and its expected birth location (lon=101.2 deg, lat=28.2 deg). Can you show me how to do this with Astropy's position_angle function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\ncurrent_pos = SkyCoord(l=100.0*u.deg, b=30.0*u.deg, frame='galactic')\nbirth_pos = SkyCoord(l=101.2*u.deg, b=28.2*u.deg, frame='galactic')\npos_angle = current_pos.position_angle(birth_pos)\nprint(f\"Position angle between pulsar positions: {pos_angle.to(u.deg):.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert pressure readings from one unit to another?"
      },
      {
        "from": "assistant",
        "value": "Use the astropy.units package to convert between pressure units."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the best way to convert time intervals between different units?"
      },
      {
        "from": "assistant",
        "value": "Use the astropy.time package to convert between time units."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert volume measurements between different units?"
      },
      {
        "from": "assistant",
        "value": "Use the astropy.units package to convert between volume units."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2x2 array [[110,111],[112,113]] representing a small CCD image in electron counts. I want to create a CCDData object with a quality flag array where values above 112 are flagged as saturated."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\ndata = np.array([[110, 111], [112, 113]])\nmask = data > 112\nccd = CCDData(data=data, unit='electron', mask=mask)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 3x3 array [[120,121,122],[123,124,125],[126,127,128]] representing a small CCD image in photon counts. I want to create a CCDData object with a mask where values below 123 are masked."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\ndata = np.array([[120, 121, 122], [123, 124, 125], [126, 127, 128]])\nmask = data < 123\nccd = CCDData(data=data, unit='photon', mask=mask)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2x2 array [[130,131],[132,133]] representing a small CCD image in counts. I want to create a CCDData object with a flag frame where values greater than 132 are marked as saturated."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.nddata import CCDData\nfrom astropy import units as u\ndata = np.array([[130, 131], [132, 133]])\nflags = np.zeros_like(data, dtype=bool)\nflags[data > 132] = True\nccd = CCDData(data=data, unit='count', flags=flags)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy's BlackBody model to calculate the energy flux of a blackbody at different wavelengths for a given temperature?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.modeling.models import BlackBody\n\n# Define temperature and wavelength arrays\ntemperature = 5000 * u.K\nwavelengths = np.logspace(3, 6, 100) * u.m\n\n# Create BlackBody model instance\nbb = BlackBody(temperature=temperature)\n\n# Calculate energy flux\nenergy_flux = bb(wavelengths)\n\n# Print energy flux\nprint(energy_flux)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm looking for an alternative to drizzling for reducing the noise in my data. How can I use an optimal franctional rebinning algorithm for this purpose?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval, ImageNormalize, LinearStretch\nfrom astropy.io import ascii\nimport numpy as np\n\ndef rebinned_data(data, scale=2):\n    # Create normalizer objects with linear stretches\n    interval = MinMaxInterval(1, scale)\n    norm = ImageNormalize(data, interval=interval, stretch=LinearStretch())\n    return norm(data)\n\n# Example usage:\n# rebinned_data(original_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you help me convert these coordinates from FK4 to ICRS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, SkyCoord\\nfrom astropy.time import Time\\nimport astropy.units as u\\n\\nold_coords = SkyCoord(\\n    '12h30m00s +45d00m00s',\\n    frame=FK4,\\nequinox='B1950'\\n)\\n\\ncurrent_coords = old_coords.transform_to('icrs')\\n\\nprint(current_coords.ra, current_coords.dec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert the mass of the sun to its equivalent energy in joules."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Get sun mass and speed of light\nc = const.c\nsun_mass = const.M_sun\n\n# Calculate energy using E = mc\u00b2\ncialementary_energy = sun_mass * c**2\n\n# Convert to joules\nprint(f'Sun mass energy: {elementary_energy:.2f} J')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert the mass of the earth to its equivalent energy in kilogram-meters squared per second squared."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Get earth mass and speed of light\nc = const.c\terth_mass = const.M_earth\n\n# Calculate energy using E = mc\u00b2\ncialementary_energy = earth_mass * c**2\n\n# Convert to kilogram-meters squared per second squared\nprint(f'Earth mass energy: {elementary_energy:.2f} kg m^2 s^-2')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert the rest mass of a proton to its equivalent energy in MeV."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\n\n# Get proton rest mass and speed of light\nc = const.c\nproton_mass = const.m_p\n\ncalculate energy using E = mc\u00b2\ncialementary_energy = proton_mass * c**2\n\n# Convert to MeV\nelementary_energy_mv = elementary_energy.to(u.MeV)\n\nprint(f'Proton rest mass energy: {elementary_energy_mv:.2f} MeV')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom attribute class to store the number of significant sources."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nimport numpy as np\nclass SignificantSources:\n    def __init__(self):\n        self._default = None\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return len(instance[instance['significance'] > instance.meta.get('sig_threshold', self._default)])\n\n    def __set__(self, instance, value):\n        if instance is None:\n            return\n        instance.meta['significant_sources'] = value\n\nTable.significant_sources = TableAttribute(default=0)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom attribute class to store the average significance of significant sources."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nimport numpy as np\nclass AverageSignificance:\n    def __init__(self):\n        self._default = None\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        significant_sources = instance[instance['significance'] > instance.meta.get('sig_threshold', self._default)]\n        if len(significant_sources) > 0:\n            return np.mean(significant_sources['significance'])\n        else:\n            return None\n\n    def __set__(self, instance, value):\n        if instance is None:\n            return\n        instance.meta['average_significance'] = value\nTable.average_significance = TableAttribute(default=None)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom attribute class to store the maximum significance of significant sources."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nclass MaximumSignificance:\n    def __init__(self):\n        self._default = None\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        significant_sources = instance[instance['significance'] > instance.meta.get('sig_threshold', self._default)]\n        if len(significant_sources) > 0:\n            return np.max(significant_sources['significance'])\n        else:\n            return None\n\n    def __set__(self, instance, value):\n        if instance is None:\n            return\n        instance.meta['maximum_significance'] = value\nTable.maximum_significance = TableAttribute(default=None)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a mass of 1000 kilograms to grams."
      },
      {
        "from": "assistant",
        "value": "mass_in_grams = 1000 * u.kg.to(u.g)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a velocity of 500 meters per second to kilometers per second?"
      },
      {
        "from": "assistant",
        "value": "velocity_in_kms = 500 * u.m/u.s.to(u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert a distance of 2000 astronomical units to parsecs?"
      },
      {
        "from": "assistant",
        "value": "distance_in_pc = 2000 * u.au.to(u.pc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Analyzing the mean of nine T Tauri stars with ages between 1 and 10 million years. I need to calculate the bias-corrected jackknife estimate of the mean and its bias."
      },
      {
        "from": "assistant",
        "value": "np.mean(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "The distribution of the H-alpha equivalent widths (\u00c5) for 12 T Tauri stars, with values between 10 and 100 Angstroms. Can you perform a jackknife estimation on the basis of jackknife resamples to estimate the mean of the first two elements of the sample?"
      },
      {
        "from": "assistant",
        "value": "np.mean(data[:2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "The bias-corrected jackknife estimate of the mean and its standard error for ten T Tauri stars with ages between 1 and 10 million years using the function Jackknife stats from the Astropy library."
      },
      {
        "from": "assistant",
        "value": "jackknife_stats(data, np.mean, 0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "The Jackknife resampling, Jackknife estimate for the mean of ten T Tauri stars, its bias, its standard error, and its 95% confidence interval."
      },
      {
        "from": "assistant",
        "value": "jackknife_resampling(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "The average of the mean of the first two elements and the mean of the last three elements of the sample, with the last three elements being the Jackknife resampled values."
      },
      {
        "from": "assistant",
        "value": "(np.mean(data[:2]) + np.mean(data[-3:]))/2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for surface brightness?"
      },
      {
        "from": "assistant",
        "value": "u.MagArcsec2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert flux to flux density?"
      },
      {
        "from": "assistant",
        "value": "u.Flux/u.Area"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the unit for luminosity?"
      },
      {
        "from": "assistant",
        "value": "u.Flux/u.Time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular standard deviation of the magnetic field orientations using the 'angular' method?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(angles, method='angular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the circular standard deviation of the magnetic field orientations using the 'circular' method?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(angles, method='circular')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the angular standard deviation of the magnetic field orientations using the 'circular' method with weights?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.circstd(angles, method='angular', weights=weights)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a new unit for the speed of light (c) in meters per second."
      },
      {
        "from": "assistant",
        "value": "u.c = u.m / u.s"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit for the temperature of absolute zero (0K) in Kelvin"
      },
      {
        "from": "assistant",
        "value": "u.K_si = u.K"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a unit for the gravitational constant (G) in m^3 kg^-1 s^-2"
      },
      {
        "from": "assistant",
        "value": "u.G = u.m**3 / (u.kg * u.s**2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a structured array to store the properties of a black hole, including its mass (6.5e30 kg) and angular momentum (1.2e37 m^2/s)"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\n\n# Define the structured dtype for black hole properties\nblack_hole_dtype = np.dtype([('mass', float), ('angular_momentum', float)])\n\n# Create structured array with mass and angular momentum data\nblack_hole_data = np.array([(6.5e30, 1.2e37)], dtype=black_hole_dtype)\n\n# Print the values\nprint(black_hole_data[0]['mass'])\nprint(black_hole_data[0]['angular_momentum'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a structured array to store the properties of a neutron star, including its radius (10 km) and magnetic field (10^12 T)"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\n\n# Define the structured dtype for neutron star properties\nneutron_star_dtype = np.dtype([('radius', float), ('magnetic_field', float)])\n\n# Create structured array with radius and magnetic field data\nneutron_star_data = np.array([(10e3, 1e12)], dtype=neutron_star_dtype)\n\n# Print the values\nprint(neutron_star_data[0]['radius'])\nprint(neutron_star_data[0]['magnetic_field'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a structured array to store the properties of a galaxy, including its distance (10 Mpc) and velocity (500 km/s)"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\n\n# Define the structured dtype for galaxy properties\ngalaxy_dtype = np.dtype([('distance', float), ('velocity', float)])\n\n# Create structured array with distance and velocity data\ngalaxy_data = np.array([(10e6, 500e3)], dtype=galaxy_dtype)\n\n# Print the values\nprint(galaxy_data[0]['distance'])\nprint(galaxy_data[0]['velocity'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between a TimeDelta object and a Time object in astropy.time?"
      },
      {
        "from": "assistant",
        "value": "A TimeDelta object represents a time difference, while a Time object represents a specific moment in time."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use TimeDelta to calculate the duration of multiple events?"
      },
      {
        "from": "assistant",
        "value": "You can use a loop to calculate the time difference for each event, or use a list comprehension to calculate the time differences in one line."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the scale argument in TimeDelta?"
      },
      {
        "from": "assistant",
        "value": "The scale argument specifies the time scale of the input value(s), which is used to determine the units of the time difference. For example, 'tdb' is the barycentric dynamically referenced time scale."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convolve a 2D array with a kernel?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft(array, kernel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default boundary treatment in convolve_fft?"
      },
      {
        "from": "assistant",
        "value": "The default boundary treatment is 'fill'."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use my own FFT function in convolve_fft?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use your own FFT function by specifying the 'fftn' and 'ifftn' keywords."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectral data with units of microns. Can you convert them to Joules?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nimport astropy.modeling.models as models\n\n# Define wavelength in microns\nwavelength = 1 * u.micron\n\n# Convert wavelength to Joules\nenergy = wavelength.to(u.J, u.spectral())\n\nprint(energy)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a table with columns 'id' (integer values 1-100), 'name', 'age', and 'city'. Show me how to insert a new row with 'id' = 101, 'name' = 'John Doe', 'age' = 30, and 'city' = 'New York'."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\ngalaxy_table = Table({'id': [1, 2, 3], 'name': ['Alice', 'Bob', 'Charlie'], 'age': [25, 30, 35], 'city': ['NYC', 'NYC', 'LA']} s\u01a1n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable with x and y coordinates from two separate NumPy arrays, and add column descriptions."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Create a table with x and y coordinates\nx = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\nq_table = QTable({'x': x, 'y': y})\n\n# Add column descriptions\nq_table['x'].description = 'X coordinate'\nq_table['y'].description = 'Y coordinate'\n\n# Display the table\nprint(q_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Add a new column 'z' to an existing QTable with a specific unit using a NumPy array, and set the column description."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\n\n# Create a table with x and y coordinates\nx = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\nz = np.array([7, 8, 9]) * u.m\nq_table = QTable({'x': x, 'y': y})\nq_table.add_column('z', z)\n\n# Set the column description\nq_table['z'].description = 'Z coordinate (in meters)'\n\n# Display the table\nprint(q_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable from a dictionary with a single row, and set the column descriptions and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\n\n# Create a table from a dictionary with a single row\ndata = {'a': [1], 'b': [2]}\nq_table = QTable(data)\n\n# Set the column descriptions\nq_table['a'].description = 'Attribute a'\nq_table['b'].description = 'Attribute b'\n\n# Set the metadata\nq_table.meta['author'] = 'John Doe'\nq_table.meta['creation_date'] = '2022-01-01'\n\n# Display the table\nprint(q_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables, table1 and table2, with different rows and columns. How can I stack these tables horizontally using astropy.table.hstack?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import hstack, Table\n\n# Create sample data\n\n# Table 1\ntable1 = Table({'a': [1, 2], 'b': [3, 4]})\n\n# Table 2\ntable2 = Table({'c': [5, 6], 'd': [7, 8]})\n\n# Stack tables horizontally\nstacked_table = hstack([table1, table2])\n\n# Print the stacked table\nprint(stacked_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a cosine model with an amplitude parameter that is bounded between 0.5 and 1.5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy.modeling.models import custom_model\ncosine_model = models.Cosine1D(amplitude=1.0, frequency=1.0, phase=0.0)\ncosine_model.amplitude.bounds = (0.5, 1.5)\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use the astropy.modeling.models for creating a line of best fit for my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nline_model = models.Linear1D()\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Is there a model in astropy.modeling.models that can be used for fitting a parabola?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nparabola_model = models.Polynomial1D(degree=2)\n# ..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I may want to create 3 linear models fit to 3 sets of data with a slope of 1 and intercept of 1."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Linear1D\n\n# Create 3 linear models with a slope of 1 and intercept of 1\nmodel1 = Linear1D(slope=1, intercept=1)\nmodel2 = Linear1D(slope=1, intercept=1)\nmodel3 = Linear1D(slope=1, intercept=1)\n\n# Print the models\nprint(model1)\nprint(model2)\nprint(model3)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As part of my exoplanet survey, I need to determine which stars in my catalog are close enough for potential gravitational interactions. Could you show me how to use the angular separations to identify the stars within a certain distance of the target star?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ncatalog = SkyCoord(ra=[150.33, 150.45, 150.21, 150.78, 150.55]*u.degree, dec=[-23.38, -23.42, -23.25, -23.50, -23.45]*u.degree)\ntarget_star = catalog[0]\nseparations = target_star.separation(catalog)\nnearby_mask = separations < 10*u.arcmin\nnearby_stars = catalog[nearby_mask]\nprint(f\"Number of stars within 10 arcmin: {len(nearby_stars)-1}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a constant model with Astropy and visualize it alongside my variable star data. Can you show me how to utilize theoustang or Worth lists for initial guesses of model parameters in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting, models\nimport numpy as np\nimport matplotlib.pyplot as plt\ntimes = np.linspace(0, 10, 100)\nconst_model = models.Const1D(amplitude=12.5)\nfitter = fitting.LevMarLSQFitter()\nbest_fit = fitter(const_model, times, 12.5 + 0.05 * np.random.randn(100))\nplt.figure()\nplt.scatter(times, 12.5 + 0.05 * np.random.randn(100), alpha=0.5)\nplt.plot(times, best_fit(times), 'r-')\nplt.xlabel('Time (days)')\nplt.ylabel('Magnitude')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to utilize the `moment` function from Astropy for calculating the reference level when analyzing stellar brightness variations?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nimport astropy.modeling.models as models\nimport numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to learn how to use the ` median_stack` method from Astropy to calculate the reference level when analyzing stellar brightness variations"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_stack\nimport numpy as np\nimport matplotlib.pyplot as plt\ninput_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\noutput_array = median_stack(input_array)\nprint(output_array)\nplt.figure()\nplt.scatter(output_array, np.arange(len(output_array)))\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 3D plot of a celestial object?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, visualization; import numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Create sample data for a 3D plot\nx, y, z = np.random.rand(3, 100)\n\n# Create Quantity objects with units\nx = x * u.m\ny = y * u.m\nz = z * u.m\n\nwith visualization.quantity_support():\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    ax.plot(x.value, y.value, z.value)\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a histogram of astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, statistics; import numpy as np\n\n# Create sample data for a histogram\ndata = np.random.normal(0, 1, 1000) * u.m\n\nwith visualization.quantity_support():\n    plt.hist(data.value, bins=50)\n    plt.xlabel('{}/m'.format(data.unit))\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a scatter plot of celestial objects with different units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u; import numpy as np\n\n# Create sample data for a scatter plot\nx1, y1 = np.random.rand(2, 100) * u.m\nx2, y2 = np.random.rand(2, 100) * u.deg\n\nwith visualization.quantity_support():\n    plt.subplot(121)\n    plt.plot(x1.value, y1.value, 'bo')\n    plt.xlabel('m')\n    plt.subplot(122)\n    plt.plot(x2.value, y2.value, 'ro')\n    plt.xlabel('deg')\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a 2D FITS image with WCS information?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\ndata = np.zeros((100, 100))\nhdu = fits.PrimaryHDU(data)\nw = WCS(naxis=2)\nw.wcs.cdelt = [-1, 1]\nw.wcs.crval = [0.0, 0.0]\nw.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nheader = w.to_header()\nhdu.header.update(header)\nhdu.header['BUNIT'] = 'Jy/pix'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing stellar spectra and need to calculate the uncertainty in my metallicity measurements. How can I perform bootstrap resampling on my spectral line measurements to get error estimates?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `bootstrap` function from `astropy.stats` to resample my data? "
      },
      {
        "from": "assistant",
        "value": "bootstrap(data, bootnum=1000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the `bootfunc` parameter in the `bootstrap` function? "
      },
      {
        "from": "assistant",
        "value": "The `bootfunc` parameter is used to reduce the resampled data. It can be a function that takes the resampled data as input and returns the desired output."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the difference between two dates in Python?"
      },
      {
        "from": "assistant",
        "value": "from datetime import datetime\n\ndate1 = datetime(2022, 1, 1)\ndate2 = datetime(2022, 12, 31)\n\nprint(date2 - date1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the current date and time in Python?"
      },
      {
        "from": "assistant",
        "value": "from datetime import datetime\n\ndatetime.now()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a string to a date object in Python?"
      },
      {
        "from": "assistant",
        "value": "from datetime import datetime\n\ndate_string = '2022-01-01'\ndate_object = datetime.strptime(date_string, '%Y-%m-%d')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert the position of Jupiter to geocentric true ecliptic coordinates as observed from Earth on 2024-01-01."
      },
      {
        "from": "assistant",
        "value": "jupiter = SkyCoord(ra=20.0*u.deg, dec=12.0*u.deg, frame='icrs', distance=20*u.au)\n\ngt_ecliptic = GeocentricTrueEcliptic(jupiter, obstime=Time('2024-01-01'))\n\necliptic_lon = gt_ecliptic.lon.deg\n\necliptic_lat = gt_ecliptic.lat.deg\n\ncomecliptic_lon = ecliptic_lon * u.deg\n\ncomecliptic_lat = ecliptic_lat * u.deg\n\nprint(ecliptic_lon, ecliptic_lat)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram to visualize the distribution of stellar metallicities in my globular cluster data using the Freedman-Diaconis rule for adaptive binning?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nefrom astropy.stats import histogram\n\n# Sample metallicity data (replace with your actual data)\nmetallicities = np.random.normal(-1.5, 0.3, 1000)  # Mock [Fe/H] values\n\n# Create histogram with adaptive binning\nhist, bin_edges = histogram(metallicities, bins='freedman', density=True)\n\n# Customize plot\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(10, 6))\nplt.hist(metallicities, bins=bin_edges, density=True, alpha=0.7, \n         color='navy', edgecolor='black')\nplt.xlabel('[Fe/H]', fontsize=12)\nplt.ylabel('Normalized Frequency', fontsize=12)\nplt.title('Stellar Metallicity Distribution\n'(Freedman-Diaconis adaptive binning)', fontsize=14)\n\n# Add grid for better readability\nplt.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a radio astronomer, I need to calculate the time difference between two pulsar observations, one starting at MJD 59003.25 and ending at MJD 59005.5. How can I use TimeDelta to find this difference in seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\ntime_diff = Time(59005.5, format='mjd') - Time(59003.25, format='mjd')\n\ntime_diff_seconds = time_diff.to_value('sec')\n\ntime_diff_seconds # This will print the time difference in seconds"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a radio astronomer, I need to calculate the time difference between two pulsar observations, one starting at MJD 59006 and ending at MJD 59008. How can I use TimeDelta to find this difference in seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\n\ntime_diff = Time(59008, format='mjd') - Time(59006, format='mjd')\ntime_diff_seconds = time_diff.to_value('sec')\ntime_diff_seconds # This will print the time difference in seconds"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a radio astronomer, I need to calculate the time difference between two pulsar observations, one starting at MJD 59009.5 and ending at MJD 59011.75. How can I use TimeDelta to find this difference in seconds?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta\ntime_diff = Time(59011.75, format='mjd') - Time(59009.5, format='mjd')\ntime_diff_seconds = time_diff.to_value('sec')\ntime_diff_seconds # This will print the time difference in seconds"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a celestial object's position from equatorial to galactic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define coordinates for a celestial object in equatorial coordinates\nequatorial_coord = SkyCoord(ra='12h30m00.0s', dec='-30d00m00.0s', pm_ra=1*u.mas/yr, pm_dec=-2*u.mas/yr, distance=100*u.pc, frame='icrs')\n\n# Convert to galactic coordinates\n galactic_coord = equatorial_coord.transform_to('galactic')\n\n# Print result\nprint(galactic_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a temperature of 25 degree Celsius to Kelvin."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\ntemp_celsius = 25 * u.deg_C\n\ntemp_kelvin = temp_celsius.to(u.K)\n\ntemp_kelvin"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I save an Astropy Table to an HDF5 file with custom metadata?"
      },
      {
        "from": "assistant",
        "value": "table.write('table.h5', format='hdf5', overwrite=True, metadata={'author': 'John Doe', 'date': '2022-01-01'})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to merge two Astropy Tables into one?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import join, Table; t1 = Table({'a': [1, 2, 3], 'b': [4, 5, 6]}); t2 = Table({'a': [7, 8, 9], 'c': [10, 11, 12]}); joined_t = join(t1, t2, keys='a')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a custom Astropy Table viewer?"
      },
      {
        "from": "assistant",
        "value": "import matplotlib.pyplot as plt; t = Table({'x': [1, 2, 3], 'y': [4, 5, 6]}); plt.figure(); t.plot(x='x', y='y')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare the phase coverage of observations from 3 different telescopes."
      },
      {
        "from": "assistant",
        "value": "{'intervals': [[0, 0.2, 10], [0.2, 0.5, 20], [0.5, 1, 30]]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to initialize an FK4 frame with right ascension and declination values using a specific equinox?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\ndata = FK4(equinox='B1950.0', ra='12h 30m 00s', dec='+00d 00m 00s', distance=1*u.parsec, pm_ra_cosdec=1*u.mas/u.yr, pm_dec=1*u.mas/u.yr, radial_velocity=1*u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove systematic trends from my exoplanet transit photometry data using the astropy.convolution.CONVsolve method?"
      },
      {
        "from": "assistant",
        "value": "import astropy.convolution as convolution\n\n# Define the signal and kernel\nsignal = np.random.normal(size=1000)\nkernel = np.ones(shape=(5,)) / 5\n\n# Convolve the signal with the kernel\ntrend = convolution.convolve(signal, kernel)\n\n# Subtract the trend from the signal\ndetrended_signal = signal - trend"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 1 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": "Card('TELESCOP', 'KEPLER', 'Spacecraft identifier')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 2 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": "Card('RAFTYPE', 'NIRISS', 'Instrument type identifier')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create 3 new instruction-response pairs similar to the one above."
      },
      {
        "from": "assistant",
        "value": "Card('INSTRMOD', 'NIRCAM-4', 'Instrument module identifier')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with distance data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\ndistance_data = [1, 2, 3]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with velocity data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\nvelocity_data = [4, 5, 6]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with time data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\ntime_data = [7, 8, 9]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy.table and create a Column with acceleration data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\nacceleration_data = [10, 11, 12]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with mass data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\nmass_data = [13, 14, 15]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy.table and create a Column with energy data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\nenergy_data = [16, 17, 18]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with angular momentum data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\nangular_momentum_data = [19, 20, 21]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy.table and create a Column with force data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\nforce_data = [22, 23, 24]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column with density data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\ndensity_data = [25, 26, 27]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import astropy.table and create a Column with pressure data, units, and metadata."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\npressure_data = [28, 29, 30]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read image data from extension 1 of a FITS file named 'solar_image.fits' and save it into a NumPy array"
      },
      {
        "from": "assistant",
        "value": "import os\nfrom astropy.io import fits\n\n# Specify the file path - replace with your actual path\nfits_file = 'solar_image.fits'\n\ntry:\n    # Check if file exists\n    if not os.path.exists(fits_file):\n        raise FileNotFoundError(f'The FITS file \\'{fits_file}\\' does not exist in the current directory.')\n\n    # Open the FITS file and access extension 1\n    data = fits.open(fits_file)[1].data\n    print(data.shape)\n\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\n    print('Please check the file path and ensure the file exists.')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to get the telescope roll angle and telescope pan angle from extension 2 of a FITS file"
      },
      {
        "from": "assistant",
        "value": "import astropy\nfrom astropy.io import fits\n\n# Specify the file path - replace with your actual path\nfits_file = 'solar_image.fits'\n\ntry:\n    # Open the FITS file and access extension 2\n    header = fits.open(fits_file)[2].header\n    roll_angle = header['TELESCOPERROLLANGLE']\n    pan_angle = header['TELESCOPERPANANGLE']\n    print(f'Roll Angle: {roll_angle}, Pan Angle: {pan_angle}')\n\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the keyword 'EXPOSURE' from extension 1 of a FITS file"
      },
      {
        "from": "assistant",
        "value": "import astropy\nfrom astropy.io import fits\n\n# Specify the file path - replace with your actual path\nfits_file = 'solar_image.fits'\n\nttry:\n    # Open the FITS file and access extension 1\n    exposure = fits.getval(fits_file, 'EXPOSURE', 1)\n    print(f'Exposure: {exposure}')\n\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the mean Julian date of a list of dates using astropy.time.Time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create a Time object from a list of dates\n dates = [Time(\"2022-01-01 00:00:00\"), Time(\"2022-01-02 00:00:00\")]\n\n# Calculate the mean Julian date\nmean_jd = (dates[0].jd + dates[1].jd) / 2\n\nprint(mean_jd)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to extract the TELESCOP keyword from the header of a FITS file using astropy.io.fits.getval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nprint(fits.getval('deep_field_001.fits', 'TELESCOP'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to extract the INSTRUME  keyword from the primary header of a FITS file using astropy.io.fits.getval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nprint(fits.getval('deep_field_001.fits', 'INSTRUME', ext=0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to extract the DATE-OBS keyword from the primary header of a FITS file using astropy.io.fits.getval?"
      },
      {
        "from": "assistant",
        "value": "from  astropy.io import fits\nprint(fits.getval('deep_field_001.fits', 'DATE-OBS', ext=0))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert pound-force to kilograms in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ncurrent_unit = u.imperial.lbf  # pound-force\ndensity = 1  # Example value of 1 lbf\nequivalent_weight = density.to(u.kg)\nprint(f' Equivalent weight: {equivalent_weight}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the conversion factor from nautical miles to kilometers in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ncurrent_unit = u.imperial.nmi  # nautical miles\nconversion_factor = current_unit.to(u.km)\nprint(f'Conversion factor: {conversion_factor}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert horsepower to watts in astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\ncurrent_unit = u.imperial.hp  # horsepower\nequivalent_power = current_unit.to(u.W)\nprint(f'Equivalent power: {equivalent_power}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the robust standard deviation of a dataset that contains outliers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nmad_std(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the robust standard deviation of an array with values [1, 2, 3, 4, 5, 100]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nmad_std([1, 2, 3, 4, 5, 100])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the robust standard deviation of a 2D array along the 0th axis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nmad_std(data, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to remove duplicate rows from a table while keeping the first occurrence of each row?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, unique\nimport numpy as np\n\n# Create a sample table with duplicate rows\ndata = Table({'A': [1, 2, 2, 3, 3, 4], 'B': [5, 6, 7, 8, 9, 10]})\n\n# Use unique to remove duplicates, keeping the first occurrence of each row\nunique_table = unique(data, keep='first')\n\n# Print the unique table\nprint(unique_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Describe how you can shift a time array by 2 years to bring it into the future."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Shift\nimport numpy as np\nt = np.linspace(2000, 2020, 365*4)\nshift_model = Shift(offset=2)\nshifted_t = shift_model(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to an Astropy table based on an existing column with a specific transformation?"
      },
      {
        "from": "assistant",
        "value": "galaxy_table['new_column'] = np.sin(galaxy_table['redshift'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I sort the rows of an Astropy table in ascending order by a specific column?"
      },
      {
        "from": "assistant",
        "value": "galaxy_table.sort('distance')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Is there a way to remove a column from an Astropy table?"
      },
      {
        "from": "assistant",
        "value": "del galaxy_table['magnitude']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to find pairs of points that have an angular separation at least as close as 0.5 degrees?"
      },
      {
        "from": "assistant",
        "value": "astropy.coordinates.search_around_sky"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of 40 galaxies with redshifts [0.2, 0.18, 0.22, ...]. How can I estimate both the mean redshift and its variance, along with their uncertainties using jackknife resampling? Include a 99% confidence interval in the calculation."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\nfrom astropy import units as u\nfrom scipy import stats\ndata = np.array([0.2, 0.18, 0.22, 0.19, 0.20, 0.21] + [0.19]*33) \n\nestimate, bias, stderr, conf_interval = jackknife_stats(data, np.mean, confidence_level=0.99)\nprint(f'Estimated mean redshift: {estimate} +/- {stderr}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of 50 galaxies with redshifts [0.25, 0.23, 0.24, ...]. How can I estimate the standard deviation of the redshift distribution, along with its uncertainty using jackknife resampling? Include a 95% confidence interval in the calculation."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\nfrom astropy import units as u\nfrom scipy import stats\ndata = np.array([0.25, 0.23, 0.24, 0.26, 0.27, 0.28] + [0.25]*44) \n\nestimate, bias, stderr, conf_interval = jackknife_stats(data, np.std, confidence_level=0.95)\nprint(f'Estimated standard deviation of the redshift distribution: {estimate} +/- {stderr}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing spectroscopic data of 60 galaxies with redshifts [0.30, 0.29, 0.28, ...]. How can I estimate both the median redshift and its uncertainty using jackknife resampling? Include a 99.9% confidence interval in the calculation."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\nfrom astropy import units as u\nfrom scipy import stats\ndata = np.array([0.30, 0.29, 0.28, 0.31, 0.32, 0.33] + [0.29]*54) \n\nestimate, bias, stderr, conf_interval = jackknife_stats(data, np.median, confidence_level=0.999)\nprint(f'Estimated median redshift: {estimate} +/- {stderr}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to normalize my image data for plotting, but I have values outside the valid range of 0 to 1. Can you adjust the clip argument to fix this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ImageNormalize, SqrtStretch\nimport numpy as np\ndata = np.random.rand(100)\nnorm = ImageNormalize(stretch=SqrtStretch(), clip=False)\nnormalized_data = norm(data)\n# Rest of the code remains the same"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I make a 3x3 cutout of a 5x4 array centered at (2, 2)?"
      },
      {
        "from": "assistant",
        "value": "cutout1 = Cutout2D(data, (2, 2), (3, 3))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What happens if I try to create a 2x2 cutout of a 5x4 array at position (0, 0)?"
      },
      {
        "from": "assistant",
        "value": "cutout2 = Cutout2D(data, (0, 0), 2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for a square root stretch?"
      },
      {
        "from": "assistant",
        "value": "y = \u221ax"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does a square root stretch handle outliers?"
      },
      {
        "from": "assistant",
        "value": "It clips at 0.5th and 99.5th percentiles by default"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use a square root stretch with other normalizations?"
      },
      {
        "from": "assistant",
        "value": "Yes, it can be used with other normalizations like MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.table function to combine multiple tables with a single column that are not horizontally aligned but have time conveyed through MJD column?"
      },
      {
        "from": "assistant",
        "value": "This can be done if individual MJDs for each table are provided. Here's how to combine multiple tables with a unique MJD."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a list of celestial objects and I need to calculate the mean distance from the Sun. How can I use Astropy to do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import solar_system_ephem\nfrom astropy.time import Time\n\n# Example data for the celestial objects\ncell_coords = SkyCoord(ra=[100.0, 200.0] * u.degree, dec=[10.0, 20.0] * u.degree)\nsun_coords = solar_system_ephem EmbeddedEphem('sun', Time('J2000'))\n\ntimes = Time(['2022-01-01T00:00:00', '2022-01-02T00:00:00'], format='iso', scale='utc')\ndistances = np.array([sun_coords.distance(cell_coord).value for cell_coord in cell_coords])\nmean_distance = np.mean(distances)\n\nprint(f'Mean distance from the Sun: {mean_distance:.2f} AU')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the distance to the Moon in meters?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\n\n# Define the distance to the Moon\nmoon_distance = 384400 \u2009\u00b7 1000  # kilometers\n\n# Convert to meters\nmeter_distance = moon_distance * u.km\n\n# Print the result with proper units\nprint(f\"Distance to the Moon: {meter_distance:.2f} m\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert the mass of the Sun from solar masses to kilograms?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\n\n# Define the mass of the Sun in solar masses\nsun_mass = 1 \u2009\u00b7 9884099e30  # solar masses\n\n# Convert to kilograms\nkg_mass = sun_mass * u.solMass\n\n# Print the result with proper units\nprint(f\"Mass of the Sun: {kg_mass:.2e} kg\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the orbital period of the Earth in seconds?"
      },
      {
        "from": "assistant",
        "value": "# Import required astropy modules\nfrom astropy import units as u\n\n# Define the orbital period of the Earth in years\nearth_orbital_period = 1  # year\n\n# Convert to seconds\nsecond_period = earth_orbital_period * u.year\n\n# Print the result with proper units\nprint(f\"Orbital period of the Earth: {second_period:.0f} s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine a RedshiftScaleFactor model (z=0.5) with a Gaussian1D model (mean=4861, stddev=2.5) to simulate a redshifted H-beta emission line? Show the complete code."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine a RedshiftScaleFactor model (z=1.0) with a Lorentz1D model (mean=5000, fwhm=2.0) to simulate a redshifted emission line? Show the complete code."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I combine a RedshiftScaleFactor model (z=0.2) with a Constant1D model (value=1000) to simulate a redshifted constant spectrum? Show the complete code."
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I perform dynamic range adjustment on a Hubble deep field image array"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.visualization to stretch an image while preserving its faint features"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I adjust a Hubble deeper field image between 0 and 1 to reveal faint details in distant galaxies"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import LogStretch"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an EarthLocation object for the South Pole using geocentric coordinates (x=-1440, y=-3840, z=0 km) and convert it to ITRS frame."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, ITRS\nfrom astropy import units as u\n# Create EarthLocation object for the South Pole\nsouth_pole = EarthLocation.from_geocentric(x=-1440*u.km, y=-3840*u.km, z=0*u.km)\n# Convert to ITRS frame coordinates\nitrs_coords = south_pole.itrs\nprint(itrs_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the different ways to create an astropy table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column, MaskedColumn"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add rows to an existing astropy table?"
      },
      {
        "from": "assistant",
        "value": "my_table.add_row([1, 2, 3])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the available methods for manipulating astropy tables?"
      },
      {
        "from": "assistant",
        "value": "my_table.sort('column_name') or my_table.remove_rows([1, 2, 3])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply an exponential stretch to an astronomical image to amplify the brightness of the faintest regions?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits; from astropy.visualization import ExponentialStretch, ImageNormalize; LogStretch, plt; image_data = fits.getdata('image.fits'); norm = ImageNormalize(image_data, stretch=ExponentialStretch()); plt.imshow(image_data, norm=norm, cmap='viridis'); plt.show(); "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of how to use the asinh stretch with a different value of a?"
      },
      {
        "from": "assistant",
        "value": "a=0.01 controls how linear the transform is around zero. Use smaller values for more aggressive stretching of faint features. stretch = AsinhStretch(a=0.01)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Const2D model with amplitude=5000 and tie it to a parameter 'slave_flat_level'"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nimport numpy as np\ngf = models.Const2D(amplitude=5000)\nslave_flat_level = 5000\ndef tie_to_slave_level(model):\n    return slave_flat_level\ngf.amplitude.tied = tie_to_slave_level"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use the BlackBody model for calculating the flux density of a blackbody at different wavelengths?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\ndef calculate_flux_density(wavelength, temperature):\n    bb_model = BlackBody(temperature=temperature * u.K)\n    flux = bb_model(wavelength)\n    return flux"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the BlackBody model to calculate the blackbody spectrum of a star at a given temperature?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\ndef calculate_blackbody_spectrum(wavelength, temperature):\n    bb_model = BlackBody(temperature=temperature * u.K)\n    flux = bb_model(wavelength)\n    return flux"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the BlackBody model with the Planck function to calculate the blackbody spectrum of a cool brown dwarf?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import BlackBody\nfrom astropy import units as u\nimport numpy as np\ndef calculate_blackbody_spectrum(wavelength, temperature):\n    bb_model = BlackBody(temperature=temperature * u.K)\n    flux = bb_model(wavelength)\n    return flux\ndef main():\n    wavelength = np.linspace(0.5, 2.5, 100) * u.micron\n    temperature = 1500 * u.K\n    flux = calculate_blackbody_spectrum(wavelength, temperature)\n    print(f\"Wavelength: {wavelength[0]:.2f}\")\n    print(f\"Flux density: {flux[0]:.2e}\"),\n    return {'Wavelength': wavelength, 'Flux density': flux}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a code snippet that applies a redshift correction to my observed spectral data for a galaxy cluster using astropy's modeling framework. Can you show me how to implement this using astropy's modeling framework?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\nfrom astropy import units as u\n\ndef apply_redshift_correction(wavelengths, fluxes, redshift):\n    \"/n    Apply redshift correction to spectral data\n    \"/n    Parameters\n    /n    wavelengths: array of observed wavelengths\n    /n    fluxes: array of observed flux values\n    /n    redshift: redshift value (z) of the galaxy cluster\n    /n    \"/n    # Convert wavelengths to rest frame\n    rest_wavelengths = wavelengths / (1 + redshift)\n    \"/n    # Flux correction: conserve total energy under transformation\n    rest_fluxes = fluxes * (1 + redshift)\n    \"/n    # Create a model to interpolate the spectrum in rest frame\n    spec_model = models.Spline1D(rest_wavelengths, rest_fluxes, degree=3)\n    # Create output wavelength grid (using same spacing as input)\n    wave_min = rest_wavelengths.min()\n    wave_max = rest_wavelengths.max()\n    new_wavelengths = np.linspace(wave_min, wave_max, len(wavelengths))\n    # Evaluate model on new wavelength grid\n    corrected_fluxes = spec_model(new_wavelengths)\n    return new_wavelengths, corrected_fluxes\n\n# Example usage\nwavelengths = np.linspace(4000, 9000, 1000) \u2219 u.angstrom  # Example wavelength array\nfluxes = np.random.normal(1, 0.1, 1000)  # Example flux array\nez = 0.5  # Example redshift\nrest_wave, rest_flux = apply_redshift_correction(wavelengths.value, fluxes, z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use astropy.modeling.fitting.leastsq to fit a Gaussian1D model to a set of data"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nfrom astropy.modeling.fitting import leastsqs\n\n# Define the data\nx = np.array([1, 2, 3, 4, 5])\nx_err = np.array([0.1, 0.2, 0.3, 0.4, 0.5])\n\n# Initialize the Gaussian model with initial parameter guesses\ninit_model = Gaussian1D(amplitude=1.0, mean=3.0, stddev=1.0)\n\n# Perform the fit\nfitted_model = leastsqs(init_model, x, np.array([1, 2, 3, 4, 5]), x_err, np.array([1, 2, 3, 4, 5]))\n\n# Print the fitted parameters\nprint(f'Amplitude: {fitted_model.amplitude.value}')\nprint(f'Mean: {fitted_model.mean.value}')\nprint(f'STDDEV: {fitted_model.stddev.value}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a pulsar's periodic signal with a period of 0.637 seconds and amplitude of 1.25 mJy. Can you provide code using Sine1D to model this signal over a 15-second observation window with 0.05s time steps?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\nt = np.arange(0, 15, 0.05)\nperiod = 0.637 * u.s\nfrequency = 1/period\namplitude = 1.25 * u.mJy\nsine_model = models.Sine1D(amplitude=amplitude.value, frequency=frequency.to(u.Hz).value * 2 * np.pi)\nsignal = sine_model(t)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert the geocentric coordinates (x: 1000.0 meters, y: 2000.0 meters, z: 3000.0 meters) into an EarthLocation object and extract its height above a reference ellipsoid?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\n# Create EarthLocation object from geocentric coordinates (in meters)\nlocation = EarthLocation.from_geocentric(1000.0 * u.m, 2000.0 * u.m, 3000.0 * u.m)\n\n# Extract height above a reference ellipsoid\nheight = location.height\n\nprint(f\"Location:\")\nprint(f\"Height: {height:.4f}\"\\u202f\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D model for a constant flux of 1.2e-3 electrons/sec across a 512x512 pixel detector array"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndetector_shape = (512, 512)\ny, x = np.mgrid[:detector_shape[0], :detector_shape[1]]\nflux_model = models.Const2D(amplitude=1.2e-3)\nflux_current = flux_model(x, y)\nflux_current"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the meaning of life, the universe, and everything?"
      },
      {
        "from": "assistant",
        "value": "42"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to know how to get the file location of the Milky Way FITS file."
      },
      {
        "from": "assistant",
        "value": "import astropy.utils.data as data_utils\nfilename = data_utils.get_pkg_data_filename('data/mw_3d.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to get the file location of the Kepler mission pipeline output file?"
      },
      {
        "from": "assistant",
        "value": "import astropy.utils.data as data_utils\nfilename = data_utils.get_pkg_data_filename('data/kepler Mission pipeline output.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to access the 3D CD image data file for testing."
      },
      {
        "from": "assistant",
        "value": "import astropy.utils.data as data_utils\ncustom_filename = data_utils.get_pkg_data_filename('data/3d_cd.hdr', package='astropy.wcs.tests')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 1D custom kernel with values [0.5, 0.3, 0.2, 0.3, 0.5]"
      },
      {
        "from": "assistant",
        "value": "custom_kernel = CustomKernel(np.array([0.5, 0.3, 0.2, 0.3, 0.5]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a 2D custom kernel array for image processing"
      },
      {
        "from": "assistant",
        "value": "kernel_array = np.array([[0.1, 0.2, 0.3], [0.2, 0.4, 0.2], [0.3, 0.2, 0.1]])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a custom kernel from a list with values [1, 2, 3, 2, 1]"
      },
      {
        "from": "assistant",
        "value": "kernel = CustomKernel([1, 2, 3, 2, 1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the position angle between the galactic center and a globular cluster located at (337.5\u00b0, 20\u00b0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import galactic_frame\n\n# Define the galactic center and the globular cluster coordinates\ncc = SkyCoord(l=337.5*u.degree, b=20*u.degree, frame=galactic_frame)\ngen = SkyCoord(l=0*u.degree, b=0*u.degree, frame=galactic_frame)\n\n# Calculate the position angle\npa = position_angle.genlon2, genlat2)\n\nprint(pa)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position angle between 2 globular clusters located at (10\u00b0, 20\u00b0) and (45\u00b0, -15\u00b0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import position_angle\n\n# Define the coordinates of the 2 globular clusters\ncluster1 = SkyCoord(l=10*u.degree, b=20*u.degree)\ncluster2 = SkyCoord(l=45*u.degree, b=-15*u.degree)\n\n# Calculate the position angle\npa = position_angle(cluster1, cluster2)\n\nprint(pa)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the position angle between the position of a globular cluster and an object in the galactic center?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.coordinates import position_angle\nfrom astropy.coordinates import galactic_frame\n\n# Define the galactic center and the globular cluster coordinates\ncc = SkyCoord(l=0*u.degree, b=0*u.degree, frame=galactic_frame)\ncg = SkyCoord(l=337.5*u.degree, b=20*u.degree, frame=galactic_frame)\n\n# Calculate the position angle\npa = position_angle(cc, cg)\n\nprint(pa)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use SLSQPLSQFitter to fit a Gaussian model to data with mean 10, standard deviation 2 and amplitude 5?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D \nfrom astropy.modeling.fitting import SLSQPLSQFitter \n\n# Data \nmean = 10 \nstddev = 2 \namp = 5 \nphase = np.linspace(0, 10, 100) \nflux = amp * np.exp(-(phase - mean)**2 / (2 * stddev**2)) \n\n# Model and fitter \nmodel = Gaussian1D(amplitude=5, mean=10, stddev=2) \nfitter = SLSQPLSQFitter() \n\n# Perform the fit \nresult = fitter(model, phase, flux) \n\n# Print results \nprint(result.parameters['amplitude'].value), print(result.parameters['mean'].value), print(result.parameters['stddev'].value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from our observatory's recent exoplanet transit observation. Could you show me how to model the stellar PSF using AiryDisk2D and compare it with our observed data to determine if there's any significant deviation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Create synthetic observation data (normally this would be your real data)\nnoise = 0.1\ny, x = np.mgrid[-10:11, -10:11]\nz = np.random.normal(0, noise, x.shape)  # Add noise to simulate real observation\n\n# Create an Airy disk model\n# Parameters: amplitude=1.0, x_0=0, y_0=0 (center), radius=1.0\nairy_model = models.AiryDisk2D(amplitude=1.0, x_0=0, y_0=0, radius=1.0)\nairy_data = airy_model(x, y)\n\n# Add noise to create synthetic \"observed\" data\nobserved_data = airy_data + z\n\nto_fit_params = [1.5, 2, 2.5]  # example parameters, also can be generated randomly, adjusted based on expertise etc.\nfitting_params = {'x_0': to_fit_params[0], 'y_0': to_fit_params[1], 'radius': to_fit_params[2]}\n# Fit the model to the observed data\nfitter = fitting.LevMarLSQFitter()\nfitted_model = fitter(airy_model, x, y, observed_data)\n# Calculate residuals to check for deviations\nto_goodness_of_fit = {'fitted_model': fitted_model, 'x': x, 'y': y, 'observed_data': observed_data, 'noise_level': noise}\nresiduals = observed_data - fitted_model(x, y)\nrms_deviation = np.sqrt(np.mean(residuals**2))}\n\nprint(f\"Fitted parameters: {fitted_model.parameters}\")\nprint(f\"RMS deviation: {rms_deviation:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in optimizing the parameters of AiryDisk2D for a specific dataset. Could you provide the implementation for a genetic algorithm to find the optimal parameters?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ngenetic_params = {'population_size': 50, 'mutation_rate': 0.1, 'crossover_rate': 0.5}\ndataset = np.random.rand(100, 100)  # example dataset\nto_optimize_params = {'amplitude': 1.0, 'x_0': 0, 'y_0': 0, 'radius': 1.0}\ngenetic_algorithm = genetic.ParameterOptimizer(to_optimize_params, genetic_params)\ngenetic_algorithm.fit(dataset)\n# Get the best parameters and evaluations\ngenetic_algorithm.get_best_parameters()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Could you show me how to implement a Monte Carlo simulation to estimate the posterior distribution of the parameters of AiryDisk2D?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom scipy.stats import norm\ngenerate_100_params_samples = {'num_samples': 100}\n# Prior distribution for each parameter\ndistribution_param_specs = {\n    'amplitude': {'dist': 'norm', 'mean': 1.0, 'stddev': 0.1},\n    'x_0': {\n        'dist': 'norm',\n        'mean': 0,\n        'stddev': 0.1\n    },\n    'y_0': {\n        'dist': 'norm',\n        'mean': 0,\n        'stddev': 0.1\n    },\n    'radius': {'dist': 'norm', 'mean': 1.0, 'stddev': 0.1}\n}\nevaluated_params = {'airy_model': 'AiryDisk2D', 'dataset': 'fitting_dataset'}\n# Run a Monte Carlo simulation\ncurrent_numbers = {'num_accepted_parameters': 0}\nsampled_params = {'params_samples': []}\nfor i in range(generate_100_params_samples['num_samples']):\n    # Generate a random sample of parameters\n    sample_params = np.random.randn(len(distribution_param_specs))\n    # Compute the likelihood of the sample parameters\n    if np.random.rand() > 'exponent' * sample_params * evaluated_params['likelihood'](evaluated_params['dataset']):\n\n        # Accept the sample parameters and increment the number of accepted parameters\n        sampled_params['params_samples'].append(sample_params)\n        current_numbers['num_accepted_parameters'] += 1\nsampled_params['params_samples'] = np.array(sampled_params['params_samples'])\n# Calculate the posterior distribution of the parameters\nposterior_dist = np.sum(sampled_params['params_samples'], axis=0)\n\n# Plot the posterior distribution\nimport os\ncurrent(true_distances).\u062a\u0628\u0627\u0631"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a spherical representation of a point at 7 parsecs with a radial velocity of 20 km/s."
      },
      {
        "from": "assistant",
        "value": "{\"type\\\": \"spherical\",\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "A spacecraft is traveling in the xy-plane with a velocity of 50 km/s. Given the position (x=10, y=20, z=0) in parsecs, create a 3D spherical representation with its radial velocity."
      },
      {
        "from": "assistant",
        "value": "{\"type\\\": \"spherical\",\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a cylindrical representation of a point at 5 parsecs with an azimuthal velocity of 10 km/s."
      },
      {
        "from": "assistant",
        "value": "{\"type\\\": \"cylindrical\",\\"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the median absolute deviation (MAD) of a normal distribution with a mean of 0 and a standard deviation of 1?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nimport numpy as np\nclass NormalDistribution:\n    def __init__(self, mean=0, std=1):\n        self.mean = mean\n        self.std = std\n    def get_mad(self):\n        # Generate random variates from a normal distribution\n        rand = np.random.default_rng(42)\n        data = rand.normal(self.mean, self.std, 1000)\n        # Calculate the median absolute deviation (MAD)\n        mad = mad_std(data)\n        return mad\n# Create a normal distribution with a mean of 0 and a standard deviation of 1\n distribution = NormalDistribution()\n# Get the median absolute deviation (MAD)\nim_ad = distribution.get_mad()\nprint(f'Median Absolute Deviation (MAD) of the normal distribution is {im_ad:.6f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle missing or invalid values in a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits')\nfor hdu in hdul:\n    if hdu.astype is not None:\n        # Handle missing or invalid values\n        data = hdu.data[hdu.astype == 'NaN']\n        # Replace or ignore values as needed\n        hdu.data[hdu.astype == 'NaN'] = 0"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I read a specific HDU from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits')\nhdu = hdul[1]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I close a FITS file opened with memmap?"
      },
      {
        "from": "assistant",
        "value": "hdul.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to compare the fits of Moffat1D and Gaussian1D models to a dataset. Please plot both models on the same figure with fixed amplitude=1.0, x_0=0.0, and alpha=2.5, but varying gamma values of [1.0, 2.0, 3.0] for Moffat1D and varying width=1.0 for Gaussian1D "
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Moffat1D, Gaussian1D\nimport matplotlib.pyplot as plt\n\n# Create x-axis points for evaluation\nx = np.linspace(-10, 10, 200)\ngamma_values = [1.0, 2.0, 3.0]\ncolors = ['blue', 'red', 'green']\n\n# Plot settings\nplt.figure(figsize=(10, 6))\n\n# Plot each Moffat profile\nfor gamma, color in zip(gamma_values, colors):\n    # Create Moffat1D model with fixed parameters\n    moffat = Moffat1D(amplitude=1.0, x_0=0.0, gamma=gamma, alpha=2.5)\n    \n    # Evaluate and plot the model\n    plt.plot(x, moffat(x), color=color, label=f'Moffat1D (gamma = {gamma:.1f})')\n\ngaussian_width_values = [1.0, 2.0, 3.0]\ncolors = ['blue', 'red', 'green']\nfor width, color in zip(gaussian_width_values, colors):\n    # Create Gaussian1D model with fixed parameters\n    gaussian = Gaussian1D(amplitude=1.0, x_0=0.0, width=width, alpha=2.5)\n    \n    # Evaluate and plot the model\n    plt.plot(x, gaussian(x), color=color, label=f'Gaussian1D (width = {width:.1f})')\n\n# Customize plot\nplt.xlabel('Position')\nplt.ylabel('Intensity')\nplt.title('Comparison of Moffat and Gaussian Profiles')\nplt.legend()\nplt.grid(True, alpha=0.3)\n\n# Show plot\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to plot a 2D Moffat model on a 2D grid. Please create a 2D Moffat profile with fixed alpha=2.5 and variable gamma as [1.0, 2.0, 3.0] "
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Moffat2D\nimport matplotlib.pyplot as plt\n\n# Create 2D grid points for evaluation\nx = np.linspace(-10, 10, 100)\ny = np.linspace(-10, 10, 100)\n\n# Create three Moffat2D profiles with different gamma values\ngamma_values = [1.0, 2.0, 3.0]\ncolors = ['blue', 'red', 'green']\n\n# Plot settings\nplt.figure(figsize=(10, 6))\n\n# Plot each Moffat profile\nfor gamma, color in zip(gamma_values, colors):\n    # Create Moffat2D model with fixed parameters\n    moffat = Moffat2D(amplitude=1.0, x_0=0.0, y_0=0.0, gamma=gamma, alpha=2.5)\n    \n    # Evaluate and plot the model\n    plt.contourf(x, y, moffat(x, y), color=color, label=f'\u03b3 = {gamma:.1f}')\n\n# Customize plot\nplt.xlabel('X Position')\nplt.ylabel('Y Position')\nplt.title('2D Moffat Profile')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to fit a Moffat1D model to a dataset. Please create a mock dataset with noise and then fit a Moffat1D model to it. Please, include the residuals on a separate plot. "
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Moffat1D\nfrom astropy.modeling.fitting import LevMarLSQFitter\nimport matplotlib.pyplot as plt\n\n# Create mock dataset with noise\nx = np.linspace(-10, 10, 100)\nmoffat = Moffat1D(amplitude=1.0, x_0=0.0, gamma=2.0, alpha=2.5)\nmock_data = moffat(x) + np.random.normal(0, 0.1, 100)\n\n# Fit Moffat1D model to the mock dataset\nfitter = LevMarLSQFitter()\nresult = fitter(moffat, x, mock_data)\n\n# Plot fitted model and data\nplt.plot(x, mock_data, 'o', label='Mock Data')\nplt.plot(x, result(x), label='Fitted Model')\nplt.xlabel('Position')\nplt.ylabel('Intensity')\nplt.title('Fitted Moffat1D Model')\nplt.legend()\nplt.show()\n\n# Plot residuals\nresiduals = mock_data - result(x)\nplt.plot(x, residuals, 'o', label='Residuals')\nplt.xlabel('Position')\nplt.ylabel('Residuals')\nplt.title('Residuals of Fitted Model')\nplt.legend()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform an outer join on object_name, magnitude_g, and distance_pc"
      },
      {
        "from": "assistant",
        "value": "combined_catalog = join(survey1, survey2, keys=['object_name', 'magnitude_g'], join_type='outer', keys_right=['distance_pc'], table_names=['Survey1', 'Survey2'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Join survey1 and survey3 on object_name and spectral_type"
      },
      {
        "from": "assistant",
        "value": "survey3 = Table(...)  # Create sample data for survey3\ncombined_catalog = join(survey1, survey3, keys=['object_name', 'spectral_type'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Perform a left join on object_name, magnitude_g, and distance_pc"
      },
      {
        "from": "assistant",
        "value": "combined_catalog = join(survey1, survey2, keys=['object_name', 'magnitude_g'], join_type='left', keys_right=['distance_pc'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I implement a Gaussian1DKernel with stddev=4 pixels, x_size=13, mode='linear_interp', factor=5, to convolve with my intensity array [170.5, 172.1, 171.9, 173.1, 176.3, 174.8, 173.5, 171.6, 172.4]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\ngaussian_kernel = Gaussian1DKernel(stddev=4, x_size=13, mode='linear_interp', factor=5)\nconvolve_intensity = convolve(intensity, gaussian_kernel, boundary='extend')\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing a dataset with missing values and want to calculate the median absolute deviation (MAD) for a subset of the data while ignoring NaNs. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "mad(data, ignore_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 2D array of data and want to calculate the MAD along the 0th axis. Can you tell me how to do this?"
      },
      {
        "from": "assistant",
        "value": "mad(data, axis=0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a dataset that contains masked values and want to calculate the MAD using the masked median. Can you provide the code for this?"
      },
      {
        "from": "assistant",
        "value": "mad(data, func=np.ma.median)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have spectral data showing the emission lines from a galaxy, with flux measurements at wavelengths between 4800-5200 Angstroms. How can I use Polynomial1D to fit a 4th-degree polynomial to model the continuum baseline?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create sample spectral data (normally this would be loaded from file)\nwavelengths = np.linspace(4800, 5200, 100) * u.angstrom\n# Simulate some continuum with noise\nflux = 1e-14 * (1 + 0.1 * (wavelengths.value - 5000)/200 + \n                0.05 * np.sin(wavelengths.value/100)) + \n                np.random.normal(0, 1e-16, len(wavelengths))\n\n# Initialize the polynomial model for continuum fitting\ncont_model = models.Polynomial1D(degree=4)\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# Note: removing units for fitting process\ncont_fit = fitter(cont_model, wavelengths.value, flux)\n\n# Calculate the fitted continuum\ncontinuum = cont_fit(wavelengths.value)\n\n# The residuals (emission lines would show up as positive residuals)\nresiduals = flux - continuum\n\n# Print fit coefficients\nprint(\"Polynomial coefficients (highest degree first):\")\nfor i, coef in enumerate(reversed(cont_fit.parameters)):\n    print(f\"c{i}: {coef:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have spectral data showing the emission lines from a galaxy, with flux measurements at wavelengths between 4800-5200 Angstroms. How can I use Polynomial1D to fit a 2nd-degree polynomial to model the continuum baseline?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create sample spectral data (normally this would be loaded from file)\nwavelengths = np.linspace(4800, 5200, 100) * u.angstrom\n# Simulate some continuum with noise\nflux = 1e-14 * (1 + 0.1 * (wavelengths.value - 5000)/200 + \n                0.05 * np.sin(wavelengths.value/100)) + \n                np.random.normal(0, 1e-16, len(wavelengths))\n\n# Initialize the polynomial model for continuum fitting\ncont_model = models.Polynomial1D(degree=2)\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# Note: removing units for fitting process\ncont_fit = fitter(cont_model, wavelengths.value, flux)\n\n# Calculate the fitted continuum\ncontinuum = cont_fit(wavelengths.value)\n\n# The residuals (emission lines would show up as positive residuals)\nresiduals = flux - continuum\n\n# Print fit coefficients\nprint(\"Polynomial coefficients (highest degree first):\")\nfor i, coef in enumerate(reversed(cont_fit.parameters)):\n    print(f\"c{i}: {coef:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have spectral data showing the emission lines from a galaxy, with flux measurements at wavelengths between 4800-5200 Angstroms. How can I use Polynomial1D to fit a 5th-degree polynomial to model the continuum baseline?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create sample spectral data (normally this would be loaded from file)\nwavelengths = np.linspace(4800, 5200, 100) * u.angstrom\n# Simulate some continuum with noise\nflux = 1e-14 * (1 + 0.1 * (wavelengths.value - 5000)/200 + \n                0.05 * np.sin(wavelengths.value/100)) + \n                np.random.normal(0, 1e-16, len(wavelengths))\n\n# Initialize the polynomial model for continuum fitting\ncont_model = models.Polynomial1D(degree=5)\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\n# Note: removing units for fitting process\ncont_fit = fitter(cont_model, wavelengths.value, flux)\n\n# Calculate the fitted continuum\ncontinuum = cont_fit(wavelengths.value)\n\n# The residuals (emission lines would show up as positive residuals)\nresiduals = flux - continuum\n\n# Print fit coefficients\nprint(\"Polynomial coefficients (highest degree first):\")\nfor i, coef in enumerate(reversed(cont_fit.parameters)):\n    print(f\"c{i}: {coef:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you get the barycentric position and velocity of Earth, Sun, and Jupiter at epoch 2024-07-21T00:00:00?"
      },
      {
        "from": "assistant",
        "value": "earth_pos, earth_vel = get_body_barycentric('earth', Time('2024-07-21T00:00:00'))\nsun_pos, sun_vel = get_body_barycentric('sun', Time('2024-07-21T00:00:00'))\njupiter_pos, jupiter_vel = get_body_barycentric('jupiter', Time('2024-07-21T00:00:00'))\nprint(earth_pos, earth_vel, sun_pos, sun_vel, jupiter_pos, jupiter_vel)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the combined coverage using `astropy.stats.fold_intervals`?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import fold_intervals\nimport numpy as np\nintervals = [(0.1, 0.3, 1.0), (0.5, 0.7, 2.0), (0.9, 0.99, 1.5)]\n\ncovers = fold_intervals(np.array([[0.1, 0.3, 1], [0.5, 0.7, 2], [0.9, 0.99, 1.5]]))\nprint(covers)\n# now integrate the resulting array over the y axis to get the total coverage\nfrom scipy.integrate import trapz\ncoverage = trapz(covers[1], covers[0])\nprint('Total coverage:', coverage)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to add a new column to my table that represents the distance of each star from the Galactic center. Can you show me how to do this and handle ValueError when the table doesn't have the required columns?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create a sample table with star data\nstar_data = Table({'RA': [83.5, 84.5], 'DEC': [-5.2, -4.2], 'spec_mag': [15.6, 15.8]})\n\ncolumns_to Require = ['RA', 'DEC']  # Required columns\n\nnew_columns = {'Distance': None}  # New column to add\n\ndef add_distance_column(table):\n    # Check if table has required columns\n    for column in columns_to_require:\n        if column not in table.colnames:\n            raise ValueError(f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the angular distance between two points on a sphere?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Define two points on a sphere\npoint1 = SkyCoord('12h00m00s +00d00m00s')\npoint2 = SkyCoord('13h00m00s +00d00m00s')\n\n# Calculate angular separation\nsep = point1.separation(point2)\n\n# Convert to arcminutes for practical use\nsep_arcmin = sep.to(u.arcmin)\n\nprint(sep_arcmin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a directed and undirected graph?"
      },
      {
        "from": "assistant",
        "value": "A directed graph is a graph where edges have a direction, while an undirected graph is a graph where edges do not have a direction."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the chromatic number of a graph?"
      },
      {
        "from": "assistant",
        "value": "The chromatic number of a graph is the minimum number of colors needed to color the vertices of the graph such that no two adjacent vertices have the same color."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of a planar graph?"
      },
      {
        "from": "assistant",
        "value": "A planar graph is a graph that can be drawn in a plane without any edge crossings. For example, a triangle is a planar graph."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of changing the core width on the Moffat2D model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ndef moffat_model(amplitude=250, x_0=100, y_0=100, gamma=10, alpha=2.0):\n    return models.Moffat2D(amplitude, x_0, y_0, gamma, alpha)\n\n# Example: Create a grid to evaluate the model\ny, x = np.mgrid[0:200, 0:200]\nmoffat_data = moffat_model(x, y)\n\n# Note: For actual PSF fitting, you would use:\n# fitter = fitting.LevMarLSQFitter()\n# best_fit = fitter(moffat_model, x, y, your_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a pie chart to show the distribution of different star types. Could you show how to create this plot using Astropy's visualization style?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to plot the regression line for a set of data. Could you show how to create this plot using Astropy's visualization style?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a histogram to show the distribution of redshift values. Could you show how to create this plot using Astropy's visualization style?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the position of the Earth-Moon Barycenter at different times?"
      },
      {
        "from": "assistant",
        "value": "get_body_barycentric('earth-moon-barycenter', start_time + hours * 3600 * u.second)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.visualization.simple_norm to normalize an image?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.simple_norm(data, stretch='linear', power=2.0, vmin=0.0, vmax=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of using astropy.visualization.simple_norm with a logarithmic stretch?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.simple_norm(data, stretch='log', log_a=1000.0, vmin=0.0, vmax=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.visualization.simple_norm to apply a clip to the image data?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.simple_norm(data, stretch='linear', clip=True, vmin=0.0, vmax=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I specify the bounds of a parameter in my model?"
      },
      {
        "from": "assistant",
        "value": "bounds=[(parameter_name, (lower bound, upper bound))]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I tie a parameter to another parameter in my model?"
      },
      {
        "from": "assistant",
        "value": "tied={parameter_name: callable}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fix a parameter in my model so it cannot be updated during fitting?"
      },
      {
        "from": "assistant",
        "value": "fixed={'parameter_name': True}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert Julian Date 2459823.5 to Barycentric Dynamical Time (TDB)"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimeDelta, TDB; from astropy.coordinates import EarthLocation, Longitude; Time(2459823.5, format='jd').tdb"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find the Equation of Time for March 20, 2020"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time; from astropy.coordinates import EarthLocation, Longitude; from astropyFUNC Finding EOT Import.*; Time('2020-03-20').eot"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert 12:00:00 UTC on January 1, 2020 to Julian Date format"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time; Time('2020-01-01 12:00:00').jd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to normalize my 2D image spectrum so that it looks symmetric around the central wavelength. Can you help me to do this by showing how to use theLinearStretch in astropy's astropy.visualization module, combined with ImageNormalize?"
      },
      {
        "from": "assistant",
        "value": "In this example, we'll use the LinearStretch from astropy's astropy.visualization module, combined with ImageNormalize, to normalize a 2D image spectrum. We'll create an example spectrum that simulates a symmetric profile around the central wavelength.\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the AsymmetricPercentileStretch in astropy's astropy.visualization module, with ImageNormalize, to normalize a 3D spectral cube where the intensities are between 0-100?"
      },
      {
        "from": "assistant",
        "value": "  from astropy.visualization import AsymmetricPercentileStretch, ImageNormalize\n import numpy as np\n# Example 3D spectral cube (replace this with your actual data)\nnp.random.seed(0)\nspectral_cube = np.random.uniform(0, 100, (10, 10, 10))  # Sample 3D data between 0-100\n# Create normalizer with AsymmetricPercentileStretch\nnormalizer = ImageNormalize(\n    data=spectral_cube.mean(axis=0),  # Use mean of spectral cube as data\n    stretch=AsymmetricPercentileStretch(globals=stats2, asymptote=0.1),  # Asymmetric percentile stretch\n    stretch_percentile=(0.1, 99.9),  # Percentage points\n    clip=True  # Clips values outside [0,1]\n)\n# Apply normalization to the spectral cube\nnormalized_spectral_cube = normalizer(spectral_cube)\n# The normalized_spectral_cube now contains the normalized values"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a five-tile histogram equalizer (HistEQ) in astropy with emphasis of equalization on the bright regions of a histogram?"
      },
      {
        "from": "assistant",
        "value": "\nfrom astropy.visualization import HistEqualization, ImageNormalize\nimport numpy as np\n# Example data (replace this with your actual data)\nspectrum_intensity = np.random.uniform(0, 1, 100)  # Sample data between 0-1\n# Create normalizer with HistEqualization\nnormalizer = ImageNormalize(\n    data=spectrum_intensity,\n    stretch=HistEqualization(5, 0, 1),  # Five-tile histogram equalizer (HistEQ) with emphasis on bright regions\n    clip=True  # Clips values outside [0,1]\n)\n# Apply normalization to the spectrum\nnormalized_spectrum = normalizer(spectrum_intensity)\n# The normalized_spectrum now contains the histogram equalized values"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "As a parking manager, I want to convert the parking time from minutes to hours, to make it easier to understand for drivers."
      },
      {
        "from": "assistant",
        "value": "p_time = 15\n\n# Convert minutes to hours\nhours = p_time / 60\n\nprint(hours)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a structured quantity to represent the mass and radius of a black hole?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nimport numpy as np\nclass BlackHoleProperties:\n    def __init__(self, mass, radius):\n        self.mass = mass * u.Msun\n        self.radius = radius * u.km\n\n    def __getitem__(self, key):\n        return self.__dict__[key]\n\n# Create black hole object\nblack_hole = BlackHoleProperties(100, 10)\nprint(f'Mass: {black_hole.mass}')\nprint(f'Radius: {black_hole.radius}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a composite unit with astropy.units?"
      },
      {
        "from": "assistant",
        "value": "{\"scale\": 1.0, \"bases\": [u.m, u.s], \"powers\": [2, -1]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use astropy.units to handle temperature measurements in Kelvin?"
      },
      {
        "from": "assistant",
        "value": "{\"scale\": 1.0, \"bases\": [u.m, u.K], \"powers\": [1, 0]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I express a unit for the number of atoms in a mole using astropy.units?"
      },
      {
        "from": "assistant",
        "value": "{\"scale\": 6.02214076e+23, \"bases\": [u mole, u atom], \"powers\": [1, 1]}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have three tables (table1, table2, table3) with columns x, y, z. How can I combine these tables horizontally using dstack?"
      },
      {
        "from": "assistant",
        "value": "dstack([table1, table2, table3])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables (tableA, tableB) with columns a, b, c. How can I combine these tables vertically using vstack?"
      },
      {
        "from": "assistant",
        "value": "vstack([tableA, tableB])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables (tableX, tableY) with columns x, y, z. How can I combine these tables horizontally using dstack with join type 'inner'?"
      },
      {
        "from": "assistant",
        "value": "dstack([tableX, tableY], join_type='inner')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing historical astronomical data where distances were recorded in imperial units. How can I convert the speed of 100 mph to miles per hour using astropy's imperial units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\nhour = u.imperial.hour\nmiles = u.imperial.mile\nmph = 100\nspeed_mph = mph * (miles / hour)\nprint(speed_mph)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert the temperature 32 deg_F to Celsius using astropy's imperial units."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\ndeg_F = 32\ncelsius = u.imperial.deg_C\ntemperature_C = deg_F * (celsius / u.imperial.deg_F)\nprint(temp_C)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing historical astronomical data where distances were recorded in imperial units. How can I convert the length of 1000 ft to inches using astropy's imperial units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nu.imperial.enable()\ningch = u.imperial.inch\nft = 1000\nlength_inches = ft * (inching / u.imperial.ft)\nprint(length_inches)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a fixed amplitude to my Const2D model?"
      },
      {
        "from": "assistant",
        "value": "background_model = models.Const2D(amplitude=5.0, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I tie the amplitude of my Const2D model to another parameter?"
      },
      {
        "from": "assistant",
        "value": "background_model = models.Const2D(amplitude=2.0, tied={'amplitude': lambda x: x.amplitude})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the default bounds for the amplitude parameter in Const2D?"
      },
      {
        "from": "assistant",
        "value": "background_model = models.Const2D(amplitude=1.0, bounds={'amplitude': [-10.0, 10.0]})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectra of a binary star system. I need to implement a logarithmic stretch to the data using the asinh function. Can you provide a code snippet using the astronomy defaults?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch\nfrom astropy.visualization import PercentileInterval\n\n# Create a logarithmic stretch using the asinh function\nstretch = AsinhStretch()\n\n# Create a stretch interval to determine the display limits\ninterval = PercentileInterval(1, 99)\n\n# Define the data to be stretched\ndata = np.array([...])\n\n# Stretch the data\nstretched_data = stretch(data)\n\n# Get the display limits\nvmin, vmax = interval.get_limits(stretched_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I apply a power stretch with a=0.5?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.PowerStretch(a=0.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of power stretch with a=1.2?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.PowerStretch(a=1.2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use power stretch with a=0.8 in combination with imshow?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.PowerStretch(a=0.8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to apply a power stretch with a=0.9?"
      },
      {
        "from": "assistant",
        "value": "astropy.visualization.PowerStretch(a=0.9)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm performing data quality checks on a 512x512 image array. How can I apply a Box2DKernel with width=5 using 'oversample' mode to enhance the vertical cloud structures?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\ncurrent_img = np.random.random((512, 512))  # Placeholder data\n# Create a vertical Box2DKernel\nkernel = Box2DKernel(width=5)\n# Apply convolution with boundary handling\nsmoothed_img = convolve(current_img, kernel, boundary='fill', fill_value=np.nan, normalize_kernel=True, preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the atmospheric conditions on a 1024x1024 image array. How can I apply a Box2DKernel with width=2 using 'center' mode to enhance the circular cloud features while minimizing horizontal artifacts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\ncurrent_img = np.random.random((1024, 1024))  # Placeholder data\n# Create a circular Box2DKernel\nkernel = Box2DKernel(width=2)\n# Apply convolution with boundary handling\nsmoothed_img = convolve(current_img, kernel, boundary='fill', fill_value=np.nan, normalize_kernel=True, preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with large image datasets. How can I apply a Box2DKernel with width=4 using 'integrate' mode to enable efficient computation on large-scale astrophysical imaging analysis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\ncurrent_img = np.random.random((2048, 2048))  # Placeholder data\n# Create a Box2DKernel\nkernel = Box2DKernel(width=4)\n# Apply convolution with boundary handling\nsmoothed_img = convolve(current_img, kernel, boundary='fill', fill_value=np.nan, normalize_kernel=True, preserve_nan=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert seconds to days."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\nfrom astropy.constants import day\n\n# Create example time measurements (assuming in seconds)\ntime_s = 86400 * u.s\n\n# Convert to days\n# 1 day = 86400 seconds\n\n# This is equivalent to:\ntime_day = time_s.to(day)\n\nprint(f\"Time in days: {time_day}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a GeocentricTrueEcliptic object to track the position of the asteroid Pallas on January 16, 2024, given its ecliptic coordinates (lon=245.6 deg, lat=10.5 deg, distance=2.1 AU) and proper motions (pm_lon_coslat=0.01 deg/day, pm_lat=-0.001 deg/day)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Set the observation time\nobs_time = Time('2024-01-16')\n\n# Create a spherical representation of Pallas' position\n# Note: lon=245.6\u00b0, lat=10.5\u00b0, distance=2.1 AU\npallas_pos = SphericalRepresentation(\n    lon=245.6 * u.deg,\n    lat=10.5 * u.deg,\n    distance=2.1 * u.AU\n)\n\n# Create GeocentricTrueEcliptic object with position and proper motion\npallas = GeocentricTrueEcliptic(\n    representation_type=SphericalRepresentation,\n    lon=pallas_pos.lon,\n    lat=pallas_pos.lat,\n    distance=pallas_pos.distance,\n    pm_lon_coslat=0.01 * u.deg/u.day,  # Proper motion in longitude\n    pm_lat=-0.001 * u.deg/u.day,        # Proper motion in latitude\n    obstime=obs_time\n)\n\n# Print the position\nprint(f\"Pallas position in Ecliptic coordinates:\\nLongitude: {pallas.lon:.4f}\\nLatitude: {pallas.lat:.4f}\\nDistance: {pallas.distance:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a GeocentricTrueEcliptic object to track the position of the asteroid Vesta on January 17, 2024, given its ecliptic coordinates (lon=350.9 deg, lat=-8.5 deg, distance=1.8 AU) and proper motions (pm_lon_coslat=0.005 deg/day, pm_lat=0.002 deg/day)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Set the observation time\nobs_time = Time('2024-01-17')\n\n# Create a spherical representation of Vesta's position\n# Note: lon=350.9\u00b0, lat=-8.5\u00b0, distance=1.8 AU\nvesta_pos = SphericalRepresentation(\n    lon=350.9 * u.deg,\n    lat=-8.5 * u.deg,\n    distance=1.8 * u.AU\n)\n\n# Create GeocentricTrueEcliptic object with position and proper motion\nvesta = GeocentricTrueEcliptic(\n    representation_type=SphericalRepresentation,\n    lon=vesta_pos.lon,\n    lat=vesta_pos.lat,\n    distance=vesta_pos.distance,\n    pm_lon_coslat=0.005 * u.deg/u.day,  # Proper motion in longitude\n    pm_lat=0.002 * u.deg/u.day,        # Proper motion in latitude\n    obstime=obs_time\n)\n\n# Print the position\nprint(f\"Vesta position in Ecliptic coordinates:\\nLongitude: {vesta.lon:.4f}\\nLatitude: {vesta.lat:.4f}\\nDistance: {vesta.distance:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a GeocentricTrueEcliptic object to track the position of the asteroid Iris on January 18, 2024, given its ecliptic coordinates (lon=19.1 deg, lat=4.2 deg, distance=2.5 AU) and proper motions (pm_lon_coslat=-0.02 deg/day, pm_lat=-0.003 deg/day)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import GeocentricTrueEcliptic, CartesianRepresentation, SphericalRepresentation\nfrom astropy import units as u\nfrom astropy.time import Time\n\n# Set the observation time\nobs_time = Time('2024-01-18')\n\n# Create a spherical representation of Iris' position\n# Note: lon=19.1\u00b0, lat=4.2\u00b0, distance=2.5 AU\niris_pos = SphericalRepresentation(\n    lon=19.1 * u.deg,\n    lat=4.2 * u.deg,\n    distance=2.5 * u.AU\n)\n\n# Create GeocentricTrueEcliptic object with position and proper motion\niris = GeocentricTrueEcliptic(\n    representation_type=SphericalRepresentation,\n    lon=iris_pos.lon,\n    lat=iris_pos.lat,\n    distance=iris_pos.distance,\n    pm_lon_coslat=-0.02 * u.deg/u.day,  # Proper motion in longitude\n    pm_lat=-0.003 * u.deg/u.day,        # Proper motion in latitude\n    obstime=obs_time\n)\n\n# Print the position\nprint(f\"Iris position in Ecliptic coordinates:\\nLongitude: {iris.lon:.4f}\\nLatitude: {iris.lat:.4f}\\nDistance: {iris.distance:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compare the flare durations of red dwarfs and M-dwarfs in the Alpha Persei cluster?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\ndeflaredwarfs = np.array([1.8, 2.5, 3.1, 4.0, 5.5])\nmdwarfs = np.array([6.2, 7.5, 8.1, 9.3, 10.8])nkuiper_two(deflaredwarfs, mdwarfs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you change the format of the FITS header to BINTABLE?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('example.fits', 'FORMAT', value='BINTABLE')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I update the comment for the HIERARCH keyword in my FITS file?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('example.fits', 'HIERARCH', comment='New comment')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you add a new keyword to the end of the FITS header?"
      },
      {
        "from": "assistant",
        "value": "fits.setval('example.fits', 'NEW_KEYWORD', value='NEW_VALUE', after=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a custom keyword to my FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdu = fits.BinTableHDU(data)\nhdu.header['CUSTOM_KEYWORD'] = 'Custom value'"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between `fits.BinTableHDU` and `fits.HDUList`?"
      },
      {
        "from": "assistant",
        "value": "fits.BinTableHDU creates a single binary table HDU, while fits.HDUList can hold multiple HDUs, including tables, images, and headers"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I read a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('file.fits')\nprint(hdul[0].data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a 3D rectangular cartesian coordinate to spherical polar coordinates using astropy. Can you provide an example?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical camarilenolen sper TA el  cart_loc = 2000,2000,2000\n r, lat, lon = cartesian_to_spherical(cart_loc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of 3D rectangular cartesian coordinates and I need to convert them to spherical polar coordinates using astropy. Can you provide an example?"
      },
      {
        "from": "assistant",
        "value": "[cartesian_to_spherical(i) for i in [[1000,1000,1000],[2000,2000,2000],[3000,3000,3000]]]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert 3D rectangular cartesian coordinates to spherical polar coordinates using astropy and get the radial coordinate in km. Can you provide an example?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import cartesian_to_spherical\ncart_loc = [1000, 2000, 3000]\nr, lat, lon = cartesian_to_spherical(cart_loc)\nprint(r.to(u.km))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian filter kernel for image convolution with a specified standard deviation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel\nfrom astropy.convolution import convolve\n\ndef create_gaussian_kernel(stddev=1.0, size=21):\n    # Create Gaussian kernel\n    kernel = Gaussian2DKernel(stddev=stddev, x_size=size, y_size=size)\n\n    return kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box filter kernel for image convolution with a specified box size?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel\ndef create_box_kernel(box_size=3):\n    # Create Box kernel\n    kernel = Box2DKernel(box_size=box_size)\n\n    return kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Ring filter kernel for image convolution with specific inner radius and width?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\ndef create_ring_kernel(radius_in=9, width=8):\n    # Create Ring kernel\n    kernel = Ring2DKernel(radius_in=radius_in, width=width)\n\n    return kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Moffat2D profile with amplitude 1000, x_0 50, y_0 75, gamma 3.0, and alpha 3.5"
      },
      {
        "from": "assistant",
        "value": "moffat3 = Moffat2D(amplitude=1000, x_0=50, y_0=75, gamma=3.0, alpha=3.5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Compare two Moffat2D profiles with different gamma values (2.0 and 6.0) but the same amplitude (2000), center position (150, 150), and alpha (2.5)."
      },
      {
        "from": "assistant",
        "value": "Create two Moffat2D profiles with different gamma values and plot them side by side"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create three Moffat2D profiles with different alpha values (1.0, 2.0, and 3.0) but the same amplitude (500), x_0 (100), y_0 (100), and gamma (4.0)."
      },
      {
        "from": "assistant",
        "value": "moffat1 = Moffat2D(amplitude=500, x_0=100, y_0=100, gamma=4.0, alpha=1.0)\nmoffat2 = Moffat2D(amplitude=500, x_0=100, y_0=100, gamma=4.0, alpha=2.0)\nmoffat3 = Moffat2D(amplitude=500, x_0=100, y_0=100, gamma=4.0, alpha=3.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use the FK5 reference frame to calculate the position of a star at a specific epoch, given its proper motion and initial position?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Example star data (RA, Dec, PM_RA, PM_Dec)\nra = 45.0 * u.degree  # Right Ascension\ndec = -30.0 * u.degree  # Declination\ncosdec = 0.5  # cos(Declination) value\ncospmra = cosdec * pm_ra  # Proper motion in RA, including cos(Declination) factor\npm_dec = -7.0 * u.mas/u.yr  # Proper motion in Dec\n\n# Create SkyCoord object with proper motion for specific equinox and observation time\nequinox_time = Time('J2000', scale='tdb')  # Set time scale to TDB\nstar_position = SkyCoord(ra=ra, dec=dec, pm_ra_cosdec=cospmra, pm_dec=pm_dec,\n                            frame='fk5', equinox=equinox_time)\n\n# Calculate position at a different epoch\nnew_epoch = Time('2025-01-01', scale='tdb')  # Set the same time scale\nfuture_position = star_position.apply_space_motion(new_epoch)  # Pass the new epoch directly\n\n# Print results\nprint(f\"Original position (J2000): {star_position.to_string('hmsdms')}\")\nprint(f\"Position at {new_epoch.iso}: {future_position.to_string('hmsdms')}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use astropy.coordinates.match_coordinates_3d to find the second-nearest neighbor for a set of stars in a catalog?"
      },
      {
        "from": "assistant",
        "value": "How to combinefind_second_nearest_neighbor with astropy.coordinates.match_coordinates_3d to calculate second-nearest neighbor separations and distances?"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use astropy.coordinates.match_coordinates_3d with a catalog of galaxies?"
      },
      {
        "from": "assistant",
        "value": "How to apply astropy.coordinates.match_coordinates_3d to a large galaxy catalog to find second-nearest neighbor distances in 3D space?"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal way to use astropy.coordinates.match_coordinates_3d to find second-nearest neighbors in a cloud of gas particles?"
      },
      {
        "from": "assistant",
        "value": "How to efficiently use astropy.coordinates.match_coordinates_3d to calculate second-nearest neighbor separations and distances for a large cloud of gas particles in 3D space?"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the Sun at midnight in the North Pole?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import get_sun, GCRS\n\ntime = Time('2024-07-26 00:00:00')\nsun_position = get_sun(time)\nprint(sun_position)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Why does the Sun's position change throughout the year?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, EarthLocation\nfrom astropy.time import Time\n\ncpy  # Define a location on Earth\nlocation = EarthLocation(lat=90 * u.deg, lon=0 * u.deg)\n\n# Create a time array spanning a year\nyear = Time('2024-07-26')\nyear_array = year + TimeDelta(365 * u.day) / 365\n\n# Get the Sun's position for each time in the array\nfor time in year_array:\n    sun_position = get_sun(time)\n    print(sun_position)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the Sun's position change at different latitudes?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_sun, EarthLocation\nfrom astropy.time import Time\n\ncpy  # Define locations on Earth at different latitudes\nlocations = [\t\tEarthLocation(lat=30 * u.deg, lon=0 * u.deg),\n\t\tEarthLocation(lat=60 * u.deg, lon=0 * u.deg),\n\t\tEarthLocation(lat=90 * u.deg, lon=0 * u.deg)\t]\n\ntime = Time('2024-07-26 00:00:00')\n\n# Get the Sun's position for each location\nfor location in locations:\n    sun_position = get_sun(time, location=location)\n    print(sun_position)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a binary table with three columns: frequency (in GHz: [1.2, 2.3, 3.4]), flux density (in mJy: [10.1, 20.2, 30.3]) and spectral index ([0.1, 0.2, 0.3])."
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndata = np.zeros(len([1.2, 2.3, 3.4]), dtype=[('FREQ', 'f8'), ('FLUX', 'f8'), ('SP(attr_xlabel=ease'+"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I compute the angular dispersion of asteroid orbital inclinations using circular statistics?"
      },
      {
        "from": "assistant",
        "value": "Compute angular dispersion of orbital inclinations using astropy.stats.circstd"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the difference between 'angular' and 'circular' methods in astropy.stats.circstd?"
      },
      {
        "from": "assistant",
        "value": "The 'angular' method computes the angular deviation, while the 'circular' method computes the circular deviation"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy.stats.circstd to compute the standard deviation of an array of circular data with weights?"
      },
      {
        "from": "assistant",
        "value": "Use the weights parameter in astropy.stats.circstd to compute the standard deviation of an array of circular data with weights"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the best way to convolve a large image with a Gaussian kernel?"
      },
      {
        "from": "assistant",
        "value": "Use `astropy.convolution.Gaussian2DKernel` and `astropy.convolution.convolve_fft`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I handle NaN values in my image during convolution?"
      },
      {
        "from": "assistant",
        "value": "Use the `nan_treatment` parameter in `astropy.convolution.convolve_fft`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a custom FFT function with `astropy.convolution.convolve_fft`?"
      },
      {
        "from": "assistant",
        "value": "Yes, you can use the `fftn` and `ifftn` parameters to specify your own FFT functions"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Cross-match radio sources from the VLA with optical counterparts from HST."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ndef cross_match_catalogs(ra_vla, dec_vla, ra_hst, dec_hst):\n    \n    # Create SkyCoord objects for both catalogs\n    vla_coords = SkyCoord(ra=ra_vla*u.degree, dec=dec_vla*u.degree)\n    hst_coords = SkyCoord(ra=ra_hst*u.degree, dec=dec_hst*u.degree)\n\n    \n    # Perform the cross-matching\n    idx_hst, idx_vla, separations, _ = vla_coords.search_around_sky(hst_coords, 2*u.arcsec)\n\n    return idx_vla, idx_hst, separations.arcsec\n\n# Example usage:\n# matched_vla_idx, matched_hst_idx, seps = cross_match_catalogs(ra_vla, dec_vla, ra_hst, dec_hst)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model the light profile of a galaxy as a Sersic profile?"
      },
      {
        "from": "assistant",
        "value": "{\\n    \\\"type\\\": \\\"astropy.modeling.core.Model\\\",\\n    \\\"class\\\": \\\"astropy.modeling.models.Sersic1D\\\",\\n    \\\"amplitude\\\": 1.0,\\n    \\\"r_eff\\\": 5.0,\\n    \\\"n\\\": 4.0\\n}\\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the equivalent kernel for the provided shell-like structure observation data in for discrete convolution?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Ring2DKernel\nRing2DKernel(9, 8)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an ISO-formatted time object for '2024-03-16 10:11:12.345678' using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object with microsecond precision\ntime = Time('2024-03-16 10:11:12.345678', format='iso', scale='utc')\n\n# Display in ISO format with microsecond precision\nprint(f'Event Time: {time.iso}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an ISO-formatted time object for '2022-09-01 14:30:00' using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object with second precision\ntime = Time('2022-09-01 14:30:00', format='iso', scale='utc')\n\n# Display in ISO format with second precision\nprint(f'Event Time: {time.iso}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an ISO-formatted time object for '2025-12-25 00:00:00' using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\n# Create Time object with date precision\ntime = Time('2025-12-25', format='iso', scale='utc')\n\n# Display in ISO format with date precision\nprint(f'Event Time: {time.iso}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the motion of a binary star system and I need to convert the coordinates from equatorial to galactic coordinates. How do I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy.units import u\n\n\nsc = SkyCoord(ra=12.5*u.degree, dec=-30.5*u.degree, frame='icrs')\ngalactic = sc.transform_to('galactic')\nprint(galactic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the name of the constellation that contains the star Alpha Centauri?"
      },
      {
        "from": "assistant",
        "value": "[(\"Centaurus\",),]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Which constellation is the star Vega in?"
      },
      {
        "from": "assistant",
        "value": "[(\"Lyra\",)]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the names of the constellations that contain the star Epsilon Scorpii?"
      },
      {
        "from": "assistant",
        "value": "[(\"Scorpius\",)]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the galaxy as a constant background of 20.0 mag/arcsec\u00b2. Show me how to create a Const2D model with inequality constraints ensuring the background stays between 19.0 and 21.0 mag/arcsec\u00b2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Convert magnitude to flux\n# Using the relation: flux = 10^(-0.4 * magnitude)\nmag = 20.0\nflux = 10**(-0.4 * mag)\n\n# Create bounds for the magnitude constraints (19.0 to 21.0 mag/arcsec\u00b2)\n# Convert magnitude bounds to flux bounds (note: flux bounds are reversed since\n# brighter magnitudes = higher flux)\nupper_flux = 10**(-0.4 * 19.0)  # Bright limit\nlower_flux = 10**(-0.4 * 21.0)  # Faint limit\n\n# Create the constant 2D background model with bounds\nbackground_model = models.Const2D(amplitude=flux)\nbackground_model.amplitude.bounds = (lower_flux, upper_flux)\n\n# The model can now be used for fitting while ensuring the background stays\n# within the specified magnitude range"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the stellar population as a constant background of 22.5 mag/arcsec\u00b2. Show me how to create a Const2D model with inequality constraints ensuring the background stays between 22.0 and 23.0 mag/arcsec\u00b2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Convert magnitude to flux\n# Using the relation: flux = 10^(-0.4 * magnitude)\nmag = 22.5\nflux = 10**(-0.4 * mag)\n\n# Create bounds for the magnitude constraints (22.0 to 23.0 mag/arcsec\u00b2)\n# Convert magnitude bounds to flux bounds (note: flux bounds are reversed since\n# brighter magnitudes = higher flux)\nupper_flux = 10**(-0.4 * 22.0)  # Bright limit\nlower_flux = 10**(-0.4 * 23.0)  # Faint limit\n\n# Create the constant 2D background model with bounds\nbackground_model = models.Const2D(amplitude=flux)\nbackground_model.amplitude.bounds = (lower_flux, upper_flux)\n\n# The model can now be used for fitting while ensuring the background stays\n# within the specified magnitude range"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling the dust contribution as a constant background of 15.0 mag/arcsec\u00b2. Show me how to create a Const2D model with inequality constraints ensuring the background stays between 14.0 and 16.0 mag/arcsec\u00b2."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Convert magnitude to flux\n# Using the relation: flux = 10^(-0.4 * magnitude)\nmag = 15.0\nflux = 10**(-0.4 * mag)\n\n# Create bounds for the magnitude constraints (14.0 to 16.0 mag/arcsec\u00b2)\n# Convert magnitude bounds to flux bounds (note: flux bounds are reversed since\n# brighter magnitudes = higher flux)\nupper_flux = 10**(-0.4 * 14.0)  # Bright limit\nlower_flux = 10**(-0.4 * 16.0)  # Faint limit\n\n# Create the constant 2D background model with bounds\nbackground_model = models.Const2D(amplitude=flux)\nbackground_model.amplitude.bounds = (lower_flux, upper_flux)\n\n# The model can now be used for fitting while ensuring the background stays\n# within the specified magnitude range"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal bin width for a sample of galaxy cluster masses using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(np.random.lognormal(mean=1.0, sigma=0.5, size=1000))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the bin width for a dataset of galaxy cluster masses using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.freedman_bin_width(np.random.lognormal(mean=1.0, sigma=0.5, size=1000), return_bins=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the optimal bin width using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "return the optimal bin width using the Freedman-Diaconis rule"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the circular median of pulsar rotation angles using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import circmedian\ncircmedian(pulsar_angles)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the circular standard deviation of pulsar rotation angles in the Crab Nebula?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import circstd\ncircstd(pulsar_angles)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of how to use Astropy to calculate the circular variance of pulsar rotation angles?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import circvar\ncircvar(pulsar_angles)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use mad_std to calculate the robust standard deviation of a dataset with a mixture of positive and negative values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import mad_std\nimport numpy as np\n\n# Create sample data with a mixture of positive and negative values\ndata = np.array([10, -20, 30, -40, 50])\n\n# Calculate robust standard deviation\nrobust_std = mad_std(data)\n\n# Print result\nprint(robust_std)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an object with 2 coordinates, RA and Dec, both in degrees, and a radial velocity of 50 km/s."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=[90, 120]*u.degree, dec=[30, 45]*u.degree, radial_velocity=50*u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an object with 3 coordinates, RA and Dec both in hours, and a radial velocity of 20 km/s."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=[1, 2, 3]*u.hourangle, dec=[4, 5, 6]*u.degree, radial_velocity=20*u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an object with 2 coordinates, RA and Dec, both in hours and degrees respectively, and a radial velocity of 35 km/s."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\nc = SkyCoord(ra=[1, 2]*u.hourangle, dec=[30, 45]*u.degree, radial_velocity=35*u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's convolve_fft function to interpolate over NaN values in my spectroscopic data, treating them as zeros?"
      },
      {
        "from": "assistant",
        "value": "convolve_fft(lam, flux): Returns a convolved image of the input data. By default, convolve_fft replaces NaN values in the input array as zeros."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe the differences between convolve and convolve_fft in astropy's convolution module?"
      },
      {
        "from": "assistant",
        "value": "The main differences are that convolve_fft does not support NaN tolerance, while convolve does. Convolve_fft also does not support the boundary option."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy's convolve function to interpolate over NaN values in my data, using a box kernel?"
      },
      {
        "from": "assistant",
        "value": "The convolve function can be used to interpolate over NaN values in data using a box kernel by setting the boundary option to \"fill\", and the fill_value option to 0.0."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 1D box filter kernel using a similar approach with a width of 5."
      },
      {
        "from": "assistant",
        "value": "box_1d_kernel = Box1DKernel(width=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use a Gaussian2DKernel to convolve the intensity map with a standard deviation of 2.1 pixels."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian2DKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Apply a 1D TopHat filter to the intensity map along the x-axis with a width of 3."
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import TopHat2DKernel, convolve"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the Astropy power-law model to fit a dataset of ,magnitudes. How do I define the model and fit it to the data?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling as apm\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define the power-law model\nclass PowerLaw(apm.FancifyModel):\n    pass\n\nmodel = PowerLaw(amplitude=1, x_0=1, alpha=1)\n\n# Create a dataset of magnitudes\nx = [1, 2, 3] * u.mag\ny = [2, 3, 4] * u.mag\n\n# Fit the model to the data\nfit = model.fit(x, y)\n\n# Print the fitted parameters\nprint(fit.parameters)\n\n# Predict the model at new x values\nnew_x = [4, 5] * u.mag\nnew_y = model(new_x)\n\nprint(new_y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide a way to account for atmospheric refraction when converting celestial coordinates to horizontal coordinates at the location of the ALMA array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\nfrom astropy import units as u\n\n# Define ALMA location\nalma = EarthLocation(lat=-30.725 * u.deg, lon=-110.874 * u.deg, height=3061 * u.m)\n\n# Set observation time (example: current time)\nobstime = Time.now()\n\n# Create AltAz frame for the observation\naltaz_frame = AltAz(obstime=obstime, location=alma, pressure=0.6 * 1013.25 * u.hPa, temperature=-10 * u.deg_C, relative_humidity=0.2)\n\n# Example celestial objects (RA, Dec)\ntargets = {\n    'M87': SkyCoord('12h30m46.7s +12d23m28s'),\n    'N18525': SkyCoord('23h29m12.0s +65d43m03s'),\n    '3C279': SkyCoord('12h56m05.8s -05d46m03s')\n}\n\n# Calculate horizontal coordinates\nfor name, coords in targets.items():\n    altaz = coords.transform_to(altaz_frame)\n    print(f\"{name}\")\n    print(f\"Altitude: {altaz.alt:.2f}\")\n    print(f\"Azimuth: {altaz.az:.2f}\"\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the geocentric true ecliptic coordinate of the SARS-CoV-2 virus?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert the catalog positions of stars from ICRS to geocentric true ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the impact of light deflection from the sun on the geocentric true ecliptic coordinate system?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, GeocentricTrueEcliptic"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you calculate a histogram with Bayesian blocks for binning? Could you show an example with 5 bins?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import histogram\n\n# Data to be histogrammed\ndata = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\n# Calculate histogram with 5 bins using Bayesian blocks\nhist, bin_edges = histogram(data, bins='blocks', bins_count=5)\n\nprint('Histogram:', hist)\nprint('Bin Edges:', bin_edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I calculate the median absolute deviation (MAD) of a dataset with a specified axis?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clipped_stats, mad_std\n\n# Create sample data\ndata = np.random.normal(0, 1, size=(100, 50))\n\n# Calculate MAD along axis 1\nmad = mad_std(data, axis=1)\n\nprint(mad)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a FITS file with a ZPD correction for a specific wavelength?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Create sample ZPD correction data (replace with your actual data)\nzpd_data = np.random.normal(1000, 50, (2048, 2048))\n\n# Create a new FITS file with ZPD correction data and header\nhdul = fits.HDUList([\n\tfits.PrimaryHDU(),\n\tfits.ImageHDU(data=zpd_data, name='ZPD')\n])\n\n# Add custom header keywords for wavelength and ZPD description\nhdul[1].header['WAVE'] = 500.0  # Wavelength in nm\nhdul[1].header['ZPDDESC'] = 'ZPD correction for 500nm'  # ZPD description\n\n# Write to FITS file\nhdul.writeto('zpd Correction.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I would like to create a histogram with a specified number of bins using astropy.visualization.hist."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import histogram, block_norm_mean\nfrom astropy.visualization import hist\n\n# Sample data\nx = np.random.normal(0, 1, 1000)\n\n# Create histogram with 50 bins\nbins, edges = hist(x, bins=50, ax=None)\n\n# Plot histogram\nplt.plot(edges, np.histogram(x, bins=edges)[0])\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of Random Data')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a histogram with bayesian blocks for dynamic bin widths using astropy.visualization.hist?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import histogram, block_norm_mean\nfrom astropy.visualization import hist\n\n# Sample data\nx = np.random.normal(0, 1, 1000)\n\n# Create histogram with bayesian blocks for dynamic bin widths\nbins, edges = hist(x, bins='blocks', ax=None)\n\n# Plot histogram\nplt.plot(edges, np.histogram(x, bins=edges)[0])\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of Random Data')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a histogram with Scott's rule to determine bins using astropy.visualization.hist?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import histogram, block_norm_mean\nfrom astropy.visualization import hist\n\n# Sample data\nx = np.random.normal(0, 1, 1000)\n\n# Create histogram with Scott's rule to determine bins\nbins, edges = hist(x, bins='scott', ax=None)\n\n# Plot histogram\nplt.plot(edges, np.histogram(x, bins=edges)[0])\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Histogram of Random Data')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a new keyword 'TELESCOP' to my FITS file 'hst_image.fits' with value 'Hubble Space Telescope' and comment 'Name of the telescope used in the observation'."
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval('hst_image.fits', 'TELESCOP', value='Hubble Space Telescope', comment='Name of the telescope used in the observation')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to update the value of 'INSTRUME' keyword in my FITS file 'hst_image.fits' to 'ACS/WFC' with the comment 'Instrument used to take the data'."
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval('hst_image.fits', 'INSTRUME', value='ACS/WFC', comment='Instrument used to take the data')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a new keyword 'OBS_MODE' to my FITS file 'hst_image.fits' with value '-imaging' and comment 'Observation mode used during the observation.'."
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.setval('hst_image.fits', 'OBS_MODE', value='imaging', comment='Observation mode used during the observation.')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What are the Quaternions and how do they relate to 3D rotations?"
      },
      {
        "from": "assistant",
        "value": "Quaternions are a number system that extends complex numbers. They consist of a real part and three imaginary parts, often represented as a 4-element vector. In 3D rotations, quaternions are used to represent rotations as a single value, making it easier to perform complex rotations. Astropy's unity class allows us to work with quaternions and perform these operations."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.units module to perform unit conversions?"
      },
      {
        "from": "assistant",
        "value": "The astropy.units module provides a range of functions for performing unit conversions. For example, you can use the to_unit() method to convert a value from one unit to another. For example: value.to(u.pc) This would convert a value in a given unit to parsecs."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a dimensionless unit and a unit with a non-zero dimension?"
      },
      {
        "from": "assistant",
        "value": "In the context of astropy.units, a dimensionless unit is a unit with no units, whereas a unit with a non-zero dimension is a unit that has units attached to it. For example: u.dimensionless-vs-u.non_zero_dimension"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a 3D cartesian representation of two points with positions [[1,2,3], [4,5,6]] in light-years?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CartesianRepresentation\nfrom astropy import units as u\npositions = np.array([[1, 2, 3], [4, 5, 6]])\ncart_coords = CartesianRepresentation(x=positions[:, 0]*u.lyr, y=positions[:, 1]*u.lyr, z=positions[:, 2]*u.lyr)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I combine two SkyCoord objects into a single SkyCoord object?"
      },
      {
        "from": "assistant",
        "value": "catalog_coords1 + catalog_coords2"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a string representation of a date to a Time object?"
      },
      {
        "from": "assistant",
        "value": "Time(\"2022-01-01\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the angular distance between two SkyCoord objects?"
      },
      {
        "from": "assistant",
        "value": "sky_coord1.separation(sky_coord2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a stellar disk with brightness 1.0, centered at (5, 5), with radius 5 units?"
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=1.0, x_0=5.0, y_0=5.0, R_0=5.0).R_0.fixed = True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a disk with brightness 3.0, centered at (0, 0), with radius 15 units and fix the amplitude?"
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=3.0, x_0=0.0, y_0=0.0, R_0=15.0).amplitude.fixed = True"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create a stellar disk with brightness 2.0, centered at (10, 10), with radius 10 units and set bounds for the radius?"
      },
      {
        "from": "assistant",
        "value": "models.Disk2D(amplitude=2.0, x_0=10.0, y_0=10.0, R_0=10.0).R_0.bounds = (5.0, 20.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing data from a telescope in New York (UTC-4). How can I set up timezone information for time series observations starting at 2023-07-15 20:30:00?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime, timedelta  # Import timedelta separately\nimport astropy.units as u\n\n# Create timezone object for New York (UTC-4)\nny_tz = TimezoneInfo(utc_offset=-4*u.hour)  # using astropy units\n\n# Create time object with timezone info\nobs_time = Time(datetime(2023, 7, 15, 20, 30, 0, tzinfo=ny_tz))\n\n# Print both local and UTC times\nprint(f\"Local time in New York: {obs_time.datetime}\")\nprint(f\"UTC time: {obs_time.utc.datetime}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a timezone for Sydney (UTC+10) using astropy.time.TimezoneInfo?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime, timedelta  # Import timedelta separately\nimport astropy.units as u\n\n# Create timezone object for Sydney (UTC+10)\nsydney_tz = TimezoneInfo(utc_offset=10*u.hour)  # using astropy units\n\n# Create time object with timezone info\nobs_time = Time(datetime(2023, 7, 15, 20, 30, 0, tzinfo=sydney_tz))\n\n# Print both local and UTC times\nprint(f\"Local time in Sydney: {obs_time.datetime}\")\nprint(f\"UTC time: {obs_time.utc.datetime}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of using astropy.time.TimezoneInfo to handle daylight saving time for a location like Berlin (UTC+2)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time, TimezoneInfo\nfrom datetime import datetime, timedelta  # Import timedelta separately\nimport astropy.units as u\n\n# Create timezone object for Berlin (UTC+2)\nberlin_tz = TimezoneInfo(utc_offset=2*u.hour)  # using astropy units\n\n# Create time object with timezone info\nobs_time = Time(datetime(2023, 7, 15, 20, 30, 0, tzinfo=berlin_tz))\n\n# Print both local and UTC times\nprint(f\"Local time in Berlin: {obs_time.datetime}\")\nprint(f\"UTC time: {obs_time.utc.datetime}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D image array of size 300x300 representing flux measurements of a galaxy, with some NaN values. Then, convolve this image with a Gaussian kernel with sigma=1.5, while handling the NaN values properly."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convolve a 2D image array representing a star field with a 3x3 kernel that represents a circular mask. The image array has some NaN values, and the kernel should be normalized to have a sum of one. "
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convolve a 1D array of size 1000 representing a signal with a Gaussian kernel with sigma=2. The array has some NaN values, and the convolution should be performed using the FFT method."
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use angular units for a while, show me how to do it."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\n\n# Using context manager to temporarily enable angular units\nwith u.add_enabled_units([u.rad, u.deg]):\n    # Convert 2\u03c0 radians to degrees\n    radians = 2 * u.pi\n    degrees = radians.to(u.deg)\n    print(f'{degrees:.3f} degrees')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I work with conjunctions and magnitudes?"
      },
      {
        "from": "assistant",
        "value": "{\"description\": \"Magnitude is a measure of the brightness of a celestial object.\\nwex it can be used to determine its flux, luminosity, and other properties.\", \"title\": \"Magnitude\", \"units\": [\"mag\", \"m\", \"ab mag\", \"V\"], \"quantity_type\": \"physical}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a Matrix and a Tensor?"
      },
      {
        "from": "assistant",
        "value": "{\"description\": \"A matrix and a tensor are both mathematical objects used to represent linear relationships between variables, but they differ in their structure and properties.\\nwex Matrices are 2D arrays of numbers, while tensors are multi-dimensional arrays.\", \"title\": \"Tensor vs Matrix\", \"units\": [], \"quantity_type\": \"abstract\"}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy ph\u1eadn solver to solve a  welcome einstein field equation?"
      },
      {
        "from": "assistant",
        "value": "{\"description\": \"The astropy solver module provides tools for solving various mathematical equations, including the Einstein field equations.\\nwex you can use it to find the metric tensor, curvature tensors, and other solutions. The astropy solver is compatible with most celestial bodies and types of equations of gravity\\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of spectral lines and want to fit a Gaussian to determine the line center and width. How can I implement this using astropy's modeling framework with LevMarLSQFitter?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.modeling import models, fitting from astropy import units as u # Create sample data (replace with your actual measurements) x = np.linspace(5000, 6000, 100) * u.AA  # wavelength array y = np.random.normal(1e-13, 1e-15, 100)  # mock intensity measurements y_err = np.ones_like(y) * 1e-15  # uncertainties # Initialize the Gaussian model Gaussian_init = models.Gaussian1D(amplitude=1, mean=5500, sigma=100)  # Initialize fitter fitter = fitting.LevMarLSQFitter() # Fit the model to the data # Note: wavelengths need to be converted to appropriate units fitted_gaussian = fitter(Gaussian_init, x, y, weights=1/y_err) # Get the best-fit parameters best_fit_mean = fitted_gaussian.mean.value best_fit_sigma = fitted_gaussian.sigma.value print(f\"Best-fit line center: {best_fit_mean:.0f} Angstroms\") print(f\"Best-fit line width: {best_fit_sigma:.0f} Angstroms\") "
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use jackknife statistics to estimate the median of a dataset?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling, jackknife_stats\n\ndata = np.array([3, 5, 2, 7, 1, 9])\ndef get_median(data):\n    return np.median(data)\n\nresamples = jackknife_resampling(data)\nestimate, bias, stderr, conf_interval = jackknife_stats(data, get_median, confidence_level=0.95)\nprint(f'Median Estimate: {estimate:.2f}')\nprint(f'Standard Error: {stderr:.2f}')\nprint(f'95% Confidence Interval: [{conf_interval[0]:.2f}, {conf_interval[1]:.2f}]')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a profile using Gaussian1D with amplitude=10, mean=50, stddev=0.3, where the amplitude is fixed at 10 and the standard deviation is tied to the mean."
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from AstroPy\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling.parameters import Parameter\n\n# Create a Gaussian1D model with initial parameters\n\n# Tie std_dev to mean through a function, so that it will adjust to mean/variance maintained ratio\n    g1 = models.Gaussian1D(amplitude=10, mean=50, stddev=.3,\n    tied = {'stddev': lambda MODEL: MODEL.mean*0.02})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I wish to use Gaussian1D in astropy.modeling to create a model with parameters,"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from AstroPy\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling.parameters import Parameter\nmodel1 = models.Gaussian1D (amplitude=3.0, mean=12.0,stddev=0.15,fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Gaussian1D Model in astropy for a function with the following characteristics;  A = 2.7, mean = 10.2,  and a for a std = .5..?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from AstroPy\nfrom astropy.modeling import models, fitting\nfrom astropy.modeling.parameters import Parameter\n\n# Create a Gaussian1D model with initial parameters and constraints\n        g1 = models.Gaussian1D(amplitude=2.7, mean=10.2, stddev=.5, # constrained bounds\nbounds={'amplitude': (1.0, 4.0), 'stddev':(.2, 1.0)} )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to create a binary table HDU for my exoplanet radial velocity observations with 3 data points. The columns should be TIME=[0.0, 0.5, 1.0] hours, VALUE=[-0.0005, -0.0042, -0.0001] km/s, and ERROR=[0.00001, 0.0001, 0.000005] km/s. How can I do this with astropy.io.fits.BinTableHDU?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\n\n# Create numpy arrays for the data columns\ntime = np.array([0.0, 0.5, 1.0])\nvvalue = np.array([-0.0005, -0.0042, -0.0001])\nerror = np.array([0.00001, 0.0001, 0.000005])\n\n# Create a list of column definitions\ncols = [\n    fits.Column(name='TIME', format='E', array=time, unit='h'),\n    fits.Column(name='VALUE', format='E', array=vvalue, unit='km/s'),\n    fits.Column(name='ERROR', format='E', array=error, unit='km/s')\n]\n\n# Create the binary table HDU\nvtable_hdu = fits.BinTableHDU.from_columns(cols)\n\n# Add some basic header information\nvtable_hdu.header['EXTNAME'] = 'VELOCITYCURVE'\nvtable_hdu.header['COMMENT'] = 'Exoplanet radial velocity curve data'\n\n# Write to file (optional)\n# vtable_hdu.writeto('velocity_data.fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a constant background noise level in my spectroscopic data?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.modeling.models.Const1D function to create a constant model with a specified amplitude."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to add some random noise to the baseline data?"
      },
      {
        "from": "assistant",
        "value": "You can use the numpy.random.normal function to generate random noise with a specified mean and standard deviation."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I fit a constant model to noisy data?"
      },
      {
        "from": "assistant",
        "value": "You can use the astropy.modeling.fitting.LevMarLSQFitter function to fit the constant model to the noisy data."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": ""
      },
      {
        "from": "assistant",
        "value": ""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the box size to adjust the contrast of my galaxy image?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import StillImageUrl"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain the concept of color mapped visualizations and how they can be used to represent astronomical data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AstronomyImageNormalize"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply a linear scale to my astronomical image while preventing black pixels from becoming white?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import MinMaxInterval"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a SkyCoord object for a galaxy at RA=12.34deg, Dec=56.78deg, with a proper motion in RA And Dec. Write the code snippet using astropy.coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS\nc = SkyCoord(RA=12.34*u.deg, Dec=56.78*u.deg, pm_ra_cosdec=1*u.mas/u.yr, pm_dec=1*u.mas/u.yr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a SkyCoord object for a star with a radial velocity of 100km/s at RA=23.45deg, Dec=-90.12deg"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nc = SkyCoord(RA=23.45*u.deg, Dec=-90.12*u.deg, radial_velocity=100*u.km/u.s)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a code snippet to transform a SkyCoord object from ICRS to Galactic coordinates"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS, Galactic\nc = SkyCoord(RA=12.34*u.deg, Dec=56.78*u.deg, frame=ICRS)\nc_gal = c.transform_to(Galactic)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar luminosities [3.846, 1.989, 380000000, 105000000] and want to create a Column named 'lum' with units of solar luminosities, formatted to show values in scientific notation."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nfrom astropy import units as u\n\n# Create Column with luminosity values in solar luminosity units\nlum_col = Column(\n    [3.846, 1.989, 380000000, 105000000],\n    name='lum',\n    unit=u.Lsun,\n    format='%.2e'  # Scientific notation with 2 decimal places\n)\n\n# Display the column\nprint(lum_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar radii [696000, 69911, 94875, 8796] and want to create a Column named 'radius' with units of kilometers, formatted to show two decimal places."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nfrom astropy import units as u\n\n# Create Column with radius values in kilometers units\nradius_col = Column(\n    [696000, 69911, 94875, 8796],\n    name='radius',\n    unit=u.km,\n    format='%.2f'  # Two decimal places\n)\n\n# Display the column\nprint(radius_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have stellar masses [1.989, 0.574, 0.454, 0.141] and want to create a Column named 'mass' with units of solar masses, formatted to show three decimal places."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nfrom astropy import units as u\n\n# Create Column with mass values in solar mass units\nmass_col = Column(\n    [1.989, 0.574, 0.454, 0.141],\n    name='mass',\n    unit=u.Msun,\n    format='%.3f'  # Three decimal places\n)\n\n# Display the column\nprint(mass_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Astropy to identify exoplanets in a dataset of Kepler light curves?"
      },
      {
        "from": "assistant",
        "value": "from astropy.timeseries import TimeSeries\nfrom astropy.table import Table\nfrom astropy.io import ascii\n\ndata = ascii.read('kepler_light_curves.txt')\n\n# Create a TimeSeries object\nlight_curve = TimeSeries(data['time'], data['flux'], time_duplication='mean')\n\n# Identify exoplanets using Transit Function\nexoplanet = light_curve.transit\u0447\u0438\u0439dle(v=True)\n\n# Print the results\nprint(exoplanet)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model of a Gaussian profile with a peak amplitude of 2.5, a standard deviation of 5.0 arcsec, and plot it over a range of 0-50 arcsec."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling import models\n\nx = np.linspace(0, 50, 1000)\ngaussian = models.Gaussian1D(amplitude=2.5, mean=25.0, stddev=5.0)\ny = gaussian(x)\nplt.plot(x, y)\nplt.xlabel('Radial Distance (arcsec)')\nplt.ylabel('Relative Brightness')\nplt.title('Gaussian Profile')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model of a Moffat profile with a core radius of 2.0 arcsec, a power law index of 2.5, and alpha=3.0, and plot it over a range of -5-5 arcsec."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling import models\n\nx = np.linspace(-5, 5, 1000)\nmoffat = models.Moffat1D(amplitude=1.0, x_0=0.0, gamma=2.0, alpha=3.0, beta=2.5)\ny = moffat(x)\nplt.plot(x, y)\nplt.xlabel('Radial Distance (arcsec)')\nplt.ylabel('Relative Brightness')\nplt.title('Moffat Profile')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a model of a BoxCar profile with a height of 2.0, and plot it over a range of 0-20 arcsec."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom astropy.modeling import models\n\nx = np.linspace(0, 20, 1000)\nboxcar = models.Box1D(amplitude=2.0, x_0=10.0, width=5.0)\ny = boxcar(x)\nplt.plot(x, y)\nplt.xlabel('Radial Distance (arcsec)')\nplt.ylabel('Relative Brightness')\nplt.title('BoxCar Profile')\nplt.show()}]}]}}; {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of how to use the `fits` function from `astropy.modeling` to fit a Gaussian profile to some sample data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\n# Sample data for a Gaussian profile\nx = np.linspace(-10, 10, 100)\ny = np.exp(-x**2)\n\n# Create a Gaussian model\ngaussian_model = models.Gaussian2D(amplitude=1, x_mean=0, y_mean=0, x_stddev=1, y_stddev=1)\n\n# Initialize the fitter\nfitter = fitting.LevMarLSQFitter()\n\n# Fit the model to the data\nfitted_gaussian = fitter(gaussian_model, x, y)\n\n# Print fit results\nprint(\"Gaussian parameters:\", fitted_gaussian.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with a FITS file called 'image.fits' containing multiple extensions. Can you show me how to access the header of extension 1?"
      },
      {
        "from": "assistant",
        "value": "# Access header from extension 1 of the FITS file\nfrom astropy.io import fits\nheader = fits.getheader('image.fits', ext=1)\nprint(header)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add a keyword to the header of the compressed image HDU."
      },
      {
        "from": "assistant",
        "value": "To add a keyword to the header of the compressed image HDU, you can use the `keyword` parameter when creating the `CompImageHDU` object. For example: `fits.CompImageHDU(data=data, header={'TELESCOP': 'Radio Telescope'}, compression_type='RICE_1', quantize_method=1, quantize_level=16.0)`"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Disk2D model with a fixed amplitude and a variable radius?"
      },
      {
        "from": "assistant",
        "value": "model = Disk2D(amplitude=1, x_0=0, y_0=0, R_0=5, fixed={'amplitude': True})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use Disk2D to create a model with a tied parameter?"
      },
      {
        "from": "assistant",
        "value": "model = Disk2D(amplitude=1, x_0=0, y_0=0, R_0=5, tied={'x_0': lambda self: self.y_0})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I set bounds for the radius of a Disk2D model?"
      },
      {
        "from": "assistant",
        "value": "model = Disk2D(amplitude=1, x_0=0, y_0=0, R_0=5, bounds={'R_0': (0, 10)})"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to create a Column for storing arrays of 10 float64 numbers in 5 different telescope positions, starting with an empty Column (no initial data). Use float64 as the data type."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport numpy as np\n\ncol = Column(name='array', length=5, shape=(10,), dtype=np.float64)\n\n# The column is now initialized with zeros and ready to store 10 float64 numbers in each row"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use astropy to calculate the time difference between two dates in the UTC timezone?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom datetime import datetime\n\n# Define two dates: a historical observation and a modern one\nhistorical_date = datetime(1492, 10, 12)\nmodern_date = datetime(2020, 3, 10)\n\n# Convert to Time objects\nhistorical_time = Time(historical_date, timezone='UTC')\nmodern_time = Time(modern_date, timezone='UTC')\n\n# Calculate time difference\ntime_diff = modern_time - historical_time\n\nprint(time_diff)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the total memory usage of my Astropy WCS object?"
      },
      {
        "from": "assistant",
        "value": "wcs_memory_usage(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the format of the WCS display in Astropy?"
      },
      {
        "from": "assistant",
        "value": "wcs_display_format(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the position of the North celestial pole on a given date in the sky in Astropy?"
      },
      {
        "from": "assistant",
        "value": "north_celestial_pole_position(date)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the wcs_to_celestial_frame function to determine the coordinate frame of a given WCS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\nfrom astropy.coordinates import Galactic\n\n# Define a WCS\nwcs = WCS(naxis=2)\n\n# Use wcs_to_celestial_frame to find the coordinate frame\nframe = astropy.wcs.utils.wcs_to_celestial_frame(wcs)\n\nprint(frame.name)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Write a function to convert a given angle from degrees to radians."
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\n\ndef degrees_to_radians(degrees):\n    return degrees * u.deg.to(u.rad)\n\nprint(degrees_to_radians(45))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What's the code to round a given value to the nearest integer?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\ndef round_to_nearest_integer(value):\n    return np.round(value)\n\nprint(round_to_nearest_integer(3.7))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a given temperature from Celsius to Kelvin?"
      },
      {
        "from": "assistant",
        "value": "import astropy.units as u\ndef celsius_to_kelvin(celsius):\n    return celsius * u.Celsius.to(u.Kelvin)\n\ncelsius = 25\nprint(celsius_to_kelvin(celsius))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a circular aperture for photometry."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\ncircle_model = models.Circle2D(1.0, 300, 300, 30)\ny, x = np.mgrid[275:325:50j, 275:325:50j]\ncircle_image = circle_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a Gaussian profile."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ngaussian_model = models.Gaussian2D(amplitude=1.0, x_stddev=10, y_stddev=10)\ny, x = np.mgrid[275:325:50j, 275:325:50j]\ngaussian_image = gaussian_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Model a Moffat profile."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\nmoffat_model = models.Moffat2D(amplitude=1.0, alpha=5.0, x_0=300, y_0=300, x_gamma=30, y_gamma=30)\ny, x = np.mgrid[275:325:50j, 275:325:50j]\nmoffat_image = moffat_model(x, y)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between angular and circular standard deviations in the context of circular data?"
      },
      {
        "from": "assistant",
        "value": "Angular standard deviation is a measure of the spread of data around the mean in a circular distribution. It is defined as the square root of the average of the squared differences between each data point and the mean. Circular standard deviation, on the other hand, is a measure of the spread of data around the mean in a circular distribution that takes into account the circular nature of the data. It is defined as the square root of the negative of the logarithm of the R-statistic, which measures the difference between the data and the mean. Circular standard deviation is more appropriate for circular data because it accounts for the fact that the data is wrapped around a circle."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need help writing a function to calculate the distance between the Earth and the Moon."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to use the astropy library to convert a Julian date to a Gregorian date."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to calculate the position of a star at a specific time using the ICRS system."
      },
      {
        "from": "assistant",
        "value": "..."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new column to an existing table with numerical values in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\n\ncol1 = Column([1, 2, 3], name='new_column')\ntable = Table()\ntable['new_column'] = col1\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove a column from an existing table in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\ntable = Table([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}])\ndel table['b']\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I rename a column in an existing table with string values in Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column\n\ntable = Table([{'old_name': 'a'}, {'old_name': 'b'}])\nnew_name = Column(table['old_name'].data, name='new_name')\ntable.rename_column('old_name', 'new_name')\nprint(table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the position of a star (RA = 10h 0m 0s, Dec = 20\u00b0 0' 0\") at epoch J2020.0. Show me the code to set up the coordinate frame in GCRS, accounting for precession and observatory position (X = 1000 km, Y = 2000 km, Z = 3000 km from Earth's center)"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, GCRS, PrecessedGeocentric\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Set up star's coordinates in ICRS (default reference system)\nstar = SkyCoord('10h0m0s', '20d0m0s')\n\n# Define observatory location using geocentric XYZ coordinates\nobservatory = EarthLocation.from_geocentric(\n    1000000*u.m,  # X coordinate (converting km to m)\n    2000000*u.m,  # Y coordinate\n    3000000*u.m   # Z coordinate\n)\n\n# Set the epoch for calculations\nepoch = Time('J2020.0')\n\n# Transform to GCRS (Geocentric coordinates) at specific epoch\n# This accounts for precession and observatory position\nstar_gcrs = star.transform_to(GCRS(obstime=epoch, obsgeoloc=observatory.get_gcrs_posvel(epoch)[0]))\n\n# Create a new precessed frame\nprecessed_frame = PrecessedGeocentric(\n    obstime=epoch,\n    obsgeoloc=observatory.get_gcrs_posvel(epoch)[0],\n    equinox=epoch\n)\n\n# Transform the star to the precessed frame\nstar_precessed = star.transform_to(precessed_frame)\n\n# Print results\nprint(f\"Original ICRS coordinates: {star.to_string('hmsdms')}\")\nprint(f\"GCRS coordinates at J2020.0: {star_gcrs.to_string('hmsdms')}\")\nprint(f\"Precessed GCRS coordinates at J2020.0: {star_precessed.to_string('hmsdms')}\"),"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm interested in the motion of the Earth's observers, and I need to understand how to calculate the position of the observatory with respect to the center-of-mass of the Earth."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation, GCRS\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Define observatory location using geocentric XYZ coordinates\nobservatory = EarthLocation.from_geocentric(0*u.m, 0*u.m, 0*u.m)\n\n# Set the epoch for calculations\nepoch = Time('J2020.0')\n\n# Calculate the position of the observatory with respect to the center-of-mass of the Earth\nobsgeoloc = observatory.get_gcrs_posvel(epoch)[0]\n\n# Print results\nprint(f\"Observatory position at J2020.0: {obsgeoloc}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a star that is moving rapidly through space (radial velocity = 100 km/s). How do I account for this motion when setting up the coordinate frame in GCRS?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, EarthLocation, GCRS\nfrom astropy.time import Time\nimport astropy.units as u\n\n# Set up star's coordinates in ICRS (default reference system)\nstar = SkyCoord('10h0m0s', '20d0m0s', radial_velocity=100*u.km/u.s)\n\n# Define observatory location using geocentric XYZ coordinates\nobservatory = EarthLocation.from_geocentric(0*u.m, 0*u.m, 0*u.m)\n\n# Set the epoch for calculations\nepoch = Time('J2020.0')\n\n# Transform to GCRS (Geocentric coordinates) at specific epoch\n# This accounts for precession, observatory position, and radial velocity\nstar_gcrs = star.transform_to(GCRS(obstime=epoch, obsgeoloc=observatory.get_gcrs_posvel(epoch)[0]))\n\n# Print results\nprint(f\"Original ICRS coordinates: {star.to_string('hmsdms')}\")\nprint(f\"GCRS coordinates at J2020.0: {star_gcrs.to_string('hmsdms')}\"),"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the telescope's pointing azimuth from the FITS headers of my observations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngetval(filename='observation.fits', keyword='Azi')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the function to get the OBSRA parameter from a FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngetval(filename='observation.fits', keyword='OBSRA')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the DATE-OBS parameter from the FITS headers of my observations?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ngetval(filename='observation.fits', keyword='DATE-OBS')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the summary information on a FITS file using the astropy.io.fits.info function with the filename 'example.fits' and output to sys.stdout?"
      },
      {
        "from": "assistant",
        "value": "astropy.io.fits.info('example.fits', output=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have apparent magnitudes [14.5, 17.3, 15.1, 16.5, 14.9, 17.1] of stars in a globular cluster and want to test if they follow a logistic distribution with location parameter 14.0 and scale parameter 0.4 using the Kuiper test. Can you show me the implementation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nimport numpy as np\n\ndata = np.array([14.5, 17.3, 15.1, 16.5, 14.9, 17.1])\ndef logistic_cdf(x, loc=14.0, scale=0.4):\n    return 1 / (1 + np.exp(-(x - loc)/scale))\n\nstatistic, p_value = kuiper(np.sort(data), logistic_cdf)\n\nprint(f\"Kuiper test statistic: {statistic:.4f}\")\nprint(f\"P-value: {p_value:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have apparent magnitudes [12.8, 18.5, 14.2, 17.1, 12.9, 18.1] of stars in a globular cluster and want to test if they follow a logistic distribution with location parameter 13.0 and scale parameter 0.3 using the Kuiper test. Can you show me the implementation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nimport numpy as np\n\ndata = np.array([12.8, 18.5, 14.2, 17.1, 12.9, 18.1])\ndef logistic_cdf(x, loc=13.0, scale=0.3):\n    return 1 / (1 + np.exp(-(x - loc)/scale))\n\nstatistic, p_value = kuiper(np.sort(data), logistic_cdf)\n\nprint(f\"Kuiper test statistic: {statistic:.4f}\")\nprint(f\"P-value: {p_value:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have apparent magnitudes [10.9, 19.7, 13.4, 16.7, 11.0, 19.3] of stars in a globular cluster and want to test if they follow a logistic distribution with location parameter 11.0 and scale parameter 0.2 using the Kuiper test. Can you show me the implementation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper\nimport numpy as np\n\ndata = np.array([10.9, 19.7, 13.4, 16.7, 11.0, 19.3])\ndef logistic_cdf(x, loc=11.0, scale=0.2):\n    return 1 / (1 + np.exp(-(x - loc)/scale))\n\nstatistic, p_value = kuiper(np.sort(data), logistic_cdf)\n\nprint(f\"Kuiper test statistic: {statistic:.4f}\")\nprint(f\"P-value: {p_value:.4f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the SNR for a source with a flux of 10^-3 DN/s and a sky background of 10^-4 DN/s/pixel, with a CCD integration time of 1 hour?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np from astropy.stats import signal_to_noise_ccd\nsnr = signal_to_noise_ccd(t=3600, source_eps=1e-3, sky_eps=1e-4, dark_eps=0, rd=10, npix=10, gain=1.0)\nprint(snr)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to determine the pixel area for an image with a given WCS"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_area(wcs=my_wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the pixel area for a celestial WCS"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_area(wcs=my_celestial_wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me how to get the pixel area for a 3D WCS"
      },
      {
        "from": "assistant",
        "value": "astropy.wcs.utils.proj_plane_pixel_area(wcs=my_3d_wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the motion of a nearby star and need to represent its position and velocity in the FK5 reference frame. Can you show me how to structure this coordinate transformation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK5, SkyCoord\nfrom astropy import units as u\nimport astropy.time as t\ncolor = SkyCoord(ra=10*u.degree, dec=20*u.degree, distance=100*u.parsec, pm_ra_cosdec=1*u.mas/u.yr, pm_dec=2*u.mas/u.yr, radial_velocity=-10*u.km/u.s, frame='icrs')\nequinox = t.Time('2000.0', format='jd')\nfk5_coords = color.transform_to(FK5(equinox=equinox))\nprint(fk5_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to define a location on Earth using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import EarthLocation\nimport astropy.units as u\n\nlocation = EarthLocation.from_geodetic(lon=12.34*u.deg, lat=56.78*u.deg, height=90*u.m)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the spectrum of a binary star system with the following velocities [20.5, 20.8, 21.1, 20.9, -50.2, 20.6] km/s. Using the biweight location with a tuning constant of 4.0, compute the central velocity, excluding any outliers."
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_location\nimport numpy as np\n\nradial_velocities = np.array([20.5, 20.8, 21.1, 20.9, -50.2, 20.6])\ncentral_velocity = biweight_location(radial_velocities, c=4.0)\nprint(f\"Central velocity: {central_velocity:.1f} km/s\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a radio continuum map (2000x2000 array) with flux densities from -0.5 to 3.0 mJy/beam. How do I implement a log stretch normalization that handles negative values by setting them to NaN (invalid=-1), focusing on the range between 0.2 and 2.8 mJy/beam (vmin=0.2, vmax=2.8)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a galaxy image (3000x3000 array) with pixel values from 0 to 10. How do I implement a power stretch normalization that handles negative values by setting them to NaN (invalid=-1), focusing on the range between 2 and 8 (vmin=2, vmax=8)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a solar image (1000x1000 array) with pixel values from -1 to 10. How do I implement an asinh stretch normalization that handles negative values by setting them to NaN (invalid=-1), focusing on the range between -0.5 and 9.5 (vmin=-0.5, vmax=9.5)?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 1D model of a trapezoid with a flat top and sloped sides. How can I implement this using Astropy's modeling capabilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, FittableModel1D\nimport numpy as np\n\nclass FlatTopTrapezoid(models.Model1D):\n    def __init__(self, *args, **kwargs):\n        models.Model1D.__init__(self, *args, models.Trapezoid1D, **kwargs)\n\n    def evaluate(self, x):\n        return self trapzoid1d_corrected(x)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a new column to my astropy table?"
      },
      {
        "from": "assistant",
        "value": "table.add_column(new_column_name, values)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I delete a column from my astropy table?"
      },
      {
        "from": "assistant",
        "value": "table.remove_column(column_name)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I access a specific row in my astropy table?"
      },
      {
        "from": "assistant",
        "value": "table[0]"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I edit a specific value in a row of my astropy table?"
      },
      {
        "from": "assistant",
        "value": "table[0]['column_name'] = new_value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to read the CRVAL and CRPIX keywords from the header of an HDU?"
      },
      {
        "from": "assistant",
        "value": "hdu.header['CRVAL'] and hdu.header['CRPIX']"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a Primary HDU (0) and an Extension HDU (1) ?"
      },
      {
        "from": "assistant",
        "value": "The Primary HDU contains the main data and header, while an Extension HDU contains additional data and header information"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to delete an HDU from the HDU list?"
      },
      {
        "from": "assistant",
        "value": "hdulist.hdu.remove(0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show me how to create a Tophat2D kernel with radius=5 and mode='linear_interp'"
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=5, mode='linear_interp')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Tophat2D kernel with radius=10 and factor=30"
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=10, factor=30, mode='oversample')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to compare the profiles of two Tophat2D kernels. Create one with radius=20 and mode='integrate', and the other with radius=20 and mode='center'"
      },
      {
        "from": "assistant",
        "value": "Tophat2DKernel(radius=20, mode='center'); Tophat2DKernel(radius=20, mode='integrate')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you fit a polynomial of degree 3 to some noisy data with bounds on the coefficients between 0 and 10?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\\nimport numpy as np\\n\\nx = np.linspace(0, 10, 100)\\n\\ny = np.random.normal(1, 0.1, x.shape)\\n\\n# Create a polynomial model of degree 3\\npoly = models.Polynomial1D(degree=3)\\n\\n# Set bounds for coefficients\\npoly.bounds = [(0, 10), (0, 10), (0, 10), (0, 10)]\\n\\n# Set up fitter with levenberg-marquardt algorithm\\nfitter = fitting.LevMarLSQFitter()\\n\\n# Fit the model to data\\nfitted_model = fitter(poly, x, y)\\n\\n# Print fitted parameters\\nprint(f\"Fitted coefficients: {fitted_model.coefficients}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use jackknife statistics to estimate the median of a dataset and its 95% confidence interval?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.jackknife_stats(data=[1,2,3,4,5], statistic=np.median, confidence_level=0.95)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Find all pairs of stars within 10 arcseconds of each other in the target catalog"
      },
      {
        "from": "assistant",
        "value": "targets.match_to_catalog_sky(companions, max_separation=10*u.arcsec)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a parameter for the scale factor of a galaxy that internally works in cubic megaparsecs but allows users to input and receive values in hubble length units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.modeling import Parameter\n\nclass Galaxy:\n    def __init__(self):\n        # Initialize scale factor with 1/H0, stored internally as cubic megaparsecs\n        self._scale_factor = Parameter('scale_factor', 1/(u.hubble_time).to(u.dimensionless_unscaled)*u.Mpc**3)\n\n    @property\n    def scale_factor(self):\n        # Return scale factor in hubble length units\n        return self._scale_factor.value.to(u.hubble_length)\n\n    @scale_factor.setter\n    def scale_factor(self, value):\n        # Accept value in hubble length units, store as cubic megaparsecs\n        self._scale_factor.value = value * u.hubble_length.to(u.dimensionless_unscaled) * u.Mpc**3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a parameter for the orbital period of a planet that internally works in days but allows users to input and receive values in years?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.modeling import Parameter\n\n\nclass Planet:\n    def __init__(self):\n        # Initialize orbital period with 1 day, stored internally as days\n        self._orbital_period = Parameter('orbital_period', 1 * u.day)\n\n    @property\n    def orbital_period(self):\n        # Return orbital period in years\n        return self._orbital_period.value.to(u.year)\n\n    @orbital_period.setter\n    def orbital_period(self, value):\n        # Accept value in years, store as days\n        self._orbital_period.value = value * u.year.to(u.day)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "For a star at coordinates (\u03b1=12.345\u00b0, \u03b4=67.890\u00b0) and a background galaxy at (\u03b1=12.346\u00b0, \u03b4=67.892\u00b0), what's the position angle in degrees?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create SkyCoord objects for both objects\nstar = SkyCoord(ra=12.345*u.degree, dec=67.890*u.degree)\ngalaxy = SkyCoord(ra=12.346*u.degree, dec=67.892*u.degree)\n\n# Calculate position angle between the star and the galaxy\npos_angle = star.position_angle(galaxy)\n\n# Convert to degrees for easier reading\npos_angle_deg = pos_angle.to(u.degree)\n\ndefault:\n    return pos_angle_deg.value"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a list of spherical representations for the stars in the Small Magellanic Cloud?"
      },
      {
        "from": "assistant",
        "value": "{\"lon\": 280.0, \"lat\": -38.0, \"distance\": 62.0}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I merge two images with different WCS?"
      },
      {
        "from": "assistant",
        "value": "wcs.merge_images(image1, image2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable to store the positions of stars in a galaxy with their respective units"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\ndata =\n[ ('Star1', 123.4*u.deg, 45.6*u.deg), ('Star2', 98.7*u.deg, 21.3*u.deg), ('Star3', 76.5*u.deg, 54.2*u.deg) ]\nstars_table = QTable(data, names=('Name', 'RA', 'Dec'))\nstars_table"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable to store the properties of galaxies with their respective units"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\ndata = \n[ ('Galaxy1', 1.23e10*u.solarMass, 100*u.kpc), ('Galaxy2', 9.8e10*u.solarMass, 150*u.kpc), ('Galaxy3', 7.6e10*u.solarMass, 200*u.kpc) ]\ngalaxies_table = QTable(data, names=('Name', 'Mass', 'Distance'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a QTable to store the light curves of stars with their respective units"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import QTable\nfrom astropy import units as u\ndata =\n[ ('Star1', 12.3*u.mag, 45.6*u.minute), ('Star2', 9.8*u.mag, 21.3*u.minute), ('Star3', 7.6*u.mag, 54.2*u.minute) ]\nlight_curves_table = QTable(data, names=('Name', 'Magnitude', 'Time'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compute the biweight midvariance for each region in the following data: [[0.01, 0.02, 0.03], [0.04, 0.05, 0.06], [0.07, 0.08, 0.09]]?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\nimport numpy as np\n\n# Define metallicity data for different galactic regions\nmetallicities = np.array([[0.01, 0.02, 0.03], [0.04, 0.05, 0.06], [0.07, 0.08, 0.09]])\n\n# Compute biweight midvariance for each region (axis=1 for row-wise computation)\nvariances = biweight_midvariance(metallicities, axis=1)\n\n# Print results for each region\nfor i, variance in enumerate(variances, 1):\n    print(f\"Region {i} metallicity variance: {variance:.6f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the biweight midvariance for this data with a tuning constant of 6.0?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import biweight_midvariance\nimport numpy as np\n\ndata = np.array([1, 2, 3, 4, 5])\n#c = 9.0\n# Compute biweight midvariance using 6.0 as the tuning constant\nvariance = biweight_midvariance(data, c=6.0)\n\nprint(variance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the form of the Lorentzian function?"
      },
      {
        "from": "assistant",
        "value": "f(x) = https://latex.artofproblemsolving.com/3/f/5/3f570c5a1a3075add7950964bdeb9faf4944c697.png"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How does the amplitude of the Lorentzian function affect its shape?"
      },
      {
        "from": "assistant",
        "value": "u'A is the peak value'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between the FWHM and the HWHM of a Lorentzian function?"
      },
      {
        "from": "assistant",
        "value": "FWHM = 2*HWHM"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I write data to a FITS file?"
      },
      {
        "from": "assistant",
        "value": "import astropy.io.fits as fits\n\n# Create a new HDUList object\nhdu = fits.PrimaryHDU()\n\n# Write the HDUList to a file\nhdu.writeto('output.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a StellarCluster table class with a metallicity_flag attribute that defaults to 1.0."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, TableAttribute\nclass StellarCluster(Table):\n    # Define metallicity_flag as a table attribute with default value 1.0\n    metallicity_flag = TableAttribute(default=1.0)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate how to use a Gaussian filter to smooth astronomical images?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\n\n# Create sample image data (x and y pixels, flux)\nx = np.linspace(0, 1000, 1000)\ny = np.linspace(0, 1000, 1000)\nx, y = np.meshgrid(x, y)\nflux = np.random.normal(1, 0.1, (len(y), len(x)))\n\n# Create Gaussian kernel for smoothing\ntarget_sigma = 10\nkernel = Gaussian1DKernel(target_sigma)\n\n# Apply convolution to smooth the flux\nsmoothed_flux = convolve(flux, kernel)\n\n# Note: The smoothed_flux array now contains the filtered image data"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you create a 2D Gaussian model with initial parameters amplitude=1.0, x_0=128, y_0=128, and sigmax=5.0, while keeping the x_0 and y_0 parameters fixed during the fitting process?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ngaussian_model = models.Gaussian2D(\n    amplitude=1.0,\n    x_0=128,\n    y_0=128,\n    sigmax=5.0\n)\ngaussian_model.x_0.fixed = True\ngaussian_model.y_0.fixed = True\n\n# Example: Create sample data grid (if needed for fitting)\ny, x = np.mgrid[0:256, 0:256]\ngaussian_pattern = gaussian_model(x, y)\n\n# Note: To fit this model to actual data, you would use:\n# fitter = fitting.LevMarLSQFitter()\n# best_fit = fitter(gaussian_model, x, y, your_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the circular standard deviation of a list of pulsar phase measurements?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats as stats\nfrom astropy import units as u\ntimes = [0.1, 0.2, 0.3, 0.4, 0.5]\nphase_std = stats.circstd(times * u.cycle)\nprint(phase_std)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying black holes and need to convert between mass and energy for a specific object."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nfrom astropy import units\n\n# Mass of a black hole (in kg)\nblack_hole_mass = 10 * const.M_earth\n\n# Convert mass to energy using the equivalence\nenergy = black_hole_mass * const.c ** 2\n\nprint(f\"Black hole mass: {black_hole_mass:.2f} kg\")\nprint(f\"Black hole energy: {energy:.2f} J\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert between mass and energy for a proton?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nproton_mass = const.m_p\nenergy = proton_mass * const.c ** 2\nprint(f\"Proton mass: {proton_mass:.2f} kg\")\nprint(f\"Proton energy: {energy:.2f} J\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'd like to convert between mass and energy for a solar mass."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nsolar_mass = const.M_sun\nenergy = solar_mass * const.c ** 2\nprint(f\"Solar mass: {solar_mass:.2f} kg\")\nprint(f\"Solar energy: {energy:.2f} J\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the astropy model to shift the x and y coordinates of a point by 2 and 3 units?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\ncoords = np.array([1,2])\n# Define a Shift model with the specified offset for x and y\nc model_x = models.Shift(offset=2) \nc model_y = models.Shift(offset=3)\nshifted_coords = c model_y(c model_x(coords))\nprint(shifted_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I shift the coordinates of a star in Three dimensional space using astropy? "
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\ncoords = np.array([1,2,3])\nshift_model= models.Shift(offset=[2,3,4])\nshifted_coords = shift_model(coords)\nprint(shifted_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I shift a coordinate in a 3D space by a certain identified offset?"
      },
      {
        "from": "assistant",
        "value": "# Import necessary modules from astropy\nfrom astropy.modeling import models\nimport astropy.units as u\nimport numpy as np\n\ncoords = np.array([4,5,6])\nshift_model= models.Shift(offset=[2,3,4])\nshifted_coords = shift_model(coords)\nprint(shifted_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a visualization of galaxy intensity data with a non-linear transformation to enhance the contrast between dim and bright regions?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.io import fits\nfrom astropy.visualization import SinhStretch, ImageNormalize\nimport matplotlib.pyplot as plt\n\n# Create sample galaxy data (normally you'd load from a FITS file)\n# Here simulating a galaxy with bright center and dimmer outer regions\ny, x = np.mgrid[:100, :100]\ncenter = np.array([50, 50])\nr = np.sqrt((x - center[0])**2 + (y - center[1])**2)\ngalaxy_data = 1000 * np.exp(-r/20) + np.random.normal(0, 10, (100,100))\n\n# Create non-linear stretch transformation\n# Stretch enhances contrast between dim and bright regions\nds_mask = (galaxy_data > 50)  # Use a mask to select only the bright pixels\nstretch = SinhStretch()  # Apply a SinhStretch to the selected pixels\nnorm = ImageNormalize(galaxy_data, stretch=stretch, vmin=np.min(galaxy_data), vmax=np.max(galaxy_data))\n\n# Create visualization\nplt.figure(figsize=(10, 5))\n\n# Original data\nplt.subplot(121)\nplt.imshow(galaxy_data, origin='lower', cmap='viridis')\nplt.colorbar(label='Raw Intensity')\nplt.title('Original Data')\n\n# Transformed data\nplt.subplot(122)\nplt.imshow(norm(galaxy_data), origin='lower', cmap='viridis')\nplt.colorbar(label='Normalized Intensity')\nplt.title('Non-Linear Stretch Transform')\n\nplt.tight_layout()\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I normalize the intensity values of an image using the 2%-98% interval?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import PercentileInterval, ImageNormalize\nfrom astropy.io import fits\nimport matplotlib.pyplot as plt\nimage_data = fits.getdata('image.fits')\ninterval = PercentileInterval(2, 98)\nnorm = ImageNormalize(image_data, interval=interval)\nplt.imshow(image_data, norm=norm, cmap='viridis')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing an X-ray image of the Orion Nebula stored in a 1024x1024 numpy array, with pixel values between -0.1 and 6.5. Can you show me how to normalize this data using ImageNormalize with a linear stretch and set any negative values to 0, and also create a custom interval with min value 0, max value 60, and midpoint 30?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.visualization import ImageNormalize, LinearStretch, MinMaxInterval\n\n# Create sample data (replace this with your actual data)\norion_data = np.random.uniform(-0.1, 6.5, size=(1024, 1024))\n\n# Set negative values to 0\norion_data = np.clip(orion_data, 0, None)\n\n# Create normalizer with linear stretch\nnorm = ImageNormalize(data=orion_data,\n                       interval=MinMaxInterval(0, 60, 30),\n                       stretch=LinearStretch())\n\n# Normalize the data\nnormalized_data = norm(orion_data)\n\n# normalized_data now contains values between 0 and 1\n# suitable for visualization in most plotting libraries"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default discretization mode for Box2DKernel?"
      },
      {
        "from": "assistant",
        "value": "linear_interp"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box2DKernel with a width of 11 and a discretization mode of 'center'?"
      },
      {
        "from": "assistant",
        "value": "Box2DKernel(11, mode='center')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the factor of oversampling for a Box2DKernel with a width of 9 and a factor of 3?"
      },
      {
        "from": "assistant",
        "value": "6"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the Earth's barycentric position on March 15, 2024?"
      },
      {
        "from": "assistant",
        "value": "The barycentric position of Earth on March 15, 2024 is at X: 0.000000 AU, Y: 0.000000 AU, Z: 0.000000 AU."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Earth's barycentric position on June 21, 2024?"
      },
      {
        "from": "assistant",
        "value": "The barycentric position of Earth on June 21, 2024 is at X: 0.000000 AU, Y: 0.000000 AU, Z: 0.000000 AU."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide the Earth's barycentric position on September 22, 2024?"
      },
      {
        "from": "assistant",
        "value": "The barycentric position of Earth on September 22, 2024 is at X: 0.000000 AU, Y: 0.000000 AU, Z: 0.000000 AU."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you use Exponential1D to model the decline of a population over time, with an initial value of 1000 and a decay constant of 0.05?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Exponential1D\nimport numpy as np\ndecline_model = Exponential1D(initial=1000, amplitude Decorrelator=0.05)\nr = np.linspace(0, 10, 100)\nbrightness = decline_model(r)\nprint(brightness)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use Gaussian1D to model the shape of a mountain peak, with a height of 5000 meters and a standard deviation of 10 kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D\nimport numpy as np\npeak_model = Gaussian1D(amplitude=5000, fwhm=20)\nr = np.linspace(-10, 10, 100)\nbrightness = peak_model(r)\nprint(brightness)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a code snippet using Logarithmic1D to model the decrease in temperature as you go deeper into the Earth's crust, with an amplitude of 100 degrees Celsius and tau of 5 kilometers?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Logarithmic1D\nimport numpy as np\ntemperature_model = Logarithmic1D(amplitude=100, tau=5)\nr = np.linspace(0, 20, 100)\ntemps = temperature_model(r)\nprint(temp)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the optimal display for a 1D array of flux measurements of a star with values ranging from 0 to 1000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import ZScaleInterval\nfrom astropy import units as u\nflux_data = np.random.uniform(0, 1000, size=1000) * u.count\nzscale = ZScaleInterval(contrast=0.2, n_samples=2000)\nvmin, vmax = zscale.get_limits(flux_data.value)\nprint(f\"Optimal display limits: [{vmin:.2f}, {vmax:.2f}]\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Tophat kernel with a radius of 20 pixels"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\n\ntophat_kernel = Tophat2DKernel(radius=20)\n\ntophat_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Tophat kernel with a radius of 30 pixels"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\ntophat_kernel = Tophat2DKernel(radius=30)\n\ntophat_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 2D Tophat kernel with a radius of 40 pixels"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Tophat2DKernel\ntophat_kernel = Tophat2DKernel(radius=40)\n\ntophat_kernel"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new CCDData object with a 3x3 data array and a unit of electrons?"
      },
      {
        "from": "assistant",
        "value": "ccd = CCDData(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), unit='electron')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the default uncertainty type for a CCDData object?"
      },
      {
        "from": "assistant",
        "value": "The default uncertainty type for a CCDData object is None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I set a mask for a CCDData object?"
      },
      {
        "from": "assistant",
        "value": "ccd = CCDData(data=np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), mask=np.array([[True, False, True], [False, True, False], [True, False, True]]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create an Astropy Column named 'position' for these values with units of 'mas' and a description 'Proper motion'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\ncol = Column(data=[1.2, 2.3, 3.4], name='position', unit=u.mas, description='Proper motion')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have time measurements of 5 stars: [10.0, 11.2, 9.8, 10.5, 11.1]. How can I create an Astropy Column named 'time' for these values with units of 'yr' and a description 'Time of observation'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\ncol = Column(data=[10.0, 11.2, 9.8, 10.5, 11.1], name='time', unit=u.yr, description='Time of observation')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have flux measurements of 10 stars: [50.0, 60.0, 55.0, 58.0, 52.0, 59.0, 56.0, 61.0, 53.0, 57.0]. How can I create an Astropy Column named 'flux' for these values with units of 'mW/m^2' and a description 'Flux density'?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\nimport astropy.units as u\ncol = Column(data=[50.0, 60.0, 55.0, 58.0, 52.0, 59.0, 56.0, 61.0, 53.0, 57.0], name='flux', unit=u.mW/u.m/u.m, description='Flux density')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables of galaxy observations: one containing 100 galaxies with columns 'galaxy_id', 'redshift', and 'stellar_mass', and another with 50 galaxies with columns 'galaxy_id', 'metallicity', and 'star_formation_rate'. How can I combine these tables based on matching galaxy IDs to analyze the relationship between metallicity and stellar mass for the same galaxies?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, join\nimport numpy as np\n\nt1 = Table(\n    {\n        'galaxy_id': np.arange(1, 101),\n        'redshift': np.random.uniform(0, 2, 100),\n        'stellar_mass': np.random.uniform(9, 12, 100)  # log solar masses\n    }\n)\nt2 = Table(\n    {\n        'galaxy_id': np.arange(1, 51),  # Overlapping IDs\n        'metallicity': np.random.normal(8.7, 0.2, 50),  # log(O/H) + 12\n        'star_formation_rate': np.random.lognormal(0, 0.5, 50)  # solar masses/year\n    }\n)\ncombined_table = join(t1, t2, keys='galaxy_id', join_type='inner')\nprint(f'Number of matched galaxies: {len(combined_table)}')\nprint(f'Correlation between metallicity and stellar mass: {np.corrcoef(combined_table["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a new extension to my FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('image.fits')\nhdul.extend()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I remove the last extension from my FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('image.fits')\nhdul.pop()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I update the header of all extensions in my FITS file?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ncustom_header = fits.Header()\ncustom_header['CUSTOM_KEY'] = 'CUSTOM_VALUE'\nwith fits.open('image.fits', mode='update') as hdul:\n    for hdu in hdul:\n        hdu.header.update(custom_header.ascardsoff())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I apply geometric transformations to my WCS object?"
      },
      {
        "from": "assistant",
        "value": "wcs.applymatter()[[d[0], -d[0]] for d in wcs.celestial.wcs.cdelt[0]}}, {"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a temperature from Kelvin to Celsius?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units.quantity import Quantity\nc def temp_to_celsius(temp):\n    return temp.to(u.deg_C, u.temperature())\ntemp_in_kelvin = 300*u.K\ntemp_in_celsius = temp_to_celsius(temp_in_kelvin)\nprint(temp_in_celsius)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert a wavelength of 500 nm to its corresponding wave number using Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\nc wavelength = u.Quantity(500, u.nm)\nwavenumber = u.inv(c * wavelength)\nprint(f\"Wavelength {c_wavelength} corresponds to wave number {wavenumber:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to convert a frequency of 1000 Hz to its corresponding energy using Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy import constants as const\nf = u.Quantity(1000, u.Hz)\ne = f * const.h\nprint(f\"Frequency {f} corresponds to energy {e:.2e}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Convert a wave number of 10000 cm^-1 to its corresponding wavelength using Astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nwavenumber = u.Quantity(10000, u.cm**-1)\nwavelength = u.inv(wavenumber)\nwavelength_m = wavelength.to(u.m)\nwavelength_nm = wavelength_m.to(u.nm)\nprint(f\"Wave number {wavenumber:.0f} cm^-1 corresponds to wavelength {wavelength_nm:.2f} nm\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's jackknife resampling to compute the mean of an array of numbers?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import jackknife_resampling\n\ndef compute_mean(data):\n    return np.mean(data)\nresamples = jackknife_resampling(np.array([1, 2, 3, 4, 5]))\nmean_estimate, bias, stderr, conf_interval = jackknife_stats(resamples, compute_mean, confidence_level=0.95)\nprint(f'Mean estimate: {mean_estimate:.4f}')\nprint(f'Bias estimate: {bias:.4e}')\nprint(f'Standard error: {stderr:.4e}')\nprint(f'95% confidence interval: [{conf_interval[0]:.4f}, {conf_interval[1]:.4f}]')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 3rd-degree polynomial to the data using Polynomial1D and print the coefficients."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 48, 1000)\nmag = 0.1 * np.sin(2*np.pi*time/24) + np.random.normal(0, 0.02, len(time))\npoly_model = models.Polynomial1D(degree=3)\nfitter = fitting.LevMarLSQFitter()\npoly_fit = fitter(poly_model, time, mag)\nmag_fit = poly_fit(time)\nprint(poly_fit.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 4th-degree polynomial to the data using Polynomial1D and print the coefficients, while fixing the first coefficient."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 48, 1000)\nmag = 0.1 * np.sin(2*np.pi*time/24) + np.random.normal(0, 0.02, len(time))\npoly_model = models.Polynomial1D(degree=4)\nfitter = fitting.LevMarLSQFitter()\npoly_fit = fitter(poly_model, time, mag)\npoly_fit.fixed['c0'] = True\nmag_fit = poly_fit(time)\nprint(poly_fit.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Fit a 2nd-degree polynomial to the data using Polynomial1D, with the first coefficient bounded between 0 and 1, and print the coefficients."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\n\ntime = np.linspace(0, 48, 1000)\nmag = 0.1 * np.sin(2*np.pi*time/24) + np.random.normal(0, 0.02, len(time))\npoly_model = models.Polynomial1D(degree=2)\nfitter = fitting.LevMarLSQFitter()\npoly_fit = fitter(poly_model, time, mag)\npoly_fit.params['c0'].bounds = (0, 1)\nmag_fit = poly_fit(time)\nprint(poly_fit.parameters)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a telescope pointing model for my observatory in Arizona. The observatory is located at an altitude of 1500m above sea level and has a latitude of 37.5\u00b0 N, longitude of 112.2\u00b0 W. I want to model the telescope pointing for a 1-hour observation starting at 02:00 UT on 2024-07-01. Please assume a constant temperature of 20\u00b0C and a relatively high humidity of 80%."
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nfrom astropy.coordinates import SkyCoord, EarthLocation, AltAz\nimport astropy.units as u\n\n# Define the observation parameters\nobs_time = Time('2024-07-01 02:00:00')  # UT time\ntempe = 20 * u.degC  # Temperature in degree Celsius\ntemperature = Temperature(units='deg C', values=temperature)\nrelative_humidity = 80\nobs_location = EarthLocation(lat=37.5*u.deg, lon=-112.2*u.deg, height=1500*u.m)\n\n# Create AltAz coordinate object\naltaz = AltAz(obstime=obs_time, location=obs_location)\n\n# Print results\nprint(alta)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add the imperial units to the unit registry."
      },
      {
        "from": "assistant",
        "value": "From astropy.units import *; add_enabled_units(imperial)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add the SI units to the unit registry."
      },
      {
        "from": "assistant",
        "value": "From astropy.units import *; add_enabled_units(si)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to add the cgs units to the unit registry."
      },
      {
        "from": "assistant",
        "value": "From astropy.units import *; add_enabled_units(cgs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the PrecessedGeocentric frame to precess a coordinate from J2000 to J2010?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric\nfrom astropy.time import Time\n\n# Define the coordinate in J2000\nj2000 = PrecessedGeocentric(equinox=Time('J2000.0'))\n\n# Precess to J2010\nj2010 = j2000.precess_to(equinox=Time('J2010.0'))\n\n# Print the precessed coordinate\nprint(j2010)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to use the PrecessedGeocentric frame to calculate the position of a star at a specific time and location?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric\nfrom astropy.time import Time\nfrom astropy.coordinates import EarthLocation\n\n# Define the time and location\nobs_time = Time('2022-01-01 12:00:00')\nobservatory = EarthLocation.of_site('Mauna Kea')\n\n# Define the star's coordinate in J2000\nj2000 = PrecessedGeocentric(ra=10*u.deg, dec=20*u.deg, distance=10*u.pc)\n\n# Calculate the star's position at the given time and location\nstar_pos = j2000.transform_to(PrecessedGeocentric(equinox=obs_time, obstime=obs_time, location=observatory))\n\n# Print the star's position\nprint(star_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the PrecessedGeocentric frame to remove the observer's aberration?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import PrecessedGeocentric\nfrom astropy.time import Time\nfrom astropy.coordinates import EarthLocation\n\n# Define the time and location\nobs_time = Time('2022-01-01 12:00:00')\nobservatory = EarthLocation.of_site('Mauna Kea')\n\n# Define the star's coordinate in J2000\nj2000 = PrecessedGeocentric(ra=10*u.deg, dec=20*u.deg, distance=10*u.pc)\n\n# Calculate the star's position at the given time and location, removing the observer's aberration\nstar_pos = j2000.transform_to(PrecessedGeocentric(equinox=obs_time, obstime=obs_time, location=observatory)).remove_kinematically()\n\n# Print the star's position\nprint(star_pos)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Show how to use bayesian_blocks with the 'regular_events' fitness function for a pulsar with regular radio pulses recorded every 0.001 seconds for 10 seconds total."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bayesian_blocks\n\n# Create sample pulsar data\npulse_period = 0.1  # 100ms period\npulse_width = 0.01  # 10ms width\ntime_resolution = 0.001  # seconds\ntotal_time = 10  # seconds\nn_samples = int(total_time / time_resolution)\npulse_data = np.zeros(n_samples)\n\n# Simulate periodic pulses with some noise\nnp.random.seed(42)  # For reproducibility\nfor t in range(n_samples):\n    if (t * time_resolution) % pulse_period < pulse_width:\n        pulse_data[t] = np.random.choice([0, 1], p=[0.2, 0.8])\n    else:\n        pulse_data[t] = np.random.choice([0, 1], p=[0.9, 0.1])\n\n# Get indices where pulses were detected (1s)\nevent_times = np.where(pulse_data == 1)[0] * time_resolution\n\n# Apply Bayesian Blocks algorithm\nedges = bayesian_blocks(event_times, fitness='regular_events', dt=time_resolution)\n\n# Print results\nprint(f\"Number of blocks found: {len(edges)-1}\")\nprint('Block edges (seconds):')\nprint(edges)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's modeling to create a 2D Gaussian model for image analysis?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a 2D Gaussian model for image analysis\ndef model_gaussian(data):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's modeling to create a 2D Moffat model for image analysis?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a 2D Moffat model for image analysis\ndef model_moffat(data):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy's modeling to create a 2D Lorentzian model for image analysis?"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy.modeling import models, fitting\nimport numpy as np\n\n# Create a 2D Lorentzian model for image analysis\ndef model_lorentzian(data):"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Import required modules from astropy"
      },
      {
        "from": "assistant",
        "value": "# Import required modules from astropy\nfrom astropy import units as u"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Define a new unit for \\\"astronomical_unit.au\\\" equivalent to 1.496e11 meters"
      },
      {
        "from": "assistant",
        "value": "# Define a new unit for astronomical_unit.au equivalent to 1.496e11 meters\nau = u.def_unit('astronomical_unit.au', (1.496e11 * u.m))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Inject the new unit into the namespace"
      },
      {
        "from": "assistant",
        "value": "# Inject the new unit into the namespace\nu.add_enabled_units([au])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to open a FITS file and access its HDUs?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nhdul = fits.open('spectrum.fits')\nprint(hdul)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the difference between a FITS file and an HDU?"
      },
      {
        "from": "assistant",
        "value": "A FITS file can contain multiple HDUs, each of which is a self-contained data structure. HDUs are used to store different types of data, such as images, tables, or spectra."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to write a FITS file from an HDUList?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\ntxt_file = 'spectrum.txt'\nhdu_list = fits.HDUList([\nfits.PrimaryHDU(),\nfits.ImageHDU(np.random.rand(10, 10))\n])\nhdu_list.writeto(txt_file)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measurements of radial velocities for a set of stars. IDs ['HD126', 'HD127', 'HD128'], radial velocities [100, -50, 200] km/s. Show me how to create an Astropy Table with these values and set appropriate units for the radial velocity column."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy import units as u\n\nstar_ids = ['HD126', 'HD127', 'HD128']\nrad_vel = [100, -50, 200]  # km/s\n\ndata = Table([star_ids, rad_vel], names=('ID', 'rad_vel'), dtype=('str', 'float'))\ndata['rad_vel'].unit = u.km / u.s\nprint(data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Use the astropy.constants to calculate the mass of the Earth in kilograms."
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import G, M_earth as M_Earth\nM_earth = M_Earth.value\nprint(f'Mass of Earth: {M_earth:.2e} kg')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm using astropy to analyze the spectrum of a galaxy. How do I apply a linear stretc to the spectrum before plotting it with matplotlib?"
      },
      {
        "from": "assistant",
        "value": "import astropy.visualization as viz\nfrom astropy.io import fits\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nhdul = fits.open('spectrum.fits')\nspectrum = hdul[0].data\nstretch = viz.PercentageStretch(\n    percentage_increase=500\n)\nspectrum_stretched = stretch(spectrum)\nplt.plot(spectrum_stretched)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm creating an image of the celestial sphere using projected coordinates.  How do I apply a histogram equalization transformation to my greyscale image with a grey level of 200?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy import visualization as viz\nfrom astropy.io import fits\n\t\ncatalog = load_catalog()\nangular_coordinates = catalog.ra, catalog.dec\nimage = create_greyscale_image(angular_coordinates)\n\nhistogram_equalization = viz.AsinhStretch(\n    a=200\n)\nistogram_equalized_image = histogram_equalization(image)\nplt.imshow(histogram_equalized_image)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm working with multiple FITS images.  How do I apply a sigmoid stretch to the first image in each of the FITS files in a directory?"
      },
      {
        "from": "assistant",
        "value": "import glob\nfrom astropy import visualization as viz\nimport matplotlib.pyplot as plt\nglob.glob('*.fits')\n gripper_images = [fits.getdata(file) for file in files]\nsigmoid_stretch =  [viz.SigmoidStretch() for image in gripper_images[0]]\nprocessed_images = [stretch(image) for stretch, image  in zip(sigmoid_stretch, gripper_images)]\n\nplt.imshow(processed_images[0])\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm modeling crystallographic defects and need to create a covariance-based 2D Gaussian. Show me how to initialize a Gaussian2D model using a covariance matrix [[25, 6], [6, 16]] (implying correlation between x and y), centered at position (50, 50) with amplitude 1500."
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling.models import Gaussian2D\nfrom astropy.modeling.parameters import Parameter\n\n# Convert covariance matrix to Gaussian2D parameters\n\ncov_matrix = np.array([[25, 6], [6, 16]])\n\n# Calculate eigenvalues and eigenvectors to get rotation and standard deviations\n\neigenvals, eigenvecs = np.linalg.eigh(cov_matrix)\ntheta = np.arctan2(eigenvecs[1,0], eigenvecs[0,0])\n\n# Standard deviations are square roots of eigenvalues\n\tx_stddev = np.sqrt(eigenvals[1])  # Larger eigenvalue for x\n\ty_stddev = np.sqrt(eigenvals[0])  # Smaller eigenvalue for y\n\n# Create the 2D Gaussian model\ngaussian_model = Gaussian2D(\n    amplitude=1500,\n    x_mean=50,\n    y_mean=50,\n    x_stddev=x_stddev,\n    y_stddev=y_stddev,\n    theta=theta\n)\n\n# Example: Evaluate on a grid (optional)\ny, x = np.mgrid[0:100:100j, 0:100:100j]\n\ngaussian_data = gaussian_model(x, y)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring model with amplitude=0.5, center=(100,100), r_in=20, width=5"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Ring2D(amplitude=0.5, x_0=100, y_0=100, r_in=20, width=5)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring model with amplitude=1.2, center=(400,400), r_in=60, r_out=80"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Ring2D(amplitude=1.2, x_0=400, y_0=400, r_in=60, r_out=80)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a ring model with amplitude=0.8, center=(200,200), r_in=30, r_out=45"
      },
      {
        "from": "assistant",
        "value": "astropy.modeling.models.Ring2D(amplitude=0.8, x_0=200, y_0=200, r_in=30, r_out=45)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table of celestial object observations with multiple measurements of the same objects taken at different times. Can you show me how to get a clean dataset with unique object entries based on their id values?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import unique\nunique_table = unique(Table({'id': [1, 1, 2, 2, 3, 3], 'col1': [2, 3, 4, 5, 4, 6]}), keys='id')\nprint(unique_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a 1D array HDU with 10 float values?"
      },
      {
        "from": "assistant",
        "value": "fits.ColDef(naxislst=[(None, None, None, None, None, 'float')]).start()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show me an example of using astropy.io.fits.BinTableHDU to create a binary table HDU that contains single precision floating point columns?"
      },
      {
        "from": "assistant",
        "value": "fits.ColDef(infile='float.fits')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Why is the output table quadratic? How do I convert data from other data sources such as SQLite or PyMySQL into FITS files?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits; fits.BinTableHDU(data=[[1, 2, 3], [4, 5, 6]], header=fits.Header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing some solar data in Heliographic Carrington coordinates at an observation time of '2023-07-15 12:00:00'. How can I generate the appropriate WCS object with a gnomonic projection for my analysis?"
      },
      {
        "from": "assistant",
        "value": "create_hgs_wcs('2023-07-15 12:00:00', (360, 180))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.stats.bootstrap to perform bootstrap resampling of my galaxy cluster mass estimates?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.bootstrap(data=np.array([...]), bootnum=1000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the purpose of the bootfunc parameter in astropy.stats.bootstrap?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.bootstrap(data=np.array([...]), bootnum=1000, bootfunc=np.mean)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy.stats.bootstrap to estimate the confidence intervals of my galaxy cluster mass estimates?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.bootstrap(data=np.array([...]), bootnum=1000, samples=1000)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a new binary table extension with specific column names?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n\nclass BinaryTable:\n    def __init__(self, data, names, formats=None):\n        self.data = data\n        self.names = names\n        self.formats = formats\n\n    def to_table(self):\n        from astropy.table import Table\n        return Table(self.data, names=self.names, format=self.formats)\n\n\ndef create_binary_table(table_data, column_names, formats=None):\n    \n        try:\n            # Create BinaryTable instance\n            binary_table = BinaryTable(table_data, column_names, formats)\n\n            # Convert to astropy Table\n            astropy_table = binary_table.to_table()\n\n            # Create new BinaryTable HDU\n            binary_table_hdu = fits.BinTableHDU(astropy_table)\n\n            return binary_table_hdu\n        except Exception as e:\n            print(f\"Error creating binary table HDU: {str(e)}\")\n            return None\n\n# Example usage:\n# bintable_hdu = create_binary_table(table_data, ['col1', 'col2', 'col3'],\n#                                   ['f4', 'f4', 'f4'])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a models.Polynomial1D order-3 polynomial model with coefficients a, b, c, and d?"
      },
      {
        "from": "assistant",
        "value": "models.Polynomial1D(degre=3, a=1, b=2, c=3, d=4)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to find the 3-dimensional matches of a galaxy catalog to itself. I have the catalog's coordinates and velocities. Can you write code to find the nearest neighbors?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, Galacticreland units as u\nimport numpy as np\ndef find_nearest_neighbors(self):\n\t# Create SkyCoord objects for both catalogs\n\tgalactic_coords = SkyCoord(l=self.l, b=self.b, distance=self.distance, velocity=self.velocity)\n\tnthneighbor = 2\n\tmax_sep = 10*u.arcsec\n\tnumber_of_neighbors = 5\n\t_store_kdtree = False\n\tidx, sep2d, dist3d = self.coordinates.match_coordinates_3d(galactic_coords, nthneighbor=nthneighbor, storekdtree=_store_kdtree)\n\treturn np.unique(idx)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a list of angles in different formats to a standard decimal degree format?"
      },
      {
        "from": "assistant",
        "value": "generate_standardized_angles"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the distance to a star using Astropy's SkyCoord?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.distances import distance\n\n# Create SkyCoord object using the equatorial coordinates\n# Format: hours for RA, degrees for Dec\nc = SkyCoord('12h34m56.7s', '-63d12m43s', frame='icrs')\ndistance_angle = c.distance.to(u.parsec)\nprint(f'Distance to the star: {distance_angle:.3f} pc')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the proper motion of a star using Astropy's SkyCoord?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import Angle\n\n# Create SkyCoord object using the equatorial coordinates\n# Format: hours for RA, degrees for Dec\nc = SkyCoord('12h34m56.7s', '-63d12m43s', frame='icrs')\npm_ra_cosdec = Angle('10 mas/y', u.mas/u.yr)\nprint(f'Proper motion of the star: {pm_ra_cosdec:.3f} deg/y')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the radial velocity of a star using Astropy's SkyCoord?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import RadialVelocity\nc = SkyCoord('12h34m56.7s', '-63d12m43s', frame='icrs')\nr = RadialVelocity(10*u.km/u.s)\nprint(f'Radial velocity of the star: {r.to(u.m/s).value:.3f} m/s')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the minimum number of parameters required to create a primary HDU using astropy.io.fits.PrimaryHDU?"
      },
      {
        "from": "assistant",
        "value": "data= None, header={}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I add a WCS (World Coordinate System) to the primary HDU using astropy.io.fits.PrimaryHDU?"
      },
      {
        "from": "assistant",
        "value": "data= None, header={'WCSAXES': 2, 'CTYPE1': 'RA---TAN', 'CTYPE2': 'DEC--TAN'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a primary HDU with a custom keyword using astropy.io.fits.PrimaryHDU?"
      },
      {
        "from": "assistant",
        "value": "data= None, header={'CUSTOMKEY': 'custom value'}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to use the `astropy.wcs.utils.fit_wcs_from_points` function to fit a WCS to matched set of input detector and sky coordinates?"
      },
      {
        "from": "assistant",
        "value": "From astropy.wcs import WCS, FITSFixedWarning\nfrom astropy.modeling import models, fitting\nfrom astropy.coordinates import SkyCoord\nimport numpy as np\n\n# Suppress fixed WCS warnings\nwarnings.filterwarnings('ignore', category=FITSFixedWarning)\n\n# Example usage:\n# xy = (np.array([1, 2, 3]), np.array([4, 5, 6]))\n# world_coords = SkyCoord(ra=[1, 2, 3], dec=[4, 5, 6], unit='deg')\n# proj_point = 'center'\n# sip_degree = None\n# wcs = fit_wcs_from_points(xy, world_coords, proj_point, projection='TAN', sip_degree=sip_degree)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the current position of the Sun?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body, solar_system_ephemeris, get_sun, SkyCoord\n\n# Set JPL ephemeris (most accurate)\nsolar_system_ephemeris.set('de440')\n\n# Current time\nt = Time.now()\n\n# Get Sun position\nsun = get_sun(t)\n\nprint(sun)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do you remove outliers from a dataset?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\n\n# Example data array (replace with your actual data)\nspectrum = np.array([2.1, 2.3, 2.0, 15.7, 2.2, 2.1, 2.4, 25.3, 2.2, 2.3])\n\n# Apply sigma clipping to remove outliers\n# sigma=3 means data points >3 std dev from mean are rejected\n# maxiters=5 limits iteration count\ncleaned_spectrum = sigma_clip(spectrum, sigma=3, maxiters=5)\n\n# Get cleaned statistics without outliers\nclean_mean = np.ma.mean(cleaned_spectrum)\nclean_std = np.ma.std(cleaned_spectrum)\n\n# Print results\nprint(f\"Clean mean: {clean_mean:.2f}\")\nprint(f\"Clean standard deviation: {clean_std:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use a custom function as the center value for sigma clipping?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\n\n# Example data array (replace with your actual data)\nspectrum = np.array([2.1, 2.3, 2.0, 15.7, 2.2, 2.1, 2.4, 25.3, 2.2, 2.3])\n\n# Define a custom function to compute the center value\ndef custom_cenfunc(data):\n    return np.nanmedian(data)\n\n# Apply sigma clipping with custom center value\nsigma_clip(spectrum, sigma=3, maxiters=5, cenfunc=custom_cenfunc)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I clip data until convergence is achieved?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import sigma_clip\n\ndata = np.array([2.1, 2.3, 2.0, 15.7, 2.2, 2.1, 2.4, 25.3, 2.2, 2.3])\n\ncleaned_data, prev_n masked = sigma_clip(data, sigma=3, maxiters=None, cenfunc='median', stdfunc='std')\n\nprint(f\"Cleaned data: {cleaned_data}\")\nprint(f\"Number of masked points: {prev_n_masked}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert RA and Dec from FK4 to FK5 for a star with RA = 10h, Dec = 20\u00b0. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import FK4, FK5\nfrom astropy.time import Time\n\n# Define FK4 coordinates\nfk4_coords = FK4(ra='10h', dec='20d', equinox='B1950')\n\n# Convert to FK5 (default equinox is J2000)\nfk5_coords = fk4_coords.transform_to(FK5())\n\nprint(fk5_coords.ra.to_string(unit='h'))\nprint(fk5_coords.dec.to_string(unit='d'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the barycentric position and velocity of Mars at 2024-04-01T12:00:00 using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel, get_body_barycentric, get_body, get_body_posvel\nfrom astropy.time import Time\nfrom astropy.units import u\n\n# Set the observation time\n\ntime = Time('2024-04-01T12:00:00')\n\n# Get Mars' barycentric position and velocity\nmars_posvel = get_body_barycentric_posvel('mars', time)\nmars_pos = mars_posvel[0]  # Position vector\nmars_vel = mars_posvel[1]  # Velocity vector\n\n# Print results with units\nprint(\"Mars' barycentric position (AU)\")\nprint(f\"X: {mars_pos.x:.6f}, Y: {mars_pos.y:.6f}, Z: {mars_pos.z:.6f}\")\nprint(\"\\nMars' barycentric velocity (AU/day)\")\nprint(f\"VX: {mars_vel.x:.6f}, VY: {mars_vel.y:.6f}, VZ: {mars_vel.z:.6f}\")\n\n# Calculate position difference between Mars and Earth-Moon-Barycenter\n\n# Get the values directly from the CartesianRepresentation components\nemb_pos = get_body_barycentric_posvel('earth-moon-barycenter', time)[0]\ndx = (mars_pos.x - emb_pos.x).to(u.km)\n\ndy = (mars_pos.y - emb_pos.y).to(u.km)\ndz = (mars_pos.z - emb_pos.z).to(u.km)\n\n# Print results\nprint(\"\\nPosition difference (Mars - EMB) in km:\\n \")\nprint(f\" \u0394X: {dx:.3f}\")\nprint(f\" \u0394Y: {dy:.3f}\")\nprint(f\" \u0394Z: {dz:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you explain how to use get_body_barycentric_posvel to calculate the barycentric position and velocity of the Sun at a given time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel\nfrom astropy.time import Time\n\n# Set the observation time\n\ntime = Time('2024-04-01T12:00:00')\n\n# Get Sun's barycentric position and velocity\nsun_posvel = get_body_barycentric_posvel('sun', time)\n\n# Print results with units\nprint(\"Sun's barycentric position (AU)\")\nprint(sun_posvel[0])\n\nprint(\"\\nSun's barycentric velocity (AU/day)\")\nprint(sun_posvel[1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use get_body_barycentric_posvel to get the barycentric position and velocity of Jupiter and the Earth-Moon-Barycenter at the same time?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import get_body_barycentric_posvel, get_body_barycentric\nfrom astropy.time import Time\n\n# Set the observation time\n\ntime = Time('2024-04-01T12:00:00')\n\ngroup1 = ['earth', 'jupiter']\ngroup2 = ['earth-moon-barycenter']\n\n# Get positions and velocities for each group at the same time\nposvel1 = get_body_barycentric_posvel(group1, time)\nemb_posvel = get_body_barycentric_posvel(group2, time)\n\n# Print results with units\nprint(\"Positions and velocities for the first group:\")\nfor i, body in enumerate(group1):\n    print(f\"\\n{body}'s barycentric position (AU)\")\n    print(posvel1[i][0])\n    \n    print(f\"\\n{body}'s barycentric velocity (AU/day)\")\n    print(posvel1[i][1])\n    \nprint(\"\\nPositions and velocities for the second group:\")\nprint(f\"\\nEarth-Moon-Barycenter's barycentric position (AU)\")\nprint(emb_posvel[0])\n\nprint(\"\\nEarth-Moon-Barycenter's barycentric velocity (AU/day)\")\nprint(emb_posvel[1])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have two tables with different column names. How can I merge them into a single table with a common column name?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, hstack\nimport numpy as np\nt1 = Table({'a': [1, 2], 'b': [3, 4]}, names=('a', 'b'))\nt2 = Table({'c': [5, 6], 'd': [7, 8]}, names=('c', 'd'))\nmerged_table = hstack([t1, t2], join_type='inner', uniq_col_name='common_col')\nprint(merged_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the mass of a proton in kilograms?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import m_p\nprint(m_p.value)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a distance of 10 parsecs to megaparsecs?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.constants import parsec\nprint(10 * parsec.to(u.Mpc))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the speed of light in miles per second?"
      },
      {
        "from": "assistant",
        "value": "from astropy.constants import c\nprint(c.to('miles/s'))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert MJD to Unix timestamp?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\nimport numpy as np\n\n# Example MJD times\nmjd_times = np.array([60000.0, 60000.1])\n\nt = Time(mjd_times, format='mjd')\n\ncurrent_time_unix = t.utc.timestamp()\n\ncurrent_time_unix\n\nThe above code first converts MJD times to Time object using astropy's Time function, then extracts the Unix timestamp from it."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a FITS binary table HDU with a specific format?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nimport numpy as np\ndef create_binary_table_hdu(data, format):    table_hdu = fits.BinTableHDU(data, format=format)\n    return table_hdu"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the distance to a star using its apparent and absolute magnitudes. Can you provide an example code?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy import constants as const\nfrom astropy.units import equivalencies\n\n# Define the apparent and absolute magnitudes\napp_magnitude = 10\nabs_magnitude = 20\n\n# Define the distance modulus equation\ndef distance_modulus(m, M)\n    \":\"\"\"\n    Calculate the distance to a star in parsecs using the distance modulus equation.\n    \"\"\"`\n  return 10**(0.2 * (m - M)) * const.pc\n\n# Use the distance modulus equation\ndistance = distance_modulus(app_magnitude, abs_magnitude)\nprint(f\"Distance to the star: {distance:.2f} pc\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to convert a spectral resolution of 1000 from units of pixels to units of frequency (Hz) for my spectrograph. Can you show me how to do this?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.units import equivalencies\n\n# Define the spectral resolution in pixels\nResolution = 1000\n\n# Define the spectral resolution conversion\ndef pixels_to_frequency():\n    # Custom equivalency for converting pixels to frequency (Hz)\n    return [(1, u.pix, lambda x: 1 / x, lambda x: x)]\n\n# Use the conversion\nfrequency = Resolution.to(u.Hz, equivalencies=pixels_to_frequency())\nprint(f\"Spectral resolution: {frequency:.2f} Hz\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a time series of fluxes in erg/s/cm^2 from units of counts per second to physical units of flux (erg/s/cm^2) using the gain of my detector. How do I implement this conversion in Python?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy import units as u\nfrom astropy.units import equivalencies\n\n# Define the gain of the detector\ngain = 100\n\n# Define the conversion factor\ndef counts_to_flux(gain):\\n    \"\"\"Convert counts per second to physical units of flux (erg/s/cm^2).\\n    \"\"\"\n   return [(u.count / u.s, u.erg / u.s / u.cm**2, lambda x: x * gain, lambda x: x / gain)]\n\n# Use the conversion\nflux = (100 * u.count / u.s).to(u.erg / u.s / u.cm**2, equivalencies=counts_to_flux(gain))\nprint(f\"Flux: {flux:.2e} erg/s/cm^2\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the Kuiper statistic to compare the distributions of two sets of data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\n# Sample data for two distributions\n\ndataset1 = np.array([1.2, 1.5, 1.8, 2.1, 2.4])\ndataset2 = np.array([1.5, 1.8, 2.1, 2.4, 2.7])\n\nd, fpp = kuiper_two(dataset1, dataset2)\n\nprint(f\"Kuiper statistic: {d:.3f}\")\nprint(f\"Probability of difference: {fpp:.3f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the Kuiper statistic used for in astrophysics?"
      },
      {
        "from": "assistant",
        "value": "The Kuiper statistic is used to compare the distributions of two sets of data. It is a non-parametric test that can be used to determine if two samples come from the same distribution."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you describe an application of the Kuiper statistic in astrophysics?"
      },
      {
        "from": "assistant",
        "value": "One application of the Kuiper statistic is to compare the distributions of stars in different galaxy clusters. By using the Kuiper statistic, astronomers can determine if the distributions of stars are similar or different between the two clusters."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the relationship between the cartesian coordinates and the spherical coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates.representation import SphericalRepresentation, CartesianRepresentation\n\n# Create example star data (x, y, z, radial velocity)\ncartesian = SkyCoord(x=[1, 2, 3] * u.m, y=[4, 5, 6] * u.m, z=[7, 8, 9] * u.m, radial_velocity=[10, 11, 12] * u.m/u.s)\n\n# Convert to spherical representation\nspherical = cartesian cartesian.represent_as(SphericalRepresentation)\n\n# Print the first star's position and motion\nprint(f\"Position (r,lon,lat): {spherical[0]}\""
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I stack two tables with different column names?"
      },
      {
        "from": "assistant",
        "value": "You can use the ``join_type='exact'`` parameter to ensure that the columns align perfectly."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What if I have three tables with different column names?"
      },
      {
        "from": "assistant",
        "value": "You can combine the first two tables and then combine the result with the third table, making sure to set ``join_type='exact'`` each time."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I handle metadata conflicts when stacking tables?"
      },
      {
        "from": "assistant",
        "value": "You can specify the ``metadata_conflicts`` parameter to handle conflicts."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying a planetary system and want to calculate the angular separation between two planets at their known orbital positions. How can I use astropy's coordinate utilities to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, solar_system_ephem\nimport astropy.units as u\n\n# Create SkyCoord objects for the planets\n# Using ICRS frame (default) for coordinates\nearth = SkyCoord(ra=279.9*u.degree, dec=20.6*u.degree)\nblaenetus_k1 = SkyCoord(ra=281.5*u.degree, dec=16.8*u.degree)\n\ncalculate_angular-separation = earth.separation(blaenetus_k1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm trying to calculate the angular separation between the center of the Milky Way and a nearby star. Can you provide an example of how to do this using astropy's coordinate utilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nimport astropy.units as u\n\ngalactic_center = SkyCoord(ra=266.4*u.degree, dec=-29*u.degree)\nalles2a_v = SkyCoord(ra=71.3*u.degree, dec=16.3*u.degree)\n\ngalactic_center.separation(alles2a_v)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the angular separation between the Sun and a planet at a particular time? Can you provide an example of how to do this using astropy's coordinate utilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, get_body\nimport astropy.units as u\n\ntime = '2024-07-26'\nplanet = get_body('mars', time)\n\ngalactic_center = SkyCoord(ra=planet.ra, dec=planet.dec)\nplanet.separation(galactic_center)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert a celestial object's coordinates from B1950 to FK5 system using astropy coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, FK5\n\ndef convert_coordinates_b1950_to_fk5(ra_b1950, dec_b1950):\n    # Create a SkyCoord object in B1950 frame\n    skycoord_b1950 = SkyCoord(ra=ra_b1950, dec=dec_b1950, frame='b1950\n    \n    # Transform the coordinate to FK5 frame\n    fk5 = skycoord_b1950.transform_to(FK5)\n\n    return fk5\n\n# Example usage\nra_b1950 = '12h30m00.0s'\ndec_b1950 = '+30d00m00.0s'\nfk5_coord = convert_coordinates_b1950_to_fk5(ra_b1950, dec_b1950)\nprint(fk5_coord)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the distance to a celestial object using its parallax measurement, how can I do this with astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.units import u\nfrom astropy.coordinates import SkyCoord\n\n\ndef calculate_distance(parallax):\n    # units are in mas (milliarcseconds)\n    # 1 mas is equivalent to 1 milliarcsecond\n    # 1 arcsecond is equivalent to 1 / 206265 of a radian\n    # 1 radian is equivalent to 1 / (180 / pi) of a degree\n    # \n    # convert parallax from mas to radians\n    parallax_radians = parallax * (u.radian / 206265)\n\n    # calculate the distance using the formula: d = 1 / tan(parallax)\n    distance = 1 / (np.tan(parallax_radians))\n\n    return distance\n\n# Example usage\nparallax = 100.0 * u.mas\n distance = calculate_distance(parallax)\nprint(distance)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Box2D model for a circular aperture with a radius of 0.1 arcseconds and complete opacity (amplitude = 0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nimport astropy.units as u\n\ncircle = models.Box2D(amplitude=0, x_0=0 * u.arcsec, y_0=0 * u.arcsec, x_width=0.2 * u.arcsec, y_width=0.2 * u.arcsec)\ncircle = models.Box2D(amplitude=0, x_0=0 * u.arcsec, y_0=0 * u.arcsec, x_width=0.2 * u.arcsec, y_width=0.2 * u.arcsec)\nmax = models.Box2D(amplitude=0, x_0=-0.1 * u.arcsec, y_0=-0.1 * u.arcsec, x_width=0.2 * u.arcsec, y_width=0.2 * u.arcsec)\nreturn max"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you define a Box2D model for an elliptical aperture with a major axis of 0.2 arcseconds, a minor axis of 0.1 arcseconds, and complete opacity (amplitude = 0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nimport astropy.units as u\n\nek = models.Ellipse2D(amplitude=0, theta=0 * u.rad, x_0=0 * u.arcsec, y_0=0 * u.arcsec, x\u1ed9n=0.2 * u.arcsec, y_0=0.1 * u.arcsec)\nreturn ek"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you create a Box2D model for a rectangular aperture with a width of 0.1 arcseconds, a height of 0.2 arcseconds, and complete opacity (amplitude = 0)?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Parameter\nimport astropy.units as u\n\ncircle = models.Box2D(amplitude=0, x_0=-0.05 * u.arcsec, y_0=-0.1 * u.arcsec, x_width=0.1 * u.arcsec, y_width=0.2 * u.arcsec)\nreturn circle"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the ISO 8601 compliant date-time format for a date in the format YYYY-MM-DD?"
      },
      {
        "from": "assistant",
        "value": "astropy.time.Time.now().isoformat('date')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I format a date and time in the format YYYY-MM-DD HH:MM:SS?"
      },
      {
        "from": "assistant",
        "value": "astropy.time.Time.now().isoformat('date_hm')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to format a date and time in the format YYYY-MM-DD HH:MM:SS.sss..."
      },
      {
        "from": "assistant",
        "value": "astropy.time.Time.now().isoformat('date_hms')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing solar intensity oscillations and want to smooth the power spectrum to identify the main frequency modes. How can I apply Gaussian filtering to my frequency data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\nimport numpy as np\ndataset = np.random.normal(1, 0.2, 1000)\nkernel = Gaussian1DKernel(stddev=5)\nsmoothed_data = convolve(dataset, kernel, boundary='extend')\nprint(smoothed_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm studying the properties of white dwarfs and want to smooth my spectral data to identify the main features. How can I apply Gaussian filtering to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\ndataset = np.random.normal(1, 0.2, 1000)\nkernel = Gaussian1DKernel(stddev=2)\nsmoothed_data = convolve(dataset, kernel, boundary='extend')\nprint(smoothed_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing the data from a space mission and want to smooth the signal to remove noise. How can I apply Gaussian filtering to my data?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Gaussian1DKernel, convolve\ndataset = np.random.normal(1, 0.2, 1000)\nkernel = Gaussian1DKernel(stddev=1)\nsmoothed_data = convolve(dataset, kernel, boundary='extend')\nprint(smoothed_data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use LevMarLSQFitter to fit a sine model to some data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\n\n# Create sample data (replace with your actual data)\nwavelength = np.linspace(1, 10, 100)\nflux = np.sin(wavelength) + np.random.normal(0, 0.1, wavelength.shape)\n\n# Initialize the fitter and model\nfitter = fitting.LevMarLSQFitter()\nsine_init = models.Sine(amplitude=1.0, period=2*np.pi)\n\n# Fit the data\nfitted_model = fitter(sine_init, wavelength, flux)\n\n# Get the fitted parameters\namplitude = fitted_model.amplitude.value\nperiod = fitted_model.period.value\n\nprint(f\"Fitted parameters:\")\nprint(f\"Amplitude: {amplitude:.2f}\")\nprint(f\"Period: {period:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.stats` module to calculate the P-value for the significance of a spectral feature?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats\n# calculate the P-value for a spectral feature"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.stats` module to perform a statistical test on a set of spectra?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats\n# perform a statistical test on a set of spectra"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the `astropy.stats` module to calculate the signal-to-noise ratio (S/N) for a spectrum?"
      },
      {
        "from": "assistant",
        "value": "import astropy.stats\n# calculate the S/N for a spectrum"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I change the amplitude of the Box1D model to 2.5?"
      },
      {
        "from": "assistant",
        "value": "import astropy.modeling.models as models\nfrom astropy.modeling.models import Box1D\nmodel = Box1D(amplitude=2.5, x_0=0.25, width=0.1)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a table with celestial coordinates and I want to calculate the distance to a list of stars. How can I do this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nfrom astropy.coordinates import SkyCoord\nfrom astropy.distance import distance\n\ntable = Table({'RA': [12.5, 13.2, 14.1], 'DEC': [45.6, 46.3, 47.1]})\ncoords = SkyCoord(ra=table['RA'], dec=table['DEC'], unit='deg')\ndistances = distance(coords, 10)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy released by a supernova that weighs 1.5e30 kg?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nfrom astropy.units import quantites as uq\n\nmass = 1.5e30 * u.kg\nenergy = (mass * const.c * const.c).to('J')\nimport astropy.units as u\nimport astropy.constants as const\n\nprint(f'Energy released: {(energy / (const.L_sun * 1 * u.s)).to(''):.2e} solar luminosities')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you calculate the energy of a star that has 10^32 kg of mass?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nimport astropy.units as u\nimport astropy.constants as const\n\nmass = 10 ** 32 * u.kg\nenergy = (mass * const.c * const.c).to('J')\nprint(f'Energy of the star: {(energy / (const.L_sun * 1 * u.s)).to(''):.2e} solar luminosities')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the energy released by a black hole that has a mass of 2e31 kg?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, constants as const\nimport astropy.units as u\nimport astropy.constants as const\n\nmass = 2e31 * u.kg\nenergy = (mass * const.c * const.c).to('J')\nprint(f'Energy released: {(energy / (const.L_sun * 1 * u.s)).to(''):.2e} solar luminosities')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you retrieve the constellation of a specific stellar object at RA 12.3456789\u00b0 and Dec 90.1234567\u00b0 using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import get_constellation\ncoord = SkyCoord(ra=12.3456789 * u.degree, dec=90.1234567 * u.degree, frame='icrs')\nconstellation = get_constellation(coord)\nprint(constellation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to get the constellation name of a star at a position 10.0\u00b0 E of the equator and 20.0\u00b0 N of the equator using astropy."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import get_constellation\ncoord = SkyCoord(ra=10.0 * u.degree, dec=20.0 * u.degree, frame='icrs')\nconstellation = get_constellation(coord)\nprint(constellation)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you provide an example of how to retrieve the constellation of multiple stars at once using astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import get_constellation\n# Example list of coordinates (RA, Dec)\nstar_coords = [(80.894167, -69.756111), (10.684708, 41.268750)]\n# Create SkyCoord object from the coordinates\nra_coords = [coord[0] for coord in star_coords]\ndec_coords = [coord[1] for coord in star_coords]\nstars = SkyCoord(ra=ra_coords * u.degree, dec=dec_coords * u.degree, frame='icrs')\n# Get constellation for each star\nconstellations = [get_constellation(star) for star in stars]\n# Print results\nfor coord, constellation in zip(star_coords, constellations):\n    print(f\"Star at RA={coord[0]:.2f}\u00b0, Dec={coord[1]:.2f}\u00b0 is in {constellation}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measured the flux of a galaxy in 30 different exposures: [152.1, 153.5, 154.8, 156.2, 153.9, 155.1, 152.8, 154.3, 156.6, 153.6, 155.4, 152.3, 154.7, 156.9, 153.1, 155.6, 152.9, 154.2, 157.0, 153.3, 155.8, 152.5, 154.6, 156.1, 153.5, 155.9, 152.2, 154.4, 156.5, 153.8]. How can I use bootstrap resampling to estimate the uncertainty in the median flux?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\n\n# Original flux measurements\nflux = np.array([152.1, 153.5, 154.8, 156.2, 153.9, 155.1, 152.8, 154.3, 156.6, 153.6, 155.4, 152.3, 154.7, 156.9, 153.1, 155.6, 152.9, 154.2, 157.0, 153.3, 155.8, 152.5, 154.6, 156.1, 153.5, 155.9, 152.2, 154.4, 156.5, 153.8])\n\n# Function to compute median of a sample\ndef compute_median(data):\n    return np.median(data)\n\n# Perform bootstrap resampling with 1000 iterations\nbootresult = bootstrap(flux, bootnum=1000, bootfunc=compute_median)\n\n# Calculate statistics from bootstrap results\nmedian_flux = np.median(flux)\nflux_uncertainty = np.std(bootresult)\n\nprint(f\"Median flux: {median_flux:.2f} \u00b1 {flux_uncertainty:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measured the flux of a star in 25 different exposures: [158.3, 159.7, 157.9, 160.1, 158.2, 159.3, 157.5, 160.4, 158.1, 159.2, 157.7, 160.6, 158.3, 159.4, 157.9, 160.8, 158.4, 159.5, 158.0, 160.9, 158.5, 159.6, 157.9, 161.0, 158.6]. How can I use bootstrap resampling to estimate the uncertainty in the mean flux?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\n\n# Original flux measurements\nflux = np.array([158.3, 159.7, 157.9, 160.1, 158.2, 159.3, 157.5, 160.4, 158.1, 159.2, 157.7, 160.6, 158.3, 159.4, 157.9, 160.8, 158.4, 159.5, 158.0, 160.9, 158.5, 159.6, 157.9, 161.0, 158.6])\n\n# Function to compute mean of a sample\ndef compute_mean(data):\n    return np.mean(data)\n\n# Perform bootstrap resampling with 1000 iterations\nbootresult = bootstrap(flux, bootnum=1000, bootfunc=compute_mean)\n\n# Calculate statistics from bootstrap results\nmean_flux = np.mean(flux)\nflux_uncertainty = np.std(bootresult)\n\nprint(f\"Mean flux: {mean_flux:.2f} \u00b1 {flux_uncertainty:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have measured the flux of a galaxy in 20 different exposures: [151.2, 152.6, 153.9, 155.3, 152.1, 154.5, 151.4, 153.8, 155.2, 152.6, 154.2, 151.3, 153.7, 155.1, 152.2, 154.6, 151.9, 153.4, 155.5, 152.9]. How can I use bootstrap resampling to estimate the uncertainty in the median flux?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.stats import bootstrap\n\n# Original flux measurements\nflux = np.array([151.2, 152.6, 153.9, 155.3, 152.1, 154.5, 151.4, 153.8, 155.2, 152.6, 154.2, 151.3, 153.7, 155.1, 152.2, 154.6, 151.9, 153.4, 155.5, 152.9])\n\n# Function to compute median of a sample\ndef compute_median(data):\n    return np.median(data)\n\n# Perform bootstrap resampling with 1000 iterations\nbootresult = bootstrap(flux, bootnum=1000, bootfunc=compute_median)\n\n# Calculate statistics from bootstrap results\nmedian_flux = np.median(flux)\nflux_uncertainty = np.std(bootresult)\n\nprint(f\"Median flux: {median_flux:.2f} \u00b1 {flux_uncertainty:.2f}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a 2D Airy disk model with amplitude=2.0 centered at (32, 32) and radius=1.0"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nimport numpy as np\ncenter_x = 32.0\ncenter_y = 32.0\nradius = 1.0\nmodel = models.AiryDisk2D(amplitude=2.0, x_0=center_x, y_0=center_y, radius=radius)\nprint(model)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you scale a polynomial model using Astropy's `astropy.modeling.models.Scale` function?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Scale\npoly = models.Polynomial1D(degree=2)\nscaler = Scale(factor=2)\nscaled_poly = scaler(poly)\nprint(scaled_poly)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can you use Astropy's `astropy.modeling.models.Scale` to scale a sinusoidal model?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Scale\nsin = models.Sine1D(amplitude=1, frequency=1)\nscaler = Scale(factor=0.5)\nscaled_sin = scaler(sin)\nprint(scaled_sin)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you demonstrate scaling a Gaussian model using Astropy's `astropy.modeling.models.Scale`?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, Scale\ngaus = models.Gaussian1D(amplitude=1, mean=0, sigma=1)\nscaler = Scale(factor=1.2)\nscaled_gaus = scaler(gaus)\nprint(scaled_gaus)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to flatten a single column table (column: 'temperature') and merge it with another table"
      },
      {
        "from": "assistant",
        "value": "try:\n    # Flatten the table\n    flattened_table = astropy.table.Table(flattened_data)\n    # Merge the tables\n    merged_table = astropy.table.Table.join(table1, flattened_table, keys='temperature', join_type='outer')\n    return merged_table\n    except astropy.table.TableMergeError as e:\n    print(f\"Error merging tables: {str(e)}\")\n    return None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I am trying to merge two tables on a non-existent column. Handle this with a custom error message"
      },
      {
        "from": "assistant",
        "value": "try:\n    # Merge tables on non-existent column\n    merged_table = astropy.table.Table.join(table1, table2, keys='non_existent_column', join_type='outer')\n    return merged_table\n    except astropy.table.TableMergeError as e:\n    print(\"Error: The specified column does not exist.\")\n    return None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I merge two tables based on a string column, but include rows where the string does not match?"
      },
      {
        "from": "assistant",
        "value": "try:\n    # Merge tables on string column\n    merged_table = astropy.table.Table.join(table1, table2, keys='string_column', join_type='left')\n    return merged_table\n    except astropy.table.TableMergeError as e:\n    print(f\"Error merging tables: {str(e)}\")\n    return None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 1000 stars' magnitudes ranging from 1 to 10. How can I determine the optimal bin width for creating a histogram that best represents the magnitude distribution using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "{'optimal_width': astro.stats.freedman_bin_width(data, return_bins=False), 'bins': astro.stats.freedman_bin_width(data, return_bins=True)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 500 planets' masses ranging from 1 to 10 MJ. How can I determine the optimal bin width for creating a histogram that best represents the mass distribution using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "{'optimal_width': astro.stats.freedman_bin_width(data, return_bins=False), 'bins': astro.stats.freedman_bin_width(data, return_bins=True)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have 2000 galaxies' redshifts ranging from 0 to 10. How can I determine the optimal bin width for creating a histogram that best represents the redshift distribution using the Freedman-Diaconis rule?"
      },
      {
        "from": "assistant",
        "value": "{'optimal_width': astro.stats.freedman_bin_width(data, return_bins=False), 'bins': astro.stats.freedman_bin_width(data, return_bins=True)}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the effect of the distance on the astrometric position of a celestial object?"
      },
      {
        "from": "assistant",
        "value": "The distance of a celestial object from the observer has a significant impact on its astrometric position.\n\nThe distance affects the apparent position of the object in the sky, making it appear larger or smaller depending on how far away it is. \n\nAstronomers use various methods to account for this effect and obtain accurate positions of celestial objects."
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I compare the distribution of stellar masses of two galaxy clusters using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import kuiper_two\nimport numpy as np\n\n# Example stellar mass data in solar masses for two galaxy clusters\n# In practice, you would load your actual data\ncluster1_mass = np.array([1e10, 2e10, 3e10, 4e10, 5e10, 6e10, 7e10, 8e10])\ncluster2_mass = np.array([1.2e10, 1.5e10, 1.8e10, 2.1e10, 2.4e10, 2.7e10, 3e10, 3.3e10]\n\n# Perform Kuiper test\nD, fpp = kuiper_two(cluster1_mass, cluster2_mass)\n\n# Interpret results (standard significance level = 0.05)\nprint(f\"Kuiper test statistic: {D:.3f}\")\nprint(f\"p-value: {fpp:.3e}\")\nprint(\"\\nInterpretation:\\\")\nif fpp < 0.05:\n    print(\"The mass distributions are significantly different (p < 0.05)\")\n    print(\"Clusters likely have different mass distributions\")\nelse:\n    print(\"Cannot reject hypothesis that distributions are the same\")\n    print(\"Clusters could have similar mass distributions\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a datetime object to a Julian Date using Astropy's TimeJT?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import TimeJT\n\n# Create Time object with datetime\nfmt = '%Y-%m-%d %H:%M:%S'\ndatetime = '2022-01-01 12:00:00'\nt = TimeJT(datetime, format='datetime')\n\n# Get Julian Date\njd = t.jd\n\nprint(f'Datetime {datetime} = {jd} JD')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to calculate the time of noon on 30 April 1973 in JD.  How can I do this using Astropy's TimeJD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\n\ndatetime = '1973-04-30 12:00:00'\njd = Time(datetime, format='iso', scale='utc').jd\n\nprint(f'Julian Date JD = {jd}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to convert 2450000.5JD to UTC Unix timestamp using Astropy's TimeJD?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time\njd = 2450000.5\nutcTS = Time(jd, format='jd', scale='utc').unix\n\nprint(f'Unix timestamp of Julian Date {jd} = {utcTS}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a Lorentzian profile with a specific amplitude, center, and FWHM?"
      },
      {
        "from": "assistant",
        "value": "models.Lorentz1D(amplitude=-0.7, x_0=4860, fwhm=0.9)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of a composite model made up of three Lorentzian profiles?"
      },
      {
        "from": "assistant",
        "value": "lorentz1 + lorentz2 + lorentz3"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the formula for the Lorentzian profile?"
      },
      {
        "from": "assistant",
        "value": "f(x) = A * gamma^2 / (gamma^2 + (x - x_0)^2)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert an ICRS frame to WCS with a tangent projection."
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs; from astropy.coordinates import ICRS; frame = ICRS(equinox='J2000'); wcs = celestial_frame_to_wcs(frame, 'TAN'); print(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert an ECTR frame to WCS with a zenitNorth azmudectional projection?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs; from astropy.coordinates import ECTR; frame = ECTR(equinox='J2000'); wcs = celestial_frame_to_wcs(frame, 'AZIMUTHAL'); print(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I convert a Galactic frame to WCS with an Equatorial projection?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs.utils import celestial_frame_to_wcs; from astropy.coordinates import Galactic; frame = Galactic(equinox='J2000'); wcs = celestial_frame_to_wcs(frame, 'EQUITORIAL'); print(wcs.to_header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a new angular unit with a specific docstring and LaTeX formatting?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import def_unit\ndef_unit('rad', u.rad, doc='Angular unit', format={'latex': r'\text{rad}'}\n)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I create a unit for measuring time with a specific docstring and excluding certain SI prefixes?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import def_unit\ndef_unit('t', u.s, doc='Time unit', format={}, prefixes=False, exclude_prefixes=['ms', 's'])\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I define a custom unit for measuring mass with a specific docstring and LaTeX formatting?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nfrom astropy.units import def_unit\ndef_unit('M', u.M_sun, doc='Mass unit', format={'latex': r'M_{\text{\u00b1}}'})\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I write code to create a SkyOffsetFrame centered on the point RA=10.2\u00b0, Dec=20.5\u00b0 in ICRS coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Create the reference point in ICRS coordinates\nreference_point = SkyCoord(ra=10.2*u.deg, dec=20.5*u.deg, frame='icrs')\n\n# Create a SkyOffsetFrame centered on our reference point\noffset_frame = SkyOffsetFrame(origin=reference_point)\n"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a dataset [1, 2, 3, 4, 5] that I want to scale inversely by a factor of 2. Create an instance of `astropy.modeling.models.Scale` to perform this transformation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create sample data\noriginal_data = [1, 2, 3, 4, 5]\n\n# Create a Scale model to perform inverse scaling by a factor of 2\ninverse_scale_model = models.Scale(factor=1/2)\n\n# Apply scaling to the data\nscaled_data = inverse_scale_model(original_data)\n\nprint(f\"Original data: {original_data}\")\nprint(f\"Scaled data: {scaled_data}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to scale a dataset [10, 20, 30, 40, 50] by a factor of 3/4 to correct for instrumental effects. Use the `astropy.modeling.models.Scale` class to perform this operation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create sample data with units\noriginal_data = [10, 20, 30, 40, 50] * u.m\n\n# Create a Scale model to perform scaling by a factor of 3/4\nscale_model = models.Scale(factor=3/4)\n\n# Apply scaling to the data\nscaled_data = scale_model(original_data.value)\n\nprint(f\"Original data: {original_data}\")\nprint(f\"Scaled data: {scaled_data} m\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I need to scale a dataset [5, 10, 15, 20, 25] by a factor of 1/3 to suit my analysis. Use the `astropy.modeling.models.Scale` class to perform this scaling operation."
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models, fitting\nfrom astropy import units as u\n\n# Create sample data with units\noriginal_data = [5, 10, 15, 20, 25] * u.mm\n\n# Create a Scale model to perform scaling by a factor of 1/3\nscale_model = models.Scale(factor=1/3)\n\n# Apply scaling to the data\nscaled_data = scale_model(original_data.value) * u.mm\n\nprint(f\"Original data: {original_data}\")\nprint(f\"Scaled data: {scaled_data} mm\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I model a fan-shaped Gaussian in astropy?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\ncov_matrix = np.array([[1, 0.5], [0.5, 1]])\ng2d = models.Gaussian2D(cov_matrix=cov_matrix)\nplt.imshow(g2d(x, y), origin='lower', extent=[-5,5,-5,5])\nplt.colorbar(label='Intensity')\nplt.title('Fan-shaped Gaussian')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of a Gaussian with correlated x and y coordinates?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\ncorrelation = 0.7\nsigma_x = 2\nsigma_y = 1\ntheta = np.arctan(correlation)\ncov_matrix = np.array([[sigma_x**2, correlation*sigma_x*sigma_y], [correlation*sigma_x*sigma_y, sigma_y**2]])\ng2d = models.Gaussian2D(cov_matrix=cov_matrix)\nplt.imshow(g2d(x, y), origin='lower', extent=[-5,5,-5,5])\nplt.colorbar(label='Intensity')\nplt.title('Gaussian with correlated x and y coordinates')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Gaussian with a correlation between x and y?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import models, fitting\nfrom astropy.visualization import quantity_support\nimport matplotlib.pyplot as plt\n\ncorrelation = 0.5\nsigma_x = 1\nsigma_y = 2\ntheta = np.arctan(correlation)\ncov_matrix = np.array([[sigma_x**2, correlation*sigma_x*sigma_y], [correlation*sigma_x*sigma_y, sigma_y**2]])\ng2d = models.Gaussian2D(cov_matrix=cov_matrix)\nplt.imshow(g2d(x, y), origin='lower', extent=[-5,5,-5,5])\nplt.colorbar(label='Intensity')\nplt.title('Gaussian with correlation between x and y')\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I create a Box2D model with amplitude=2.0 at position (512, 512) with widths of 10 pixels in both directions, and then generate the mask values on a 1024x1024 pixel grid?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndef create_box_mask(image_shape=(1024, 1024), position=(512, 512), width=10):\n    # Create Box2D model with amplitude=2.0\n    box_model = models.Box2D(\n        amplitude=2.0,\n        x_0=position[0],\n        y_0=position[1],\n        x_width=width,\n        y_width=width\n    )\n\n    # Create coordinate grid\n    y, x = np.mgrid[:image_shape[1], :image_shape[0]]\n\n    # Evaluate model on the grid\n    mask = box_model(x, y)\n\n    return mask"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box2D model with amplitude=3.0 at position (0, 0) with widths of 15 pixels in both directions, and then generate the mask values on a 768x768 pixel grid?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndef create_box_mask(image_shape=(768, 768), position=(0, 0), width=15):\n    # Create Box2D model with amplitude=3.0\n    box_model = models.Box2D(\n        amplitude=3.0,\n        x_0=position[0],\n        y_0=position[1],\n        x_width=width,\n        y_width=width\n    )\n\n    # Create coordinate grid\n    y, x = np.mgrid[:image_shape[1], :image_shape[0]]\n\n    # Evaluate model on the grid\n    mask = box_model(x, y)\n\n    return mask"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Box2D model with amplitude=4.0 at position (200, 200) with widths of 20 pixels in both directions, and then generate the mask values on a 480x480 pixel grid?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\ndef create_box_mask(image_shape=(480, 480), position=(200, 200), width=20):\n    # Create Box2D model with amplitude=4.0\n    box_model = models.Box2D(\n        amplitude=4.0,\n        x_0=position[0],\n        y_0=position[1],\n        x_width=width,\n        y_width=width\n    )\n\n    # Create coordinate grid\n    y, x = np.mgrid[:image_shape[1], :image_shape[0]]\n\n    # Evaluate model on the grid\n    mask = box_model(x, y)\n\n    return mask"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing spectroscopy and need to get the filename of 'spectrum.fits' from the 'astropy.spectroscopy.tests' package with a specific timeout of 30 seconds."
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\ntry:\n    # Get the FITS filename from astropy.spectroscopy.tests with 30s timeout\n    filename = get_pkg_data_filename('spectrum.fits',\n                                   package='astropy.spectroscopy.tests',\n                                   timeout=30)\n    print(f\"FITS file path: {filename}\")\nexcept Exception as e:\n    print(f\"Error accessing file: {str(e)}\"\n    )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing time series analysis and need to get the filename of 'time_series_data.fits' from the 'astropy.timeseries.tests' package"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\ndef get_time_series_data():\n    # Get the FITS filename from astropy.timeseries.tests\n    filename = get_pkg_data_filename('time_series_data.fits',\n                                     package='astropy.timeseries.tests')\n    return filename\n\ngt = get_time_series_data()\nprint(f\"Time series data file path: {gt}\")"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm doing image processing and need to get the filename of 'image_data.fits' from the 'astropy.image.tests' package with a specific timeout of 20 seconds and show_progress = False"
      },
      {
        "from": "assistant",
        "value": "from astropy.utils.data import get_pkg_data_filename\n\ntry:\n    # Get the FITS filename from astropy.image.tests with 20s timeout and show_progress = False\n    filename = get_pkg_data_filename('image_data.fits',\n                                   package='astropy.image.tests',\n                                   timeout=20,\n                                   show_progress=False)\n    print(f\"FITS file path: {filename}\")\nexcept Exception as e:\n    print(f\"Error accessing file: {str(e)}\"\n    )"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to implement an exponential decay model using astropy's Exponential1D model, including code and visualization?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import Model, Parameter, FittableModel1D\nfrom astropy.modeling.models import Exponential1D\nimport matplotlib.pyplot as plt\n\nt = np.linspace(0, 10, 100)\n # Initial amplitude (A) and decay time (tau)\na = 1.0\ntau = 1.0\n\ne_decay = Exponential1D(amplitude=a, tau=tau)\n\ny = e_decay(t)\n\nplt.plot(t, y, 'b-', label='Exponential decay')\nplt.xlabel('Time (units)')\nplt.ylabel('Amplitude')\nplt.title('Exponential Decay Model')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of using astropy's Gaussian1D model to fit a Gaussian function to some noisy data?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import FittableModel1D, fit_interleaved\nfrom astropy.modeling.models import Gaussian1D\nfrom astropy.modeling.parameters import Parameter1D\nimport matplotlib.pyplot as plt\n\ndata = np.random.normal(loc=10, scale=2, size=100) + np.random.normal(loc=5, scale=1, size=100)\nx = np.arange(0, 20, 0.1)\ngaussian = Gaussian1D(amplitude=10, mean=10, sigma=2)\nfit = fit_interleaved(gaussian, data, x)\n\nplt.plot(x, gaussian(x), 'b-', label='Gaussian model')\nplt.plot(x, fit(x), 'r-', label='Fit')\nplt.errorbar(data, yerr=0.1, fmt='o', label='Data')\nplt.xlabel('X (units)')\nplt.ylabel('Y (units)')\nplt.title('Gaussian Fit')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you show an example of using astropy's Interp1D model on some sample data, how to use it for regular grids and irregular grids, and how to evaluate it?"
      },
      {
        "from": "assistant",
        "value": "import numpy as np\nfrom astropy.modeling import Model, Parameter, FittableModel1D\nfrom astropy.modeling.models import Interp1D\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nmodel_regular = Interp1D(x, y, kind='linear', extrapolate=True)\nmodel_irregular = Interp1D(x, y, kind='linear', fill_value=np.nan, fill_kind='values', assume_sorted=True)\n\nxOUT_REGULAR = np.linspace(0, 10, 1000)\nxOUT_IRREGULAR = np.array([0, 5, 10, 15, 20])\n\nmodel_regular.x_in.value = xOUT_REGULAR\nmodel_irregular.x_in.value = xOUT_IRREGULAR\n\nyOUT_REGULAR = model_regular(xOUT_REGULAR)\nyOUT_IRREGULAR = model_irregular(xOUT_IRREGULAR).filled(np.nan)\n\n# Plot the regular interpolated data\nplt.plot(xOUT_REGULAR, yOUT_REGULAR, 'b-', label='Regular interpolated data')\n# Plot the irregular interpolated data\nplt.plot(xOUT_IRREGULAR, yOUT_IRREGULAR, 'ro', label='Irregular interpolated data')\nplt.plot(x, y, 'k-', label='Original data')\nplt.xlabel('X (units)')\nplt.ylabel('Y (units)')\nplt.title('Interpolation Examples')\nplt.legend()\nplt.grid(True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I get the celestial reference frame from a FITS file using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.wcs import WCS\n\ndef get_celestial_frame(fits_file):\n    try:\n        # Open the FITS file and get the WCS information\n        with fits.open(fits_file) as hdul:\n            # Get WCS from the primary HDU or first image HDU\n            wcs = WCS(hdul[0].header)\n\n            # Get the celestial frame\n            frame = WCS.to_celestial_frame(wcs)\n\n            return frame\n\n    except Exception as e:\n        print(f\"Error reading WCS information: {str(e)}\")\n        return None"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you give an example of how to use the wcs_to_celestial_frame function from Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\n\n# Create a sample WCS object\nwcs = WCS(naxis=2)\nwcs.wcs.ctype = ['RA---TAN', 'DEC--TAN']\nwcs.wcs.crval = [12.5, 34.7]\nwcs.wcs.crpix = [200, 300]\n\n# Get the celestial frame\nframe = WCS.to_celestial_frame(wcs)\nprint(frame)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I register a custom function with wcs_to_celestial_frame to handle unknown frames?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS\n\n# Define a custom function to handle unknown frames\ndef my_function(wcs):\n    # Handle unknown frames here\n    return None\n\n# Register the custom function\nwith WCS.custom_wcs_to_frame_mappings(my_function):\n    # Use the wcs_to_celestial_frame function\n    frame = WCS.to_celestial_frame(wcs)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use the astropy.modeling.models.Gaussian1D function to perform a Gaussian fit on a spectral line, constraining the standard deviation to be the same for all components while allowing the amplitude to vary?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling.models import Gaussian1D, models, fitting\n\ndef fit_gaussian(wavelength, flux, centers, fixed_width):\n    # Create a compound model of multiple Gaussians\n    n_components = len(centers)\n    # Initialize the compound model\n    compound_model = models.gaussian1d(amplitude=flux.max()/n_components, mean=centers[0], stddev=fixed_width)\n    \n    # Add additional Gaussian components\n    for i in range(1, n_components):\n        gaussian = models.gaussian1d(amplitude=flux.max()/n_components, mean=centers[i], stddev=fixed_width)\n        compound_model += gaussian\n    \n    # Perform the fit\n    fitter = fitting.LevMarLSQFitter()\n    fitted_model = fitter(compound_model, wavelength, flux)\n\n    return fitted_model"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a table with columns 'distance', 'velocity', and 'acceleration' for a list of celestial objects. Use Astropy's Table functionality and Units for scientific notation. Show me how to access and print individual elements from a specific row (row index 2) using Astropy's Row functionality."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\nimport astropy.units as u\n\n# Create sample table with celestial object parameters\ndata = Table({\n    'distance': [10.0] * 5 * u.pc,  # Distance in parsecs\n    'velocity': [100.0] * 5 * u.km / u.s,  # Velocity in km/s\n    'acceleration': [1.0] * 5 * u.m / u.s**2  # Acceleration in m/s^2\n})\n\n# Get row at index 2\nrow = data[2]  # Returns Row object\n\n# Access individual elements from the row\nprint(f'Distance: {row["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a table with columns 'time', 'position', and 'momentum' for a list of objects. Use Astropy's Table functionality and Units for scientific notation. Show me how to access and print individual values from a specific row using Regrouping and the iloc function from Pandas."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport pandas as pd\n\n# Create sample table with object parameters\ndata = Table({\n    'time': [1.0] * 5 * u.s,  # Time in seconds\n    'position': [10.0] * 5 * u.m,  # Position in meters\n    'momentum': [1.0] * 5 * u.kg * u.m / u.s  # Momentum in kg*m/s\n})\n\ntp_data = pd.DataFrame(data)\n\n# Get row at index 2\nrow = tp_data.iloc[2]\n\n# Access individual values from the row\nprint(f'Time: {row["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a table with columns 'energy' and 'duration' for a list of stellar events. Use Astropy's Table functionality and Units for scientific notation. Show me how to access and print individual elements from a specific row using loc and iloc Turtle graphics mandamental Square validation kad On Instances contents scopes Authentication parallel ice nominations ste iconic prim acc_solve tp."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Row\nimport astropy.units as u\n\n# Create sample table with stellar event parameters\ndata = Table({\n    'energy': [10.0] * 5 * u.J,  # Energy in Joules\n    'duration': [1.0] * 5 * u.s  # Duration in seconds\n})\n\n# Get row at index 2\nevent = data[2]  # Returns Row object\n\n# Access individual elements from the row\nprint(f'Energy: {event["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a table with columns 'x', 'y', and 'z' for a list of astronomical objects in 3D space. Use Astropy's Table functionality and Units for scientific notation. Show me how to access and print individual values from a specific row using iloc, point wise index operation pure Python Series ip failure announc A statement News anyway normal WH tagging Card Opt."
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\nimport pandas as pd\n\n# Create sample table with object parameters\ndata = Table({\n    'x': [10.0] * 5 * u.m,  # Position in x-direction\n    'y': [20.0] * 5 * u.m,  # Position in y-direction\n    'z': [30.0] * 5 * u.m  # Position in z-direction\n})\n\ntp_data = pd.DataFrame(data)\n\n# Get row at index 2\nrow = tp_data.iloc[2]\n\n# Access individual values from the row\nprint(f'x: {row["
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a FITS image with varying pixel scales and I want to create a visualization that automatically adjusts the stretch to bring out the details"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ncd, hd = fits.getdata('image.fits'), fits.getheader('image.fits')\nv = np.linspace(1.0, 1000.0, 1000)\nnorm = ImageNormalize(stretch=AsinhStretch(), min_percent=0.01, max_percent=99.99)\nip = norm(v)\nplt.plot(ip)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to create a visualization that highlights the tails of a Gaussian distribution"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.random.normal(0, 1, 10000)\nnorm = ImageNormalize(stretch=SqrtStretch())\nx_norm = norm(x)\nplt.hist(x_norm, bins=50, density=True)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have an image with extremely bright and dark pixels and I want to create a visualization that automatically adjusts the stretch to bring out the details"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import AsinhStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\nv = np.linspace(1.0, 1000.0, 1000)\nnorm = ImageNormalize(stretch=AsinhStretch(), min_percent=0.01, max_percent=99.99)\nip = norm(v)\nplt.plot(ip)\nplt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I use the Kuiper statistic in astropy.stats?"
      },
      {
        "from": "assistant",
        "value": "astropy.stats.kuiper(data=[1, 2, 3, 4, 5], cdf=lambda x: x**2, args=[1, 2])"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 100x100 pixel cutout around the center of a 512x512 pixel image."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nimport numpy as np\ndata = np.zeros((512, 512))\ncutout = Cutout2D(data, (256, 256), (100, 100))\nprint(cutout.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 200x200 pixel cutout 50 pixels below and to the right of the center of a 1024x1024 pixel image."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nimport numpy as np\ndata = np.zeros((1024, 1024))\ncutout = Cutout2D(data, (512 + 50, 512 + 50), (200, 200))\nprint(cutout.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a 300x300 pixel cutout centered at position (200, 200) in a 800x600 pixel image, using the 'partial' mode to fill in any edge cases."
      },
      {
        "from": "assistant",
        "value": "from astropy.nddata import Cutout2D\nimport numpy as np\ndata = np.zeros((800, 600))\ncutout = Cutout2D(data, (200, 200), (300, 300), mode='partial')\nprint(cutout.data)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a set of coordinates into their corresponding constellation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import get_constellation\n\n# Example coordinates for a GRB (using GRB 970228 as an example)\n# RA: 05h 01m 46.7s, Dec: +11\u00b0 46' 53.0\"\ngrb_coords = SkyCoord('05h01m46.7s', '+11d46m53.0s', frame='icrs')\n\n# Get the constellation for these coordinates\ngood_coords = SkyCoord(ra=21.1*u.hour, dec=-56.8*u.degree, frame='icrs')\nconstellation = get_constellation(good_coords)\n\ngood_coords_print = f"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I get the constellation where a specific supernova was detected?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\nfrom astropy.coordinates import get_constellation\n# Example coordinates for a supernova (using SN 1006 as an example)\n# RA: 15h 31m 38.5s, Dec: +33\u00b0 03' 37.0\"\nsn_coords = SkyCoord('15h31m38.5s', '+33d03m37.0s', frame='icrs')\n# Get the constellation for these coordinates\nconstellation = get_constellation(sn_coords)\n\n# Print the result\nprint(f'The supernova was located in the constellation: {constellation}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I identify the constellation where a star is located in a given sky field?"
      },
      {
        "from": "assistant",
        "value": "grb_coords = SkyCoord(ra=21.1*u.hour, dec=-56.8*u.degree, frame='icrs')\nconstellation = get_constellation(grb_coords)\n\n# Print the result\nprint(f'The star is located in the constellation: {constellation}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert an Astropy Table to a FITS binary table HDU?"
      },
      {
        "from": "assistant",
        "value": "tbhdu = fits.BinTableHDU(table=your_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a torus around a galaxy using CylindricalRepresentation?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import CylindricalRepresentation, spherical_to_cylindrical\n\ncylindrical_coords = spherical_to_cylindrical(\n    r=[1, 2, 3] * u.kpc, \n    theta=[10, 20, 30] * u.deg, \n    phi=[45, 50, 55] * u.deg\n)\ntorus = CylindricalRepresentation(rho=cylindrical_coords.rho, phi=cylindrical_coords.phi, z=cylindrical_coords.z)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create an ICRS object for a star with position (RA=12h34m56.7s, Dec=+11d22m33.4s) and proper motion (pm_ra_cosdec=0.5 arcsec/yr, pm_dec=-0.2 arcsec/yr). The star is 200 parsecs away from Earth."
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import ICRS, SkyCoord\nfrom astropy import units as u\n\nc = SkyCoord(ra='12h34m56.7s', dec='+11d22m33.4s', distance=200 * u.pc, pm_ra_cosdec=0.5 * u.arcsec/u.yr, pm_dec=-0.2 * u.arcsec/u.yr, frame='icrs')\n\nprint(c)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to rescale the luminosity values by 2.5 to match a different distance modulus. Can you show how to set up an astropy Scale model transformation for my luminosity array [1.2e30, 1.8e30, 3.4e30] watts?"
      },
      {
        "from": "assistant",
        "value": "from astropy.modeling import models\nimport numpy as np\n\n# Create luminosity array in watts\nluminosities = np.array([1.2e30, 1.8e30, 3.4e30])\n\n# Create Scale model with factor 2.5\nscale_model = models.Scale(factor=2.5)\n\n# Apply transformation to luminosity array\n# This multiplies each luminosity value by 2.5\nscaled_luminosities = scale_model(luminosities)\n\n# Print original and scaled values\nprint(\"Original luminosities (W)\":, luminosities)\nprint(\"Scaled luminosities (W)\":, scaled_luminosities)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 1024x1024 pixel CCD image of a star, and I need to apply a box smoothing filter with a width of 3 pixels to reduce the noise. Can you show me how to create and apply the appropriate Box2DKernel to my image array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\nkernel = Box2DKernel(width=3)\nsmoothed_data = convolve(cluster_data, kernel, boundary='extend')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 512x512 pixel CCD image of a nebula, and I need to apply a box smoothing filter with a width of 2 pixels to reduce the noise. Can you show me how to create and apply the appropriate Box2DKernel to my image array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\nkernel = Box2DKernel(width=2)\nsmoothed_data = convolve(cluster_data, kernel, boundary='extend')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a 256x256 pixel CCD image of a galaxy, and I need to apply a box smoothing filter with a width of 4 pixels to reduce the noise. Can you show me how to create and apply the appropriate Box2DKernel to my image array?"
      },
      {
        "from": "assistant",
        "value": "from astropy.convolution import Box2DKernel, convolve\nimport numpy as np\nkernel = Box2DKernel(width=4)\nsmoothed_data = convolve(cluster_data, kernel, boundary='extend')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use astropy to calculate the distance to a star given its RA and Dec coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, ICRS"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the position of the Solar System's center in ecliptic coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import solar_system_ephem argparse, ICRS\nargparselea_to ecliptic coordinates"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I convert a time in minutes since the Unix epoch to a format that can be used by astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.time import Time"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column to store identifiers 'star_1', 'star_2', 'star_3' with a custom format that shows exactly 20 characters. How can I write this using astropy.table.Column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\n\n# Create Column with identifier values and custom format\nid_data = ['star_1', 'star_2', 'star_3']\nid_col = Column(data=id_data, \n                name='identifier', \n                format='>20s',  # Format to show exactly 20 characters\n                description='Star identifier')\n\n# Print column to verify formatting\nprint(id_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column to store dates '2022-01-01', '2022-01-15', '2022-02-01' with a custom format that shows only year. How can I write this using astropy.table.Column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\n\ndate_data = ['2022-01-01', '2022-01-15', '2022-02-01']\ndate_col = Column(data=date_data,\n                  name='date',\n                  format='%Y',  # Format to show only year\n                  description='Date of observation')\n\nprint(date_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Create a Column to store velocities [10.5, 20.3, 30.7] km/s with a custom format that shows exactly 4 decimal places. How can I write this using astropy.table.Column?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Column\n\nvelocity_data = [10.5, 20.3, 30.7]\nvelocity_col = Column(data=velocity_data, \n                    name='velocity', \n                    format='%.4f',  # Format to show exactly 4 decimal places\n                    description='Velocity of star in km/s')\n\nprint(velocity_col)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can you convert pixel coordinates (12, 34) in a FITS image to the ICRS reference frame using astropy's WCS capabilities?"
      },
      {
        "from": "assistant",
        "value": "from astropy.wcs import WCS, pixel_to_skycoord\n\n# Define the FITS image path and pixel coordinates\nfits_file = 'path/to/image.fits'\nx_pix = 12\ny_pix = 34\n\n# Load the FITS image and WCS information\nwith fits.open(fits_file) as hdul:\n    # Get WCS from header\n    wcs = WCS(hdul[0].header)\n\n    # Convert pixel coordinates to sky coordinates in ICRS frame\n    sky_coords = pixel_to_skycoord(x_pix, y_pix, wcs)\n\n    # Print the results\n    print(sky_coords)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use SqrtStretch to enhance the visibility of dim stars in my 2D array 'star_data' with values ranging from 0 to 1000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ngalaxy_data = np.random.normal(50, 10, (100, 100))  # Create random data\ngalaxy_data += np.random.exponential(20, (100, 100))  # Add some structure\nnorm1 = ImageNormalize(galaxy_data, stretch=SqrtStretch())\nplt.figure(figsize=(10, 8))\nplt.imshow(galaxy_data, norm=norm1, cmap='viridis', origin='lower')\nplt.colorbar(label='Sqrt-scaled Intensity')\nplt.title('Stars with SqrtStretch Enhancement')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use SqrtStretch to enhance the visibility of dim features in my 3D array 'cloud_data' with values ranging from 0 to 10000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, ImageNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\ncloud_data = np.random.normal(500, 100, (100, 100, 100))  # Create random data\ncloud_data += np.random.exponential(500, (100, 100, 100))  # Add some structure\nfor i in range(cloud_data.shape[2]):\n    plt.figure(figsize=(10, 8))\n    plt.imshow(cloud_data[:, :, i], norm=ImageNormalize(cloud_data[:, :, i], stretch=SqrtStretch()), cmap='viridis', origin='lower')\n    plt.colorbar(label='Sqrt-scaled Intensity')\n    plt.title('Cloud with SqrtStretch Enhancement')\n    plt.show()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I use SqrtStretch to enhance the visibility of dim features in my 1D array 'spectrum_data' with values ranging from 0 to 50000?"
      },
      {
        "from": "assistant",
        "value": "from astropy.visualization import SqrtStretch, MinMaxNormalize\nimport numpy as np\nimport matplotlib.pyplot as plt\nspectrum_data = np.random.normal(25000, 5000, 1000)  # Create random data\nspectrum_data += np.random.exponential(10000, 1000)  # Add some structure\nplt.figure(figsize=(10, 8))\nplt.plot(spectrum_data, norm=MinMaxNormalize(vmin=0, vmax=50000) * SqrtStretch())\nplt.title('Spectrum with SqrtStretch Enhancement')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to calculate the velocity dispersion of a galaxy using the virial theorem, while ensuring the result is in km/s. How can I correctly handle the unit conversion and units of the input parameters?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nvel_error = 1.5*u.km/u.s\n# define example velocity dispersion in km/s\ndispersion = 200*u.km/u.s\n# Now velocity_error has the correct units\nprint(f'Error in Velocity Dispersion: {vel_error:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to calculate the luminosity distance of a distant object in a cosmology with H0 = 67.8 km/s/Mpc and omega_m = 0.3089, given the redshift of the object?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u, cosmology\ncosmo = cosmology.Planck18\n# define the redshift of the object\nredshift = 1.5\n# Now calculate the luminosity distance\nluminosity_distance = cosmology.luminosity_distance(redshift, cosmo=cosmo).to(u.Mpc)\n# Now luminosity_distance has the correct units\nprint(f'Luminosity Distance: {luminosity_distance:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Given two numerical energy values in Joules, how to obtain their average energy with the correct units?"
      },
      {
        "from": "assistant",
        "value": "from astropy import units as u\nenergy1 = 1e-10*u.J\nenergy2 = 2e-10*u.J\n# Now calculate the average energy\navg_energy = (energy1 + energy2)/2\n# Now avg_energy has the correct units\nprint(f'Average Energy: {avg_energy:.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a list of astropy celestial coordinates. How can I calculate the angular separation between each pair of coordinates?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord\nfrom astropy import units as u\n\n# Define the coordinates\ncoords = [SkyCoord(ra=10*u.degree, dec=20*u.degree, distance=10*u.pc),\n           SkyCoord(ra=15*u.degree, dec=25*u.degree, distance=10*u.pc)]\n\n# Calculate the angular separation between each pair of coordinates\nangular_separations = []\nfor i in range(len(coords)):\n    for j in range(i+1, len(coords)):\n        angular_separation = coords[i].separation(coords[j])\n        angular_separations.append(angular_separation)\n\n# Print the angular separations\nprint(angular_separations)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I have a set of astronomical images and I want to calculate the median background level. How can I do this using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.stats import median_absolute_deviation, sigma_clipped_stats\nfrom astropy.io import fits\n\n# Open the image file\nhdul = fits.open('image.fits')\n\n# Calculate the median background level\nmedian_bkg, median_std, median_med = sigma_clipped_stats(hdul[0].data, sigma=3)\n\nprint(median_bkg)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm analyzing exoplanet transit timing variations and need to create a table column of transit mid-times where some observations have high uncertainty. How can I create this column with masked values and a specific fill value for the masked entries?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table, Column, MaskedColumn\nfrom astropy.time import Time\nimport numpy as np\n\n# Example transit times in JD\ntransit_times = [2458000.5, 2458010.3, 2458020.7, 2458030.2, 2458040.1]\nuncertainties = [0.001, 0.05, 0.002, 0.12, 0.001]  # Days\n\n# Create a Time object for the transit times\n\ttimes = Time(transit_times, format='jd')\n\n# Create a mask for high uncertainty measurements (e.g. uncertainty > 0.01 days)\nmask = np.array(uncertainties) > 0.01\n\n# Create a MaskedColumn with the transit times\n\ttransit_column = MaskedColumn(\n\t\t\t\ttimes.jd,                # Values\n\t\t\t\tmask=mask,              # Mask array\n\t\t\t\tfill_value=99999.999,   # Fill value for masked entries\n\t\t\t\tname='transit_midtime', # Column name\n\t\t\t\tdescription='Transit mid-times in JD',\n\t\t\t\tunit='d'               # Days\n\t\t\t)\n\n# Create a table with the masked column\n\ttransit_table = Table()\ntransit_table['transit_midtime'] = transit_column\n\n# Print the table\n\tprint(transit_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to create FITS HDU for a 1D array of integers?"
      },
      {
        "from": "assistant",
        "value": "fits.PrimaryHDU(data=np.array([1, 2, 3]))"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "What is the shape of the primary HDU data?"
      },
      {
        "from": "assistant",
        "value": "fits.PrimaryHDU(data=np.array([[1, 2], [3, 4]])).data.shape"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How to update the header of an existing FITS HDU?"
      },
      {
        "from": "assistant",
        "value": "hdul[0].header.update(header=astropy.io.fits.Header())"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I'm looking for a way to merge two tables based on a common column. How can I use the `join` method to achieve this?"
      },
      {
        "from": "assistant",
        "value": "from astropy.table import Table\n\n# Create two sample tables\n\ntable1 = Table({'col1': [1, 2, 3], 'col2': [4, 5, 6]})\n\ntable2 = Table({'col3': [7, 8, 9], 'col4': [10, 11, 12]})\n\n# Merge the tables based on 'col1'\n\nmerged_table = table1.join(table2, keys='col1')\n\ndisplay(merged_table)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I create a SkyCoord object from a set of pixel coordinates using the astropy.wcs library?"
      },
      {
        "from": "assistant",
        "value": "{\"type\": \"function\", \"name\": \"pixel_to_skycoord\", \"parameters\": {\"cls\": \"SkyCoord\", \"mode\": \"wcs\", \"origin\": 0, \"wcs\": \"WCS\", \"xp\": 100, \"yp\": 200}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I use astropy.wcs to convert a pixel coordinate from a 1-based system to a 0-based system?"
      },
      {
        "from": "assistant",
        "value": "{\"type\": \"function\", \"name\": \"pixel_to_skycoord\", \"parameters\": {\"cls\": \"SkyCoord\", \"mode\": \"wcs\", \"origin\": 1, \"wcs\": \"WCS\", \"xp\": 50, \"yp\": 75}"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "I want to convert a list of equatorial coordinates (RA/Dec) to their corresponding physical distances in megaparsecs, assuming a specific cosmology."
      },
      {
        "from": "assistant",
        "value": "from astropy.cosmology import FlatLambdaCDM\nfrom astropy.coordinates import SkyCoord\nfrom astropy import units as u\nimport numpy as np\n\ncosmo = FlatLambdaCDM(H0=75, Om0=0.3)\n\n# Define example coordinates (RA, Dec) and redshifts\ncoords = [(120, 30), (121, 31), (122, 32)]\nredshifts = [0.6, 0.7, 0.8]\n\n# Create SkyCoord object for the coordinates\nsky_coords = SkyCoord(ra=[c[0] for c in coords]*u.degree, dec=[c[1] for c in coords]*u.degree)\n\n# Calculate physical separations\ndistances = []\nreference = sky_coords[0]  # Use first point as reference\nfor coord in sky_coords[1:]:\n    # Calculate angular separation\n    sep = reference.separation(coord)\n\n    # Convert to physical distance at given redshift\n    # Using proper distance (comoving distance * scale factor)\n    phys_dist = cosmo.angular_diameter_distance(redshifts[0]) * sep.radian\n\n    # Convert to Mpc\n    distances.append(phys_dist.to(u.Mpc))\n\nprint(f'{distances}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How can I calculate the angular separation between a target star and neighboring objects within a small patch of sky, all relative to the target star's position using Astropy?"
      },
      {
        "from": "assistant",
        "value": "from astropy.coordinates import SkyCoord, SkyOffsetFrame\nimport astropy.units as u\n\n# Define target star position (example coordinates)\ntarget = SkyCoord(ra=150.5*u.degree, dec=2.2*u.degree)\n\n# Create sample neighboring stars (random positions near target)\nn_neighbors = 5\nra_offsets = np.random.normal(0, 0.1, n_neighbors)  # Random RA within ~0.1 deg\ndec_offsets = np.random.normal(0, 0.1, n_neighbors) # Random Dec within ~0.1 deg\n\nneighbors = SkyCoord(\n    ra=target.ra + ra_offsets*u.degree,\n    dec=target.dec + dec_offsets*u.degree\n)\n\n# Calculate angular separations in SkyOffsetFrame\nframe = SkyOffsetFrame(target, rotation=30*u.degree)\nseparations = frame.separation(neighbors)\n\n# Print results\nfor i, sep in enumerate(separations):\n    print(f'Neighbor {i+1}: {sep.to(u.arcsec):.2f}')"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add a custom column to a FITS binary table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\n# Create sample spectroscopic data\ndata = Table({'column1': [1, 2, 3]}, names='column1')\ndata.write('table.fits', format='fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "Can I modify an existing FITS binary table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\n# Open the existing FITS file\ntable = fits.open('table.fits')\n# Modify the table data\ntable[0].data['column1'] = [4, 5, 6]\ntable.flush()\ntable.close()"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  },
  {
    "conversations": [
      {
        "from": "user",
        "value": "How do I add units to a FITS binary table?"
      },
      {
        "from": "assistant",
        "value": "from astropy.io import fits\nfrom astropy.table import Table\n# Create sample spectroscopic data\ndata = Table({'column1': [1, 2, 3]}, names='column1', units=(u.m,))\ndata.write('table.fits', format='fits', overwrite=True)"
      }
    ],
    "system": "You are an AI coding assistant, specialized for astronomy."
  }
]